/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package name.kropp.intellij.makefile;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static name.kropp.intellij.makefile.psi.MakefileTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>MakefileLexer.flex</tt>
 */
public class _MakefileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PREREQUISITES = 2;
  public static final int INCLUDES = 4;
  public static final int SOURCE = 6;
  public static final int DEFINE = 8;
  public static final int DEFINEBODY = 10;
  public static final int CONDITIONALS = 12;
  public static final int FUNCTION = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8, 8
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\32\1\1\2\0\1\4\22\0\1\2\1\30\1\0\1\5\1\6\3\0\1\7\1\33\1\0\1\31\1\0"+
    "\1\37\14\0\1\24\1\25\1\0\1\27\1\0\1\30\34\0\1\3\4\0\1\14\1\0\1\34\1\36\1\10"+
    "\1\20\1\17\1\22\1\16\2\0\1\23\1\0\1\15\1\12\1\41\1\43\1\11\1\21\1\42\1\35"+
    "\1\40\1\13\1\44\3\0\1\26\203\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\2\3\1\4\5\2\1\5\1\6"+
    "\1\7\1\2\1\3\4\2\1\10\1\11\4\2\1\12"+
    "\1\13\1\14\1\2\1\7\1\15\1\16\1\3\1\7"+
    "\1\15\1\3\1\17\1\7\1\20\1\7\1\2\1\1"+
    "\1\7\2\1\1\21\1\3\1\21\1\1\1\4\1\7"+
    "\1\22\1\4\1\23\10\2\1\24\4\2\2\25\3\2"+
    "\1\26\1\2\1\0\1\15\2\0\2\1\1\21\1\4"+
    "\1\23\1\0\21\2\1\0\7\2\4\15\5\1\4\21"+
    "\4\0\6\2\1\27\3\2\1\30\16\2\4\15\5\1"+
    "\4\21\4\0\4\2\1\31\3\2\1\32\1\2\1\33"+
    "\2\2\1\34\10\2\4\15\4\1\1\35\4\21\4\0"+
    "\2\2\1\36\1\2\1\37\2\2\1\40\1\2\1\41"+
    "\3\2\1\36\1\2\1\42\2\2\2\15\1\36\1\15"+
    "\2\1\1\36\1\1\2\21\1\36\1\21\2\0\1\36"+
    "\1\0\1\43\1\2\1\44\1\2\1\45\1\2\1\46"+
    "\1\43\1\2\1\44\1\2\1\47\1\43\1\15\1\44"+
    "\1\43\1\1\1\44\1\43\1\21\1\44\1\43\1\0"+
    "\1\44\1\2\1\50\1\51\1\2\1\52\1\15\1\1"+
    "\1\21\1\0\6\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\336\0\u0103"+
    "\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206\0\u022b"+
    "\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309\0\u032e\0\u0353"+
    "\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u0431\0\u0456\0\u047b"+
    "\0\u04a0\0\u04c5\0\u014d\0\u014d\0\u04ea\0\u02bf\0\u050f\0\u0534"+
    "\0\u0559\0\u057e\0\u05a3\0\u05c8\0\u05ed\0\u0612\0\u02bf\0\u0637"+
    "\0\u065c\0\u0681\0\u06a6\0\u06cb\0\u06f0\0\u0715\0\u073a\0\u075f"+
    "\0\u0784\0\u07a9\0\u07ce\0\u02bf\0\u07f3\0\u0818\0\u083d\0\u0862"+
    "\0\u0887\0\u08ac\0\u08d1\0\u08f6\0\u091b\0\u0940\0\u02e4\0\u0965"+
    "\0\u098a\0\u09af\0\u09d4\0\u02bf\0\u09f9\0\u0a1e\0\u0a43\0\u0a68"+
    "\0\u02e4\0\u0a8d\0\u050f\0\u0ab2\0\u0637\0\u0681\0\u0ad7\0\u0afc"+
    "\0\u0b21\0\u0b46\0\u0b6b\0\u0b90\0\u0bb5\0\u0bda\0\u0bff\0\u0c24"+
    "\0\u0c49\0\u0c6e\0\u0c93\0\u0cb8\0\u0cdd\0\u0d02\0\u0d27\0\u0d4c"+
    "\0\u0d71\0\u0d96\0\u0dbb\0\u0de0\0\u0e05\0\u0e2a\0\u0e4f\0\u0e74"+
    "\0\u0e99\0\u0ebe\0\u0ee3\0\u0f08\0\u0f2d\0\u0f52\0\u0f77\0\u0f9c"+
    "\0\u0fc1\0\u0fe6\0\u100b\0\u1030\0\u1055\0\u107a\0\u109f\0\u10c4"+
    "\0\u10e9\0\u110e\0\u1133\0\u1158\0\u117d\0\u11a2\0\u02bf\0\u11c7"+
    "\0\u11ec\0\u1211\0\u1236\0\u125b\0\u014d\0\u1280\0\u12a5\0\u12ca"+
    "\0\u014d\0\u12ef\0\u1314\0\u1339\0\u135e\0\u1383\0\u13a8\0\u13cd"+
    "\0\u13f2\0\u1417\0\u143c\0\u1461\0\u1486\0\u14ab\0\u14d0\0\u14f5"+
    "\0\u151a\0\u153f\0\u1564\0\u1589\0\u15ae\0\u15d3\0\u15f8\0\u161d"+
    "\0\u1642\0\u1667\0\u168c\0\u16b1\0\u16d6\0\u16fb\0\u1720\0\u1745"+
    "\0\u176a\0\u178f\0\u17b4\0\u17d9\0\u014d\0\u17fe\0\u1823\0\u1848"+
    "\0\u014d\0\u186d\0\u014d\0\u1892\0\u18b7\0\u014d\0\u18dc\0\u1901"+
    "\0\u1926\0\u194b\0\u1970\0\u1995\0\u19ba\0\u19df\0\u1a04\0\u1a29"+
    "\0\u1a4e\0\u1a73\0\u1a98\0\u1abd\0\u1ae2\0\u1b07\0\u0681\0\u1b2c"+
    "\0\u1b51\0\u1b76\0\u1b9b\0\u1bc0\0\u1be5\0\u1c0a\0\u1c2f\0\u1c54"+
    "\0\u1c79\0\u014d\0\u1c9e\0\u014d\0\u1cc3\0\u1ce8\0\u014d\0\u1d0d"+
    "\0\u014d\0\u1d32\0\u1d57\0\u1d7c\0\u0e05\0\u1da1\0\u014d\0\u1dc6"+
    "\0\u1deb\0\u1e10\0\u1e35\0\u050f\0\u1e5a\0\u1e7f\0\u1ea4\0\u0681"+
    "\0\u1ec9\0\u1eee\0\u1f13\0\u0715\0\u1f38\0\u1f5d\0\u1f82\0\u0e2a"+
    "\0\u1fa7\0\u014d\0\u1fcc\0\u014d\0\u1ff1\0\u014d\0\u2016\0\u014d"+
    "\0\u0e05\0\u203b\0\u0e05\0\u2060\0\u014d\0\u050f\0\u2085\0\u050f"+
    "\0\u0681\0\u20aa\0\u0681\0\u0715\0\u20cf\0\u0715\0\u0e2a\0\u20f4"+
    "\0\u0e2a\0\u2119\0\u014d\0\u014d\0\u213e\0\u014d\0\u2163\0\u2188"+
    "\0\u21ad\0\u21d2\0\u014d\0\u0e05\0\u050f\0\u0681\0\u0715\0\u0e2a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\12\1\13\1\15\1\16\1\12"+
    "\1\17\1\12\1\20\3\12\1\21\2\12\1\22\2\12"+
    "\1\23\2\12\1\24\1\25\1\26\1\27\2\12\1\30"+
    "\1\31\1\22\1\32\1\33\4\12\1\13\1\14\1\12"+
    "\1\13\1\15\1\16\1\12\1\17\1\12\1\20\3\12"+
    "\1\21\2\12\1\22\2\12\1\23\2\12\1\24\1\25"+
    "\1\26\1\34\2\12\1\30\1\31\1\22\1\32\1\33"+
    "\4\12\1\35\1\14\1\36\1\35\1\15\1\37\1\12"+
    "\1\40\1\12\1\41\11\12\1\42\1\43\1\44\1\24"+
    "\1\25\1\26\1\27\6\12\1\45\4\12\1\35\1\14"+
    "\1\12\1\35\1\15\1\16\15\12\1\46\2\12\2\46"+
    "\1\12\1\27\12\12\1\47\1\50\1\51\1\52\1\50"+
    "\1\15\1\53\23\47\1\54\12\47\1\12\1\55\1\14"+
    "\1\12\1\55\1\15\1\16\15\12\1\56\2\12\1\57"+
    "\1\60\1\61\1\27\12\12\1\62\1\13\1\62\1\63"+
    "\1\13\1\15\1\64\1\62\1\65\34\62\1\66\1\50"+
    "\1\67\1\66\1\50\1\15\1\70\36\66\5\71\1\72"+
    "\1\73\24\71\1\74\11\71\1\12\2\0\1\12\2\0"+
    "\16\12\1\0\2\12\2\0\1\12\1\0\12\12\1\0"+
    "\1\13\2\0\1\13\42\0\1\14\42\0\1\75\1\0"+
    "\2\75\1\0\1\76\37\75\1\12\2\0\1\12\2\0"+
    "\1\12\1\77\14\12\1\0\2\12\2\0\1\12\1\0"+
    "\13\12\2\0\1\12\2\0\7\12\1\100\5\12\1\101"+
    "\1\0\2\12\2\0\1\12\1\0\11\12\1\102\1\12"+
    "\2\0\1\12\2\0\16\12\1\0\2\12\2\0\1\12"+
    "\1\0\5\12\1\103\5\12\2\0\1\12\2\0\7\12"+
    "\1\104\2\12\1\105\3\12\1\0\2\12\2\0\1\12"+
    "\1\0\13\12\2\0\1\12\2\0\10\12\1\106\5\12"+
    "\1\0\2\12\2\0\1\12\1\0\12\12\24\0\1\107"+
    "\2\0\1\24\111\0\1\24\15\0\1\12\2\0\1\12"+
    "\2\0\16\12\1\0\2\12\1\24\1\0\1\12\1\0"+
    "\12\12\32\0\1\27\12\0\1\12\2\0\1\12\2\0"+
    "\7\12\1\110\6\12\1\0\2\12\2\0\1\12\1\0"+
    "\13\12\2\0\1\12\2\0\2\12\1\111\13\12\1\0"+
    "\2\12\2\0\1\12\1\0\13\12\2\0\1\12\2\0"+
    "\16\12\1\0\2\12\2\0\1\12\1\0\6\12\1\112"+
    "\4\12\2\0\1\12\2\0\3\12\1\113\12\12\1\0"+
    "\2\12\2\0\1\12\1\0\12\12\32\0\1\34\13\0"+
    "\1\35\2\0\1\35\40\0\1\12\1\114\1\0\1\12"+
    "\1\115\1\0\16\12\1\0\2\12\2\0\1\12\1\0"+
    "\13\12\2\0\1\12\2\0\1\12\1\116\14\12\1\0"+
    "\2\12\2\0\1\12\1\0\13\12\2\0\1\12\2\0"+
    "\16\12\1\0\2\12\2\0\1\12\1\0\11\12\1\117"+
    "\1\12\2\0\1\12\2\0\16\12\1\0\2\12\2\0"+
    "\1\12\1\0\5\12\1\120\4\12\24\0\1\121\2\0"+
    "\1\24\15\0\1\12\2\0\1\12\2\0\3\12\1\122"+
    "\12\12\1\0\2\12\2\0\1\12\1\0\12\12\1\47"+
    "\1\0\1\47\1\123\1\0\40\47\1\0\1\50\2\0"+
    "\1\50\40\0\1\47\1\0\1\51\1\123\1\0\41\47"+
    "\1\114\1\47\1\123\1\115\41\47\1\0\1\47\1\123"+
    "\1\0\2\47\1\124\36\47\1\0\1\47\1\123\1\0"+
    "\25\47\1\54\12\47\1\0\1\55\2\0\1\55\64\0"+
    "\1\125\2\0\1\57\44\0\1\57\15\0\1\12\2\0"+
    "\1\12\2\0\16\12\1\0\2\12\1\57\1\0\1\12"+
    "\1\0\12\12\1\62\1\0\1\62\1\126\1\0\41\62"+
    "\1\114\1\62\1\126\1\115\41\62\1\0\1\62\1\126"+
    "\1\0\2\62\1\127\36\62\1\0\1\62\1\126\1\0"+
    "\10\62\1\130\27\62\1\66\1\0\2\66\2\0\40\66"+
    "\1\0\1\67\1\66\2\0\40\66\1\0\2\66\2\0"+
    "\1\66\1\131\35\66\6\71\1\0\24\71\1\0\11\71"+
    "\1\132\1\71\2\132\1\71\1\133\1\75\24\132\1\75"+
    "\11\132\7\0\1\134\35\0\1\75\1\0\2\75\1\0"+
    "\40\75\1\76\1\0\2\76\1\0\40\76\1\12\2\0"+
    "\1\12\2\0\2\12\1\135\2\12\1\136\2\12\1\137"+
    "\2\12\1\140\2\12\1\0\2\12\2\0\1\12\1\0"+
    "\13\12\2\0\1\12\2\0\16\12\1\0\2\12\2\0"+
    "\1\12\1\0\3\12\1\141\7\12\2\0\1\12\2\0"+
    "\13\12\1\142\2\12\1\0\2\12\2\0\1\12\1\0"+
    "\13\12\2\0\1\12\2\0\16\12\1\0\2\12\2\0"+
    "\1\12\1\0\6\12\1\143\4\12\2\0\1\12\2\0"+
    "\2\12\1\144\13\12\1\0\2\12\2\0\1\12\1\0"+
    "\13\12\2\0\1\12\2\0\16\12\1\0\2\12\2\0"+
    "\1\12\1\0\1\12\1\145\11\12\2\0\1\12\2\0"+
    "\2\12\1\146\4\12\1\147\6\12\1\0\2\12\2\0"+
    "\1\12\1\0\3\12\1\150\7\12\2\0\1\12\2\0"+
    "\7\12\1\104\6\12\1\0\2\12\2\0\1\12\1\0"+
    "\13\12\2\0\1\12\2\0\16\12\1\0\2\12\2\0"+
    "\1\12\1\0\3\12\1\151\7\12\2\0\1\12\2\0"+
    "\12\12\1\152\3\12\1\0\2\12\2\0\1\12\1\0"+
    "\13\12\2\0\1\12\2\0\6\12\1\153\7\12\1\0"+
    "\2\12\2\0\1\12\1\0\13\12\2\0\1\12\2\0"+
    "\10\12\1\154\5\12\1\0\2\12\2\0\1\12\1\0"+
    "\12\12\1\0\1\114\43\0\1\155\2\156\1\155\2\156"+
    "\2\155\1\157\2\155\1\160\2\155\1\161\2\155\1\162"+
    "\2\155\1\156\2\155\2\156\1\155\1\156\1\12\11\155"+
    "\1\12\2\0\1\12\2\0\16\12\1\0\2\12\2\0"+
    "\1\12\1\0\6\12\1\163\4\12\2\0\1\12\2\0"+
    "\2\12\1\164\13\12\1\0\2\12\2\0\1\12\1\0"+
    "\13\12\2\0\1\12\2\0\10\12\1\165\5\12\1\0"+
    "\2\12\2\0\1\12\1\0\12\12\1\47\1\0\1\47"+
    "\1\123\1\0\3\47\1\166\2\47\1\167\2\47\1\170"+
    "\2\47\1\171\23\47\1\62\1\0\1\62\1\126\1\0"+
    "\3\62\1\172\2\62\1\173\2\62\1\174\2\62\1\175"+
    "\24\62\1\0\1\62\1\126\1\0\31\62\1\176\6\62"+
    "\1\66\1\0\2\66\2\0\2\66\1\177\2\66\1\200"+
    "\2\66\1\201\2\66\1\202\23\66\1\132\1\71\2\132"+
    "\1\71\1\132\1\75\24\132\1\75\11\132\1\133\1\71"+
    "\2\133\1\71\1\133\1\76\24\133\1\76\11\133\10\156"+
    "\1\203\2\156\1\204\2\156\1\205\2\156\1\206\11\156"+
    "\1\207\11\156\1\12\2\0\1\12\2\0\3\12\1\210"+
    "\12\12\1\0\2\12\2\0\1\12\1\0\13\12\2\0"+
    "\1\12\2\0\6\12\1\211\7\12\1\0\2\12\2\0"+
    "\1\12\1\0\13\12\2\0\1\12\2\0\7\12\1\212"+
    "\6\12\1\0\2\12\2\0\1\12\1\0\13\12\2\0"+
    "\1\12\2\0\14\12\1\213\1\12\1\0\2\12\2\0"+
    "\1\12\1\0\13\12\2\0\1\12\2\0\10\12\1\214"+
    "\5\12\1\0\2\12\2\0\1\12\1\0\13\12\2\0"+
    "\1\12\2\0\2\12\1\215\13\12\1\0\2\12\2\0"+
    "\1\12\1\0\13\12\2\0\1\12\2\0\4\12\1\216"+
    "\11\12\1\0\2\12\2\0\1\12\1\0\13\12\2\0"+
    "\1\12\2\0\3\12\1\217\12\12\1\0\2\12\2\0"+
    "\1\12\1\0\13\12\2\0\1\12\2\0\15\12\1\220"+
    "\1\0\2\12\2\0\1\12\1\0\13\12\2\0\1\12"+
    "\2\0\16\12\1\0\2\12\2\0\1\12\1\0\10\12"+
    "\1\221\2\12\2\0\1\12\2\0\2\12\1\222\13\12"+
    "\1\0\2\12\2\0\1\12\1\0\3\12\1\223\7\12"+
    "\2\0\1\12\2\0\2\12\1\224\13\12\1\0\2\12"+
    "\2\0\1\12\1\0\13\12\2\0\1\12\2\0\2\12"+
    "\1\225\13\12\1\0\2\12\2\0\1\12\1\0\13\12"+
    "\2\0\1\12\2\0\10\12\1\226\5\12\1\0\2\12"+
    "\2\0\1\12\1\0\13\12\2\0\1\12\2\0\16\12"+
    "\1\0\2\12\2\0\1\12\1\0\7\12\1\227\3\12"+
    "\2\0\1\12\2\0\16\12\1\0\2\12\2\0\1\12"+
    "\1\0\5\12\1\230\4\12\1\155\2\156\1\155\2\156"+
    "\16\155\1\156\2\155\2\156\1\155\1\156\1\12\11\155"+
    "\33\156\1\207\11\156\1\155\2\156\1\155\2\156\3\155"+
    "\1\231\12\155\1\156\2\155\2\156\1\155\1\156\1\12"+
    "\12\155\2\156\1\155\2\156\6\155\1\232\7\155\1\156"+
    "\2\155\2\156\1\155\1\156\1\12\12\155\2\156\1\155"+
    "\2\156\7\155\1\233\6\155\1\156\2\155\2\156\1\155"+
    "\1\156\1\12\12\155\2\156\1\155\2\156\14\155\1\234"+
    "\1\155\1\156\2\155\2\156\1\155\1\156\1\12\11\155"+
    "\1\12\2\0\1\12\2\0\4\12\1\235\11\12\1\0"+
    "\2\12\2\0\1\12\1\0\13\12\2\0\1\12\2\0"+
    "\3\12\1\236\12\12\1\0\2\12\2\0\1\12\1\0"+
    "\13\12\2\0\1\12\2\0\16\12\1\0\2\12\2\0"+
    "\1\12\1\0\5\12\1\237\4\12\1\47\1\0\1\47"+
    "\1\123\1\0\4\47\1\240\34\47\1\0\1\47\1\123"+
    "\1\0\7\47\1\241\31\47\1\0\1\47\1\123\1\0"+
    "\10\47\1\242\30\47\1\0\1\47\1\123\1\0\15\47"+
    "\1\243\22\47\1\62\1\0\1\62\1\126\1\0\4\62"+
    "\1\244\34\62\1\0\1\62\1\126\1\0\7\62\1\245"+
    "\31\62\1\0\1\62\1\126\1\0\10\62\1\246\30\62"+
    "\1\0\1\62\1\126\1\0\15\62\1\247\23\62\1\0"+
    "\1\62\1\126\1\0\3\62\1\250\34\62\1\66\1\0"+
    "\2\66\2\0\3\66\1\251\34\66\1\0\2\66\2\0"+
    "\6\66\1\252\31\66\1\0\2\66\2\0\7\66\1\253"+
    "\30\66\1\0\2\66\2\0\14\66\1\254\22\66\11\156"+
    "\1\255\21\156\1\207\25\156\1\256\16\156\1\207\26\156"+
    "\1\257\15\156\1\207\33\156\1\260\10\156\1\207\11\156"+
    "\1\12\2\0\1\12\2\0\3\12\1\261\12\12\1\0"+
    "\2\12\2\0\1\12\1\0\13\12\2\0\1\12\2\0"+
    "\3\12\1\262\12\12\1\0\2\12\2\0\1\12\1\0"+
    "\13\12\2\0\1\12\2\0\12\12\1\263\3\12\1\0"+
    "\2\12\2\0\1\12\1\0\13\12\2\0\1\12\2\0"+
    "\2\12\1\264\13\12\1\0\2\12\2\0\1\12\1\0"+
    "\13\12\2\0\1\12\2\0\12\12\1\265\3\12\1\0"+
    "\2\12\2\0\1\12\1\0\13\12\2\0\1\12\2\0"+
    "\3\12\1\266\12\12\1\0\2\12\2\0\1\12\1\0"+
    "\13\12\2\0\1\12\2\0\3\12\1\267\12\12\1\0"+
    "\2\12\2\0\1\12\1\0\13\12\2\0\1\12\2\0"+
    "\16\12\1\0\2\12\2\0\1\12\1\0\2\12\1\270"+
    "\10\12\2\0\1\12\2\0\16\12\1\0\2\12\2\0"+
    "\1\12\1\0\10\12\1\271\2\12\2\0\1\12\2\0"+
    "\2\12\1\272\13\12\1\0\2\12\2\0\1\12\1\0"+
    "\13\12\2\0\1\12\2\0\12\12\1\273\3\12\1\0"+
    "\2\12\2\0\1\12\1\0\13\12\2\0\1\12\2\0"+
    "\12\12\1\274\3\12\1\0\2\12\2\0\1\12\1\0"+
    "\13\12\2\0\1\12\2\0\7\12\1\275\6\12\1\0"+
    "\2\12\2\0\1\12\1\0\13\12\2\0\1\12\2\0"+
    "\14\12\1\276\1\12\1\0\2\12\2\0\1\12\1\0"+
    "\13\12\2\0\1\12\2\0\6\12\1\277\7\12\1\0"+
    "\2\12\2\0\1\12\1\0\12\12\1\155\2\156\1\155"+
    "\2\156\3\155\1\300\12\155\1\156\2\155\2\156\1\155"+
    "\1\156\1\12\12\155\2\156\1\155\2\156\3\155\1\301"+
    "\12\155\1\156\2\155\2\156\1\155\1\156\1\12\12\155"+
    "\2\156\1\155\2\156\12\155\1\302\3\155\1\156\2\155"+
    "\2\156\1\155\1\156\1\12\12\155\2\156\1\155\2\156"+
    "\2\155\1\303\13\155\1\156\2\155\2\156\1\155\1\156"+
    "\1\12\11\155\1\12\2\0\1\12\2\0\3\12\1\304"+
    "\12\12\1\0\2\12\2\0\1\12\1\0\13\12\2\0"+
    "\1\12\2\0\3\12\1\305\12\12\1\0\2\12\2\0"+
    "\1\12\1\0\13\12\2\0\1\12\2\0\6\12\1\306"+
    "\7\12\1\0\2\12\2\0\1\12\1\0\12\12\1\47"+
    "\1\0\1\47\1\123\1\0\4\47\1\307\34\47\1\0"+
    "\1\47\1\123\1\0\4\47\1\310\34\47\1\0\1\47"+
    "\1\123\1\0\13\47\1\311\25\47\1\0\1\47\1\123"+
    "\1\0\3\47\1\312\34\47\1\62\1\0\1\62\1\126"+
    "\1\0\4\62\1\313\34\62\1\0\1\62\1\126\1\0"+
    "\4\62\1\314\34\62\1\0\1\62\1\126\1\0\13\62"+
    "\1\315\25\62\1\0\1\62\1\126\1\0\3\62\1\316"+
    "\35\62\1\0\1\62\1\126\1\0\13\62\1\317\24\62"+
    "\1\66\1\0\2\66\2\0\3\66\1\320\34\66\1\0"+
    "\2\66\2\0\3\66\1\321\34\66\1\0\2\66\2\0"+
    "\12\66\1\322\25\66\1\0\2\66\2\0\2\66\1\323"+
    "\34\66\11\156\1\324\21\156\1\207\22\156\1\325\21\156"+
    "\1\207\31\156\1\326\12\156\1\207\21\156\1\327\22\156"+
    "\1\207\11\156\1\12\2\0\1\12\2\0\4\12\1\330"+
    "\11\12\1\0\2\12\2\0\1\12\1\0\13\12\2\0"+
    "\1\12\2\0\7\12\1\331\6\12\1\0\2\12\2\0"+
    "\1\12\1\0\13\12\2\0\1\12\2\0\4\12\1\332"+
    "\11\12\1\0\2\12\2\0\1\12\1\0\13\12\2\0"+
    "\1\12\2\0\15\12\1\333\1\0\2\12\2\0\1\12"+
    "\1\0\13\12\2\0\1\12\2\0\16\12\1\0\2\12"+
    "\2\0\1\12\1\0\7\12\1\334\3\12\2\0\1\12"+
    "\2\0\10\12\1\335\5\12\1\0\2\12\2\0\1\12"+
    "\1\0\13\12\2\0\1\12\2\0\16\12\1\0\2\12"+
    "\2\0\1\12\1\0\3\12\1\336\7\12\2\0\1\12"+
    "\2\0\12\12\1\337\3\12\1\0\2\12\2\0\1\12"+
    "\1\0\13\12\2\0\1\12\2\0\10\12\1\340\5\12"+
    "\1\0\2\12\2\0\1\12\1\0\13\12\2\0\1\12"+
    "\2\0\2\12\1\341\13\12\1\0\2\12\2\0\1\12"+
    "\1\0\13\12\2\0\1\12\2\0\16\12\1\0\2\12"+
    "\2\0\1\12\1\0\7\12\1\342\2\12\1\155\2\156"+
    "\1\155\2\156\4\155\1\343\11\155\1\156\2\155\2\156"+
    "\1\155\1\156\1\12\12\155\2\156\1\155\2\156\7\155"+
    "\1\344\6\155\1\156\2\155\2\156\1\155\1\156\1\12"+
    "\12\155\2\156\1\155\2\156\4\155\1\345\11\155\1\156"+
    "\2\155\2\156\1\155\1\156\1\12\12\155\2\156\1\155"+
    "\2\156\15\155\1\346\1\156\2\155\2\156\1\155\1\156"+
    "\1\12\11\155\1\12\2\0\1\12\2\0\16\12\1\0"+
    "\2\12\2\0\1\12\1\0\7\12\1\347\3\12\2\0"+
    "\1\12\2\0\10\12\1\350\5\12\1\0\2\12\2\0"+
    "\1\12\1\0\13\12\2\0\1\12\2\0\16\12\1\0"+
    "\2\12\2\0\1\12\1\0\7\12\1\351\2\12\1\47"+
    "\1\0\1\47\1\123\1\0\5\47\1\352\33\47\1\0"+
    "\1\47\1\123\1\0\10\47\1\353\30\47\1\0\1\47"+
    "\1\123\1\0\5\47\1\354\33\47\1\0\1\47\1\123"+
    "\1\0\16\47\1\355\21\47\1\62\1\0\1\62\1\126"+
    "\1\0\5\62\1\356\33\62\1\0\1\62\1\126\1\0"+
    "\10\62\1\357\30\62\1\0\1\62\1\126\1\0\5\62"+
    "\1\360\33\62\1\0\1\62\1\126\1\0\16\62\1\361"+
    "\21\62\1\66\1\0\2\66\2\0\4\66\1\362\33\66"+
    "\1\0\2\66\2\0\7\66\1\363\30\66\1\0\2\66"+
    "\2\0\4\66\1\364\33\66\1\0\2\66\2\0\15\66"+
    "\1\365\21\66\12\156\1\366\20\156\1\207\26\156\1\367"+
    "\15\156\1\207\23\156\1\370\20\156\1\207\34\156\1\371"+
    "\7\156\1\207\11\156\1\12\2\0\1\12\2\0\3\12"+
    "\1\372\12\12\1\0\2\12\2\0\1\12\1\0\13\12"+
    "\2\0\1\12\2\0\10\12\1\373\5\12\1\0\2\12"+
    "\2\0\1\12\1\0\13\12\2\0\1\12\2\0\15\12"+
    "\1\374\1\0\2\12\2\0\1\12\1\0\13\12\2\0"+
    "\1\12\2\0\16\12\1\0\2\12\2\0\1\12\1\0"+
    "\3\12\1\375\7\12\2\0\1\12\2\0\2\12\1\376"+
    "\13\12\1\0\2\12\2\0\1\12\1\0\13\12\2\0"+
    "\1\12\2\0\7\12\1\377\6\12\1\0\2\12\2\0"+
    "\1\12\1\0\13\12\2\0\1\12\2\0\2\12\1\u0100"+
    "\13\12\1\0\2\12\2\0\1\12\1\0\12\12\1\155"+
    "\2\156\1\155\2\156\3\155\1\u0101\12\155\1\156\2\155"+
    "\2\156\1\155\1\156\1\12\12\155\2\156\1\155\2\156"+
    "\10\155\1\u0102\5\155\1\156\2\155\2\156\1\155\1\156"+
    "\1\12\12\155\2\156\1\155\2\156\15\155\1\u0103\1\156"+
    "\2\155\2\156\1\155\1\156\1\12\11\155\1\12\2\0"+
    "\1\12\2\0\16\12\1\0\2\12\2\0\1\12\1\0"+
    "\3\12\1\u0104\7\12\2\0\1\12\2\0\2\12\1\u0105"+
    "\13\12\1\0\2\12\2\0\1\12\1\0\12\12\1\47"+
    "\1\0\1\47\1\123\1\0\4\47\1\u0106\34\47\1\0"+
    "\1\47\1\123\1\0\11\47\1\u0107\27\47\1\0\1\47"+
    "\1\123\1\0\16\47\1\u0108\21\47\1\62\1\0\1\62"+
    "\1\126\1\0\4\62\1\u0109\34\62\1\0\1\62\1\126"+
    "\1\0\11\62\1\u010a\27\62\1\0\1\62\1\126\1\0"+
    "\16\62\1\u010b\21\62\1\66\1\0\2\66\2\0\3\66"+
    "\1\u010c\34\66\1\0\2\66\2\0\10\66\1\u010d\27\66"+
    "\1\0\2\66\2\0\15\66\1\u010e\21\66\11\156\1\u010f"+
    "\21\156\1\207\27\156\1\u0110\14\156\1\207\34\156\1\u0111"+
    "\7\156\1\207\11\156\1\12\2\0\1\12\2\0\7\12"+
    "\1\u0112\6\12\1\0\2\12\2\0\1\12\1\0\13\12"+
    "\2\0\1\12\2\0\2\12\1\u0113\13\12\1\0\2\12"+
    "\2\0\1\12\1\0\13\12\2\0\1\12\2\0\2\12"+
    "\1\u0114\13\12\1\0\2\12\2\0\1\12\1\0\12\12"+
    "\1\155\2\156\1\155\2\156\7\155\1\u0115\6\155\1\156"+
    "\2\155\2\156\1\155\1\156\1\12\11\155\1\12\2\0"+
    "\1\12\2\0\2\12\1\u0116\13\12\1\0\2\12\2\0"+
    "\1\12\1\0\12\12\1\47\1\0\1\47\1\123\1\0"+
    "\10\47\1\u0117\27\47\1\62\1\0\1\62\1\126\1\0"+
    "\10\62\1\u0118\27\62\1\66\1\0\2\66\2\0\7\66"+
    "\1\u0119\27\66\15\156\1\u011a\15\156\1\207\11\156\1\12"+
    "\2\0\1\12\2\0\11\12\1\u011b\4\12\1\0\2\12"+
    "\2\0\1\12\1\0\12\12\1\155\2\156\1\155\2\156"+
    "\11\155\1\u011c\4\155\1\156\2\155\2\156\1\155\1\156"+
    "\1\12\11\155\1\47\1\0\1\47\1\123\1\0\12\47"+
    "\1\u011d\25\47\1\62\1\0\1\62\1\126\1\0\12\62"+
    "\1\u011e\25\62\1\66\1\0\2\66\2\0\11\66\1\u011f"+
    "\25\66\17\156\1\u0120\13\156\1\207\11\156";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8695];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\13\1\1\11\21\1\1\11\10\1\1\11\14\1"+
    "\1\11\17\1\1\11\6\1\1\0\1\1\2\0\5\1"+
    "\1\0\21\1\1\0\24\1\4\0\1\11\45\1\4\0"+
    "\43\1\4\0\36\1\2\0\1\1\1\0\26\1\1\0"+
    "\11\1\1\0\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MakefileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MakefileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case PREREQUISITES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }
            case 289: break;
            case INCLUDES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }
            case 290: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return VARIABLE_VALUE_LINE;
            }
          case 44: break;
          case 2: 
            { return IDENTIFIER;
            }
          case 45: break;
          case 3: 
            { return WHITE_SPACE;
            }
          case 46: break;
          case 4: 
            { return COMMENT;
            }
          case 47: break;
          case 5: 
            { yybegin(PREREQUISITES); return COLON;
            }
          case 48: break;
          case 6: 
            { yybegin(SOURCE); return ASSIGN;
            }
          case 49: break;
          case 7: 
            { return BAD_CHARACTER;
            }
          case 50: break;
          case 8: 
            { yybegin(SOURCE); return TAB;
            }
          case 51: break;
          case 9: 
            { yybegin(YYINITIAL); return EOL;
            }
          case 52: break;
          case 10: 
            { return COLON;
            }
          case 53: break;
          case 11: 
            { yybegin(SOURCE); return SEMICOLON;
            }
          case 54: break;
          case 12: 
            { return PIPE;
            }
          case 55: break;
          case 13: 
            { return LINE;
            }
          case 56: break;
          case 14: 
            { yybegin(YYINITIAL); return WHITE_SPACE;
            }
          case 57: break;
          case 15: 
            { yybegin(DEFINEBODY); return WHITE_SPACE;
            }
          case 58: break;
          case 16: 
            { return ASSIGN;
            }
          case 59: break;
          case 17: 
            { yybegin(YYINITIAL); return CONDITION;
            }
          case 60: break;
          case 18: 
            { yybegin(YYINITIAL); return FUNCTION_END;
            }
          case 61: break;
          case 19: 
            { return DOC_COMMENT;
            }
          case 62: break;
          case 20: 
            { yybegin(PREREQUISITES); return DOUBLECOLON;
            }
          case 63: break;
          case 21: 
            { return SPLIT;
            }
          case 64: break;
          case 22: 
            { return DOUBLECOLON;
            }
          case 65: break;
          case 23: 
            { return KEYWORD_ELSE;
            }
          case 66: break;
          case 24: 
            { yybegin(CONDITIONALS); return KEYWORD_IFEQ;
            }
          case 67: break;
          case 25: 
            { return KEYWORD_ENDIF;
            }
          case 68: break;
          case 26: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNEQ;
            }
          case 69: break;
          case 27: 
            { yybegin(CONDITIONALS); return KEYWORD_IFDEF;
            }
          case 70: break;
          case 28: 
            { yybegin(INCLUDES); return KEYWORD_VPATH;
            }
          case 71: break;
          case 29: 
            { yybegin(YYINITIAL); return KEYWORD_ENDEF;
            }
          case 72: break;
          case 30: 
            { yybegin(FUNCTION); return FUNCTION_INFO;
            }
          case 73: break;
          case 31: 
            { return KEYWORD_EXPORT;
            }
          case 74: break;
          case 32: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNDEF;
            }
          case 75: break;
          case 33: 
            { yybegin(DEFINE); return KEYWORD_DEFINE;
            }
          case 76: break;
          case 34: 
            { yybegin(YYINITIAL); return KEYWORD_EXPORT;
            }
          case 77: break;
          case 35: 
            { yybegin(FUNCTION); return FUNCTION_ERROR;
            }
          case 78: break;
          case 36: 
            { yybegin(FUNCTION); return FUNCTION_SHELL;
            }
          case 79: break;
          case 37: 
            { yybegin(INCLUDES); return KEYWORD_INCLUDE;
            }
          case 80: break;
          case 38: 
            { return KEYWORD_PRIVATE;
            }
          case 81: break;
          case 39: 
            { yybegin(YYINITIAL); return KEYWORD_PRIVATE;
            }
          case 82: break;
          case 40: 
            { return KEYWORD_OVERRIDE;
            }
          case 83: break;
          case 41: 
            { yybegin(INCLUDES); return KEYWORD_UNDEFINE;
            }
          case 84: break;
          case 42: 
            { yybegin(YYINITIAL); return KEYWORD_OVERRIDE;
            }
          case 85: break;
          case 43: 
            { yybegin(FUNCTION); return FUNCTION_WARNING;
            }
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
