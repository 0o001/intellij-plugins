/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package name.kropp.intellij.makefile;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static name.kropp.intellij.makefile.psi.MakefileTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>MakefileLexer.flex</tt>
 */
public class _MakefileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PREREQUISITES = 2;
  public static final int ELSE = 4;
  public static final int INCLUDES = 6;
  public static final int SOURCE = 8;
  public static final int SOURCE_FORCED = 10;
  public static final int DEFINE = 12;
  public static final int DEFINEBODY = 14;
  public static final int CONDITIONALS = 16;
  public static final int FUNCTION = 18;
  public static final int FUNCTION_PREREQ = 20;
  public static final int EXPORT = 22;
  public static final int EXPORTVAR = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  8, 10, 11, 12, 13, 14, 
    15, 16, 17, 18, 19, 20, 21, 22, 23, 24
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\1\2\0\1\4\22\0\1\2\1\43\1\0\1\6\1\45\3\0\1\46\1\47\1\0\1\44\1"+
    "\0\1\30\14\0\1\37\1\40\1\0\1\42\1\0\1\43\1\36\33\0\1\3\4\0\1\13\1\24\1\34"+
    "\1\27\1\7\1\17\1\16\1\21\1\15\1\33\1\0\1\22\1\32\1\14\1\11\1\26\1\50\1\10"+
    "\1\20\1\25\1\23\1\35\1\12\1\31\3\0\1\41\203\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\21\0\4\1\4\0\1\2\1\3\1\4\1\2\1\4"+
    "\1\5\23\2\1\6\1\7\1\10\1\11\1\12\1\2"+
    "\1\12\1\13\1\14\1\2\1\15\3\2\2\12\2\16"+
    "\1\17\1\20\1\4\1\12\1\4\3\16\1\21\1\5"+
    "\1\16\1\17\1\22\1\12\1\23\1\12\1\2\1\24"+
    "\1\4\1\24\1\12\2\24\1\25\1\4\1\25\1\1"+
    "\1\5\21\1\1\12\1\1\1\26\1\12\1\27\1\12"+
    "\1\2\1\12\3\16\1\2\2\30\3\5\1\31\6\2"+
    "\1\32\11\2\1\32\24\2\1\33\1\34\1\2\1\0"+
    "\4\2\1\35\1\0\2\16\3\5\1\31\1\16\1\17"+
    "\1\16\3\0\1\5\2\24\1\0\1\25\3\5\1\31"+
    "\3\1\1\32\10\1\1\32\17\1\1\0\1\1\1\0"+
    "\1\36\3\16\1\36\1\2\1\5\1\0\2\31\13\2"+
    "\1\32\33\2\1\37\2\40\4\2\2\5\1\16\2\31"+
    "\3\40\1\24\2\40\2\5\1\1\2\31\31\1\1\40"+
    "\1\16\1\40\2\16\2\0\2\31\1\2\1\41\2\2"+
    "\1\32\7\2\1\42\20\2\1\0\1\40\3\2\1\16"+
    "\2\31\1\24\1\1\2\31\1\32\16\1\2\16\1\40"+
    "\1\43\11\2\1\44\1\2\1\45\12\2\1\46\1\40"+
    "\3\2\1\47\15\1\1\40\1\50\5\2\1\51\1\2"+
    "\1\32\4\2\1\52\1\53\2\2\4\1\1\32\2\1"+
    "\1\2\1\54\2\2\1\55\1\2\1\56\1\1\1\57"+
    "\1\2\1\60\1\61\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[475];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267"+
    "\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386\0\u03af"+
    "\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5\0\u04ce\0\u04f7"+
    "\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f"+
    "\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787"+
    "\0\u07b0\0\u07d9\0\u0802\0\u0401\0\u0401\0\u082b\0\u0854\0\u087d"+
    "\0\u08a6\0\u082b\0\u08cf\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c"+
    "\0\u09c5\0\u082b\0\u082b\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92"+
    "\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda"+
    "\0\u0c03\0\u0c2c\0\u082b\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9"+
    "\0\u0d22\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41"+
    "\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\u0f89"+
    "\0\u0fb2\0\u0fdb\0\u1004\0\u102d\0\u1056\0\u107f\0\u10a8\0\u10d1"+
    "\0\u10fa\0\u1123\0\u114c\0\u082b\0\u1175\0\u082b\0\u119e\0\u11c7"+
    "\0\u11f0\0\u1219\0\u1242\0\u126b\0\u1294\0\u12bd\0\u12e6\0\u130f"+
    "\0\u082b\0\u1338\0\u1361\0\u138a\0\u13b3\0\u13dc\0\u1405\0\u142e"+
    "\0\u1457\0\u1480\0\u14a9\0\u14d2\0\u14fb\0\u1524\0\u154d\0\u1576"+
    "\0\u159f\0\u15c8\0\u15f1\0\u161a\0\u1643\0\u166c\0\u1695\0\u16be"+
    "\0\u16e7\0\u1710\0\u1739\0\u1762\0\u178b\0\u17b4\0\u17dd\0\u1806"+
    "\0\u182f\0\u1858\0\u1881\0\u18aa\0\u18d3\0\u18fc\0\u1925\0\u194e"+
    "\0\u0854\0\u1977\0\u19a0\0\u19c9\0\u19f2\0\u1a1b\0\u1a44\0\u1a6d"+
    "\0\u1977\0\u0a17\0\u1a96\0\u1abf\0\u1ae8\0\u0b0d\0\u1b11\0\u1b3a"+
    "\0\u1b63\0\u1b8c\0\u1bb5\0\u1b8c\0\u0c55\0\u0ca7\0\u1bde\0\u1c07"+
    "\0\u1c30\0\u1c30\0\u1c59\0\u1c82\0\u0e18\0\u1cab\0\u1cd4\0\u1cfd"+
    "\0\u1d26\0\u1d4f\0\u1d78\0\u1da1\0\u1dca\0\u1df3\0\u1e1c\0\u1e45"+
    "\0\u1e6e\0\u1e97\0\u1ec0\0\u0e18\0\u1ee9\0\u1f12\0\u1f3b\0\u1f64"+
    "\0\u1f8d\0\u1fb6\0\u1fdf\0\u2008\0\u2031\0\u205a\0\u2083\0\u20ac"+
    "\0\u20d5\0\u20fe\0\u2127\0\u1977\0\u2150\0\u119e\0\u1977\0\u2179"+
    "\0\u21a2\0\u21cb\0\u21f4\0\u221d\0\u2246\0\u226f\0\u082b\0\u2298"+
    "\0\u22c1\0\u22ea\0\u2313\0\u233c\0\u2365\0\u238e\0\u23b7\0\u23e0"+
    "\0\u2409\0\u2432\0\u245b\0\u0401\0\u2484\0\u24ad\0\u24d6\0\u24ff"+
    "\0\u2528\0\u2551\0\u257a\0\u25a3\0\u25cc\0\u25f5\0\u261e\0\u2647"+
    "\0\u2670\0\u2699\0\u26c2\0\u26eb\0\u2714\0\u273d\0\u2766\0\u278f"+
    "\0\u27b8\0\u27e1\0\u280a\0\u2833\0\u285c\0\u2885\0\u28ae\0\u082b"+
    "\0\u0401\0\u082b\0\u28d7\0\u2900\0\u2929\0\u2952\0\u297b\0\u29a4"+
    "\0\u29cd\0\u0b0d\0\u29f6\0\u0ae4\0\u0a17\0\u0b0d\0\u2a1f\0\u0ca7"+
    "\0\u0d9d\0\u2a48\0\u2a71\0\u2a9a\0\u0e18\0\u2ac3\0\u2aec\0\u2b15"+
    "\0\u2b3e\0\u2b67\0\u2b90\0\u2bb9\0\u2be2\0\u2c0b\0\u2c34\0\u2c5d"+
    "\0\u2c86\0\u2caf\0\u2cd8\0\u2d01\0\u2d2a\0\u2d53\0\u2d7c\0\u2da5"+
    "\0\u2dce\0\u2df7\0\u2e20\0\u2e49\0\u2e72\0\u2e9b\0\u2ec4\0\u0e18"+
    "\0\u2eed\0\u1219\0\u2f16\0\u21f4\0\u2f3f\0\u2f68\0\u2f91\0\u2246"+
    "\0\u2fba\0\u0401\0\u2fe3\0\u300c\0\u3035\0\u305e\0\u3087\0\u30b0"+
    "\0\u30d9\0\u3102\0\u312b\0\u3154\0\u0401\0\u317d\0\u31a6\0\u31cf"+
    "\0\u31f8\0\u3221\0\u324a\0\u3273\0\u329c\0\u32c5\0\u32ee\0\u3317"+
    "\0\u3340\0\u3369\0\u3392\0\u33bb\0\u33e4\0\u340d\0\u221d\0\u3436"+
    "\0\u345f\0\u3488\0\u34b1\0\u34da\0\u29a4\0\u3503\0\u352c\0\u3555"+
    "\0\u2a71\0\u357e\0\u35a7\0\u35d0\0\u35f9\0\u3622\0\u364b\0\u3674"+
    "\0\u369d\0\u36c6\0\u36ef\0\u3718\0\u3741\0\u376a\0\u3793\0\u37bc"+
    "\0\u37e5\0\u380e\0\u2eed\0\u0401\0\u3837\0\u3860\0\u3889\0\u38b2"+
    "\0\u38db\0\u3904\0\u392d\0\u3956\0\u397f\0\u0401\0\u39a8\0\u0401"+
    "\0\u39d1\0\u39fa\0\u3a23\0\u3a4c\0\u3a75\0\u3a9e\0\u3ac7\0\u3af0"+
    "\0\u3b19\0\u3b42\0\u0401\0\u2f3f\0\u3b6b\0\u3b94\0\u3bbd\0\u0ca7"+
    "\0\u3be6\0\u3c0f\0\u3c38\0\u3c61\0\u3c8a\0\u3cb3\0\u3cdc\0\u3d05"+
    "\0\u3d2e\0\u3d57\0\u3d80\0\u3da9\0\u3dd2\0\u37e5\0\u0401\0\u3dfb"+
    "\0\u3e24\0\u3e4d\0\u3e76\0\u3e9f\0\u0401\0\u3ec8\0\u3ef1\0\u3f1a"+
    "\0\u3f43\0\u3f6c\0\u3f95\0\u0401\0\u0401\0\u3fbe\0\u3fe7\0\u4010"+
    "\0\u4039\0\u4062\0\u408b\0\u40b4\0\u40dd\0\u4106\0\u412f\0\u0401"+
    "\0\u4158\0\u4181\0\u0401\0\u41aa\0\u0401\0\u41d3\0\u0401\0\u41fc"+
    "\0\u0401\0\u0401\0\u4225";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[475];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\32\1\33\1\34\1\35\1\33\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\32\1\52\1\53\1\54\1\32\1\55\1\56"+
    "\1\57\2\32\1\60\1\61\1\62\1\32\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\32\1\72\2\32"+
    "\1\33\1\34\1\35\1\33\1\73\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\32\1\52\1\53\1\54\1\32\1\55\1\56\1\57"+
    "\2\32\1\60\1\61\1\62\1\74\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\32\1\72\2\32\1\75"+
    "\1\34\1\35\1\75\1\36\1\37\1\76\1\32\1\77"+
    "\14\32\1\100\10\32\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\101\1\32\1\102\2\32\1\75\1\34\1\35"+
    "\1\75\1\73\1\37\1\76\1\32\1\77\14\32\1\100"+
    "\7\32\1\74\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\101\1\32\1\102\1\32\1\103\1\75\1\34\1\103"+
    "\1\75\1\103\1\37\43\103\1\75\1\34\1\103\1\75"+
    "\1\103\1\37\27\103\1\104\12\103\1\32\1\75\1\34"+
    "\1\32\1\75\1\36\1\37\30\32\1\102\2\32\2\102"+
    "\1\32\1\102\1\32\1\102\2\32\1\75\1\34\1\32"+
    "\1\75\1\36\1\37\27\32\1\74\1\102\2\32\2\102"+
    "\1\32\1\102\1\32\1\102\1\32\1\105\1\106\1\107"+
    "\1\110\1\106\1\111\1\37\42\105\1\112\1\113\1\112"+
    "\1\114\1\113\1\115\1\116\27\112\1\117\12\112\1\105"+
    "\1\106\1\107\1\110\1\106\1\115\1\37\27\105\1\120"+
    "\12\105\1\32\1\121\1\34\1\32\1\121\1\36\1\37"+
    "\30\32\1\122\2\32\1\123\1\124\1\125\1\102\1\32"+
    "\1\102\2\32\1\121\1\34\1\32\1\121\1\36\1\37"+
    "\27\32\1\74\1\122\2\32\1\123\1\124\1\125\1\102"+
    "\1\32\1\102\1\32\1\126\1\127\1\130\1\131\1\127"+
    "\1\130\1\37\1\132\42\126\1\127\1\130\1\131\1\127"+
    "\1\130\1\37\1\132\26\126\1\133\12\126\1\134\1\106"+
    "\1\135\1\134\1\106\1\134\1\37\43\134\1\106\1\135"+
    "\1\134\1\106\1\134\1\37\27\134\1\136\12\134\6\137"+
    "\1\140\1\141\1\142\1\143\1\144\1\145\1\146\1\147"+
    "\1\150\1\151\1\152\1\137\1\153\1\137\1\154\1\137"+
    "\1\155\1\156\3\137\1\157\1\160\1\161\7\137\1\162"+
    "\1\137\1\72\7\137\1\140\1\141\1\142\1\143\1\144"+
    "\1\145\1\146\1\147\1\150\1\151\1\152\1\137\1\153"+
    "\1\137\1\154\1\137\1\155\1\156\3\137\1\157\1\160"+
    "\1\161\1\163\6\137\1\162\1\137\1\72\7\137\1\140"+
    "\1\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150"+
    "\1\151\1\152\1\137\1\153\1\137\1\154\1\137\1\155"+
    "\1\156\3\137\1\157\1\160\1\161\7\137\1\162\1\137"+
    "\1\164\7\137\1\140\1\141\1\142\1\143\1\144\1\145"+
    "\1\146\1\147\1\150\1\151\1\152\1\137\1\153\1\137"+
    "\1\154\1\137\1\155\1\156\3\137\1\157\1\160\1\161"+
    "\1\163\6\137\1\162\1\137\1\164\1\137\1\32\1\75"+
    "\1\34\1\32\1\75\1\36\1\37\30\32\1\165\2\32"+
    "\1\166\1\167\1\170\1\171\1\32\1\102\1\32\1\172"+
    "\2\113\1\172\1\113\1\36\1\116\27\172\1\173\1\113"+
    "\2\172\2\113\1\172\1\174\1\172\1\113\1\172\1\105"+
    "\1\75\1\107\1\110\1\75\1\111\1\37\42\105\1\112"+
    "\1\113\1\112\1\114\1\113\1\111\1\116\27\112\1\117"+
    "\12\112\1\32\2\0\1\32\3\0\30\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\1\32\1\0\1\33"+
    "\2\0\1\33\46\0\1\34\46\0\1\32\1\176\1\0"+
    "\1\32\1\177\2\0\30\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\1\32\5\0\1\36\43\0\1\200"+
    "\1\201\1\200\1\202\1\0\1\200\1\203\42\200\1\32"+
    "\2\0\1\32\3\0\1\32\1\204\3\32\1\205\5\32"+
    "\1\206\6\32\1\207\3\32\1\210\1\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\1\211\27\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\1\32\1\212"+
    "\24\32\1\213\1\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\2\32\1\214"+
    "\1\32\1\215\1\32\1\216\21\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\5\32\1\217\7\32\1\220\2\32\1\221\7\32\1\0"+
    "\2\32\2\0\1\32\1\175\1\32\1\0\2\32\2\0"+
    "\1\32\3\0\2\32\1\222\25\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\5\32\1\223\2\32\1\224\17\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\14\32\1\225\13\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\2\32\1\226"+
    "\3\32\1\227\4\32\1\230\14\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\2\32\1\231\3\32\1\232\3\32\1\233\1\32\1\234"+
    "\1\32\1\235\11\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\4\32\1\236"+
    "\23\32\1\0\2\32\2\0\1\32\1\175\1\32\1\0"+
    "\2\32\2\0\1\32\3\0\5\32\1\237\22\32\1\0"+
    "\2\32\2\0\1\32\1\175\1\32\1\0\2\32\2\0"+
    "\1\32\3\0\4\32\1\240\23\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\1\32\1\241\2\32\1\242\23\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\1\243\5\32\1\244\21\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\6\32"+
    "\1\232\21\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\2\32\1\245\25\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\4\32\1\246\23\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\4\32\1\247\12\32\1\250\10\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\1\32\37\0\1\251"+
    "\2\0\1\66\121\0\1\66\6\0\1\32\2\0\1\32"+
    "\3\0\30\32\1\0\2\32\1\66\1\0\1\32\1\175"+
    "\1\32\1\0\1\32\46\0\1\252\7\0\1\73\43\0"+
    "\1\253\2\0\1\253\1\0\2\254\27\253\1\32\1\254"+
    "\2\253\2\254\1\253\1\255\1\253\1\254\1\253\1\0"+
    "\1\75\2\0\1\75\44\0\1\32\2\0\1\32\3\0"+
    "\22\32\1\256\5\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\26\32\1\257"+
    "\1\32\1\0\2\32\2\0\1\32\1\175\1\32\1\0"+
    "\2\32\2\0\1\32\3\0\1\32\1\260\26\32\1\0"+
    "\2\32\2\0\1\32\1\175\1\32\1\0\1\32\46\0"+
    "\1\261\2\0\1\254\2\0\1\254\1\0\31\254\1\0"+
    "\12\254\1\105\1\0\1\105\1\262\1\0\1\105\1\0"+
    "\42\105\1\0\1\106\2\0\1\106\44\0\1\105\1\0"+
    "\1\107\1\262\1\0\1\105\1\0\43\105\1\176\1\105"+
    "\1\262\1\177\1\105\1\0\43\105\1\0\1\105\1\262"+
    "\1\0\1\111\1\0\42\105\1\112\1\113\2\112\1\113"+
    "\1\105\1\113\42\112\5\113\1\0\43\113\1\112\1\263"+
    "\2\112\1\264\1\105\1\113\42\112\1\105\1\0\1\105"+
    "\1\262\1\0\1\115\1\0\42\105\1\265\1\266\1\265"+
    "\1\267\1\113\1\200\1\270\42\265\1\271\1\113\1\112"+
    "\1\271\1\113\1\272\1\273\27\271\1\112\12\271\1\272"+
    "\1\0\1\105\1\274\1\0\1\272\1\254\27\272\1\105"+
    "\12\272\1\0\1\121\2\0\1\121\103\0\1\275\2\0"+
    "\1\123\50\0\1\123\6\0\1\32\2\0\1\32\3\0"+
    "\30\32\1\0\2\32\1\123\1\0\1\32\1\175\1\32"+
    "\1\0\1\32\1\126\1\0\1\126\1\276\1\0\1\126"+
    "\1\0\42\126\1\0\1\127\2\0\1\127\44\0\1\126"+
    "\1\0\1\130\1\276\1\0\1\130\1\277\43\126\1\176"+
    "\1\126\1\276\1\177\1\126\1\0\43\126\1\0\1\126"+
    "\1\276\1\0\1\126\1\0\5\126\1\300\34\126\1\301"+
    "\1\0\1\126\1\302\1\0\1\301\1\254\27\301\1\126"+
    "\12\301\1\134\1\0\2\134\1\0\1\134\1\0\43\134"+
    "\1\0\1\135\1\134\1\0\1\134\1\0\42\134\1\303"+
    "\1\0\1\134\1\303\1\0\1\303\1\254\27\303\1\134"+
    "\12\303\45\137\1\0\1\137\1\0\1\137\1\304\1\305"+
    "\1\304\1\306\1\137\1\304\1\307\36\304\1\200\1\304"+
    "\1\200\1\304\10\137\1\310\24\137\1\311\7\137\1\0"+
    "\1\137\1\0\10\137\1\312\35\137\1\0\1\137\1\0"+
    "\11\137\1\313\34\137\1\0\1\137\1\0\12\137\1\314"+
    "\1\137\1\315\1\137\1\316\27\137\1\0\1\137\1\0"+
    "\15\137\1\317\7\137\1\320\2\137\1\321\15\137\1\0"+
    "\1\137\1\0\12\137\1\322\33\137\1\0\1\137\1\0"+
    "\15\137\1\323\2\137\1\324\25\137\1\0\1\137\1\0"+
    "\24\137\1\325\21\137\1\0\1\137\1\0\12\137\1\326"+
    "\3\137\1\327\4\137\1\330\22\137\1\0\1\137\1\0"+
    "\12\137\1\331\7\137\1\332\1\137\1\333\1\137\1\334"+
    "\17\137\1\0\1\137\1\0\14\137\1\335\31\137\1\0"+
    "\1\137\1\0\14\137\1\336\31\137\1\0\1\137\1\0"+
    "\14\137\1\337\31\137\1\0\1\137\1\0\16\137\1\340"+
    "\27\137\1\0\1\137\1\0\12\137\1\341\33\137\1\0"+
    "\1\137\1\0\14\137\1\342\31\137\1\0\1\137\1\0"+
    "\14\137\1\343\31\137\1\0\1\137\1\0\1\137\46\0"+
    "\1\344\2\0\1\345\2\137\1\345\1\137\31\345\1\137"+
    "\6\345\1\254\1\345\1\254\1\345\37\0\1\346\2\0"+
    "\1\166\50\0\1\166\6\0\1\32\2\0\1\32\3\0"+
    "\30\32\1\0\2\32\1\166\1\0\1\32\1\175\1\32"+
    "\1\0\1\32\46\0\1\347\2\0\1\172\2\113\1\172"+
    "\1\113\1\0\1\113\30\172\1\113\2\172\2\113\1\172"+
    "\1\350\1\172\1\113\1\172\1\351\2\113\1\351\1\113"+
    "\1\254\1\273\27\351\1\172\1\273\2\351\2\273\1\351"+
    "\1\352\1\351\1\273\1\351\5\113\1\0\40\113\1\353"+
    "\2\113\1\32\2\0\1\32\3\0\30\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\354\1\0\1\32\2\0\1\176"+
    "\2\0\1\176\44\0\2\176\2\0\1\176\43\0\1\200"+
    "\1\201\1\200\1\202\1\0\44\200\1\277\1\355\2\277"+
    "\1\356\44\277\1\203\1\357\1\203\1\360\1\0\44\203"+
    "\1\32\2\0\1\32\3\0\1\32\1\361\26\32\1\0"+
    "\2\32\2\0\1\32\1\175\1\32\1\0\2\32\2\0"+
    "\1\32\3\0\20\32\1\362\7\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\11\32\1\363\16\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\17\32\1\364"+
    "\10\32\1\0\2\32\2\0\1\32\1\175\1\32\1\0"+
    "\2\32\2\0\1\32\3\0\4\32\1\365\23\32\1\0"+
    "\2\32\2\0\1\32\1\175\1\32\1\0\2\32\2\0"+
    "\1\32\3\0\4\32\1\366\23\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\6\32\1\367\21\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\1\370\27\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\1\32\1\371\26\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\1\32\1\372\26\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\13\32"+
    "\1\373\14\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\20\32\1\374\7\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\11\32\1\375\16\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\20\32\1\376\7\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\16\32"+
    "\1\377\11\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\10\32\1\u0100\14\32"+
    "\1\u0101\2\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\1\u0102\4\32\1\u0103"+
    "\12\32\1\u0104\7\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\6\32\1\u0105"+
    "\21\32\1\0\2\32\2\0\1\32\1\175\1\32\1\0"+
    "\2\32\2\0\1\32\3\0\1\32\1\u0106\26\32\1\0"+
    "\2\32\2\0\1\32\1\175\1\32\1\0\2\32\2\0"+
    "\1\32\3\0\1\32\1\236\3\32\1\u0107\5\32\1\u0108"+
    "\14\32\1\0\2\32\2\0\1\32\1\175\1\32\1\0"+
    "\2\32\2\0\1\32\3\0\4\32\1\u0109\23\32\1\0"+
    "\2\32\2\0\1\32\1\175\1\32\1\0\2\32\2\0"+
    "\1\32\3\0\1\32\1\u010a\26\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\5\32\1\u010b\22\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\1\246\27\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\10\32\1\u010c\4\32\1\u010d\12\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\1\32\1\u010e\26\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\11\32\1\u010f\16\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\20\32"+
    "\1\u0110\7\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\11\32\1\u0111\16\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\6\32\1\u0112\21\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\16\32\1\u0113\11\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\10\32"+
    "\1\u0114\17\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\1\32\1\374\26\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\6\32\1\u0115\21\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\13\32\1\365\14\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\13\32"+
    "\1\u0116\14\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\4\32\1\u0117\23\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\1\32"+
    "\2\344\1\0\42\344\1\0\1\344\1\u0118\1\344\1\253"+
    "\2\0\1\253\1\0\2\254\27\253\1\u0119\1\254\2\253"+
    "\2\254\1\253\1\255\1\253\1\254\1\253\1\254\2\0"+
    "\1\254\1\0\31\254\1\u011a\12\254\1\253\2\0\1\253"+
    "\1\0\2\254\27\253\1\u0119\1\254\2\253\2\254\1\253"+
    "\1\255\1\u011b\1\254\1\253\1\32\2\0\1\32\3\0"+
    "\17\32\1\u011c\10\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\1\u011d\27\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\6\32\1\u011e\21\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\1\32\2\113\1\263"+
    "\2\113\1\176\44\113\2\263\2\113\1\176\43\113\1\265"+
    "\1\266\1\265\1\267\1\113\1\200\43\265\1\u011f\1\u0120"+
    "\2\u011f\1\u0121\1\277\43\u011f\1\270\1\u0122\1\270\1\u0123"+
    "\1\113\1\203\43\270\1\271\1\113\1\112\1\271\1\113"+
    "\1\272\1\273\27\271\1\u0124\12\271\1\272\1\0\1\105"+
    "\1\274\1\0\1\272\1\254\27\272\1\u0125\12\272\1\273"+
    "\2\113\1\273\1\113\1\254\30\273\1\u0126\12\273\1\277"+
    "\1\201\2\277\1\0\44\277\1\126\1\0\1\126\1\276"+
    "\1\0\1\126\1\0\20\126\1\u0127\21\126\1\301\1\0"+
    "\1\126\1\302\1\0\1\301\1\254\27\301\1\u0128\12\301"+
    "\1\303\1\0\1\134\1\303\1\0\1\303\1\254\27\303"+
    "\1\u0129\12\303\1\304\1\305\1\304\1\306\1\137\40\304"+
    "\1\200\1\304\1\200\1\304\1\u012a\1\u012b\2\u012a\1\u012c"+
    "\40\u012a\1\277\1\u012a\1\277\1\u012a\1\307\1\u012d\1\307"+
    "\1\u012e\1\137\40\307\1\203\1\307\1\203\1\307\10\137"+
    "\1\u012f\34\137\1\0\1\137\1\0\14\137\1\u0130\31\137"+
    "\1\0\1\137\1\0\14\137\1\u0131\31\137\1\0\1\137"+
    "\1\0\16\137\1\u0132\27\137\1\0\1\137\1\0\11\137"+
    "\1\u0133\34\137\1\0\1\137\1\0\11\137\1\u0134\34\137"+
    "\1\0\1\137\1\0\23\137\1\u0135\22\137\1\0\1\137"+
    "\1\0\30\137\1\324\15\137\1\0\1\137\1\0\21\137"+
    "\1\u0136\24\137\1\0\1\137\1\0\30\137\1\u0137\15\137"+
    "\1\0\1\137\1\0\26\137\1\u0138\17\137\1\0\1\137"+
    "\1\0\20\137\1\u0139\25\137\1\0\1\137\1\0\16\137"+
    "\1\u013a\27\137\1\0\1\137\1\0\11\137\1\u013b\34\137"+
    "\1\0\1\137\1\0\11\137\1\335\3\137\1\u013c\5\137"+
    "\1\u013d\22\137\1\0\1\137\1\0\14\137\1\u013e\31\137"+
    "\1\0\1\137\1\0\11\137\1\u013f\34\137\1\0\1\137"+
    "\1\0\10\137\1\342\35\137\1\0\1\137\1\0\20\137"+
    "\1\u0140\4\137\1\u0141\20\137\1\0\1\137\1\0\11\137"+
    "\1\u0142\34\137\1\0\1\137\1\0\21\137\1\u0143\24\137"+
    "\1\0\1\137\1\0\21\137\1\u0144\24\137\1\0\1\137"+
    "\1\0\26\137\1\u0145\17\137\1\0\1\137\1\0\11\137"+
    "\1\324\34\137\1\0\1\137\1\0\16\137\1\u0146\27\137"+
    "\1\0\1\137\1\0\23\137\1\u0130\22\137\1\0\1\137"+
    "\1\0\23\137\1\u0147\22\137\1\0\1\137\1\0\1\137"+
    "\1\345\2\137\1\345\1\137\31\345\1\u0148\6\345\1\254"+
    "\1\345\1\254\1\345\1\172\2\113\1\172\1\113\1\0"+
    "\1\113\30\172\1\113\2\172\2\113\1\172\1\350\1\u0149"+
    "\1\113\1\172\1\351\2\113\1\351\1\113\1\254\1\273"+
    "\27\351\1\u014a\1\273\2\351\2\273\1\351\1\352\1\351"+
    "\1\273\2\351\2\113\1\351\1\113\1\254\1\273\27\351"+
    "\1\u014a\1\273\2\351\2\273\1\351\1\352\1\u014b\1\273"+
    "\1\351\2\u014c\1\113\2\u014c\1\344\37\u014c\1\113\1\u014c"+
    "\1\113\1\u014c\1\354\1\u014d\1\0\1\354\3\u014d\30\354"+
    "\1\u014d\2\354\2\u014d\1\354\1\175\1\354\1\32\1\354"+
    "\1\355\1\0\1\355\1\u014e\1\0\44\355\1\0\1\355"+
    "\47\0\1\u014f\1\u0150\2\u014f\1\356\44\u014f\1\32\2\0"+
    "\1\32\3\0\2\32\1\244\25\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\6\32\1\u0151\21\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\1\u0152\27\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\2\32\1\u0153\25\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\13\32\1\374\14\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\13\32"+
    "\1\375\14\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\7\32\1\245\20\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\1\32\1\u0154\26\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\20\32\1\u0155\7\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\5\32"+
    "\1\u0156\22\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\20\32\1\u0157\7\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\17\32\1\u0158\10\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\11\32\1\u0159\5\32\1\u015a\10\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\20\32\1\u015b\7\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\2\32"+
    "\1\374\25\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\13\32\1\u015c\14\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\30\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\1\u015d\1\32\2\0\1\32\3\0"+
    "\1\u015e\17\32\1\u015f\7\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\1\u0160"+
    "\27\32\1\0\2\32\2\0\1\32\1\175\1\32\1\0"+
    "\2\32\2\0\1\32\3\0\13\32\1\u0161\14\32\1\0"+
    "\2\32\2\0\1\32\1\175\1\32\1\0\2\32\2\0"+
    "\1\32\3\0\1\u0162\27\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\20\32"+
    "\1\u0163\7\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\1\374\15\32\1\u0164"+
    "\11\32\1\0\2\32\2\0\1\32\1\175\1\32\1\0"+
    "\2\32\2\0\1\32\3\0\26\32\1\361\1\32\1\0"+
    "\2\32\2\0\1\32\1\175\1\32\1\0\2\32\2\0"+
    "\1\32\3\0\16\32\1\374\11\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\25\32\1\u0101\2\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\10\32\1\u0165"+
    "\17\32\1\0\2\32\2\0\1\32\1\175\1\32\1\0"+
    "\2\32\2\0\1\32\3\0\11\32\1\u010a\16\32\1\0"+
    "\2\32\2\0\1\32\1\175\1\32\1\0\2\32\2\0"+
    "\1\32\3\0\6\32\1\u0166\21\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\16\32\1\u0167\11\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\1\u0168\27\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\1\u0169\27\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\26\32\1\u016a\1\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\12\32\1\u016b"+
    "\15\32\1\0\2\32\2\0\1\32\1\175\1\32\1\0"+
    "\2\32\2\0\1\32\3\0\6\32\1\u016c\21\32\1\0"+
    "\2\32\2\0\1\32\1\175\1\32\1\0\2\32\2\0"+
    "\1\32\3\0\5\32\1\374\22\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\14\32\1\u0161\13\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\16\32\1\u016d"+
    "\11\32\1\0\2\32\2\0\1\32\1\175\1\32\1\0"+
    "\1\32\1\u011b\1\u014d\1\0\1\u011b\1\u014d\2\u016e\27\u011b"+
    "\1\u016f\1\u016e\2\u011b\2\u016e\1\u011b\1\255\1\u011b\1\253"+
    "\1\u011b\1\32\2\0\1\32\3\0\2\32\1\u0170\25\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\1\32\1\u0171\26\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\26\32\1\u0172\1\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\1\32\1\u011f\1\266\2\u011f\1\113"+
    "\1\277\43\u011f\1\u0120\1\113\1\u0120\1\u0173\1\113\1\355"+
    "\43\u0120\1\113\1\u0120\3\113\1\0\43\113\1\u0174\1\u0175"+
    "\2\u0174\1\u0121\1\u014f\43\u0174\1\126\1\0\1\126\1\276"+
    "\1\0\1\126\1\0\1\u0176\41\126\1\u012a\1\305\2\u012a"+
    "\1\137\40\u012a\1\277\1\u012a\1\277\1\u012a\1\u012b\1\137"+
    "\1\u012b\1\u0177\1\137\40\u012b\1\355\1\u012b\1\355\1\u012b"+
    "\1\137\1\u012b\43\137\1\0\1\137\1\0\1\137\1\u0178"+
    "\1\u0179\2\u0178\1\u012c\40\u0178\1\u014f\1\u0178\1\u014f\1\u0178"+
    "\11\137\1\340\33\137\1\0\1\137\1\0\23\137\1\324"+
    "\22\137\1\0\1\137\1\0\23\137\1\u0136\22\137\1\0"+
    "\1\137\1\0\17\137\1\341\26\137\1\0\1\137\1\0"+
    "\30\137\1\u017a\15\137\1\0\1\137\1\0\15\137\1\u017b"+
    "\30\137\1\0\1\137\1\0\30\137\1\u017c\15\137\1\0"+
    "\1\137\1\0\27\137\1\u017d\16\137\1\0\1\137\1\0"+
    "\21\137\1\u017e\5\137\1\u017f\16\137\1\0\1\137\1\0"+
    "\30\137\1\156\15\137\1\0\1\137\1\0\12\137\1\324"+
    "\33\137\1\0\1\137\1\0\23\137\1\u0180\22\137\1\0"+
    "\1\137\1\0\10\137\1\u0181\35\137\1\0\1\137\1\0"+
    "\30\137\1\u0182\15\137\1\0\1\137\1\0\10\137\1\324"+
    "\15\137\1\u0183\17\137\1\0\1\137\1\0\36\137\1\u012f"+
    "\7\137\1\0\1\137\1\0\26\137\1\324\17\137\1\0"+
    "\1\137\1\0\20\137\1\u0184\25\137\1\0\1\137\1\0"+
    "\21\137\1\u013f\24\137\1\0\1\137\1\0\16\137\1\u0185"+
    "\27\137\1\0\1\137\1\0\26\137\1\u0186\17\137\1\0"+
    "\1\137\1\0\10\137\1\u0187\35\137\1\0\1\137\1\0"+
    "\22\137\1\u0188\23\137\1\0\1\137\1\0\15\137\1\324"+
    "\30\137\1\0\1\137\1\0\24\137\1\u0180\21\137\1\0"+
    "\1\137\1\0\1\137\1\u0149\1\u0189\1\113\1\u0149\1\u0189"+
    "\1\u014d\1\u0189\30\u0149\1\u0189\2\u0149\2\u0189\1\u0149\1\350"+
    "\1\u0149\1\172\1\u0149\1\u014b\1\u0189\1\113\1\u014b\1\u0189"+
    "\1\u016e\1\u018a\27\u014b\1\u018b\1\u018a\2\u014b\2\u018a\1\u014b"+
    "\1\352\1\u014b\1\351\1\u014b\2\u014d\1\0\42\u014d\1\0"+
    "\1\u014d\1\32\1\u014d\1\0\1\355\2\0\1\356\44\0"+
    "\1\u014f\1\357\2\u014f\1\0\44\u014f\1\32\2\0\1\32"+
    "\3\0\10\32\1\u018c\17\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\1\32"+
    "\1\u018d\26\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\1\32\1\u018e\26\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\11\32\1\374\1\32\1\u018f\14\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\6\32\1\u0190\21\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\25\32\1\u0191\2\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\4\32"+
    "\1\u0192\23\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\14\32\1\u0193\13\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\1\32\1\u0194\26\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\6\32\1\244\21\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\14\32"+
    "\1\u0195\13\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\30\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\1\u0196\1\32\2\0"+
    "\1\32\3\0\1\u0197\27\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\10\32"+
    "\1\u0198\17\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\1\374\27\32\1\0"+
    "\2\32\2\0\1\32\1\175\1\32\1\0\2\32\2\0"+
    "\1\32\3\0\4\32\1\u0199\23\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\11\32\1\u019a\16\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\1\u019b\27\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\6\32\1\u019c\21\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\17\32\1\374\10\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\3\32"+
    "\1\u019d\24\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\10\32\1\u019e\17\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\5\32\1\u019f\22\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\4\32\1\u01a0\23\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\11\32"+
    "\1\u01a1\16\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\5\32\1\u01a2\22\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\12\32\1\u01a3\15\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\1\32\1\u016e\1\u014d"+
    "\1\0\1\u016e\1\u014d\31\u016e\1\u01a4\6\u016e\1\254\1\u016e"+
    "\1\253\1\u016e\1\32\2\0\1\32\3\0\1\32\1\u01a5"+
    "\26\32\1\0\2\32\2\0\1\32\1\175\1\32\1\0"+
    "\2\32\2\0\1\32\3\0\1\32\1\u01a6\26\32\1\0"+
    "\2\32\2\0\1\32\1\175\1\32\1\0\2\32\2\0"+
    "\1\32\3\0\4\32\1\u01a7\23\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\1\32\1\113\1\u0120\2\113"+
    "\1\u0121\1\0\43\113\1\u0174\1\u0122\2\u0174\1\113\1\u014f"+
    "\43\u0174\1\126\1\0\1\126\1\276\1\0\1\126\1\0"+
    "\10\126\1\u01a8\31\126\1\137\1\u012b\2\137\1\u012c\40\137"+
    "\1\0\1\137\1\0\1\137\1\u0178\1\u012d\2\u0178\1\137"+
    "\40\u0178\1\u014f\1\u0178\1\u014f\1\u0178\20\137\1\324\1\137"+
    "\1\u01a9\22\137\1\0\1\137\1\0\16\137\1\u01aa\27\137"+
    "\1\0\1\137\1\0\35\137\1\u01ab\10\137\1\0\1\137"+
    "\1\0\14\137\1\u01ac\31\137\1\0\1\137\1\0\24\137"+
    "\1\u01ad\21\137\1\0\1\137\1\0\11\137\1\u01ae\34\137"+
    "\1\0\1\137\1\0\10\137\1\324\35\137\1\0\1\137"+
    "\1\0\14\137\1\u01af\31\137\1\0\1\137\1\0\21\137"+
    "\1\u01b0\24\137\1\0\1\137\1\0\10\137\1\u01b1\35\137"+
    "\1\0\1\137\1\0\16\137\1\u01b2\27\137\1\0\1\137"+
    "\1\0\27\137\1\324\16\137\1\0\1\137\1\0\13\137"+
    "\1\u01b3\32\137\1\0\1\137\1\0\15\137\1\u01b4\30\137"+
    "\1\0\1\137\1\0\21\137\1\u01b5\24\137\1\0\1\137"+
    "\1\0\1\137\2\u0189\1\113\2\u0189\1\u014d\37\u0189\1\113"+
    "\1\u0189\1\172\1\u0189\1\u018a\1\u0189\1\113\1\u018a\1\u0189"+
    "\1\u016e\30\u018a\1\u01b6\6\u018a\1\273\1\u018a\1\351\1\u018a"+
    "\1\32\2\0\1\32\3\0\16\32\1\u01b7\11\32\1\0"+
    "\2\32\2\0\1\32\1\175\1\32\1\0\2\32\2\0"+
    "\1\32\3\0\6\32\1\u01b8\21\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\6\32\1\u010d\21\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\5\32\1\u01b9"+
    "\22\32\1\0\2\32\2\0\1\32\1\175\1\32\1\0"+
    "\2\32\2\0\1\32\3\0\4\32\1\u01ba\23\32\1\0"+
    "\2\32\2\0\1\32\1\175\1\32\1\0\2\32\2\0"+
    "\1\32\3\0\16\32\1\u01bb\11\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\10\32\1\u010c\17\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\1\u010c\27\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\20\32\1\u01bc\7\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\10\32\1\u01bd\17\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\25\32"+
    "\1\u01bb\2\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\16\32\1\u01be\11\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\1\32\1\u01bf\26\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\22\32\1\374\5\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\2\32"+
    "\1\u01ba\25\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\6\32\1\u01c0\21\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\4\32\1\u01c1\23\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\16\32\1\u01c2\11\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\14\32"+
    "\1\u01c3\13\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\1\u01c4\27\32\1\0"+
    "\2\32\2\0\1\32\1\175\1\32\1\0\2\32\2\0"+
    "\1\32\3\0\16\32\1\u01c5\11\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\6\32\1\u01c6\21\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\16\32\1\u01c7"+
    "\11\32\1\0\2\32\2\0\1\32\1\175\1\32\1\0"+
    "\1\32\15\137\1\u0141\27\137\1\0\1\137\1\0\15\137"+
    "\1\u01c8\30\137\1\0\1\137\1\0\14\137\1\u01c9\31\137"+
    "\1\0\1\137\1\0\26\137\1\u01ca\17\137\1\0\1\137"+
    "\1\0\20\137\1\u0140\25\137\1\0\1\137\1\0\10\137"+
    "\1\u0140\35\137\1\0\1\137\1\0\35\137\1\u01ca\10\137"+
    "\1\0\1\137\1\0\26\137\1\u01cb\17\137\1\0\1\137"+
    "\1\0\11\137\1\u01cc\34\137\1\0\1\137\1\0\32\137"+
    "\1\324\13\137\1\0\1\137\1\0\12\137\1\u01c9\33\137"+
    "\1\0\1\137\1\0\14\137\1\u01cd\31\137\1\0\1\137"+
    "\1\0\24\137\1\u01ce\21\137\1\0\1\137\1\0\1\137"+
    "\1\32\2\0\1\32\3\0\20\32\1\u01cf\7\32\1\0"+
    "\2\32\2\0\1\32\1\175\1\32\1\0\2\32\2\0"+
    "\1\32\3\0\7\32\1\374\20\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\1\32\1\217\26\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\12\32\1\374"+
    "\15\32\1\0\2\32\2\0\1\32\1\175\1\32\1\0"+
    "\2\32\2\0\1\32\3\0\1\u01d0\27\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\1\32\1\u0156\26\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\2\32\2\0\1\32\3\0\21\32"+
    "\1\u01d1\6\32\1\0\2\32\2\0\1\32\1\175\1\32"+
    "\1\0\2\32\2\0\1\32\3\0\5\32\1\u01d2\22\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\23\32\1\u0161\4\32\1\0\2\32"+
    "\2\0\1\32\1\175\1\32\1\0\2\32\2\0\1\32"+
    "\3\0\1\u01d3\27\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\15\32\1\u010d"+
    "\12\32\1\0\2\32\2\0\1\32\1\175\1\32\1\0"+
    "\2\32\2\0\1\32\3\0\20\32\1\u01d4\7\32\1\0"+
    "\2\32\2\0\1\32\1\175\1\32\1\0\2\32\2\0"+
    "\1\32\3\0\1\u01d5\27\32\1\0\2\32\2\0\1\32"+
    "\1\175\1\32\1\0\1\32\16\137\1\324\26\137\1\0"+
    "\1\137\1\0\11\137\1\317\34\137\1\0\1\137\1\0"+
    "\22\137\1\324\23\137\1\0\1\137\1\0\11\137\1\u017b"+
    "\34\137\1\0\1\137\1\0\31\137\1\u01d6\14\137\1\0"+
    "\1\137\1\0\33\137\1\u0180\12\137\1\0\1\137\1\0"+
    "\25\137\1\u0141\20\137\1\0\1\137\1\0\1\137\1\32"+
    "\2\0\1\32\3\0\1\u01d7\27\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\2\32\2\0\1\32\3\0"+
    "\2\32\1\u01d8\25\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\2\32\2\0\1\32\3\0\1\u01d9\27\32"+
    "\1\0\2\32\2\0\1\32\1\175\1\32\1\0\2\32"+
    "\2\0\1\32\3\0\1\u01da\27\32\1\0\2\32\2\0"+
    "\1\32\1\175\1\32\1\0\1\32\11\137\1\u01db\33\137"+
    "\1\0\1\137\1\0\1\137\1\32\2\0\1\32\3\0"+
    "\14\32\1\u010a\13\32\1\0\2\32\2\0\1\32\1\175"+
    "\1\32\1\0\1\32\23\137\1\u013f\21\137\1\0\1\137"+
    "\1\0\1\137";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16974];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\21\0\4\1\4\0\34\1\1\11\3\1\1\11\7\1"+
    "\2\11\17\1\1\11\40\1\1\11\1\1\1\11\12\1"+
    "\1\11\52\1\1\0\5\1\1\0\11\1\3\0\3\1"+
    "\1\0\41\1\1\0\1\1\1\0\7\1\1\0\1\11"+
    "\50\1\1\11\1\1\1\11\62\1\2\0\37\1\1\0"+
    "\155\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[475];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MakefileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MakefileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case PREREQUISITES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 476: break;
            case INCLUDES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 477: break;
            case EXPORT: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 478: break;
            case EXPORTVAR: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 479: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return FUNCTION_PARAM_TEXT;
            } 
            // fall through
          case 50: break;
          case 2: 
            { return IDENTIFIER;
            } 
            // fall through
          case 51: break;
          case 3: 
            { return EOL;
            } 
            // fall through
          case 52: break;
          case 4: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 53: break;
          case 5: 
            { return COMMENT;
            } 
            // fall through
          case 54: break;
          case 6: 
            { return COLON;
            } 
            // fall through
          case 55: break;
          case 7: 
            { yybegin(SOURCE_FORCED); return SEMICOLON;
            } 
            // fall through
          case 56: break;
          case 8: 
            { return PIPE;
            } 
            // fall through
          case 57: break;
          case 9: 
            { yybegin(SOURCE); return ASSIGN;
            } 
            // fall through
          case 58: break;
          case 10: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 59: break;
          case 11: 
            { yybegin(YYINITIAL); return FUNCTION_END;
            } 
            // fall through
          case 60: break;
          case 12: 
            { yybegin(SOURCE); return TAB;
            } 
            // fall through
          case 61: break;
          case 13: 
            { yybegin(YYINITIAL); return EOL;
            } 
            // fall through
          case 62: break;
          case 14: 
            { yypushback(yylength()); yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 63: break;
          case 15: 
            { return LINE;
            } 
            // fall through
          case 64: break;
          case 16: 
            { yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 65: break;
          case 17: 
            { return TAB;
            } 
            // fall through
          case 66: break;
          case 18: 
            { yybegin(DEFINEBODY); return WHITE_SPACE;
            } 
            // fall through
          case 67: break;
          case 19: 
            { return ASSIGN;
            } 
            // fall through
          case 68: break;
          case 20: 
            { return VARIABLE_VALUE_LINE;
            } 
            // fall through
          case 69: break;
          case 21: 
            { yybegin(YYINITIAL); return CONDITION;
            } 
            // fall through
          case 70: break;
          case 22: 
            { yybegin(PREREQUISITES); return FUNCTION_END;
            } 
            // fall through
          case 71: break;
          case 23: 
            { yybegin(EXPORTVAR); return ASSIGN;
            } 
            // fall through
          case 72: break;
          case 24: 
            { return SPLIT;
            } 
            // fall through
          case 73: break;
          case 25: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 74: break;
          case 26: 
            { return FUNCTION_NAME;
            } 
            // fall through
          case 75: break;
          case 27: 
            { return DOUBLECOLON;
            } 
            // fall through
          case 76: break;
          case 28: 
            { return FUNCTION_START;
            } 
            // fall through
          case 77: break;
          case 29: 
            { yybegin(FUNCTION_PREREQ); return FUNCTION_START;
            } 
            // fall through
          case 78: break;
          case 30: 
            { yybegin(FUNCTION); return FUNCTION_START;
            } 
            // fall through
          case 79: break;
          case 31: 
            { return VARIABLE_USAGE;
            } 
            // fall through
          case 80: break;
          case 32: 
            { return MACRO;
            } 
            // fall through
          case 81: break;
          case 33: 
            { yybegin(ELSE); return KEYWORD_ELSE;
            } 
            // fall through
          case 82: break;
          case 34: 
            { yybegin(CONDITIONALS); return KEYWORD_IFEQ;
            } 
            // fall through
          case 83: break;
          case 35: 
            { return KEYWORD_ENDIF;
            } 
            // fall through
          case 84: break;
          case 36: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNEQ;
            } 
            // fall through
          case 85: break;
          case 37: 
            { yybegin(CONDITIONALS); return KEYWORD_IFDEF;
            } 
            // fall through
          case 86: break;
          case 38: 
            { return KEYWORD_VPATH;
            } 
            // fall through
          case 87: break;
          case 39: 
            { yybegin(YYINITIAL); return KEYWORD_ENDEF;
            } 
            // fall through
          case 88: break;
          case 40: 
            { yybegin(EXPORT); return KEYWORD_EXPORT;
            } 
            // fall through
          case 89: break;
          case 41: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNDEF;
            } 
            // fall through
          case 90: break;
          case 42: 
            { yybegin(DEFINE); return KEYWORD_DEFINE;
            } 
            // fall through
          case 91: break;
          case 43: 
            { yybegin(YYINITIAL); return KEYWORD_EXPORT;
            } 
            // fall through
          case 92: break;
          case 44: 
            { return KEYWORD_INCLUDE;
            } 
            // fall through
          case 93: break;
          case 45: 
            { return KEYWORD_PRIVATE;
            } 
            // fall through
          case 94: break;
          case 46: 
            { yybegin(YYINITIAL); return KEYWORD_PRIVATE;
            } 
            // fall through
          case 95: break;
          case 47: 
            { return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 96: break;
          case 48: 
            { yybegin(INCLUDES); return KEYWORD_UNDEFINE;
            } 
            // fall through
          case 97: break;
          case 49: 
            { yybegin(YYINITIAL); return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
