/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package name.kropp.intellij.makefile;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static name.kropp.intellij.makefile.psi.MakefileTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>MakefileLexer.flex</tt>
 */
public class _MakefileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PREREQUISITES = 2;
  public static final int ELSE = 4;
  public static final int INCLUDES = 6;
  public static final int SOURCE = 8;
  public static final int SOURCE_FORCED = 10;
  public static final int DEFINE = 12;
  public static final int DEFINEBODY = 14;
  public static final int CONDITIONALS = 16;
  public static final int FUNCTION = 18;
  public static final int FUNCTION_PREREQ = 20;
  public static final int EXPORT = 22;
  public static final int EXPORTVAR = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  8, 10, 11, 12, 13, 14, 
    15, 16, 17, 18, 19, 20, 21, 22, 23, 24
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\1\2\0\1\4\22\0\1\2\1\40\1\0\1\6\1\7\3\0\1\10\1\42\1\0\1\41\1\0"+
    "\1\43\14\0\1\34\1\35\1\0\1\37\1\0\1\40\1\33\33\0\1\3\4\0\1\15\1\32\1\26\1"+
    "\25\1\11\1\21\1\20\1\23\1\17\2\0\1\24\1\0\1\16\1\13\1\27\1\45\1\12\1\22\1"+
    "\30\1\31\1\44\1\14\1\46\3\0\1\36\203\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\21\0\4\1\4\0\1\2\1\3\2\4\1\5\10\2"+
    "\1\6\1\7\1\10\2\2\1\11\1\2\1\12\5\2"+
    "\1\13\1\14\1\15\2\16\1\10\1\17\1\20\1\4"+
    "\1\10\1\4\3\16\1\21\1\5\1\16\1\17\1\22"+
    "\1\10\1\23\1\10\1\2\1\24\1\4\1\24\1\10"+
    "\2\24\1\25\1\4\1\25\1\1\1\5\1\10\1\26"+
    "\1\1\1\27\1\10\1\30\1\10\1\2\2\16\3\5"+
    "\1\31\13\2\1\32\2\2\1\0\2\33\4\2\1\34"+
    "\1\0\2\16\3\5\1\31\1\16\1\17\1\16\3\0"+
    "\1\5\2\24\1\0\1\25\3\5\1\31\1\0\1\1"+
    "\1\0\1\16\1\5\1\0\2\31\6\2\1\35\14\2"+
    "\2\36\10\2\2\5\1\16\2\31\3\36\1\24\2\36"+
    "\2\5\1\1\2\31\1\35\1\36\6\16\1\0\2\31"+
    "\7\2\1\37\3\2\1\40\20\2\1\16\2\31\1\24"+
    "\1\1\2\31\6\16\6\2\1\41\3\2\1\42\1\2"+
    "\1\43\3\2\1\44\11\2\1\45\6\16\3\2\1\46"+
    "\2\2\1\47\2\2\1\50\1\51\5\2\1\52\2\2"+
    "\1\53\2\2\3\16\1\46\2\16\1\54\2\2\1\55"+
    "\2\2\1\56\1\57\1\2\1\60\2\2\1\61\2\2"+
    "\1\62\1\54\2\16\1\55\1\16\3\2\1\63\1\64"+
    "\3\2\1\65\3\16\1\66\2\2\1\67\2\2\1\66"+
    "\2\16\1\70\1\2\1\71\1\2\1\70\1\16\1\72"+
    "\1\73\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a\0\u0381"+
    "\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u046b\0\u0492\0\u04b9"+
    "\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1"+
    "\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729"+
    "\0\u0750\0\u0777\0\u079e\0\u07c5\0\u03cf\0\u03cf\0\u05f1\0\u07ec"+
    "\0\u05f1\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af\0\u08d6\0\u08fd"+
    "\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7\0\u0a0e\0\u05f1"+
    "\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46"+
    "\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u0c30\0\u05f1\0\u0c57"+
    "\0\u05f1\0\u0c7e\0\u05f1\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41"+
    "\0\u05f1\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52"+
    "\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c\0\u0618\0\u0f63"+
    "\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff\0\u1026\0\u104d\0\u1074\0\u109b"+
    "\0\u0618\0\u0813\0\u10c2\0\u10e9\0\u1110\0\u08fd\0\u1137\0\u115e"+
    "\0\u1185\0\u11ac\0\u11d3\0\u11ac\0\u0a35\0\u0a83\0\u11fa\0\u1221"+
    "\0\u1248\0\u1248\0\u126f\0\u1296\0\u0be2\0\u12bd\0\u12e4\0\u130b"+
    "\0\u1332\0\u0ca5\0\u1359\0\u1380\0\u13a7\0\u05f1\0\u13ce\0\u13f5"+
    "\0\u141c\0\u1443\0\u146a\0\u1491\0\u14b8\0\u03cf\0\u14df\0\u1506"+
    "\0\u152d\0\u1554\0\u157b\0\u15a2\0\u15c9\0\u15f0\0\u1617\0\u163e"+
    "\0\u1665\0\u168c\0\u03cf\0\u05f1\0\u16b3\0\u16da\0\u1701\0\u1728"+
    "\0\u174f\0\u1776\0\u179d\0\u17c4\0\u17eb\0\u1812\0\u1839\0\u08fd"+
    "\0\u1860\0\u08d6\0\u0813\0\u08fd\0\u1887\0\u0a83\0\u0b6d\0\u18ae"+
    "\0\u18d5\0\u18fc\0\u0be2\0\u1923\0\u05f1\0\u0be2\0\u194a\0\u1971"+
    "\0\u1998\0\u19bf\0\u19e6\0\u1a0d\0\u1a34\0\u1a5b\0\u1380\0\u1a82"+
    "\0\u1aa9\0\u1ad0\0\u1af7\0\u1b1e\0\u1b45\0\u1b6c\0\u03cf\0\u1b93"+
    "\0\u1bba\0\u1be1\0\u03cf\0\u1c08\0\u1c2f\0\u1c56\0\u1c7d\0\u1ca4"+
    "\0\u1ccb\0\u1cf2\0\u1d19\0\u1d40\0\u1d67\0\u1d8e\0\u1db5\0\u1ddc"+
    "\0\u1e03\0\u1e2a\0\u1e51\0\u1e78\0\u1e9f\0\u1812\0\u1ec6\0\u1eed"+
    "\0\u1f14\0\u18d5\0\u1f3b\0\u1f62\0\u1f89\0\u1fb0\0\u1fd7\0\u1ffe"+
    "\0\u2025\0\u204c\0\u2073\0\u209a\0\u20c1\0\u20e8\0\u03cf\0\u210f"+
    "\0\u2136\0\u215d\0\u03cf\0\u2184\0\u03cf\0\u21ab\0\u21d2\0\u21f9"+
    "\0\u03cf\0\u2220\0\u2247\0\u226e\0\u2295\0\u22bc\0\u22e3\0\u230a"+
    "\0\u2331\0\u2358\0\u0a83\0\u237f\0\u23a6\0\u23cd\0\u23f4\0\u241b"+
    "\0\u2442\0\u2469\0\u2490\0\u24b7\0\u13f5\0\u24de\0\u2505\0\u03cf"+
    "\0\u252c\0\u2553\0\u03cf\0\u03cf\0\u257a\0\u25a1\0\u25c8\0\u25ef"+
    "\0\u2616\0\u13f5\0\u263d\0\u2664\0\u03cf\0\u268b\0\u26b2\0\u26d9"+
    "\0\u2700\0\u2727\0\u194a\0\u274e\0\u2775\0\u13f5\0\u279c\0\u27c3"+
    "\0\u13f5\0\u27ea\0\u2811\0\u03cf\0\u03cf\0\u2838\0\u13f5\0\u285f"+
    "\0\u2886\0\u13f5\0\u28ad\0\u28d4\0\u03cf\0\u194a\0\u28fb\0\u2922"+
    "\0\u194a\0\u2949\0\u2970\0\u2997\0\u29be\0\u03cf\0\u03cf\0\u29e5"+
    "\0\u2a0c\0\u2a33\0\u03cf\0\u2a5a\0\u2a81\0\u2aa8\0\u13f5\0\u2acf"+
    "\0\u2af6\0\u13f5\0\u2b1d\0\u2b44\0\u194a\0\u2b6b\0\u2b92\0\u13f5"+
    "\0\u2bb9\0\u13f5\0\u2be0\0\u194a\0\u2c07\0\u13f5\0\u13f5\0\u194a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\32\1\33\1\34\1\32\1\33\1\35\1\36\1\37"+
    "\1\32\1\40\1\32\1\41\3\32\1\42\2\32\1\43"+
    "\2\32\1\44\1\32\1\45\1\32\1\46\2\32\1\47"+
    "\2\32\1\50\1\51\1\52\1\32\1\43\1\53\3\32"+
    "\1\33\1\34\1\32\1\33\1\54\1\36\1\37\1\32"+
    "\1\40\1\32\1\41\3\32\1\42\2\32\1\43\2\32"+
    "\1\44\1\32\1\45\1\32\1\46\1\32\1\55\1\47"+
    "\2\32\1\50\1\51\1\52\1\32\1\43\1\53\3\32"+
    "\1\56\1\34\1\57\1\56\1\35\1\36\1\60\1\32"+
    "\1\61\1\32\1\62\13\32\1\63\4\32\1\64\1\65"+
    "\1\66\1\50\1\51\1\52\6\32\1\56\1\34\1\57"+
    "\1\56\1\54\1\36\1\60\1\32\1\61\1\32\1\62"+
    "\13\32\1\63\3\32\1\55\1\64\1\65\1\66\1\50"+
    "\1\51\1\52\5\32\1\67\1\56\1\34\1\67\1\56"+
    "\1\67\1\36\41\67\1\56\1\34\1\67\1\56\1\67"+
    "\1\36\24\67\1\70\13\67\1\32\1\56\1\34\1\32"+
    "\1\56\1\35\1\36\25\32\1\71\2\32\2\71\7\32"+
    "\1\56\1\34\1\32\1\56\1\35\1\36\24\32\1\55"+
    "\1\71\2\32\2\71\6\32\1\72\1\73\1\74\1\75"+
    "\1\73\1\76\1\36\40\72\1\77\1\100\1\77\1\101"+
    "\1\100\1\102\1\103\24\77\1\104\13\77\1\72\1\73"+
    "\1\74\1\75\1\73\1\102\1\36\24\72\1\105\13\72"+
    "\1\32\1\106\1\34\1\32\1\106\1\35\1\36\25\32"+
    "\1\107\2\32\1\110\1\111\1\112\6\32\1\106\1\34"+
    "\1\32\1\106\1\35\1\36\24\32\1\55\1\107\2\32"+
    "\1\110\1\111\1\112\5\32\1\113\1\114\1\115\1\116"+
    "\1\114\1\115\1\36\2\113\1\117\36\113\1\114\1\115"+
    "\1\116\1\114\1\115\1\36\2\113\1\117\21\113\1\120"+
    "\13\113\1\121\1\73\1\122\1\121\1\73\1\121\1\36"+
    "\41\121\1\73\1\122\1\121\1\73\1\121\1\36\24\121"+
    "\1\123\13\121\6\124\1\125\1\126\32\124\1\127\12\124"+
    "\1\125\1\126\23\124\1\130\6\124\1\127\12\124\1\125"+
    "\1\126\32\124\1\131\12\124\1\125\1\126\23\124\1\130"+
    "\6\124\1\131\4\124\1\32\1\56\1\34\1\32\1\56"+
    "\1\35\1\36\1\37\24\32\1\132\2\32\1\133\1\134"+
    "\1\135\5\32\5\100\1\35\1\103\1\136\23\100\1\137"+
    "\13\100\1\72\1\56\1\74\1\75\1\56\1\76\1\36"+
    "\40\72\1\77\1\100\1\77\1\101\1\100\1\76\1\103"+
    "\24\77\1\104\13\77\1\32\2\0\1\32\3\0\25\32"+
    "\1\0\2\32\2\0\6\32\1\0\1\33\2\0\1\33"+
    "\44\0\1\34\51\0\1\35\41\0\1\140\1\141\1\140"+
    "\1\142\1\0\1\140\1\143\40\140\1\32\2\0\1\32"+
    "\3\0\1\32\1\144\23\32\1\0\2\32\2\0\7\32"+
    "\2\0\1\32\3\0\7\32\1\145\5\32\1\146\7\32"+
    "\1\0\2\32\2\0\5\32\1\147\1\32\2\0\1\32"+
    "\3\0\25\32\1\0\2\32\2\0\3\32\1\150\3\32"+
    "\2\0\1\32\3\0\7\32\1\151\2\32\1\152\12\32"+
    "\1\0\2\32\2\0\7\32\2\0\1\32\3\0\10\32"+
    "\1\153\14\32\1\0\2\32\2\0\7\32\2\0\1\32"+
    "\3\0\2\32\1\154\22\32\1\0\2\32\2\0\7\32"+
    "\2\0\1\32\3\0\3\32\1\155\21\32\1\0\2\32"+
    "\2\0\7\32\2\0\1\32\3\0\7\32\1\156\15\32"+
    "\1\0\2\32\2\0\6\32\34\0\1\157\2\0\1\50"+
    "\115\0\1\50\7\0\1\32\2\0\1\32\3\0\25\32"+
    "\1\0\2\32\1\50\1\0\7\32\2\0\1\32\3\0"+
    "\20\32\1\160\4\32\1\0\2\32\2\0\6\32\5\0"+
    "\1\54\41\0\1\161\2\0\1\161\1\0\2\162\24\161"+
    "\1\32\1\162\2\161\2\162\6\161\1\0\1\56\2\0"+
    "\1\56\42\0\1\32\1\163\1\0\1\32\1\164\2\0"+
    "\25\32\1\0\2\32\2\0\7\32\2\0\1\32\3\0"+
    "\1\32\1\165\23\32\1\0\2\32\2\0\7\32\2\0"+
    "\1\32\3\0\25\32\1\0\2\32\2\0\5\32\1\166"+
    "\1\32\2\0\1\32\3\0\25\32\1\0\2\32\2\0"+
    "\3\32\1\167\3\32\2\0\1\32\3\0\3\32\1\170"+
    "\21\32\1\0\2\32\2\0\6\32\34\0\1\171\2\0"+
    "\1\50\7\0\1\162\2\0\1\162\1\0\26\162\1\0"+
    "\13\162\1\72\1\0\1\72\1\172\1\0\1\72\1\0"+
    "\40\72\1\0\1\73\2\0\1\73\42\0\1\72\1\0"+
    "\1\74\1\172\1\0\1\72\1\0\41\72\1\163\1\72"+
    "\1\172\1\164\1\72\1\0\41\72\1\0\1\72\1\172"+
    "\1\0\1\76\1\0\40\72\1\77\1\100\2\77\1\100"+
    "\1\72\1\100\40\77\5\100\1\0\41\100\1\77\1\173"+
    "\2\77\1\174\1\72\1\100\40\77\1\72\1\0\1\72"+
    "\1\172\1\0\1\102\1\0\40\72\1\175\1\176\1\175"+
    "\1\177\1\100\1\140\1\200\40\175\1\201\1\100\1\77"+
    "\1\201\1\100\1\202\1\203\24\201\1\77\13\201\1\202"+
    "\1\0\1\72\1\204\1\0\1\202\1\162\24\202\1\72"+
    "\13\202\1\0\1\106\2\0\1\106\76\0\1\205\2\0"+
    "\1\110\46\0\1\110\7\0\1\32\2\0\1\32\3\0"+
    "\25\32\1\0\2\32\1\110\1\0\6\32\1\113\1\0"+
    "\1\113\1\206\1\0\1\113\1\0\40\113\1\0\1\114"+
    "\2\0\1\114\42\0\1\113\1\0\1\115\1\206\1\0"+
    "\1\115\1\207\41\113\1\163\1\113\1\206\1\164\1\113"+
    "\1\0\41\113\1\0\1\113\1\206\1\0\1\113\1\0"+
    "\7\113\1\210\30\113\1\211\1\0\1\113\1\212\1\0"+
    "\1\211\1\162\24\211\1\113\13\211\1\121\1\0\2\121"+
    "\1\0\1\121\1\0\41\121\1\0\1\122\1\121\1\0"+
    "\1\121\1\0\40\121\1\213\1\0\1\121\1\213\1\0"+
    "\1\213\1\162\24\213\1\121\13\213\7\124\1\0\32\124"+
    "\1\0\4\124\1\214\1\215\1\214\1\216\1\124\1\214"+
    "\1\217\1\140\32\214\1\140\4\214\10\0\1\220\36\0"+
    "\1\221\2\124\1\221\1\124\2\221\1\162\23\221\1\124"+
    "\6\221\1\162\4\221\34\0\1\222\2\0\1\133\46\0"+
    "\1\133\7\0\1\32\2\0\1\32\3\0\25\32\1\0"+
    "\2\32\1\133\1\0\6\32\5\100\1\0\2\100\1\223"+
    "\36\100\1\203\2\100\1\203\1\100\1\162\25\203\1\100"+
    "\13\203\1\140\1\141\1\140\1\142\1\0\42\140\1\207"+
    "\1\224\2\207\1\225\42\207\1\143\1\226\1\143\1\227"+
    "\1\0\42\143\1\230\1\220\1\0\1\230\3\220\2\230"+
    "\1\231\2\230\1\232\2\230\1\233\2\230\1\234\4\230"+
    "\1\235\4\230\1\220\2\230\2\220\1\230\1\236\4\230"+
    "\1\32\2\0\1\32\3\0\16\32\1\237\6\32\1\0"+
    "\2\32\2\0\7\32\2\0\1\32\3\0\13\32\1\240"+
    "\11\32\1\0\2\32\2\0\7\32\2\0\1\32\3\0"+
    "\20\32\1\241\4\32\1\0\2\32\2\0\7\32\2\0"+
    "\1\32\3\0\2\32\1\242\22\32\1\0\2\32\2\0"+
    "\7\32\2\0\1\32\3\0\17\32\1\243\5\32\1\0"+
    "\2\32\2\0\7\32\2\0\1\32\3\0\2\32\1\244"+
    "\4\32\1\245\6\32\1\246\6\32\1\0\2\32\2\0"+
    "\7\32\2\0\1\32\3\0\7\32\1\151\15\32\1\0"+
    "\2\32\2\0\7\32\2\0\1\32\3\0\12\32\1\247"+
    "\12\32\1\0\2\32\2\0\7\32\2\0\1\32\3\0"+
    "\10\32\1\250\14\32\1\0\2\32\2\0\7\32\2\0"+
    "\1\32\3\0\16\32\1\251\6\32\1\0\2\32\2\0"+
    "\7\32\2\0\1\32\3\0\6\32\1\252\16\32\1\0"+
    "\2\32\2\0\6\32\1\161\2\0\1\161\1\0\2\162"+
    "\24\161\1\253\1\162\2\161\2\162\6\161\1\162\2\0"+
    "\1\162\1\0\26\162\1\254\13\162\2\0\1\163\2\0"+
    "\1\163\42\0\2\163\2\0\1\163\41\0\1\230\1\220"+
    "\1\0\1\230\3\220\2\230\1\255\2\230\1\256\2\230"+
    "\1\257\2\230\1\260\4\230\1\261\4\230\1\220\2\230"+
    "\2\220\1\230\1\236\4\230\1\32\2\0\1\32\3\0"+
    "\20\32\1\262\4\32\1\0\2\32\2\0\7\32\2\0"+
    "\1\32\3\0\2\32\1\263\22\32\1\0\2\32\2\0"+
    "\7\32\2\0\1\32\3\0\10\32\1\264\14\32\1\0"+
    "\2\32\2\0\6\32\2\100\1\173\2\100\1\163\42\100"+
    "\2\173\2\100\1\163\41\100\1\175\1\176\1\175\1\177"+
    "\1\100\1\140\41\175\1\265\1\266\2\265\1\267\1\207"+
    "\41\265\1\200\1\270\1\200\1\271\1\100\1\143\41\200"+
    "\1\201\1\100\1\77\1\201\1\100\1\202\1\203\24\201"+
    "\1\272\13\201\1\202\1\0\1\72\1\204\1\0\1\202"+
    "\1\162\24\202\1\273\13\202\1\203\2\100\1\203\1\100"+
    "\1\162\25\203\1\274\13\203\1\207\1\141\2\207\1\0"+
    "\42\207\1\113\1\0\1\113\1\206\1\0\1\113\1\0"+
    "\16\113\1\275\21\113\1\211\1\0\1\113\1\212\1\0"+
    "\1\211\1\162\24\211\1\276\13\211\1\213\1\0\1\121"+
    "\1\213\1\0\1\213\1\162\24\213\1\277\13\213\1\214"+
    "\1\215\1\214\1\216\1\124\2\214\1\140\32\214\1\140"+
    "\4\214\1\300\1\301\2\300\1\302\2\300\1\207\32\300"+
    "\1\207\4\300\1\217\1\303\1\217\1\304\1\124\2\217"+
    "\1\143\32\217\1\143\4\217\2\220\1\0\37\220\1\305"+
    "\4\220\1\221\2\124\1\221\1\124\2\221\1\162\23\221"+
    "\1\306\6\221\1\162\4\221\2\307\1\100\2\307\1\220"+
    "\3\307\1\310\2\307\1\311\2\307\1\312\2\307\1\313"+
    "\4\307\1\314\12\307\1\100\4\307\1\224\1\0\1\224"+
    "\1\315\1\0\42\224\1\0\1\224\45\0\1\316\1\317"+
    "\2\316\1\225\42\316\1\230\1\220\1\0\1\230\3\220"+
    "\25\230\1\220\2\230\2\220\1\230\1\236\5\230\1\220"+
    "\1\0\1\230\3\220\3\230\1\320\21\230\1\220\2\230"+
    "\2\220\1\230\1\236\5\230\1\220\1\0\1\230\3\220"+
    "\6\230\1\321\1\230\1\322\14\230\1\220\2\230\2\220"+
    "\1\230\1\236\5\230\1\220\1\0\1\230\3\220\7\230"+
    "\1\323\15\230\1\220\2\230\2\220\1\230\1\236\5\230"+
    "\1\220\1\0\1\230\3\220\14\230\1\324\10\230\1\220"+
    "\2\230\2\220\1\230\1\236\5\230\1\220\1\0\1\230"+
    "\3\220\6\230\1\325\16\230\1\220\2\230\2\220\1\230"+
    "\1\236\4\230\1\32\2\0\1\32\3\0\10\32\1\326"+
    "\14\32\1\0\2\32\2\0\7\32\2\0\1\32\3\0"+
    "\2\32\1\327\22\32\1\0\2\32\2\0\7\32\2\0"+
    "\1\32\3\0\4\32\1\330\20\32\1\0\2\32\2\0"+
    "\7\32\2\0\1\32\3\0\3\32\1\331\21\32\1\0"+
    "\2\32\2\0\7\32\2\0\1\32\3\0\15\32\1\332"+
    "\7\32\1\0\2\32\2\0\7\32\2\0\1\32\3\0"+
    "\25\32\1\0\2\32\2\0\4\32\1\333\2\32\2\0"+
    "\1\32\3\0\2\32\1\334\13\32\1\335\6\32\1\0"+
    "\2\32\2\0\7\32\2\0\1\32\3\0\2\32\1\336"+
    "\22\32\1\0\2\32\2\0\7\32\2\0\1\32\3\0"+
    "\10\32\1\337\14\32\1\0\2\32\2\0\7\32\2\0"+
    "\1\32\3\0\25\32\1\0\2\32\2\0\3\32\1\340"+
    "\3\32\2\0\1\32\3\0\2\32\1\341\22\32\1\0"+
    "\2\32\2\0\7\32\2\0\1\32\3\0\21\32\1\342"+
    "\3\32\1\0\2\32\2\0\6\32\1\230\1\220\1\0"+
    "\1\230\3\220\3\230\1\343\21\230\1\220\2\230\2\220"+
    "\1\230\1\236\5\230\1\220\1\0\1\230\3\220\6\230"+
    "\1\344\1\230\1\345\14\230\1\220\2\230\2\220\1\230"+
    "\1\236\5\230\1\220\1\0\1\230\3\220\7\230\1\346"+
    "\15\230\1\220\2\230\2\220\1\230\1\236\5\230\1\220"+
    "\1\0\1\230\3\220\14\230\1\347\10\230\1\220\2\230"+
    "\2\220\1\230\1\236\5\230\1\220\1\0\1\230\3\220"+
    "\6\230\1\350\16\230\1\220\2\230\2\220\1\230\1\236"+
    "\4\230\1\32\2\0\1\32\3\0\4\32\1\351\20\32"+
    "\1\0\2\32\2\0\7\32\2\0\1\32\3\0\3\32"+
    "\1\352\21\32\1\0\2\32\2\0\7\32\2\0\1\32"+
    "\3\0\25\32\1\0\2\32\2\0\3\32\1\353\2\32"+
    "\1\265\1\176\2\265\1\100\1\207\41\265\1\266\1\100"+
    "\1\266\1\354\1\100\1\224\41\266\1\100\1\266\3\100"+
    "\1\0\41\100\1\355\1\356\2\355\1\267\1\316\41\355"+
    "\1\113\1\0\1\113\1\206\1\0\1\113\1\0\2\113"+
    "\1\357\35\113\1\300\1\215\2\300\1\124\2\300\1\207"+
    "\32\300\1\207\4\300\1\301\1\124\1\301\1\360\1\124"+
    "\2\301\1\224\32\301\1\224\4\301\1\124\1\301\5\124"+
    "\1\0\32\124\1\0\4\124\1\361\1\362\2\361\1\302"+
    "\2\361\1\316\32\361\1\316\4\361\2\307\1\100\2\307"+
    "\1\220\34\307\1\100\6\307\1\100\2\307\1\220\4\307"+
    "\1\363\27\307\1\100\6\307\1\100\2\307\1\220\7\307"+
    "\1\364\1\307\1\365\22\307\1\100\6\307\1\100\2\307"+
    "\1\220\10\307\1\366\23\307\1\100\6\307\1\100\2\307"+
    "\1\220\15\307\1\367\16\307\1\100\6\307\1\100\2\307"+
    "\1\220\7\307\1\370\24\307\1\100\4\307\1\0\1\224"+
    "\2\0\1\225\42\0\1\316\1\226\2\316\1\0\42\316"+
    "\1\230\1\220\1\0\1\230\3\220\3\230\1\371\21\230"+
    "\1\220\2\230\2\220\1\230\1\236\5\230\1\220\1\0"+
    "\1\230\3\220\3\230\1\372\21\230\1\220\2\230\2\220"+
    "\1\230\1\236\5\230\1\220\1\0\1\230\3\220\15\230"+
    "\1\373\7\230\1\220\2\230\2\220\1\230\1\236\5\230"+
    "\1\220\1\0\1\230\3\220\12\230\1\374\12\230\1\220"+
    "\2\230\2\220\1\230\1\236\5\230\1\220\1\0\1\230"+
    "\3\220\2\230\1\375\22\230\1\220\2\230\2\220\1\230"+
    "\1\236\5\230\1\220\1\0\1\230\3\220\21\230\1\376"+
    "\3\230\1\220\2\230\2\220\1\230\1\236\4\230\1\32"+
    "\2\0\1\32\3\0\12\32\1\377\12\32\1\0\2\32"+
    "\2\0\7\32\2\0\1\32\3\0\3\32\1\u0100\21\32"+
    "\1\0\2\32\2\0\7\32\2\0\1\32\3\0\3\32"+
    "\1\u0101\21\32\1\0\2\32\2\0\7\32\2\0\1\32"+
    "\3\0\22\32\1\u0102\2\32\1\0\2\32\2\0\7\32"+
    "\2\0\1\32\3\0\25\32\1\0\2\32\2\0\4\32"+
    "\1\u0103\2\32\2\0\1\32\3\0\2\32\1\u0104\22\32"+
    "\1\0\2\32\2\0\7\32\2\0\1\32\3\0\12\32"+
    "\1\u0105\12\32\1\0\2\32\2\0\7\32\2\0\1\32"+
    "\3\0\7\32\1\u0106\15\32\1\0\2\32\2\0\7\32"+
    "\2\0\1\32\3\0\6\32\1\u0107\16\32\1\0\2\32"+
    "\2\0\7\32\2\0\1\32\3\0\12\32\1\u0108\12\32"+
    "\1\0\2\32\2\0\7\32\2\0\1\32\3\0\14\32"+
    "\1\u0109\10\32\1\0\2\32\2\0\6\32\1\230\1\220"+
    "\1\0\1\230\3\220\3\230\1\u010a\21\230\1\220\2\230"+
    "\2\220\1\230\1\236\5\230\1\220\1\0\1\230\3\220"+
    "\3\230\1\u010b\21\230\1\220\2\230\2\220\1\230\1\236"+
    "\5\230\1\220\1\0\1\230\3\220\15\230\1\u010c\7\230"+
    "\1\220\2\230\2\220\1\230\1\236\5\230\1\220\1\0"+
    "\1\230\3\220\12\230\1\u010d\12\230\1\220\2\230\2\220"+
    "\1\230\1\236\5\230\1\220\1\0\1\230\3\220\2\230"+
    "\1\u010e\22\230\1\220\2\230\2\220\1\230\1\236\5\230"+
    "\1\220\1\0\1\230\3\220\21\230\1\u010f\3\230\1\220"+
    "\2\230\2\220\1\230\1\236\4\230\1\32\2\0\1\32"+
    "\3\0\3\32\1\u0110\21\32\1\0\2\32\2\0\7\32"+
    "\2\0\1\32\3\0\3\32\1\u0111\21\32\1\0\2\32"+
    "\2\0\7\32\2\0\1\32\3\0\6\32\1\u0112\16\32"+
    "\1\0\2\32\2\0\6\32\1\100\1\266\2\100\1\267"+
    "\1\0\41\100\1\355\1\270\2\355\1\100\1\316\41\355"+
    "\1\113\1\0\1\113\1\206\1\0\1\113\1\0\12\113"+
    "\1\u0113\25\113\1\124\1\301\2\124\1\302\2\124\1\0"+
    "\32\124\1\0\4\124\1\361\1\303\2\361\1\124\2\361"+
    "\1\316\32\361\1\316\4\361\2\307\1\100\2\307\1\220"+
    "\4\307\1\u0114\27\307\1\100\6\307\1\100\2\307\1\220"+
    "\4\307\1\u0115\27\307\1\100\6\307\1\100\2\307\1\220"+
    "\16\307\1\u0116\15\307\1\100\6\307\1\100\2\307\1\220"+
    "\13\307\1\u0117\20\307\1\100\6\307\1\100\2\307\1\220"+
    "\3\307\1\u0118\30\307\1\100\6\307\1\100\2\307\1\220"+
    "\22\307\1\u0119\11\307\1\100\4\307\1\230\1\220\1\0"+
    "\1\230\3\220\4\230\1\u011a\20\230\1\220\2\230\2\220"+
    "\1\230\1\236\5\230\1\220\1\0\1\230\3\220\7\230"+
    "\1\u011b\15\230\1\220\2\230\2\220\1\230\1\236\5\230"+
    "\1\220\1\0\1\230\3\220\16\230\1\u011c\6\230\1\220"+
    "\2\230\2\220\1\230\1\236\5\230\1\220\1\0\1\230"+
    "\3\220\4\230\1\u011d\20\230\1\220\2\230\2\220\1\230"+
    "\1\236\5\230\1\220\1\0\1\230\3\220\15\230\1\u011e"+
    "\7\230\1\220\2\230\2\220\1\230\1\236\5\230\1\220"+
    "\1\0\1\230\3\220\14\230\1\u011f\10\230\1\220\2\230"+
    "\2\220\1\230\1\236\4\230\1\32\2\0\1\32\3\0"+
    "\21\32\1\u0120\3\32\1\0\2\32\2\0\7\32\2\0"+
    "\1\32\3\0\10\32\1\u0121\14\32\1\0\2\32\2\0"+
    "\7\32\2\0\1\32\3\0\16\32\1\u0122\6\32\1\0"+
    "\2\32\2\0\7\32\2\0\1\32\3\0\12\32\1\u0123"+
    "\12\32\1\0\2\32\2\0\7\32\2\0\1\32\3\0"+
    "\2\32\1\u0124\22\32\1\0\2\32\2\0\7\32\2\0"+
    "\1\32\3\0\21\32\1\u0125\3\32\1\0\2\32\2\0"+
    "\7\32\2\0\1\32\3\0\10\32\1\u0126\14\32\1\0"+
    "\2\32\2\0\6\32\1\230\1\220\1\0\1\230\3\220"+
    "\4\230\1\u0127\20\230\1\220\2\230\2\220\1\230\1\236"+
    "\5\230\1\220\1\0\1\230\3\220\7\230\1\u0128\15\230"+
    "\1\220\2\230\2\220\1\230\1\236\5\230\1\220\1\0"+
    "\1\230\3\220\16\230\1\u0129\6\230\1\220\2\230\2\220"+
    "\1\230\1\236\5\230\1\220\1\0\1\230\3\220\4\230"+
    "\1\u012a\20\230\1\220\2\230\2\220\1\230\1\236\5\230"+
    "\1\220\1\0\1\230\3\220\15\230\1\u012b\7\230\1\220"+
    "\2\230\2\220\1\230\1\236\5\230\1\220\1\0\1\230"+
    "\3\220\14\230\1\u012c\10\230\1\220\2\230\2\220\1\230"+
    "\1\236\4\230\1\32\2\0\1\32\3\0\21\32\1\u012d"+
    "\3\32\1\0\2\32\2\0\7\32\2\0\1\32\3\0"+
    "\10\32\1\u012e\14\32\1\0\2\32\2\0\7\32\2\0"+
    "\1\32\3\0\21\32\1\u012f\3\32\1\0\2\32\2\0"+
    "\6\32\2\307\1\100\2\307\1\220\5\307\1\u0130\26\307"+
    "\1\100\6\307\1\100\2\307\1\220\10\307\1\u0131\23\307"+
    "\1\100\6\307\1\100\2\307\1\220\17\307\1\u0132\14\307"+
    "\1\100\6\307\1\100\2\307\1\220\5\307\1\u0133\26\307"+
    "\1\100\6\307\1\100\2\307\1\220\16\307\1\u0134\15\307"+
    "\1\100\6\307\1\100\2\307\1\220\15\307\1\u0135\16\307"+
    "\1\100\4\307\1\230\1\220\1\0\1\230\3\220\3\230"+
    "\1\u0136\21\230\1\220\2\230\2\220\1\230\1\236\5\230"+
    "\1\220\1\0\1\230\3\220\10\230\1\u0137\14\230\1\220"+
    "\2\230\2\220\1\230\1\236\5\230\1\220\1\0\1\230"+
    "\3\220\17\230\1\u0138\5\230\1\220\2\230\2\220\1\230"+
    "\1\236\5\230\1\220\1\0\1\230\3\220\15\230\1\u0139"+
    "\7\230\1\220\2\230\2\220\1\230\1\236\5\230\1\220"+
    "\1\0\1\230\3\220\13\230\1\u013a\11\230\1\220\2\230"+
    "\2\220\1\230\1\236\4\230\1\32\2\0\1\32\3\0"+
    "\16\32\1\u013b\6\32\1\0\2\32\2\0\7\32\2\0"+
    "\1\32\3\0\2\32\1\u013c\22\32\1\0\2\32\2\0"+
    "\7\32\2\0\1\32\3\0\2\32\1\u013d\22\32\1\0"+
    "\2\32\2\0\7\32\2\0\1\32\3\0\7\32\1\u013e"+
    "\15\32\1\0\2\32\2\0\6\32\1\230\1\220\1\0"+
    "\1\230\3\220\3\230\1\u013f\21\230\1\220\2\230\2\220"+
    "\1\230\1\236\5\230\1\220\1\0\1\230\3\220\10\230"+
    "\1\u0140\14\230\1\220\2\230\2\220\1\230\1\236\5\230"+
    "\1\220\1\0\1\230\3\220\17\230\1\u0141\5\230\1\220"+
    "\2\230\2\220\1\230\1\236\5\230\1\220\1\0\1\230"+
    "\3\220\15\230\1\u0142\7\230\1\220\2\230\2\220\1\230"+
    "\1\236\5\230\1\220\1\0\1\230\3\220\13\230\1\u0143"+
    "\11\230\1\220\2\230\2\220\1\230\1\236\4\230\1\32"+
    "\2\0\1\32\3\0\16\32\1\u0144\6\32\1\0\2\32"+
    "\2\0\7\32\2\0\1\32\3\0\2\32\1\u0145\22\32"+
    "\1\0\2\32\2\0\6\32\2\307\1\100\2\307\1\220"+
    "\4\307\1\u0146\27\307\1\100\6\307\1\100\2\307\1\220"+
    "\11\307\1\u0147\22\307\1\100\6\307\1\100\2\307\1\220"+
    "\20\307\1\u0148\13\307\1\100\6\307\1\100\2\307\1\220"+
    "\16\307\1\u0149\15\307\1\100\6\307\1\100\2\307\1\220"+
    "\14\307\1\u014a\17\307\1\100\4\307\1\230\1\220\1\0"+
    "\1\230\3\220\7\230\1\u014b\15\230\1\220\2\230\2\220"+
    "\1\230\1\236\5\230\1\220\1\0\1\230\3\220\6\230"+
    "\1\u014c\16\230\1\220\2\230\2\220\1\230\1\236\5\230"+
    "\1\220\1\0\1\230\3\220\22\230\1\u014d\2\230\1\220"+
    "\2\230\2\220\1\230\1\236\4\230\1\32\2\0\1\32"+
    "\3\0\2\32\1\u014e\22\32\1\0\2\32\2\0\7\32"+
    "\2\0\1\32\3\0\2\32\1\u014f\22\32\1\0\2\32"+
    "\2\0\6\32\1\230\1\220\1\0\1\230\3\220\7\230"+
    "\1\u0150\15\230\1\220\2\230\2\220\1\230\1\236\5\230"+
    "\1\220\1\0\1\230\3\220\6\230\1\u0151\16\230\1\220"+
    "\2\230\2\220\1\230\1\236\5\230\1\220\1\0\1\230"+
    "\3\220\22\230\1\u0152\2\230\1\220\2\230\2\220\1\230"+
    "\1\236\4\230\1\32\2\0\1\32\3\0\2\32\1\u0153"+
    "\22\32\1\0\2\32\2\0\6\32\2\307\1\100\2\307"+
    "\1\220\10\307\1\u0154\23\307\1\100\6\307\1\100\2\307"+
    "\1\220\7\307\1\u0155\24\307\1\100\6\307\1\100\2\307"+
    "\1\220\23\307\1\u0156\10\307\1\100\4\307\1\230\1\220"+
    "\1\0\1\230\3\220\11\230\1\u0157\13\230\1\220\2\230"+
    "\2\220\1\230\1\236\5\230\1\220\1\0\1\230\3\220"+
    "\3\230\1\u0158\21\230\1\220\2\230\2\220\1\230\1\236"+
    "\5\230\1\220\1\0\1\230\3\220\23\230\1\u0159\1\230"+
    "\1\220\2\230\2\220\1\230\1\236\5\230\1\220\1\0"+
    "\1\230\3\220\11\230\1\u015a\13\230\1\220\2\230\2\220"+
    "\1\230\1\236\5\230\1\220\1\0\1\230\3\220\3\230"+
    "\1\u015b\21\230\1\220\2\230\2\220\1\230\1\236\5\230"+
    "\1\220\1\0\1\230\3\220\23\230\1\u015c\1\230\1\220"+
    "\2\230\2\220\1\230\1\236\4\230\2\307\1\100\2\307"+
    "\1\220\12\307\1\u015d\21\307\1\100\6\307\1\100\2\307"+
    "\1\220\4\307\1\u015e\27\307\1\100\6\307\1\100\2\307"+
    "\1\220\24\307\1\u015f\7\307\1\100\4\307\1\230\1\220"+
    "\1\0\1\230\3\220\16\230\1\u0160\6\230\1\220\2\230"+
    "\2\220\1\230\1\236\5\230\1\220\1\0\1\230\3\220"+
    "\13\230\1\u0161\11\230\1\220\2\230\2\220\1\230\1\236"+
    "\5\230\1\220\1\0\1\230\3\220\16\230\1\u0162\6\230"+
    "\1\220\2\230\2\220\1\230\1\236\5\230\1\220\1\0"+
    "\1\230\3\220\13\230\1\u0163\11\230\1\220\2\230\2\220"+
    "\1\230\1\236\4\230\2\307\1\100\2\307\1\220\17\307"+
    "\1\u0164\14\307\1\100\6\307\1\100\2\307\1\220\14\307"+
    "\1\u0165\17\307\1\100\4\307\1\230\1\220\1\0\1\230"+
    "\3\220\21\230\1\u0166\3\230\1\220\2\230\2\220\1\230"+
    "\1\236\5\230\1\220\1\0\1\230\3\220\21\230\1\u0167"+
    "\3\230\1\220\2\230\2\220\1\230\1\236\4\230\2\307"+
    "\1\100\2\307\1\220\22\307\1\u0168\11\307\1\100\4\307";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11310];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\21\0\4\1\4\0\16\1\1\11\16\1\1\11\1\1"+
    "\1\11\16\1\1\11\16\1\1\11\1\1\1\11\1\1"+
    "\1\11\5\1\1\11\20\1\1\0\7\1\1\0\11\1"+
    "\3\0\3\1\1\0\5\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\11\25\1\1\11\30\1\1\11\7\1\1\0"+
    "\233\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MakefileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MakefileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case PREREQUISITES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 361: break;
            case INCLUDES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 362: break;
            case EXPORT: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 363: break;
            case EXPORTVAR: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 364: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return FUNCTION_PARAM_TEXT;
            } 
            // fall through
          case 60: break;
          case 2: 
            { return IDENTIFIER;
            } 
            // fall through
          case 61: break;
          case 3: 
            { return EOL;
            } 
            // fall through
          case 62: break;
          case 4: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 63: break;
          case 5: 
            { return COMMENT;
            } 
            // fall through
          case 64: break;
          case 6: 
            { yybegin(PREREQUISITES); return COLON;
            } 
            // fall through
          case 65: break;
          case 7: 
            { yybegin(SOURCE); return ASSIGN;
            } 
            // fall through
          case 66: break;
          case 8: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 67: break;
          case 9: 
            { yybegin(SOURCE); return TAB;
            } 
            // fall through
          case 68: break;
          case 10: 
            { yybegin(YYINITIAL); return EOL;
            } 
            // fall through
          case 69: break;
          case 11: 
            { return COLON;
            } 
            // fall through
          case 70: break;
          case 12: 
            { yybegin(SOURCE_FORCED); return SEMICOLON;
            } 
            // fall through
          case 71: break;
          case 13: 
            { return PIPE;
            } 
            // fall through
          case 72: break;
          case 14: 
            { yypushback(yylength()); yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 73: break;
          case 15: 
            { return LINE;
            } 
            // fall through
          case 74: break;
          case 16: 
            { yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 75: break;
          case 17: 
            { return TAB;
            } 
            // fall through
          case 76: break;
          case 18: 
            { yybegin(DEFINEBODY); return WHITE_SPACE;
            } 
            // fall through
          case 77: break;
          case 19: 
            { return ASSIGN;
            } 
            // fall through
          case 78: break;
          case 20: 
            { return VARIABLE_VALUE_LINE;
            } 
            // fall through
          case 79: break;
          case 21: 
            { yybegin(YYINITIAL); return CONDITION;
            } 
            // fall through
          case 80: break;
          case 22: 
            { yybegin(YYINITIAL); return FUNCTION_END;
            } 
            // fall through
          case 81: break;
          case 23: 
            { yybegin(PREREQUISITES); return FUNCTION_END;
            } 
            // fall through
          case 82: break;
          case 24: 
            { yybegin(EXPORTVAR); return ASSIGN;
            } 
            // fall through
          case 83: break;
          case 25: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 84: break;
          case 26: 
            { yybegin(PREREQUISITES); return DOUBLECOLON;
            } 
            // fall through
          case 85: break;
          case 27: 
            { return SPLIT;
            } 
            // fall through
          case 86: break;
          case 28: 
            { return DOUBLECOLON;
            } 
            // fall through
          case 87: break;
          case 29: 
            { return VARIABLE_USAGE;
            } 
            // fall through
          case 88: break;
          case 30: 
            { return MACRO;
            } 
            // fall through
          case 89: break;
          case 31: 
            { yybegin(ELSE); return KEYWORD_ELSE;
            } 
            // fall through
          case 90: break;
          case 32: 
            { yybegin(CONDITIONALS); return KEYWORD_IFEQ;
            } 
            // fall through
          case 91: break;
          case 33: 
            { return KEYWORD_ENDIF;
            } 
            // fall through
          case 92: break;
          case 34: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNEQ;
            } 
            // fall through
          case 93: break;
          case 35: 
            { yybegin(CONDITIONALS); return KEYWORD_IFDEF;
            } 
            // fall through
          case 94: break;
          case 36: 
            { yybegin(INCLUDES); return KEYWORD_VPATH;
            } 
            // fall through
          case 95: break;
          case 37: 
            { yybegin(YYINITIAL); return KEYWORD_ENDEF;
            } 
            // fall through
          case 96: break;
          case 38: 
            { yybegin(FUNCTION); return FUNCTION_INFO;
            } 
            // fall through
          case 97: break;
          case 39: 
            { yybegin(EXPORT); return KEYWORD_EXPORT;
            } 
            // fall through
          case 98: break;
          case 40: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNDEF;
            } 
            // fall through
          case 99: break;
          case 41: 
            { yybegin(DEFINE); return KEYWORD_DEFINE;
            } 
            // fall through
          case 100: break;
          case 42: 
            { yybegin(FUNCTION_PREREQ); return FUNCTION_INFO;
            } 
            // fall through
          case 101: break;
          case 43: 
            { yybegin(YYINITIAL); return KEYWORD_EXPORT;
            } 
            // fall through
          case 102: break;
          case 44: 
            { yybegin(FUNCTION); return FUNCTION_ERROR;
            } 
            // fall through
          case 103: break;
          case 45: 
            { yybegin(FUNCTION); return FUNCTION_SHELL;
            } 
            // fall through
          case 104: break;
          case 46: 
            { yybegin(INCLUDES); return KEYWORD_INCLUDE;
            } 
            // fall through
          case 105: break;
          case 47: 
            { return KEYWORD_PRIVATE;
            } 
            // fall through
          case 106: break;
          case 48: 
            { yybegin(FUNCTION_PREREQ); return FUNCTION_ERROR;
            } 
            // fall through
          case 107: break;
          case 49: 
            { yybegin(FUNCTION_PREREQ); return FUNCTION_SHELL;
            } 
            // fall through
          case 108: break;
          case 50: 
            { yybegin(YYINITIAL); return KEYWORD_PRIVATE;
            } 
            // fall through
          case 109: break;
          case 51: 
            { return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 110: break;
          case 52: 
            { yybegin(INCLUDES); return KEYWORD_UNDEFINE;
            } 
            // fall through
          case 111: break;
          case 53: 
            { yybegin(YYINITIAL); return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 112: break;
          case 54: 
            { yybegin(FUNCTION); return FUNCTION_WARNING;
            } 
            // fall through
          case 113: break;
          case 55: 
            { yybegin(FUNCTION_PREREQ); return FUNCTION_WARNING;
            } 
            // fall through
          case 114: break;
          case 56: 
            { yybegin(FUNCTION); return FUNCTION_WILDCARD;
            } 
            // fall through
          case 115: break;
          case 57: 
            { yybegin(FUNCTION_PREREQ); return FUNCTION_WILDCARD;
            } 
            // fall through
          case 116: break;
          case 58: 
            { yybegin(FUNCTION); return FUNCTION_PATHSUBST;
            } 
            // fall through
          case 117: break;
          case 59: 
            { yybegin(FUNCTION_PREREQ); return FUNCTION_PATHSUBST;
            } 
            // fall through
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
