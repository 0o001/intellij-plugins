/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package name.kropp.intellij.makefile;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static name.kropp.intellij.makefile.psi.MakefileTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>MakefileLexer.flex</tt>
 */
public class _MakefileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ELSE = 2;
  public static final int INCLUDES = 4;
  public static final int SOURCE = 6;
  public static final int SOURCE_FORCED = 8;
  public static final int DEFINE = 10;
  public static final int DEFINEBODY = 12;
  public static final int CONDITIONALS = 14;
  public static final int FUNCTION = 16;
  public static final int EXPORT = 18;
  public static final int EXPORTVAR = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4,  5,  6,  7,  6,  8,  9, 10, 11, 12, 13, 14, 
    15, 16, 17, 18, 19, 20
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\1\2\0\1\4\22\0\1\2\1\43\1\0\1\6\1\45\3\0\1\46\1\47\1\0\1\44\1"+
    "\0\1\30\14\0\1\37\1\40\1\0\1\42\1\0\1\43\1\36\33\0\1\3\4\0\1\13\1\24\1\34"+
    "\1\27\1\7\1\17\1\16\1\21\1\15\1\33\1\0\1\22\1\32\1\14\1\11\1\26\1\52\1\10"+
    "\1\20\1\25\1\23\1\35\1\12\1\31\2\0\1\50\1\41\1\51\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\2\1\4\0\1\2\1\3\1\4\1\2\1\4"+
    "\1\5\23\2\1\6\1\7\1\10\1\11\1\12\1\2"+
    "\1\12\1\13\1\14\1\2\1\15\1\16\1\15\1\12"+
    "\1\17\1\20\1\4\1\12\1\4\3\15\1\21\1\5"+
    "\1\15\1\17\1\22\1\12\1\23\1\12\1\2\1\24"+
    "\1\4\1\24\1\12\2\24\1\25\1\4\1\25\1\1"+
    "\1\5\21\1\1\12\1\1\1\12\1\26\1\12\1\2"+
    "\1\12\3\15\1\2\2\27\3\5\1\30\6\2\1\31"+
    "\11\2\1\31\24\2\1\32\1\33\1\0\1\2\1\0"+
    "\1\2\1\0\2\15\3\5\1\30\1\15\1\17\1\15"+
    "\3\0\1\5\2\24\1\0\1\25\3\5\1\30\3\1"+
    "\1\31\10\1\1\31\17\1\1\0\1\1\1\0\1\34"+
    "\3\15\1\34\1\2\1\5\1\0\2\30\13\2\1\31"+
    "\33\2\1\35\2\36\1\2\2\5\1\15\2\30\3\36"+
    "\1\24\2\36\2\5\1\1\2\30\31\1\1\36\1\15"+
    "\1\36\2\15\2\0\2\30\1\2\1\37\2\2\1\31"+
    "\7\2\1\40\20\2\1\0\1\36\1\15\2\30\1\24"+
    "\1\1\2\30\1\31\16\1\2\15\1\36\1\41\11\2"+
    "\1\42\1\2\1\43\12\2\1\44\1\36\1\45\15\1"+
    "\1\36\1\46\5\2\1\47\1\2\1\31\4\2\1\50"+
    "\4\1\1\31\2\1\1\2\1\51\2\2\1\52\1\1"+
    "\1\53\1\2\1\54\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[448];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd"+
    "\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535"+
    "\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d"+
    "\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u0387"+
    "\0\u0387\0\u07e5\0\u0810\0\u083b\0\u0866\0\u07e5\0\u0891\0\u08bc"+
    "\0\u07e5\0\u08e7\0\u0912\0\u07e5\0\u093d\0\u0968\0\u0993\0\u09be"+
    "\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16"+
    "\0\u0b41\0\u0b6c\0\u07e5\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43"+
    "\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b"+
    "\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3"+
    "\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b"+
    "\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u07e5\0\u1122\0\u114d\0\u1178"+
    "\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5\0\u07e5"+
    "\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd"+
    "\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\u1555"+
    "\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad"+
    "\0\u16d8\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da\0\u1805"+
    "\0\u1830\0\u185b\0\u1886\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u0810"+
    "\0\u195d\0\u1988\0\u19b3\0\u19de\0\u1a09\0\u093d\0\u1a34\0\u1a5f"+
    "\0\u1a8a\0\u0a3f\0\u1ab5\0\u1ae0\0\u1b0b\0\u1b36\0\u1b61\0\u1b36"+
    "\0\u0b97\0\u0bed\0\u1b8c\0\u1bb7\0\u1be2\0\u1be2\0\u1c0d\0\u1c38"+
    "\0\u0d70\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a\0\u1d65"+
    "\0\u1d90\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c\0\u1e67\0\u1e92\0\u0d70"+
    "\0\u1ebd\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69\0\u1f94\0\u1fbf\0\u1fea"+
    "\0\u2015\0\u2040\0\u206b\0\u2096\0\u20c1\0\u20ec\0\u2117\0\u195d"+
    "\0\u2142\0\u1122\0\u195d\0\u216d\0\u2198\0\u21c3\0\u21ee\0\u2219"+
    "\0\u2244\0\u226f\0\u07e5\0\u229a\0\u22c5\0\u22f0\0\u231b\0\u2346"+
    "\0\u2371\0\u239c\0\u23c7\0\u23f2\0\u241d\0\u2448\0\u2473\0\u0387"+
    "\0\u249e\0\u24c9\0\u24f4\0\u251f\0\u254a\0\u2575\0\u25a0\0\u25cb"+
    "\0\u25f6\0\u2621\0\u264c\0\u2677\0\u26a2\0\u26cd\0\u26f8\0\u2723"+
    "\0\u274e\0\u2779\0\u27a4\0\u27cf\0\u27fa\0\u2825\0\u2850\0\u287b"+
    "\0\u28a6\0\u28d1\0\u28fc\0\u07e5\0\u0387\0\u07e5\0\u2927\0\u2952"+
    "\0\u297d\0\u29a8\0\u0a3f\0\u29d3\0\u0a14\0\u093d\0\u0a3f\0\u29fe"+
    "\0\u0bed\0\u0cef\0\u2a29\0\u2a54\0\u2a7f\0\u0d70\0\u2aaa\0\u2ad5"+
    "\0\u2b00\0\u2b2b\0\u2b56\0\u2b81\0\u2bac\0\u2bd7\0\u2c02\0\u2c2d"+
    "\0\u2c58\0\u2c83\0\u2cae\0\u2cd9\0\u2d04\0\u2d2f\0\u2d5a\0\u2d85"+
    "\0\u2db0\0\u2ddb\0\u2e06\0\u2e31\0\u2e5c\0\u2e87\0\u2eb2\0\u2edd"+
    "\0\u0d70\0\u2f08\0\u11a3\0\u2f33\0\u21ee\0\u2f5e\0\u2f89\0\u2fb4"+
    "\0\u2244\0\u2fdf\0\u0387\0\u300a\0\u3035\0\u3060\0\u308b\0\u30b6"+
    "\0\u30e1\0\u310c\0\u3137\0\u3162\0\u318d\0\u0387\0\u31b8\0\u31e3"+
    "\0\u320e\0\u3239\0\u3264\0\u328f\0\u32ba\0\u32e5\0\u3310\0\u333b"+
    "\0\u3366\0\u3391\0\u33bc\0\u33e7\0\u3412\0\u343d\0\u3468\0\u2219"+
    "\0\u3493\0\u34be\0\u297d\0\u34e9\0\u3514\0\u353f\0\u2a54\0\u356a"+
    "\0\u3595\0\u35c0\0\u35eb\0\u3616\0\u3641\0\u366c\0\u3697\0\u36c2"+
    "\0\u36ed\0\u3718\0\u3743\0\u376e\0\u3799\0\u37c4\0\u37ef\0\u381a"+
    "\0\u2f08\0\u0387\0\u3845\0\u3870\0\u389b\0\u38c6\0\u38f1\0\u391c"+
    "\0\u3947\0\u3972\0\u399d\0\u0387\0\u39c8\0\u0387\0\u39f3\0\u3a1e"+
    "\0\u3a49\0\u3a74\0\u3a9f\0\u3aca\0\u3af5\0\u3b20\0\u3b4b\0\u3b76"+
    "\0\u0387\0\u2f5e\0\u0bed\0\u3ba1\0\u3bcc\0\u3bf7\0\u3c22\0\u3c4d"+
    "\0\u3c78\0\u3ca3\0\u3cce\0\u3cf9\0\u3d24\0\u3d4f\0\u3d7a\0\u3da5"+
    "\0\u37ef\0\u0387\0\u3dd0\0\u3dfb\0\u3e26\0\u3e51\0\u3e7c\0\u0387"+
    "\0\u3ea7\0\u3ed2\0\u3efd\0\u3f28\0\u3f53\0\u3f7e\0\u0387\0\u3fa9"+
    "\0\u3fd4\0\u3fff\0\u402a\0\u4055\0\u4080\0\u40ab\0\u40d6\0\u0387"+
    "\0\u4101\0\u412c\0\u0387\0\u4157\0\u0387\0\u4182\0\u0387\0\u41ad";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[448];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\26\1\27\1\30\1\31\1\27\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\26\1\46\1\47\1\50\1\26\1\51\1\52"+
    "\1\53\2\26\1\54\1\55\1\56\1\26\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\26\1\66\4\26"+
    "\1\27\1\30\1\31\1\27\1\67\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\26\1\46\1\47\1\50\1\26\1\51\1\52\1\53"+
    "\2\26\1\54\1\55\1\56\1\70\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\26\1\66\3\26\1\71"+
    "\1\72\1\30\1\71\1\72\1\71\1\33\45\71\1\72"+
    "\1\30\1\71\1\72\1\71\1\33\27\71\1\73\14\71"+
    "\1\26\1\72\1\30\1\26\1\72\1\32\1\33\30\26"+
    "\1\74\2\26\2\74\1\26\1\74\1\26\1\74\4\26"+
    "\1\72\1\30\1\26\1\72\1\32\1\33\27\26\1\70"+
    "\1\74\2\26\2\74\1\26\1\74\1\26\1\74\3\26"+
    "\1\75\1\76\1\77\1\100\1\76\1\101\1\33\44\75"+
    "\1\102\1\103\1\102\1\104\1\103\1\105\1\106\27\102"+
    "\1\107\14\102\1\75\1\76\1\77\1\100\1\76\1\105"+
    "\1\33\27\75\1\110\14\75\1\26\1\111\1\30\1\26"+
    "\1\111\1\32\1\33\30\26\1\112\2\26\1\113\1\114"+
    "\1\115\1\74\1\26\1\74\4\26\1\111\1\30\1\26"+
    "\1\111\1\32\1\33\27\26\1\70\1\112\2\26\1\113"+
    "\1\114\1\115\1\74\1\26\1\74\3\26\1\116\1\117"+
    "\1\120\1\121\1\117\1\120\1\33\1\122\44\116\1\117"+
    "\1\120\1\121\1\117\1\120\1\33\1\122\26\116\1\123"+
    "\14\116\1\124\1\76\1\125\1\124\1\76\1\124\1\33"+
    "\45\124\1\76\1\125\1\124\1\76\1\124\1\33\27\124"+
    "\1\126\14\124\6\127\1\130\1\131\1\132\1\133\1\134"+
    "\1\135\1\136\1\137\1\140\1\141\1\142\1\127\1\143"+
    "\1\127\1\144\1\127\1\145\1\146\3\127\1\147\1\150"+
    "\1\151\7\127\1\152\1\127\1\66\11\127\1\130\1\131"+
    "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141"+
    "\1\142\1\127\1\143\1\127\1\144\1\127\1\145\1\146"+
    "\3\127\1\147\1\150\1\151\1\153\6\127\1\152\1\127"+
    "\1\66\3\127\1\26\1\72\1\30\1\26\1\72\1\32"+
    "\1\33\30\26\1\154\2\26\1\155\1\156\1\157\1\160"+
    "\1\26\1\74\3\26\1\161\2\103\1\161\1\103\1\32"+
    "\1\106\27\161\1\162\1\103\2\161\2\103\1\161\1\163"+
    "\1\161\1\103\3\161\1\75\1\72\1\77\1\100\1\72"+
    "\1\101\1\33\44\75\1\102\1\103\1\102\1\104\1\103"+
    "\1\101\1\106\27\102\1\107\14\102\1\26\2\0\1\26"+
    "\3\0\30\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\3\26\1\0\1\27\2\0\1\27\50\0\1\30"+
    "\50\0\1\26\1\165\1\0\1\26\1\166\2\0\30\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\3\26"+
    "\5\0\1\32\45\0\1\167\1\170\1\167\1\171\1\0"+
    "\1\167\1\172\44\167\1\26\2\0\1\26\3\0\1\26"+
    "\1\173\3\26\1\174\5\26\1\175\6\26\1\176\3\26"+
    "\1\177\1\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\1\200\27\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\1\26\1\201\24\26\1\202\1\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\2\26\1\203\1\26\1\204\1\26\1\205"+
    "\21\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\5\26\1\206\7\26\1\207"+
    "\2\26\1\210\7\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\2\26\1\211"+
    "\25\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\5\26\1\212\2\26\1\213"+
    "\17\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\14\26\1\214\13\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\2\26\1\215\3\26\1\216\4\26\1\217"+
    "\14\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\2\26\1\220\3\26\1\221"+
    "\3\26\1\222\1\26\1\223\1\26\1\224\11\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\4\26\1\225\23\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\5\26\1\226\22\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\4\26\1\227"+
    "\23\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\1\26\1\230\2\26\1\231"+
    "\23\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\1\232\5\26\1\233\21\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\6\26\1\221\21\26\1\0\2\26"+
    "\2\0\1\26\1\164\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\2\26\1\234\25\26\1\0\2\26\2\0\1\26"+
    "\1\164\1\26\1\0\4\26\2\0\1\26\3\0\4\26"+
    "\1\235\23\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\4\26\1\236\12\26"+
    "\1\237\10\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\3\26\37\0\1\240\2\0\1\62\125\0\1\62"+
    "\10\0\1\26\2\0\1\26\3\0\30\26\1\0\2\26"+
    "\1\62\1\0\1\26\1\164\1\26\1\0\3\26\46\0"+
    "\1\241\1\0\1\242\7\0\1\67\45\0\1\243\2\0"+
    "\1\243\1\0\2\244\27\243\1\26\1\244\2\243\2\244"+
    "\1\243\1\245\1\243\1\244\3\243\1\0\1\72\2\0"+
    "\1\72\46\0\1\244\2\0\1\244\1\0\31\244\1\0"+
    "\14\244\1\75\1\0\1\75\1\246\1\0\1\75\1\0"+
    "\44\75\1\0\1\76\2\0\1\76\46\0\1\75\1\0"+
    "\1\77\1\246\1\0\1\75\1\0\45\75\1\165\1\75"+
    "\1\246\1\166\1\75\1\0\45\75\1\0\1\75\1\246"+
    "\1\0\1\101\1\0\44\75\1\102\1\103\2\102\1\103"+
    "\1\75\1\103\44\102\5\103\1\0\45\103\1\102\1\247"+
    "\2\102\1\250\1\75\1\103\44\102\1\75\1\0\1\75"+
    "\1\246\1\0\1\105\1\0\44\75\1\251\1\252\1\251"+
    "\1\253\1\103\1\167\1\254\44\251\1\255\1\103\1\102"+
    "\1\255\1\103\1\256\1\257\27\255\1\102\14\255\1\256"+
    "\1\0\1\75\1\260\1\0\1\256\1\244\27\256\1\75"+
    "\14\256\1\0\1\111\2\0\1\111\105\0\1\261\2\0"+
    "\1\113\52\0\1\113\10\0\1\26\2\0\1\26\3\0"+
    "\30\26\1\0\2\26\1\113\1\0\1\26\1\164\1\26"+
    "\1\0\3\26\1\116\1\0\1\116\1\262\1\0\1\116"+
    "\1\0\44\116\1\0\1\117\2\0\1\117\46\0\1\116"+
    "\1\0\1\120\1\262\1\0\1\120\1\263\45\116\1\165"+
    "\1\116\1\262\1\166\1\116\1\0\45\116\1\0\1\116"+
    "\1\262\1\0\1\116\1\0\5\116\1\264\36\116\1\265"+
    "\1\0\1\116\1\266\1\0\1\265\1\244\27\265\1\116"+
    "\14\265\1\124\1\0\2\124\1\0\1\124\1\0\45\124"+
    "\1\0\1\125\1\124\1\0\1\124\1\0\44\124\1\267"+
    "\1\0\1\124\1\267\1\0\1\267\1\244\27\267\1\124"+
    "\14\267\45\127\1\0\1\127\1\0\3\127\1\270\1\271"+
    "\1\270\1\272\1\127\1\270\1\273\36\270\1\167\1\270"+
    "\1\167\3\270\10\127\1\274\24\127\1\275\7\127\1\0"+
    "\1\127\1\0\12\127\1\276\35\127\1\0\1\127\1\0"+
    "\13\127\1\277\34\127\1\0\1\127\1\0\14\127\1\300"+
    "\1\127\1\301\1\127\1\302\27\127\1\0\1\127\1\0"+
    "\17\127\1\303\7\127\1\304\2\127\1\305\15\127\1\0"+
    "\1\127\1\0\14\127\1\306\33\127\1\0\1\127\1\0"+
    "\17\127\1\307\2\127\1\310\25\127\1\0\1\127\1\0"+
    "\26\127\1\311\21\127\1\0\1\127\1\0\14\127\1\312"+
    "\3\127\1\313\4\127\1\314\22\127\1\0\1\127\1\0"+
    "\14\127\1\315\7\127\1\316\1\127\1\317\1\127\1\320"+
    "\17\127\1\0\1\127\1\0\16\127\1\321\31\127\1\0"+
    "\1\127\1\0\16\127\1\322\31\127\1\0\1\127\1\0"+
    "\16\127\1\323\31\127\1\0\1\127\1\0\20\127\1\324"+
    "\27\127\1\0\1\127\1\0\14\127\1\325\33\127\1\0"+
    "\1\127\1\0\16\127\1\326\31\127\1\0\1\127\1\0"+
    "\16\127\1\327\31\127\1\0\1\127\1\0\3\127\46\0"+
    "\1\330\4\0\1\331\2\127\1\331\1\127\31\331\1\127"+
    "\6\331\1\244\1\331\1\244\3\331\37\0\1\332\2\0"+
    "\1\155\52\0\1\155\10\0\1\26\2\0\1\26\3\0"+
    "\30\26\1\0\2\26\1\155\1\0\1\26\1\164\1\26"+
    "\1\0\3\26\46\0\1\333\4\0\1\161\2\103\1\161"+
    "\1\103\1\0\1\103\30\161\1\103\2\161\2\103\1\161"+
    "\1\334\1\161\1\103\3\161\1\335\2\103\1\335\1\103"+
    "\1\244\1\257\27\335\1\161\1\257\2\335\2\257\1\335"+
    "\1\336\1\335\1\257\3\335\5\103\1\0\40\103\1\337"+
    "\4\103\1\26\2\0\1\26\3\0\30\26\1\0\2\26"+
    "\2\0\1\26\1\164\1\340\1\0\3\26\2\0\1\165"+
    "\2\0\1\165\46\0\2\165\2\0\1\165\45\0\1\167"+
    "\1\170\1\167\1\171\1\0\46\167\1\263\1\341\2\263"+
    "\1\342\46\263\1\172\1\343\1\172\1\344\1\0\46\172"+
    "\1\26\2\0\1\26\3\0\1\26\1\345\26\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\20\26\1\346\7\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\11\26\1\347\16\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\17\26\1\350"+
    "\10\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\4\26\1\351\23\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\4\26\1\352\23\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\6\26\1\353\21\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\1\354\27\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\1\26\1\355\26\26\1\0\2\26"+
    "\2\0\1\26\1\164\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\1\26\1\356\26\26\1\0\2\26\2\0\1\26"+
    "\1\164\1\26\1\0\4\26\2\0\1\26\3\0\13\26"+
    "\1\357\14\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\20\26\1\360\7\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\11\26\1\361\16\26\1\0\2\26"+
    "\2\0\1\26\1\164\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\20\26\1\362\7\26\1\0\2\26\2\0\1\26"+
    "\1\164\1\26\1\0\4\26\2\0\1\26\3\0\16\26"+
    "\1\363\11\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\10\26\1\364\14\26"+
    "\1\365\2\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\1\366\4\26\1\367"+
    "\12\26\1\370\7\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\6\26\1\371"+
    "\21\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\1\26\1\372\26\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\1\26\1\225\3\26\1\373\5\26\1\374"+
    "\14\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\4\26\1\375\23\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\1\26\1\376\26\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\5\26\1\377\22\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\1\235\27\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\10\26\1\u0100\4\26\1\u0101\12\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\1\26\1\u0102\26\26\1\0\2\26"+
    "\2\0\1\26\1\164\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\11\26\1\u0103\16\26\1\0\2\26\2\0\1\26"+
    "\1\164\1\26\1\0\4\26\2\0\1\26\3\0\20\26"+
    "\1\u0104\7\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\11\26\1\u0105\16\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\6\26\1\u0106\21\26\1\0\2\26"+
    "\2\0\1\26\1\164\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\16\26\1\u0107\11\26\1\0\2\26\2\0\1\26"+
    "\1\164\1\26\1\0\4\26\2\0\1\26\3\0\10\26"+
    "\1\u0108\17\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\1\26\1\360\26\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\6\26\1\u0109\21\26\1\0\2\26"+
    "\2\0\1\26\1\164\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\13\26\1\351\14\26\1\0\2\26\2\0\1\26"+
    "\1\164\1\26\1\0\4\26\2\0\1\26\3\0\13\26"+
    "\1\u010a\14\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\4\26\1\u010b\23\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\3\26"+
    "\2\330\1\0\42\330\1\0\1\330\1\u010c\3\330\2\242"+
    "\1\0\42\242\1\0\3\242\1\u010c\1\242\1\243\2\0"+
    "\1\243\1\0\2\244\27\243\1\u010d\1\244\2\243\2\244"+
    "\1\243\1\245\1\243\1\244\3\243\1\244\2\0\1\244"+
    "\1\0\31\244\1\u010e\14\244\1\243\2\0\1\243\1\0"+
    "\2\244\27\243\1\u010d\1\244\2\243\2\244\1\243\1\245"+
    "\1\u010f\1\244\3\243\2\103\1\247\2\103\1\165\46\103"+
    "\2\247\2\103\1\165\45\103\1\251\1\252\1\251\1\253"+
    "\1\103\1\167\45\251\1\u0110\1\u0111\2\u0110\1\u0112\1\263"+
    "\45\u0110\1\254\1\u0113\1\254\1\u0114\1\103\1\172\45\254"+
    "\1\255\1\103\1\102\1\255\1\103\1\256\1\257\27\255"+
    "\1\u0115\14\255\1\256\1\0\1\75\1\260\1\0\1\256"+
    "\1\244\27\256\1\u0116\14\256\1\257\2\103\1\257\1\103"+
    "\1\244\30\257\1\u0117\14\257\1\263\1\170\2\263\1\0"+
    "\46\263\1\116\1\0\1\116\1\262\1\0\1\116\1\0"+
    "\20\116\1\u0118\23\116\1\265\1\0\1\116\1\266\1\0"+
    "\1\265\1\244\27\265\1\u0119\14\265\1\267\1\0\1\124"+
    "\1\267\1\0\1\267\1\244\27\267\1\u011a\14\267\1\270"+
    "\1\271\1\270\1\272\1\127\40\270\1\167\1\270\1\167"+
    "\3\270\1\u011b\1\u011c\2\u011b\1\u011d\40\u011b\1\263\1\u011b"+
    "\1\263\3\u011b\1\273\1\u011e\1\273\1\u011f\1\127\40\273"+
    "\1\172\1\273\1\172\3\273\10\127\1\u0120\34\127\1\0"+
    "\1\127\1\0\16\127\1\u0121\31\127\1\0\1\127\1\0"+
    "\16\127\1\u0122\31\127\1\0\1\127\1\0\20\127\1\u0123"+
    "\27\127\1\0\1\127\1\0\13\127\1\u0124\34\127\1\0"+
    "\1\127\1\0\13\127\1\u0125\34\127\1\0\1\127\1\0"+
    "\25\127\1\u0126\22\127\1\0\1\127\1\0\32\127\1\310"+
    "\15\127\1\0\1\127\1\0\23\127\1\u0127\24\127\1\0"+
    "\1\127\1\0\32\127\1\u0128\15\127\1\0\1\127\1\0"+
    "\30\127\1\u0129\17\127\1\0\1\127\1\0\22\127\1\u012a"+
    "\25\127\1\0\1\127\1\0\20\127\1\u012b\27\127\1\0"+
    "\1\127\1\0\13\127\1\u012c\34\127\1\0\1\127\1\0"+
    "\13\127\1\321\3\127\1\u012d\5\127\1\u012e\22\127\1\0"+
    "\1\127\1\0\16\127\1\u012f\31\127\1\0\1\127\1\0"+
    "\13\127\1\u0130\34\127\1\0\1\127\1\0\12\127\1\326"+
    "\35\127\1\0\1\127\1\0\22\127\1\u0131\4\127\1\u0132"+
    "\20\127\1\0\1\127\1\0\13\127\1\u0133\34\127\1\0"+
    "\1\127\1\0\23\127\1\u0134\24\127\1\0\1\127\1\0"+
    "\23\127\1\u0135\24\127\1\0\1\127\1\0\30\127\1\u0136"+
    "\17\127\1\0\1\127\1\0\13\127\1\310\34\127\1\0"+
    "\1\127\1\0\20\127\1\u0137\27\127\1\0\1\127\1\0"+
    "\25\127\1\u0121\22\127\1\0\1\127\1\0\25\127\1\u0138"+
    "\22\127\1\0\1\127\1\0\3\127\1\331\2\127\1\331"+
    "\1\127\31\331\1\u0139\6\331\1\244\1\331\1\244\3\331"+
    "\1\161\2\103\1\161\1\103\1\0\1\103\30\161\1\103"+
    "\2\161\2\103\1\161\1\334\1\u013a\1\103\3\161\1\335"+
    "\2\103\1\335\1\103\1\244\1\257\27\335\1\u013b\1\257"+
    "\2\335\2\257\1\335\1\336\1\335\1\257\4\335\2\103"+
    "\1\335\1\103\1\244\1\257\27\335\1\u013b\1\257\2\335"+
    "\2\257\1\335\1\336\1\u013c\1\257\3\335\2\u013d\1\103"+
    "\2\u013d\1\330\37\u013d\1\103\1\u013d\1\103\3\u013d\1\340"+
    "\1\u013e\1\0\1\340\3\u013e\30\340\1\u013e\2\340\2\u013e"+
    "\1\340\1\164\1\340\1\26\3\340\1\341\1\0\1\341"+
    "\1\u013f\1\0\46\341\1\0\1\341\51\0\1\u0140\1\u0141"+
    "\2\u0140\1\342\46\u0140\1\26\2\0\1\26\3\0\2\26"+
    "\1\233\25\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\6\26\1\u0142\21\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\1\u0143\27\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\2\26\1\u0144\25\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\13\26\1\360"+
    "\14\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\13\26\1\361\14\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\7\26\1\234\20\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\1\26\1\u0145\26\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\20\26\1\u0146"+
    "\7\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\5\26\1\u0147\22\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\20\26\1\u0148\7\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\17\26\1\u0149\10\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\11\26\1\u014a"+
    "\5\26\1\u014b\10\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\20\26\1\u014c"+
    "\7\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\2\26\1\360\25\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\13\26\1\u014d\14\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\30\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\2\26\1\u014e\1\26\2\0\1\26\3\0\1\u014f\17\26"+
    "\1\u0150\7\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\1\u0151\27\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\13\26\1\u0152\14\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\1\u0153\27\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\20\26\1\u0154\7\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\1\360\15\26\1\u0155\11\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\26\26\1\345\1\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\16\26\1\360\11\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\25\26\1\365"+
    "\2\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\10\26\1\u0156\17\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\11\26\1\376\16\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\6\26\1\u0157\21\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\16\26\1\u0158"+
    "\11\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\1\u0159\27\26\1\0\2\26"+
    "\2\0\1\26\1\164\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\1\u015a\27\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\26\26\1\u015b"+
    "\1\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\12\26\1\u015c\15\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\6\26\1\u015d\21\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\5\26\1\360\22\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\14\26\1\u0152"+
    "\13\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\16\26\1\u015e\11\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\3\26\1\u010f"+
    "\1\u013e\1\0\1\u010f\1\u013e\2\u015f\27\u010f\1\u0160\1\u015f"+
    "\2\u010f\2\u015f\1\u010f\1\245\1\u010f\1\243\3\u010f\1\u0110"+
    "\1\252\2\u0110\1\103\1\263\45\u0110\1\u0111\1\103\1\u0111"+
    "\1\u0161\1\103\1\341\45\u0111\1\103\1\u0111\3\103\1\0"+
    "\45\103\1\u0162\1\u0163\2\u0162\1\u0112\1\u0140\45\u0162\1\116"+
    "\1\0\1\116\1\262\1\0\1\116\1\0\1\u0164\43\116"+
    "\1\u011b\1\271\2\u011b\1\127\40\u011b\1\263\1\u011b\1\263"+
    "\3\u011b\1\u011c\1\127\1\u011c\1\u0165\1\127\40\u011c\1\341"+
    "\1\u011c\1\341\3\u011c\1\127\1\u011c\43\127\1\0\1\127"+
    "\1\0\3\127\1\u0166\1\u0167\2\u0166\1\u011d\40\u0166\1\u0140"+
    "\1\u0166\1\u0140\3\u0166\11\127\1\324\33\127\1\0\1\127"+
    "\1\0\25\127\1\310\22\127\1\0\1\127\1\0\25\127"+
    "\1\u0127\22\127\1\0\1\127\1\0\21\127\1\325\26\127"+
    "\1\0\1\127\1\0\32\127\1\u0168\15\127\1\0\1\127"+
    "\1\0\17\127\1\u0169\30\127\1\0\1\127\1\0\32\127"+
    "\1\u016a\15\127\1\0\1\127\1\0\31\127\1\u016b\16\127"+
    "\1\0\1\127\1\0\23\127\1\u016c\5\127\1\u016d\16\127"+
    "\1\0\1\127\1\0\32\127\1\146\15\127\1\0\1\127"+
    "\1\0\14\127\1\310\33\127\1\0\1\127\1\0\25\127"+
    "\1\u016e\22\127\1\0\1\127\1\0\12\127\1\u016f\35\127"+
    "\1\0\1\127\1\0\32\127\1\u0170\15\127\1\0\1\127"+
    "\1\0\12\127\1\310\15\127\1\u0171\17\127\1\0\1\127"+
    "\1\0\40\127\1\u0120\7\127\1\0\1\127\1\0\30\127"+
    "\1\310\17\127\1\0\1\127\1\0\22\127\1\u0172\25\127"+
    "\1\0\1\127\1\0\23\127\1\u0130\24\127\1\0\1\127"+
    "\1\0\20\127\1\u0173\27\127\1\0\1\127\1\0\30\127"+
    "\1\u0174\17\127\1\0\1\127\1\0\12\127\1\u0175\35\127"+
    "\1\0\1\127\1\0\24\127\1\u0176\23\127\1\0\1\127"+
    "\1\0\17\127\1\310\30\127\1\0\1\127\1\0\26\127"+
    "\1\u016e\21\127\1\0\1\127\1\0\3\127\1\u013a\1\u0177"+
    "\1\103\1\u013a\1\u0177\1\u013e\1\u0177\30\u013a\1\u0177\2\u013a"+
    "\2\u0177\1\u013a\1\334\1\u013a\1\161\3\u013a\1\u013c\1\u0177"+
    "\1\103\1\u013c\1\u0177\1\u015f\1\u0178\27\u013c\1\u0179\1\u0178"+
    "\2\u013c\2\u0178\1\u013c\1\336\1\u013c\1\335\3\u013c\2\u013e"+
    "\1\0\42\u013e\1\0\1\u013e\1\26\3\u013e\1\0\1\341"+
    "\2\0\1\342\46\0\1\u0140\1\343\2\u0140\1\0\46\u0140"+
    "\1\26\2\0\1\26\3\0\10\26\1\u017a\17\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\1\26\1\u017b\26\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\1\26\1\u017c\26\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\11\26\1\360"+
    "\1\26\1\u017d\14\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\6\26\1\u017e"+
    "\21\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\25\26\1\u017f\2\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\4\26\1\u0180\23\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\14\26\1\u0181\13\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\1\26\1\u0182"+
    "\26\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\6\26\1\233\21\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\14\26\1\u0183\13\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\30\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\2\26\1\u0184\1\26\2\0\1\26\3\0\1\u0185\27\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\10\26\1\u0186\17\26\1\0\2\26"+
    "\2\0\1\26\1\164\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\1\360\27\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\4\26\1\u0187"+
    "\23\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\11\26\1\u0188\16\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\1\u0189\27\26\1\0\2\26\2\0\1\26"+
    "\1\164\1\26\1\0\4\26\2\0\1\26\3\0\6\26"+
    "\1\u018a\21\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\17\26\1\360\10\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\3\26\1\u018b\24\26\1\0\2\26"+
    "\2\0\1\26\1\164\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\10\26\1\u018c\17\26\1\0\2\26\2\0\1\26"+
    "\1\164\1\26\1\0\4\26\2\0\1\26\3\0\5\26"+
    "\1\u018d\22\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\4\26\1\u018e\23\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\11\26\1\u018f\16\26\1\0\2\26"+
    "\2\0\1\26\1\164\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\5\26\1\u0190\22\26\1\0\2\26\2\0\1\26"+
    "\1\164\1\26\1\0\4\26\2\0\1\26\3\0\12\26"+
    "\1\u0191\15\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\3\26\1\u015f\1\u013e\1\0\1\u015f\1\u013e\31\u015f"+
    "\1\u0192\6\u015f\1\244\1\u015f\1\243\3\u015f\1\103\1\u0111"+
    "\2\103\1\u0112\1\0\45\103\1\u0162\1\u0113\2\u0162\1\103"+
    "\1\u0140\45\u0162\1\116\1\0\1\116\1\262\1\0\1\116"+
    "\1\0\10\116\1\u0193\33\116\1\127\1\u011c\2\127\1\u011d"+
    "\40\127\1\0\1\127\1\0\3\127\1\u0166\1\u011e\2\u0166"+
    "\1\127\40\u0166\1\u0140\1\u0166\1\u0140\3\u0166\20\127\1\310"+
    "\1\127\1\u0194\22\127\1\0\1\127\1\0\20\127\1\u0195"+
    "\27\127\1\0\1\127\1\0\37\127\1\u0196\10\127\1\0"+
    "\1\127\1\0\16\127\1\u0197\31\127\1\0\1\127\1\0"+
    "\26\127\1\u0198\21\127\1\0\1\127\1\0\13\127\1\u0199"+
    "\34\127\1\0\1\127\1\0\12\127\1\310\35\127\1\0"+
    "\1\127\1\0\16\127\1\u019a\31\127\1\0\1\127\1\0"+
    "\23\127\1\u019b\24\127\1\0\1\127\1\0\12\127\1\u019c"+
    "\35\127\1\0\1\127\1\0\20\127\1\u019d\27\127\1\0"+
    "\1\127\1\0\31\127\1\310\16\127\1\0\1\127\1\0"+
    "\15\127\1\u019e\32\127\1\0\1\127\1\0\17\127\1\u019f"+
    "\30\127\1\0\1\127\1\0\23\127\1\u01a0\24\127\1\0"+
    "\1\127\1\0\3\127\2\u0177\1\103\2\u0177\1\u013e\37\u0177"+
    "\1\103\1\u0177\1\161\3\u0177\1\u0178\1\u0177\1\103\1\u0178"+
    "\1\u0177\1\u015f\30\u0178\1\u01a1\6\u0178\1\257\1\u0178\1\335"+
    "\3\u0178\1\26\2\0\1\26\3\0\16\26\1\u01a2\11\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\6\26\1\u01a3\21\26\1\0\2\26"+
    "\2\0\1\26\1\164\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\6\26\1\u0101\21\26\1\0\2\26\2\0\1\26"+
    "\1\164\1\26\1\0\4\26\2\0\1\26\3\0\5\26"+
    "\1\u01a4\22\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\4\26\1\u01a5\23\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\16\26\1\u01a6\11\26\1\0\2\26"+
    "\2\0\1\26\1\164\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\10\26\1\u0100\17\26\1\0\2\26\2\0\1\26"+
    "\1\164\1\26\1\0\4\26\2\0\1\26\3\0\1\u0100"+
    "\27\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\20\26\1\u01a7\7\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\10\26\1\u01a8\17\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\25\26\1\u01a6\2\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\16\26\1\u01a9"+
    "\11\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\1\26\1\u01aa\26\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\22\26\1\360\5\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\2\26\1\u01a5\25\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\6\26\1\u01ab"+
    "\21\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\4\26\1\u01ac\23\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\16\26\1\u01ad\11\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\14\26\1\u01ae\13\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\1\u01af\27\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\3\26"+
    "\15\127\1\u0132\27\127\1\0\1\127\1\0\17\127\1\u01b0"+
    "\30\127\1\0\1\127\1\0\16\127\1\u01b1\31\127\1\0"+
    "\1\127\1\0\30\127\1\u01b2\17\127\1\0\1\127\1\0"+
    "\22\127\1\u0131\25\127\1\0\1\127\1\0\12\127\1\u0131"+
    "\35\127\1\0\1\127\1\0\37\127\1\u01b2\10\127\1\0"+
    "\1\127\1\0\30\127\1\u01b3\17\127\1\0\1\127\1\0"+
    "\13\127\1\u01b4\34\127\1\0\1\127\1\0\34\127\1\310"+
    "\13\127\1\0\1\127\1\0\14\127\1\u01b1\33\127\1\0"+
    "\1\127\1\0\16\127\1\u01b5\31\127\1\0\1\127\1\0"+
    "\26\127\1\u01b6\21\127\1\0\1\127\1\0\3\127\1\26"+
    "\2\0\1\26\3\0\20\26\1\u01b7\7\26\1\0\2\26"+
    "\2\0\1\26\1\164\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\7\26\1\360\20\26\1\0\2\26\2\0\1\26"+
    "\1\164\1\26\1\0\4\26\2\0\1\26\3\0\1\26"+
    "\1\206\26\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\12\26\1\360\15\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\1\u01b8\27\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\1\26\1\u0147\26\26\1\0\2\26\2\0\1\26\1\164"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\21\26\1\u01b9"+
    "\6\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\5\26\1\u01ba\22\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\23\26\1\u0152\4\26\1\0\2\26\2\0"+
    "\1\26\1\164\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\1\u01bb\27\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\15\26\1\u0101\12\26"+
    "\1\0\2\26\2\0\1\26\1\164\1\26\1\0\3\26"+
    "\16\127\1\310\26\127\1\0\1\127\1\0\13\127\1\303"+
    "\34\127\1\0\1\127\1\0\24\127\1\310\23\127\1\0"+
    "\1\127\1\0\13\127\1\u0169\34\127\1\0\1\127\1\0"+
    "\33\127\1\u01bc\14\127\1\0\1\127\1\0\35\127\1\u016e"+
    "\12\127\1\0\1\127\1\0\27\127\1\u0132\20\127\1\0"+
    "\1\127\1\0\3\127\1\26\2\0\1\26\3\0\1\u01bd"+
    "\27\26\1\0\2\26\2\0\1\26\1\164\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\2\26\1\u01be\25\26\1\0"+
    "\2\26\2\0\1\26\1\164\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\1\u01bf\27\26\1\0\2\26\2\0\1\26"+
    "\1\164\1\26\1\0\3\26\11\127\1\u01c0\33\127\1\0"+
    "\1\127\1\0\3\127\1\26\2\0\1\26\3\0\14\26"+
    "\1\376\13\26\1\0\2\26\2\0\1\26\1\164\1\26"+
    "\1\0\3\26\23\127\1\u0130\21\127\1\0\1\127\1\0"+
    "\3\127";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16856];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\2\1\4\0\34\1\1\11\3\1\1\11\2\1"+
    "\1\11\2\1\1\11\16\1\1\11\41\1\1\11\12\1"+
    "\1\11\51\1\1\0\1\1\1\0\1\1\1\0\11\1"+
    "\3\0\3\1\1\0\41\1\1\0\1\1\1\0\7\1"+
    "\1\0\1\11\50\1\1\11\1\1\1\11\57\1\2\0"+
    "\37\1\1\0\141\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[448];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MakefileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MakefileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case INCLUDES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 449: break;
            case EXPORT: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 450: break;
            case EXPORTVAR: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 451: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return FUNCTION_PARAM_TEXT;
            } 
            // fall through
          case 45: break;
          case 2: 
            { return IDENTIFIER;
            } 
            // fall through
          case 46: break;
          case 3: 
            { return EOL;
            } 
            // fall through
          case 47: break;
          case 4: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 48: break;
          case 5: 
            { return COMMENT;
            } 
            // fall through
          case 49: break;
          case 6: 
            { return COLON;
            } 
            // fall through
          case 50: break;
          case 7: 
            { yybegin(SOURCE_FORCED); return SEMICOLON;
            } 
            // fall through
          case 51: break;
          case 8: 
            { return PIPE;
            } 
            // fall through
          case 52: break;
          case 9: 
            { yybegin(SOURCE); return ASSIGN;
            } 
            // fall through
          case 53: break;
          case 10: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 54: break;
          case 11: 
            { yybegin(YYINITIAL); return FUNCTION_END;
            } 
            // fall through
          case 55: break;
          case 12: 
            { yybegin(SOURCE); return TAB;
            } 
            // fall through
          case 56: break;
          case 13: 
            { yypushback(yylength()); yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 57: break;
          case 14: 
            { yybegin(YYINITIAL); return EOL;
            } 
            // fall through
          case 58: break;
          case 15: 
            { return LINE;
            } 
            // fall through
          case 59: break;
          case 16: 
            { yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 60: break;
          case 17: 
            { return TAB;
            } 
            // fall through
          case 61: break;
          case 18: 
            { yybegin(DEFINEBODY); return WHITE_SPACE;
            } 
            // fall through
          case 62: break;
          case 19: 
            { return ASSIGN;
            } 
            // fall through
          case 63: break;
          case 20: 
            { return VARIABLE_VALUE_LINE;
            } 
            // fall through
          case 64: break;
          case 21: 
            { yybegin(YYINITIAL); return CONDITION;
            } 
            // fall through
          case 65: break;
          case 22: 
            { yybegin(EXPORTVAR); return ASSIGN;
            } 
            // fall through
          case 66: break;
          case 23: 
            { return SPLIT;
            } 
            // fall through
          case 67: break;
          case 24: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 68: break;
          case 25: 
            { return FUNCTION_NAME;
            } 
            // fall through
          case 69: break;
          case 26: 
            { return DOUBLECOLON;
            } 
            // fall through
          case 70: break;
          case 27: 
            { return FUNCTION_START;
            } 
            // fall through
          case 71: break;
          case 28: 
            { yybegin(FUNCTION); return FUNCTION_START;
            } 
            // fall through
          case 72: break;
          case 29: 
            { return VARIABLE_USAGE;
            } 
            // fall through
          case 73: break;
          case 30: 
            { return MACRO;
            } 
            // fall through
          case 74: break;
          case 31: 
            { yybegin(ELSE); return KEYWORD_ELSE;
            } 
            // fall through
          case 75: break;
          case 32: 
            { yybegin(CONDITIONALS); return KEYWORD_IFEQ;
            } 
            // fall through
          case 76: break;
          case 33: 
            { return KEYWORD_ENDIF;
            } 
            // fall through
          case 77: break;
          case 34: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNEQ;
            } 
            // fall through
          case 78: break;
          case 35: 
            { yybegin(CONDITIONALS); return KEYWORD_IFDEF;
            } 
            // fall through
          case 79: break;
          case 36: 
            { return KEYWORD_VPATH;
            } 
            // fall through
          case 80: break;
          case 37: 
            { yybegin(YYINITIAL); return KEYWORD_ENDEF;
            } 
            // fall through
          case 81: break;
          case 38: 
            { yybegin(EXPORT); return KEYWORD_EXPORT;
            } 
            // fall through
          case 82: break;
          case 39: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNDEF;
            } 
            // fall through
          case 83: break;
          case 40: 
            { yybegin(DEFINE); return KEYWORD_DEFINE;
            } 
            // fall through
          case 84: break;
          case 41: 
            { return KEYWORD_INCLUDE;
            } 
            // fall through
          case 85: break;
          case 42: 
            { return KEYWORD_PRIVATE;
            } 
            // fall through
          case 86: break;
          case 43: 
            { return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 87: break;
          case 44: 
            { yybegin(INCLUDES); return KEYWORD_UNDEFINE;
            } 
            // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
