/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package name.kropp.intellij.makefile;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static name.kropp.intellij.makefile.psi.MakefileTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>MakefileLexer.flex</tt>
 */
public class _MakefileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INCLUDES = 2;
  public static final int SOURCE = 4;
  public static final int SOURCE_FORCED = 6;
  public static final int DEFINE = 8;
  public static final int DEFINEBODY = 10;
  public static final int CONDITIONALS = 12;
  public static final int FUNCTION = 14;
  public static final int EXPORT = 16;
  public static final int EXPORTVAR = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4,  5,  4,  6,  7,  8,  9, 10, 11, 12, 13, 14, 
    15, 16,  4, 17
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\1\2\0\1\4\22\0\1\2\1\46\1\54\1\6\1\50\3\0\1\51\1\37\1\0\1\47\1"+
    "\42\1\30\14\0\1\40\1\41\1\0\1\44\1\0\1\45\1\36\33\0\1\3\4\0\1\13\1\24\1\34"+
    "\1\27\1\7\1\17\1\16\1\21\1\15\1\33\1\0\1\22\1\32\1\14\1\11\1\26\1\55\1\10"+
    "\1\20\1\25\1\23\1\35\1\12\1\31\2\0\1\52\1\43\1\53\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\2\1\3\0\1\2\1\3\1\4\1\2\1\4"+
    "\1\5\23\2\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\2\2\1\14\1\15\1\14\1\16\1\2\1\17"+
    "\1\14\1\20\1\4\1\14\1\4\3\21\1\22\1\5"+
    "\1\21\1\20\1\23\1\14\1\24\1\14\1\2\1\25"+
    "\1\4\1\25\1\14\2\25\1\26\1\27\1\4\1\26"+
    "\1\1\1\5\21\1\1\30\1\14\1\1\1\14\1\31"+
    "\1\14\1\2\1\14\3\21\1\2\2\32\2\5\1\33"+
    "\6\2\1\34\11\2\1\34\24\2\1\35\1\36\2\0"+
    "\1\37\1\2\1\0\1\2\1\0\2\21\2\5\1\33"+
    "\1\21\1\20\1\21\3\0\1\5\2\25\1\0\1\26"+
    "\2\5\1\33\3\1\1\34\10\1\1\34\17\1\1\0"+
    "\1\1\1\0\1\40\3\21\1\40\1\2\1\5\1\0"+
    "\1\33\13\2\1\34\33\2\1\41\2\42\1\2\2\5"+
    "\1\21\1\33\3\42\1\25\2\42\2\5\1\1\1\33"+
    "\31\1\1\43\1\42\1\21\1\42\2\21\2\0\1\33"+
    "\1\2\1\44\2\2\1\34\7\2\1\45\20\2\1\0"+
    "\1\42\1\21\1\33\1\25\1\1\1\33\1\34\16\1"+
    "\2\21\1\42\1\46\11\2\1\47\1\2\1\50\12\2"+
    "\1\51\1\42\1\52\15\1\1\42\1\53\5\2\1\54"+
    "\1\2\1\34\4\2\1\55\4\1\1\34\2\1\1\2"+
    "\1\56\2\2\1\57\1\1\1\60\1\2\1\61\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"+
    "\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592"+
    "\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702"+
    "\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u033c\0\u07ba\0\u033c"+
    "\0\u07ba\0\u0816\0\u0816\0\u0844\0\u0872\0\u07ba\0\u08a0\0\u08ce"+
    "\0\u08fc\0\u092a\0\u07ba\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10"+
    "\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80"+
    "\0\u07ba\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2"+
    "\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32"+
    "\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2"+
    "\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112"+
    "\0\u07ba\0\u1140\0\u116e\0\u119c\0\u07ba\0\u11ca\0\u11f8\0\u1226"+
    "\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396"+
    "\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506"+
    "\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676"+
    "\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6"+
    "\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956"+
    "\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u0816\0\u07ba"+
    "\0\u1a98\0\u08a0\0\u07ba\0\u1ac6\0\u1af4\0\u1b22\0\u0958\0\u1b50"+
    "\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1c64"+
    "\0\u0bae\0\u0c0a\0\u1cc0\0\u1cee\0\u1d1c\0\u1d1c\0\u1d4a\0\u1d78"+
    "\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8"+
    "\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc\0\u0dd6\0\u202a"+
    "\0\u2058\0\u2086\0\u20b4\0\u20e2\0\u2110\0\u213e\0\u216c\0\u219a"+
    "\0\u21c8\0\u21f6\0\u2224\0\u2252\0\u2280\0\u22ae\0\u22dc\0\u230a"+
    "\0\u11ca\0\u22dc\0\u2338\0\u2366\0\u2394\0\u23c2\0\u23f0\0\u241e"+
    "\0\u244c\0\u247a\0\u24a8\0\u24d6\0\u2504\0\u2532\0\u2560\0\u258e"+
    "\0\u25bc\0\u25ea\0\u2618\0\u2646\0\u2674\0\u033c\0\u26a2\0\u26d0"+
    "\0\u26fe\0\u272c\0\u275a\0\u2788\0\u27b6\0\u27e4\0\u2812\0\u2840"+
    "\0\u286e\0\u289c\0\u28ca\0\u28f8\0\u2926\0\u2954\0\u2982\0\u29b0"+
    "\0\u29de\0\u2a0c\0\u2a3a\0\u2a68\0\u2a96\0\u2ac4\0\u2af2\0\u2b20"+
    "\0\u2b4e\0\u07ba\0\u033c\0\u07ba\0\u2b7c\0\u2baa\0\u2bd8\0\u2c06"+
    "\0\u2c34\0\u0a10\0\u0958\0\u0a3e\0\u2c62\0\u0c0a\0\u0d1e\0\u2c90"+
    "\0\u2cbe\0\u2cec\0\u2d1a\0\u2d48\0\u2d76\0\u2da4\0\u2dd2\0\u2e00"+
    "\0\u2e2e\0\u2e5c\0\u2e8a\0\u2eb8\0\u2ee6\0\u2f14\0\u2f42\0\u2f70"+
    "\0\u2f9e\0\u2fcc\0\u2ffa\0\u3028\0\u3056\0\u3084\0\u30b2\0\u30e0"+
    "\0\u310e\0\u313c\0\u316a\0\u3198\0\u07ba\0\u0dd6\0\u31c6\0\u1254"+
    "\0\u31f4\0\u23c2\0\u3222\0\u3250\0\u327e\0\u32ac\0\u033c\0\u32da"+
    "\0\u3308\0\u3336\0\u3364\0\u3392\0\u33c0\0\u33ee\0\u341c\0\u344a"+
    "\0\u3478\0\u033c\0\u34a6\0\u34d4\0\u3502\0\u3530\0\u355e\0\u358c"+
    "\0\u35ba\0\u35e8\0\u3616\0\u3644\0\u3672\0\u36a0\0\u36ce\0\u36fc"+
    "\0\u372a\0\u3758\0\u3786\0\u23f0\0\u37b4\0\u37e2\0\u3810\0\u383e"+
    "\0\u386c\0\u389a\0\u38c8\0\u38f6\0\u3924\0\u3952\0\u3980\0\u39ae"+
    "\0\u39dc\0\u3a0a\0\u3a38\0\u3a66\0\u3a94\0\u3ac2\0\u3af0\0\u3b1e"+
    "\0\u3b4c\0\u3b7a\0\u31c6\0\u033c\0\u3ba8\0\u3bd6\0\u3c04\0\u3c32"+
    "\0\u3c60\0\u3c8e\0\u3cbc\0\u3cea\0\u3d18\0\u033c\0\u3d46\0\u033c"+
    "\0\u3d74\0\u3da2\0\u3dd0\0\u3dfe\0\u3e2c\0\u3e5a\0\u3e88\0\u3eb6"+
    "\0\u3ee4\0\u3f12\0\u033c\0\u3222\0\u0c0a\0\u3f40\0\u3f6e\0\u3f9c"+
    "\0\u3fca\0\u3ff8\0\u4026\0\u4054\0\u4082\0\u40b0\0\u40de\0\u410c"+
    "\0\u413a\0\u4168\0\u3b4c\0\u033c\0\u4196\0\u41c4\0\u41f2\0\u4220"+
    "\0\u424e\0\u033c\0\u427c\0\u42aa\0\u42d8\0\u4306\0\u4334\0\u4362"+
    "\0\u033c\0\u4390\0\u43be\0\u43ec\0\u441a\0\u4448\0\u4476\0\u44a4"+
    "\0\u44d2\0\u033c\0\u4500\0\u452e\0\u033c\0\u455c\0\u033c\0\u458a"+
    "\0\u033c\0\u45b8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\23\1\24\1\25\1\26\1\24\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\23\1\43\1\44\1\45\1\23\1\46\1\47"+
    "\1\50\2\23\1\51\1\52\1\53\1\23\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\2\23\1\67\2\23\1\24\1\25\1\26\1\24"+
    "\1\70\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\23\1\43\1\44\1\45"+
    "\1\23\1\46\1\47\1\50\2\23\1\51\1\52\1\53"+
    "\1\71\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\2\23\1\67\2\23\1\72"+
    "\1\25\1\23\1\72\1\27\1\30\30\23\2\73\1\23"+
    "\1\73\1\23\3\73\1\23\2\73\2\23\1\73\2\23"+
    "\1\72\1\25\1\23\1\72\1\27\1\30\27\23\1\71"+
    "\2\73\1\23\1\73\1\23\3\73\1\23\2\73\2\23"+
    "\1\73\1\23\1\74\1\72\1\75\1\76\1\72\1\77"+
    "\1\30\47\74\1\100\1\101\1\100\1\102\1\101\1\103"+
    "\1\104\27\100\1\105\17\100\1\74\1\72\1\75\1\76"+
    "\1\72\1\103\1\30\27\74\1\106\17\74\1\23\1\107"+
    "\1\25\1\23\1\107\1\27\1\30\30\23\1\73\1\110"+
    "\1\23\1\73\1\23\1\111\2\112\1\113\2\73\2\23"+
    "\1\73\2\23\1\107\1\25\1\23\1\107\1\27\1\30"+
    "\27\23\1\71\1\73\1\110\1\23\1\73\1\23\1\111"+
    "\2\112\1\113\2\73\2\23\1\73\1\23\1\114\1\115"+
    "\1\116\1\117\1\115\1\116\1\30\1\120\47\114\1\115"+
    "\1\116\1\117\1\115\1\116\1\30\1\120\26\114\1\121"+
    "\17\114\1\122\1\123\1\124\1\122\1\123\1\122\1\30"+
    "\50\122\1\123\1\124\1\122\1\123\1\122\1\30\27\122"+
    "\1\125\17\122\6\126\1\127\1\130\1\131\1\132\1\133"+
    "\1\134\1\135\1\136\1\137\1\140\1\141\1\126\1\142"+
    "\1\126\1\143\1\126\1\144\1\145\3\126\1\146\1\147"+
    "\1\150\1\126\1\151\10\126\1\152\13\126\1\127\1\130"+
    "\1\131\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
    "\1\141\1\126\1\142\1\126\1\143\1\126\1\144\1\145"+
    "\3\126\1\146\1\147\1\150\1\153\1\151\10\126\1\152"+
    "\5\126\1\23\1\72\1\25\1\23\1\72\1\27\1\30"+
    "\30\23\1\73\1\154\1\23\1\73\1\23\1\155\2\156"+
    "\1\157\1\160\1\73\2\23\1\73\1\23\1\161\2\101"+
    "\1\161\1\101\1\27\1\104\27\161\1\162\2\101\1\161"+
    "\1\101\1\161\3\101\1\161\1\163\1\101\2\161\1\101"+
    "\1\161\1\100\1\101\1\100\1\102\1\101\1\77\1\104"+
    "\27\100\1\105\17\100\1\23\2\0\1\23\3\0\30\23"+
    "\2\0\3\23\3\0\1\23\1\164\5\23\1\0\1\24"+
    "\2\0\1\24\53\0\1\25\53\0\1\23\1\165\1\0"+
    "\1\23\1\166\2\0\30\23\2\0\3\23\3\0\1\23"+
    "\1\164\5\23\5\0\1\27\50\0\1\167\1\0\1\167"+
    "\1\170\1\0\1\167\1\171\47\167\1\23\2\0\1\23"+
    "\3\0\1\23\1\172\3\23\1\173\5\23\1\174\6\23"+
    "\1\175\3\23\1\176\1\23\2\0\3\23\3\0\1\23"+
    "\1\164\6\23\2\0\1\23\3\0\1\177\27\23\2\0"+
    "\3\23\3\0\1\23\1\164\6\23\2\0\1\23\3\0"+
    "\1\23\1\200\24\23\1\201\1\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\2\23\1\202"+
    "\1\23\1\203\1\23\1\204\21\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\5\23\1\205"+
    "\7\23\1\206\2\23\1\207\7\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\2\23\1\210"+
    "\25\23\2\0\3\23\3\0\1\23\1\164\6\23\2\0"+
    "\1\23\3\0\5\23\1\211\2\23\1\212\17\23\2\0"+
    "\3\23\3\0\1\23\1\164\6\23\2\0\1\23\3\0"+
    "\14\23\1\213\13\23\2\0\3\23\3\0\1\23\1\164"+
    "\6\23\2\0\1\23\3\0\2\23\1\214\3\23\1\215"+
    "\4\23\1\216\14\23\2\0\3\23\3\0\1\23\1\164"+
    "\6\23\2\0\1\23\3\0\2\23\1\217\3\23\1\220"+
    "\3\23\1\221\1\23\1\222\1\23\1\223\11\23\2\0"+
    "\3\23\3\0\1\23\1\164\6\23\2\0\1\23\3\0"+
    "\4\23\1\224\23\23\2\0\3\23\3\0\1\23\1\164"+
    "\6\23\2\0\1\23\3\0\5\23\1\225\22\23\2\0"+
    "\3\23\3\0\1\23\1\164\6\23\2\0\1\23\3\0"+
    "\4\23\1\226\23\23\2\0\3\23\3\0\1\23\1\164"+
    "\6\23\2\0\1\23\3\0\1\23\1\227\2\23\1\230"+
    "\23\23\2\0\3\23\3\0\1\23\1\164\6\23\2\0"+
    "\1\23\3\0\1\231\5\23\1\232\21\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\6\23"+
    "\1\220\21\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\2\23\1\233\25\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\4\23"+
    "\1\234\23\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\4\23\1\235\12\23\1\236\10\23"+
    "\2\0\3\23\3\0\1\23\1\164\5\23\116\0\1\237"+
    "\3\0\1\61\55\0\1\61\11\0\1\23\2\0\1\23"+
    "\3\0\30\23\2\0\3\23\1\61\2\0\1\23\1\164"+
    "\5\23\51\0\1\240\1\241\3\0\54\242\1\243\1\242"+
    "\5\0\1\70\50\0\1\244\2\0\1\244\1\0\2\245"+
    "\27\244\1\23\2\245\3\244\3\245\1\244\1\246\5\244"+
    "\1\0\1\72\2\0\1\72\51\0\1\74\1\0\1\74"+
    "\1\247\1\0\1\74\1\0\50\74\1\0\1\75\1\247"+
    "\1\0\1\74\1\0\50\74\1\165\1\74\1\247\1\166"+
    "\1\74\1\0\50\74\1\0\1\74\1\247\1\0\1\77"+
    "\1\0\47\74\1\100\1\101\2\100\1\101\1\74\1\101"+
    "\47\100\5\101\1\0\50\101\1\100\1\250\2\100\1\251"+
    "\1\74\1\101\47\100\1\74\1\0\1\74\1\247\1\0"+
    "\1\103\1\0\47\74\1\252\1\101\1\252\1\253\1\101"+
    "\1\167\1\254\47\252\1\255\1\101\1\100\1\255\1\101"+
    "\1\256\1\257\27\255\1\100\17\255\1\256\1\0\1\74"+
    "\1\260\1\0\1\256\1\245\27\256\1\74\17\256\1\0"+
    "\1\107\2\0\1\107\111\0\1\261\3\0\1\111\55\0"+
    "\1\111\11\0\1\23\2\0\1\23\3\0\30\23\2\0"+
    "\3\23\1\111\2\0\1\23\1\164\5\23\1\114\1\0"+
    "\1\114\1\262\1\0\1\114\1\0\47\114\1\0\1\115"+
    "\2\0\1\115\51\0\1\114\1\0\1\116\1\262\1\0"+
    "\1\116\1\263\50\114\1\165\1\114\1\262\1\166\1\114"+
    "\1\0\50\114\1\0\1\114\1\262\1\0\1\114\1\0"+
    "\5\114\1\264\41\114\1\265\1\0\1\114\1\266\1\0"+
    "\1\265\1\245\27\265\1\114\17\265\1\122\1\0\2\122"+
    "\1\0\1\122\1\0\47\122\1\0\1\123\2\0\1\123"+
    "\51\0\1\122\1\0\1\124\1\122\1\0\1\122\1\0"+
    "\47\122\1\267\1\0\1\122\1\267\1\0\1\267\1\245"+
    "\27\267\1\122\17\267\37\126\1\0\10\126\1\0\5\126"+
    "\1\270\1\126\1\270\1\271\1\126\1\270\1\272\30\270"+
    "\1\167\10\270\1\167\5\270\10\126\1\273\24\126\1\274"+
    "\1\126\1\0\10\126\1\0\14\126\1\275\27\126\1\0"+
    "\10\126\1\0\15\126\1\276\26\126\1\0\10\126\1\0"+
    "\16\126\1\277\1\126\1\300\1\126\1\301\21\126\1\0"+
    "\10\126\1\0\21\126\1\302\7\126\1\303\2\126\1\304"+
    "\7\126\1\0\10\126\1\0\16\126\1\305\25\126\1\0"+
    "\10\126\1\0\21\126\1\306\2\126\1\307\17\126\1\0"+
    "\10\126\1\0\30\126\1\310\13\126\1\0\10\126\1\0"+
    "\16\126\1\311\3\126\1\312\4\126\1\313\14\126\1\0"+
    "\10\126\1\0\16\126\1\314\7\126\1\315\1\126\1\316"+
    "\1\126\1\317\11\126\1\0\10\126\1\0\20\126\1\320"+
    "\23\126\1\0\10\126\1\0\20\126\1\321\23\126\1\0"+
    "\10\126\1\0\20\126\1\322\23\126\1\0\10\126\1\0"+
    "\22\126\1\323\21\126\1\0\10\126\1\0\16\126\1\324"+
    "\25\126\1\0\10\126\1\0\20\126\1\325\23\126\1\0"+
    "\10\126\1\0\20\126\1\326\23\126\1\0\10\126\1\0"+
    "\5\126\51\0\1\327\4\0\1\330\2\126\1\330\1\126"+
    "\31\330\1\126\1\245\10\330\1\245\5\330\40\0\1\331"+
    "\3\0\1\155\55\0\1\155\11\0\1\23\2\0\1\23"+
    "\3\0\30\23\2\0\3\23\1\155\2\0\1\23\1\164"+
    "\5\23\51\0\1\332\4\0\1\161\2\101\1\161\1\101"+
    "\1\0\1\101\30\161\2\101\3\161\3\101\1\161\1\333"+
    "\5\161\1\334\2\101\1\334\1\101\1\245\1\257\27\334"+
    "\1\161\2\257\3\334\3\257\1\334\1\335\5\334\5\101"+
    "\1\0\43\101\1\336\4\101\1\23\2\0\1\23\3\0"+
    "\30\23\2\0\3\23\3\0\1\23\1\164\1\337\4\23"+
    "\2\0\1\165\2\0\1\165\51\0\2\165\2\0\1\165"+
    "\50\0\1\167\1\0\1\167\1\170\1\0\51\167\1\263"+
    "\1\340\2\263\1\341\51\263\1\171\1\0\1\171\1\342"+
    "\1\0\51\171\1\23\2\0\1\23\3\0\1\23\1\343"+
    "\26\23\2\0\3\23\3\0\1\23\1\164\6\23\2\0"+
    "\1\23\3\0\20\23\1\344\7\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\11\23\1\345"+
    "\16\23\2\0\3\23\3\0\1\23\1\164\6\23\2\0"+
    "\1\23\3\0\17\23\1\346\10\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\4\23\1\347"+
    "\23\23\2\0\3\23\3\0\1\23\1\164\6\23\2\0"+
    "\1\23\3\0\4\23\1\350\23\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\6\23\1\351"+
    "\21\23\2\0\3\23\3\0\1\23\1\164\6\23\2\0"+
    "\1\23\3\0\1\352\27\23\2\0\3\23\3\0\1\23"+
    "\1\164\6\23\2\0\1\23\3\0\1\23\1\353\26\23"+
    "\2\0\3\23\3\0\1\23\1\164\6\23\2\0\1\23"+
    "\3\0\1\23\1\354\26\23\2\0\3\23\3\0\1\23"+
    "\1\164\6\23\2\0\1\23\3\0\13\23\1\355\14\23"+
    "\2\0\3\23\3\0\1\23\1\164\6\23\2\0\1\23"+
    "\3\0\20\23\1\356\7\23\2\0\3\23\3\0\1\23"+
    "\1\164\6\23\2\0\1\23\3\0\11\23\1\357\16\23"+
    "\2\0\3\23\3\0\1\23\1\164\6\23\2\0\1\23"+
    "\3\0\20\23\1\360\7\23\2\0\3\23\3\0\1\23"+
    "\1\164\6\23\2\0\1\23\3\0\16\23\1\361\11\23"+
    "\2\0\3\23\3\0\1\23\1\164\6\23\2\0\1\23"+
    "\3\0\10\23\1\362\14\23\1\363\2\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\1\364"+
    "\4\23\1\365\12\23\1\366\7\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\6\23\1\367"+
    "\21\23\2\0\3\23\3\0\1\23\1\164\6\23\2\0"+
    "\1\23\3\0\1\23\1\370\26\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\1\23\1\224"+
    "\3\23\1\371\5\23\1\372\14\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\4\23\1\373"+
    "\23\23\2\0\3\23\3\0\1\23\1\164\6\23\2\0"+
    "\1\23\3\0\1\23\1\374\26\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\5\23\1\375"+
    "\22\23\2\0\3\23\3\0\1\23\1\164\6\23\2\0"+
    "\1\23\3\0\1\234\27\23\2\0\3\23\3\0\1\23"+
    "\1\164\6\23\2\0\1\23\3\0\10\23\1\376\4\23"+
    "\1\377\12\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\1\23\1\u0100\26\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\11\23"+
    "\1\u0101\16\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\20\23\1\u0102\7\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\11\23"+
    "\1\u0103\16\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\6\23\1\u0104\21\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\16\23"+
    "\1\u0105\11\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\10\23\1\u0106\17\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\1\23"+
    "\1\356\26\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\6\23\1\u0107\21\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\13\23"+
    "\1\347\14\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\13\23\1\u0108\14\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\4\23"+
    "\1\u0109\23\23\2\0\3\23\3\0\1\23\1\164\5\23"+
    "\2\241\1\0\45\241\1\0\2\241\1\u010a\2\241\1\244"+
    "\2\0\1\244\1\0\2\245\27\244\1\u010b\2\245\3\244"+
    "\3\245\1\244\1\246\5\244\1\245\2\0\1\245\1\0"+
    "\31\245\1\u010c\17\245\1\244\2\0\1\244\1\0\2\245"+
    "\27\244\1\u010b\2\245\3\244\3\245\1\244\1\246\1\u010d"+
    "\4\244\2\101\1\250\2\101\1\165\51\101\2\250\2\101"+
    "\1\165\50\101\1\252\1\101\1\252\1\253\1\101\1\167"+
    "\50\252\1\u010e\1\u010f\2\u010e\1\u0110\1\263\50\u010e\1\254"+
    "\1\101\1\254\1\u0111\1\101\1\171\50\254\1\255\1\101"+
    "\1\100\1\255\1\101\1\256\1\257\27\255\1\u0112\17\255"+
    "\1\256\1\0\1\74\1\260\1\0\1\256\1\245\27\256"+
    "\1\u0113\17\256\1\257\2\101\1\257\1\101\1\245\30\257"+
    "\1\u0114\17\257\1\263\1\0\2\263\1\0\51\263\1\114"+
    "\1\0\1\114\1\262\1\0\1\114\1\0\20\114\1\u0115"+
    "\26\114\1\265\1\0\1\114\1\266\1\0\1\265\1\245"+
    "\27\265\1\u0116\17\265\1\267\1\0\1\122\1\267\1\0"+
    "\1\267\1\245\27\267\1\u0117\17\267\1\270\1\126\1\270"+
    "\1\271\1\126\32\270\1\167\10\270\1\167\5\270\1\u0118"+
    "\1\u0119\2\u0118\1\u011a\32\u0118\1\263\10\u0118\1\263\5\u0118"+
    "\1\272\1\126\1\272\1\u011b\1\126\32\272\1\171\10\272"+
    "\1\171\5\272\10\126\1\u011c\26\126\1\0\10\126\1\0"+
    "\20\126\1\u011d\23\126\1\0\10\126\1\0\20\126\1\u011e"+
    "\23\126\1\0\10\126\1\0\22\126\1\u011f\21\126\1\0"+
    "\10\126\1\0\15\126\1\u0120\26\126\1\0\10\126\1\0"+
    "\15\126\1\u0121\26\126\1\0\10\126\1\0\27\126\1\u0122"+
    "\14\126\1\0\10\126\1\0\34\126\1\307\7\126\1\0"+
    "\10\126\1\0\25\126\1\u0123\16\126\1\0\10\126\1\0"+
    "\34\126\1\u0124\7\126\1\0\10\126\1\0\32\126\1\u0125"+
    "\11\126\1\0\10\126\1\0\24\126\1\u0126\17\126\1\0"+
    "\10\126\1\0\22\126\1\u0127\21\126\1\0\10\126\1\0"+
    "\15\126\1\u0128\26\126\1\0\10\126\1\0\15\126\1\320"+
    "\3\126\1\u0129\5\126\1\u012a\14\126\1\0\10\126\1\0"+
    "\20\126\1\u012b\23\126\1\0\10\126\1\0\15\126\1\u012c"+
    "\26\126\1\0\10\126\1\0\14\126\1\325\27\126\1\0"+
    "\10\126\1\0\24\126\1\u012d\4\126\1\u012e\12\126\1\0"+
    "\10\126\1\0\15\126\1\u012f\26\126\1\0\10\126\1\0"+
    "\25\126\1\u0130\16\126\1\0\10\126\1\0\25\126\1\u0131"+
    "\16\126\1\0\10\126\1\0\32\126\1\u0132\11\126\1\0"+
    "\10\126\1\0\15\126\1\307\26\126\1\0\10\126\1\0"+
    "\22\126\1\u0133\21\126\1\0\10\126\1\0\27\126\1\u011d"+
    "\14\126\1\0\10\126\1\0\27\126\1\u0134\14\126\1\0"+
    "\10\126\1\0\5\126\2\327\1\0\34\327\1\u0135\10\327"+
    "\1\0\5\327\1\330\2\126\1\330\1\126\31\330\1\u0136"+
    "\1\245\10\330\1\245\5\330\1\161\2\101\1\161\1\101"+
    "\1\0\1\101\30\161\2\101\3\161\3\101\1\161\1\333"+
    "\1\u0137\4\161\1\334\2\101\1\334\1\101\1\245\1\257"+
    "\27\334\1\u0138\2\257\3\334\3\257\1\334\1\335\6\334"+
    "\2\101\1\334\1\101\1\245\1\257\27\334\1\u0138\2\257"+
    "\3\334\3\257\1\334\1\335\1\u0139\4\334\2\u013a\1\101"+
    "\2\u013a\1\327\31\u013a\1\101\10\u013a\1\101\5\u013a\1\337"+
    "\1\u013b\1\0\1\337\3\u013b\30\337\1\23\1\u013b\3\337"+
    "\3\u013b\1\337\1\164\5\337\1\340\1\0\1\340\1\u013c"+
    "\1\0\51\340\1\0\1\340\54\0\1\u013d\1\340\2\u013d"+
    "\1\341\51\u013d\1\23\2\0\1\23\3\0\2\23\1\232"+
    "\25\23\2\0\3\23\3\0\1\23\1\164\6\23\2\0"+
    "\1\23\3\0\6\23\1\u013e\21\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\1\u013f\27\23"+
    "\2\0\3\23\3\0\1\23\1\164\6\23\2\0\1\23"+
    "\3\0\2\23\1\u0140\25\23\2\0\3\23\3\0\1\23"+
    "\1\164\6\23\2\0\1\23\3\0\13\23\1\356\14\23"+
    "\2\0\3\23\3\0\1\23\1\164\6\23\2\0\1\23"+
    "\3\0\13\23\1\357\14\23\2\0\3\23\3\0\1\23"+
    "\1\164\6\23\2\0\1\23\3\0\7\23\1\233\20\23"+
    "\2\0\3\23\3\0\1\23\1\164\6\23\2\0\1\23"+
    "\3\0\1\23\1\u0141\26\23\2\0\3\23\3\0\1\23"+
    "\1\164\6\23\2\0\1\23\3\0\20\23\1\u0142\7\23"+
    "\2\0\3\23\3\0\1\23\1\164\6\23\2\0\1\23"+
    "\3\0\5\23\1\u0143\22\23\2\0\3\23\3\0\1\23"+
    "\1\164\6\23\2\0\1\23\3\0\20\23\1\u0144\7\23"+
    "\2\0\3\23\3\0\1\23\1\164\6\23\2\0\1\23"+
    "\3\0\17\23\1\u0145\10\23\2\0\3\23\3\0\1\23"+
    "\1\164\6\23\2\0\1\23\3\0\11\23\1\u0146\5\23"+
    "\1\u0147\10\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\20\23\1\u0148\7\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\2\23"+
    "\1\356\25\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\13\23\1\u0149\14\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\30\23"+
    "\2\0\3\23\3\0\1\23\1\164\4\23\1\u014a\1\23"+
    "\2\0\1\23\3\0\1\u014b\17\23\1\u014c\7\23\2\0"+
    "\3\23\3\0\1\23\1\164\6\23\2\0\1\23\3\0"+
    "\1\u014d\27\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\13\23\1\u014e\14\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\1\u014f"+
    "\27\23\2\0\3\23\3\0\1\23\1\164\6\23\2\0"+
    "\1\23\3\0\20\23\1\u0150\7\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\1\356\15\23"+
    "\1\u0151\11\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\26\23\1\343\1\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\16\23"+
    "\1\356\11\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\25\23\1\363\2\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\10\23"+
    "\1\u0152\17\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\11\23\1\374\16\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\6\23"+
    "\1\u0153\21\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\16\23\1\u0154\11\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\1\u0155"+
    "\27\23\2\0\3\23\3\0\1\23\1\164\6\23\2\0"+
    "\1\23\3\0\1\u0156\27\23\2\0\3\23\3\0\1\23"+
    "\1\164\6\23\2\0\1\23\3\0\26\23\1\u0157\1\23"+
    "\2\0\3\23\3\0\1\23\1\164\6\23\2\0\1\23"+
    "\3\0\12\23\1\u0158\15\23\2\0\3\23\3\0\1\23"+
    "\1\164\6\23\2\0\1\23\3\0\6\23\1\u0159\21\23"+
    "\2\0\3\23\3\0\1\23\1\164\6\23\2\0\1\23"+
    "\3\0\5\23\1\356\22\23\2\0\3\23\3\0\1\23"+
    "\1\164\6\23\2\0\1\23\3\0\14\23\1\u014e\13\23"+
    "\2\0\3\23\3\0\1\23\1\164\6\23\2\0\1\23"+
    "\3\0\16\23\1\u015a\11\23\2\0\3\23\3\0\1\23"+
    "\1\164\5\23\1\u010d\1\u013b\1\0\1\u010d\1\u013b\2\u015b"+
    "\27\u010d\1\u015c\1\244\1\u015b\3\u010d\3\u015b\1\u010d\1\246"+
    "\5\u010d\1\u010e\1\101\2\u010e\1\101\1\263\50\u010e\1\u010f"+
    "\1\101\1\u010f\1\u015d\1\101\1\340\50\u010f\1\101\1\u010f"+
    "\3\101\1\0\50\101\1\u015e\1\u010f\2\u015e\1\u0110\1\u013d"+
    "\50\u015e\1\114\1\0\1\114\1\262\1\0\1\114\1\0"+
    "\1\u015f\46\114\1\u0118\1\126\2\u0118\1\126\32\u0118\1\263"+
    "\10\u0118\1\263\5\u0118\1\u0119\1\126\1\u0119\1\u0160\1\126"+
    "\32\u0119\1\340\10\u0119\1\340\5\u0119\1\126\1\u0119\35\126"+
    "\1\0\10\126\1\0\5\126\1\u0161\1\u0119\2\u0161\1\u011a"+
    "\32\u0161\1\u013d\10\u0161\1\u013d\5\u0161\11\126\1\323\25\126"+
    "\1\0\10\126\1\0\27\126\1\307\14\126\1\0\10\126"+
    "\1\0\27\126\1\u0123\14\126\1\0\10\126\1\0\23\126"+
    "\1\324\20\126\1\0\10\126\1\0\34\126\1\u0162\7\126"+
    "\1\0\10\126\1\0\21\126\1\u0163\22\126\1\0\10\126"+
    "\1\0\34\126\1\u0164\7\126\1\0\10\126\1\0\33\126"+
    "\1\u0165\10\126\1\0\10\126\1\0\25\126\1\u0166\5\126"+
    "\1\u0167\10\126\1\0\10\126\1\0\34\126\1\145\7\126"+
    "\1\0\10\126\1\0\16\126\1\307\25\126\1\0\10\126"+
    "\1\0\27\126\1\u0168\14\126\1\0\10\126\1\0\14\126"+
    "\1\u0169\27\126\1\0\10\126\1\0\34\126\1\u016a\7\126"+
    "\1\0\10\126\1\0\14\126\1\307\15\126\1\u016b\11\126"+
    "\1\0\10\126\1\0\42\126\1\u011c\1\126\1\0\10\126"+
    "\1\0\32\126\1\307\11\126\1\0\10\126\1\0\24\126"+
    "\1\u016c\17\126\1\0\10\126\1\0\25\126\1\u012c\16\126"+
    "\1\0\10\126\1\0\22\126\1\u016d\21\126\1\0\10\126"+
    "\1\0\32\126\1\u016e\11\126\1\0\10\126\1\0\14\126"+
    "\1\u016f\27\126\1\0\10\126\1\0\26\126\1\u0170\15\126"+
    "\1\0\10\126\1\0\21\126\1\307\22\126\1\0\10\126"+
    "\1\0\30\126\1\u0168\13\126\1\0\10\126\1\0\5\126"+
    "\1\u0137\1\u0171\1\101\1\u0137\1\u0171\1\u013b\1\u0171\30\u0137"+
    "\1\161\1\u0171\3\u0137\3\u0171\1\u0137\1\333\5\u0137\1\u0139"+
    "\1\u0171\1\101\1\u0139\1\u0171\1\u015b\1\u0172\27\u0139\1\u0173"+
    "\1\334\1\u0172\3\u0139\3\u0172\1\u0139\1\335\5\u0139\2\u013b"+
    "\1\0\34\u013b\1\23\10\u013b\1\0\5\u013b\1\0\1\340"+
    "\2\0\1\341\51\0\1\u013d\1\0\2\u013d\1\0\51\u013d"+
    "\1\23\2\0\1\23\3\0\10\23\1\u0174\17\23\2\0"+
    "\3\23\3\0\1\23\1\164\6\23\2\0\1\23\3\0"+
    "\1\23\1\u0175\26\23\2\0\3\23\3\0\1\23\1\164"+
    "\6\23\2\0\1\23\3\0\1\23\1\u0176\26\23\2\0"+
    "\3\23\3\0\1\23\1\164\6\23\2\0\1\23\3\0"+
    "\11\23\1\356\1\23\1\u0177\14\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\6\23\1\u0178"+
    "\21\23\2\0\3\23\3\0\1\23\1\164\6\23\2\0"+
    "\1\23\3\0\25\23\1\u0179\2\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\4\23\1\u017a"+
    "\23\23\2\0\3\23\3\0\1\23\1\164\6\23\2\0"+
    "\1\23\3\0\14\23\1\u017b\13\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\1\23\1\u017c"+
    "\26\23\2\0\3\23\3\0\1\23\1\164\6\23\2\0"+
    "\1\23\3\0\6\23\1\232\21\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\14\23\1\u017d"+
    "\13\23\2\0\3\23\3\0\1\23\1\164\6\23\2\0"+
    "\1\23\3\0\30\23\2\0\3\23\3\0\1\23\1\164"+
    "\4\23\1\u017e\1\23\2\0\1\23\3\0\1\u017f\27\23"+
    "\2\0\3\23\3\0\1\23\1\164\6\23\2\0\1\23"+
    "\3\0\10\23\1\u0180\17\23\2\0\3\23\3\0\1\23"+
    "\1\164\6\23\2\0\1\23\3\0\1\356\27\23\2\0"+
    "\3\23\3\0\1\23\1\164\6\23\2\0\1\23\3\0"+
    "\4\23\1\u0181\23\23\2\0\3\23\3\0\1\23\1\164"+
    "\6\23\2\0\1\23\3\0\11\23\1\u0182\16\23\2\0"+
    "\3\23\3\0\1\23\1\164\6\23\2\0\1\23\3\0"+
    "\1\u0183\27\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\6\23\1\u0184\21\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\17\23"+
    "\1\356\10\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\3\23\1\u0185\24\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\10\23"+
    "\1\u0186\17\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\5\23\1\u0187\22\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\4\23"+
    "\1\u0188\23\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\11\23\1\u0189\16\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\5\23"+
    "\1\u018a\22\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\12\23\1\u018b\15\23\2\0\3\23"+
    "\3\0\1\23\1\164\5\23\1\u015b\1\u013b\1\0\1\u015b"+
    "\1\u013b\31\u015b\1\u018c\1\244\10\u015b\1\245\5\u015b\1\101"+
    "\1\u010f\2\101\1\u0110\1\0\50\101\1\u015e\1\101\2\u015e"+
    "\1\101\1\u013d\50\u015e\1\114\1\0\1\114\1\262\1\0"+
    "\1\114\1\0\10\114\1\u018d\36\114\1\126\1\u0119\2\126"+
    "\1\u011a\32\126\1\0\10\126\1\0\5\126\1\u0161\1\126"+
    "\2\u0161\1\126\32\u0161\1\u013d\10\u0161\1\u013d\5\u0161\20\126"+
    "\1\307\1\126\1\u018e\14\126\1\0\10\126\1\0\22\126"+
    "\1\u018f\21\126\1\0\10\126\1\0\41\126\1\u0190\2\126"+
    "\1\0\10\126\1\0\20\126\1\u0191\23\126\1\0\10\126"+
    "\1\0\30\126\1\u0192\13\126\1\0\10\126\1\0\15\126"+
    "\1\u0193\26\126\1\0\10\126\1\0\14\126\1\307\27\126"+
    "\1\0\10\126\1\0\20\126\1\u0194\23\126\1\0\10\126"+
    "\1\0\25\126\1\u0195\16\126\1\0\10\126\1\0\14\126"+
    "\1\u0196\27\126\1\0\10\126\1\0\22\126\1\u0197\21\126"+
    "\1\0\10\126\1\0\33\126\1\307\10\126\1\0\10\126"+
    "\1\0\17\126\1\u0198\24\126\1\0\10\126\1\0\21\126"+
    "\1\u0199\22\126\1\0\10\126\1\0\25\126\1\u019a\16\126"+
    "\1\0\10\126\1\0\5\126\2\u0171\1\101\2\u0171\1\u013b"+
    "\31\u0171\1\161\10\u0171\1\101\5\u0171\1\u0172\1\u0171\1\101"+
    "\1\u0172\1\u0171\1\u015b\30\u0172\1\u019b\1\334\10\u0172\1\257"+
    "\5\u0172\1\23\2\0\1\23\3\0\16\23\1\u019c\11\23"+
    "\2\0\3\23\3\0\1\23\1\164\6\23\2\0\1\23"+
    "\3\0\6\23\1\u019d\21\23\2\0\3\23\3\0\1\23"+
    "\1\164\6\23\2\0\1\23\3\0\6\23\1\377\21\23"+
    "\2\0\3\23\3\0\1\23\1\164\6\23\2\0\1\23"+
    "\3\0\5\23\1\u019e\22\23\2\0\3\23\3\0\1\23"+
    "\1\164\6\23\2\0\1\23\3\0\4\23\1\u019f\23\23"+
    "\2\0\3\23\3\0\1\23\1\164\6\23\2\0\1\23"+
    "\3\0\16\23\1\u01a0\11\23\2\0\3\23\3\0\1\23"+
    "\1\164\6\23\2\0\1\23\3\0\10\23\1\376\17\23"+
    "\2\0\3\23\3\0\1\23\1\164\6\23\2\0\1\23"+
    "\3\0\1\376\27\23\2\0\3\23\3\0\1\23\1\164"+
    "\6\23\2\0\1\23\3\0\20\23\1\u01a1\7\23\2\0"+
    "\3\23\3\0\1\23\1\164\6\23\2\0\1\23\3\0"+
    "\10\23\1\u01a2\17\23\2\0\3\23\3\0\1\23\1\164"+
    "\6\23\2\0\1\23\3\0\25\23\1\u01a0\2\23\2\0"+
    "\3\23\3\0\1\23\1\164\6\23\2\0\1\23\3\0"+
    "\16\23\1\u01a3\11\23\2\0\3\23\3\0\1\23\1\164"+
    "\6\23\2\0\1\23\3\0\1\23\1\u01a4\26\23\2\0"+
    "\3\23\3\0\1\23\1\164\6\23\2\0\1\23\3\0"+
    "\22\23\1\356\5\23\2\0\3\23\3\0\1\23\1\164"+
    "\6\23\2\0\1\23\3\0\2\23\1\u019f\25\23\2\0"+
    "\3\23\3\0\1\23\1\164\6\23\2\0\1\23\3\0"+
    "\6\23\1\u01a5\21\23\2\0\3\23\3\0\1\23\1\164"+
    "\6\23\2\0\1\23\3\0\4\23\1\u01a6\23\23\2\0"+
    "\3\23\3\0\1\23\1\164\6\23\2\0\1\23\3\0"+
    "\16\23\1\u01a7\11\23\2\0\3\23\3\0\1\23\1\164"+
    "\6\23\2\0\1\23\3\0\14\23\1\u01a8\13\23\2\0"+
    "\3\23\3\0\1\23\1\164\6\23\2\0\1\23\3\0"+
    "\1\u01a9\27\23\2\0\3\23\3\0\1\23\1\164\5\23"+
    "\15\126\1\u012e\21\126\1\0\10\126\1\0\21\126\1\u01aa"+
    "\22\126\1\0\10\126\1\0\20\126\1\u01ab\23\126\1\0"+
    "\10\126\1\0\32\126\1\u01ac\11\126\1\0\10\126\1\0"+
    "\24\126\1\u012d\17\126\1\0\10\126\1\0\14\126\1\u012d"+
    "\27\126\1\0\10\126\1\0\41\126\1\u01ac\2\126\1\0"+
    "\10\126\1\0\32\126\1\u01ad\11\126\1\0\10\126\1\0"+
    "\15\126\1\u01ae\26\126\1\0\10\126\1\0\36\126\1\307"+
    "\5\126\1\0\10\126\1\0\16\126\1\u01ab\25\126\1\0"+
    "\10\126\1\0\20\126\1\u01af\23\126\1\0\10\126\1\0"+
    "\30\126\1\u01b0\13\126\1\0\10\126\1\0\5\126\1\23"+
    "\2\0\1\23\3\0\20\23\1\u01b1\7\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\7\23"+
    "\1\356\20\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\1\23\1\205\26\23\2\0\3\23"+
    "\3\0\1\23\1\164\6\23\2\0\1\23\3\0\12\23"+
    "\1\356\15\23\2\0\3\23\3\0\1\23\1\164\6\23"+
    "\2\0\1\23\3\0\1\u01b2\27\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\1\23\1\u0143"+
    "\26\23\2\0\3\23\3\0\1\23\1\164\6\23\2\0"+
    "\1\23\3\0\21\23\1\u01b3\6\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\5\23\1\u01b4"+
    "\22\23\2\0\3\23\3\0\1\23\1\164\6\23\2\0"+
    "\1\23\3\0\23\23\1\u014e\4\23\2\0\3\23\3\0"+
    "\1\23\1\164\6\23\2\0\1\23\3\0\1\u01b5\27\23"+
    "\2\0\3\23\3\0\1\23\1\164\6\23\2\0\1\23"+
    "\3\0\15\23\1\377\12\23\2\0\3\23\3\0\1\23"+
    "\1\164\5\23\16\126\1\307\20\126\1\0\10\126\1\0"+
    "\15\126\1\302\26\126\1\0\10\126\1\0\26\126\1\307"+
    "\15\126\1\0\10\126\1\0\15\126\1\u0163\26\126\1\0"+
    "\10\126\1\0\35\126\1\u01b6\6\126\1\0\10\126\1\0"+
    "\37\126\1\u0168\4\126\1\0\10\126\1\0\31\126\1\u012e"+
    "\12\126\1\0\10\126\1\0\5\126\1\23\2\0\1\23"+
    "\3\0\1\u01b7\27\23\2\0\3\23\3\0\1\23\1\164"+
    "\6\23\2\0\1\23\3\0\2\23\1\u01b8\25\23\2\0"+
    "\3\23\3\0\1\23\1\164\6\23\2\0\1\23\3\0"+
    "\1\u01b9\27\23\2\0\3\23\3\0\1\23\1\164\5\23"+
    "\11\126\1\u01ba\25\126\1\0\10\126\1\0\5\126\1\23"+
    "\2\0\1\23\3\0\14\23\1\374\13\23\2\0\3\23"+
    "\3\0\1\23\1\164\5\23\23\126\1\u012c\13\126\1\0"+
    "\10\126\1\0\5\126";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17894];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\2\1\3\0\31\1\1\11\2\1\1\11\1\1"+
    "\1\11\4\1\1\11\4\1\1\11\15\1\1\11\37\1"+
    "\1\11\3\1\1\11\62\1\1\11\2\0\1\11\1\1"+
    "\1\0\1\1\1\0\10\1\3\0\3\1\1\0\40\1"+
    "\1\0\1\1\1\0\7\1\1\0\50\1\1\11\1\1"+
    "\1\11\50\1\1\11\5\1\2\0\36\1\1\0\137\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MakefileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MakefileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case INCLUDES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 443: break;
            case EXPORT: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 444: break;
            case EXPORTVAR: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 445: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return FUNCTION_PARAM_TEXT;
            } 
            // fall through
          case 50: break;
          case 2: 
            { return IDENTIFIER;
            } 
            // fall through
          case 51: break;
          case 3: 
            { return EOL;
            } 
            // fall through
          case 52: break;
          case 4: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 53: break;
          case 5: 
            { return COMMENT;
            } 
            // fall through
          case 54: break;
          case 6: 
            { return FUNCTION_END;
            } 
            // fall through
          case 55: break;
          case 7: 
            { return COLON;
            } 
            // fall through
          case 56: break;
          case 8: 
            { yybegin(SOURCE_FORCED); return SEMICOLON;
            } 
            // fall through
          case 57: break;
          case 9: 
            { return COMMA;
            } 
            // fall through
          case 58: break;
          case 10: 
            { return PIPE;
            } 
            // fall through
          case 59: break;
          case 11: 
            { yybegin(SOURCE); return ASSIGN;
            } 
            // fall through
          case 60: break;
          case 12: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 61: break;
          case 13: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 62: break;
          case 14: 
            { yybegin(SOURCE); return TAB;
            } 
            // fall through
          case 63: break;
          case 15: 
            { yybegin(YYINITIAL); return EOL;
            } 
            // fall through
          case 64: break;
          case 16: 
            { return TEXT;
            } 
            // fall through
          case 65: break;
          case 17: 
            { yypushback(yylength()); yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 66: break;
          case 18: 
            { return TAB;
            } 
            // fall through
          case 67: break;
          case 19: 
            { yybegin(DEFINEBODY); return WHITE_SPACE;
            } 
            // fall through
          case 68: break;
          case 20: 
            { return ASSIGN;
            } 
            // fall through
          case 69: break;
          case 21: 
            { return VARIABLE_VALUE_LINE;
            } 
            // fall through
          case 70: break;
          case 22: 
            { yybegin(YYINITIAL); return CONDITION;
            } 
            // fall through
          case 71: break;
          case 23: 
            { yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 72: break;
          case 24: 
            { yybegin(YYINITIAL); return FUNCTION_END;
            } 
            // fall through
          case 73: break;
          case 25: 
            { yybegin(EXPORTVAR); return ASSIGN;
            } 
            // fall through
          case 74: break;
          case 26: 
            { return SPLIT;
            } 
            // fall through
          case 75: break;
          case 27: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 76: break;
          case 28: 
            { return FUNCTION_NAME;
            } 
            // fall through
          case 77: break;
          case 29: 
            { return DOUBLECOLON;
            } 
            // fall through
          case 78: break;
          case 30: 
            { return FUNCTION_START;
            } 
            // fall through
          case 79: break;
          case 31: 
            { return STRING;
            } 
            // fall through
          case 80: break;
          case 32: 
            { yybegin(FUNCTION); return FUNCTION_START;
            } 
            // fall through
          case 81: break;
          case 33: 
            { return VARIABLE_USAGE_CURLY;
            } 
            // fall through
          case 82: break;
          case 34: 
            { return MACRO;
            } 
            // fall through
          case 83: break;
          case 35: 
            { return VARIABLE_USAGE;
            } 
            // fall through
          case 84: break;
          case 36: 
            { return KEYWORD_ELSE;
            } 
            // fall through
          case 85: break;
          case 37: 
            { return KEYWORD_IFEQ;
            } 
            // fall through
          case 86: break;
          case 38: 
            { return KEYWORD_ENDIF;
            } 
            // fall through
          case 87: break;
          case 39: 
            { return KEYWORD_IFNEQ;
            } 
            // fall through
          case 88: break;
          case 40: 
            { return KEYWORD_IFDEF;
            } 
            // fall through
          case 89: break;
          case 41: 
            { return KEYWORD_VPATH;
            } 
            // fall through
          case 90: break;
          case 42: 
            { yybegin(YYINITIAL); return KEYWORD_ENDEF;
            } 
            // fall through
          case 91: break;
          case 43: 
            { yybegin(EXPORT); return KEYWORD_EXPORT;
            } 
            // fall through
          case 92: break;
          case 44: 
            { return KEYWORD_IFNDEF;
            } 
            // fall through
          case 93: break;
          case 45: 
            { yybegin(DEFINE); return KEYWORD_DEFINE;
            } 
            // fall through
          case 94: break;
          case 46: 
            { return KEYWORD_INCLUDE;
            } 
            // fall through
          case 95: break;
          case 47: 
            { return KEYWORD_PRIVATE;
            } 
            // fall through
          case 96: break;
          case 48: 
            { return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 97: break;
          case 49: 
            { yybegin(INCLUDES); return KEYWORD_UNDEFINE;
            } 
            // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
