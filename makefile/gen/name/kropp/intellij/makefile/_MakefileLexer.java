/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package name.kropp.intellij.makefile;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static name.kropp.intellij.makefile.psi.MakefileTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>MakefileLexer.flex</tt>
 */
public class _MakefileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ELSE = 2;
  public static final int INCLUDES = 4;
  public static final int SOURCE = 6;
  public static final int SOURCE_FORCED = 8;
  public static final int DEFINE = 10;
  public static final int DEFINEBODY = 12;
  public static final int CONDITIONALS = 14;
  public static final int FUNCTION = 16;
  public static final int EXPORT = 18;
  public static final int EXPORTVAR = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4,  5,  6,  7,  6,  8,  9, 10, 11, 12, 13, 14, 
    15, 16, 17, 18, 19, 20
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\1\2\0\1\4\22\0\1\2\1\44\1\0\1\6\1\46\3\0\1\47\1\50\1\0\1\45\1"+
    "\0\1\30\14\0\1\37\1\40\1\0\1\42\1\0\1\43\1\36\33\0\1\3\4\0\1\13\1\24\1\34"+
    "\1\27\1\7\1\17\1\16\1\21\1\15\1\33\1\0\1\22\1\32\1\14\1\11\1\26\1\53\1\10"+
    "\1\20\1\25\1\23\1\35\1\12\1\31\2\0\1\51\1\41\1\52\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\2\1\4\0\1\2\1\3\1\4\1\2\1\4"+
    "\1\5\23\2\1\6\1\7\1\10\1\11\1\12\2\2"+
    "\1\12\1\13\1\14\1\2\1\15\1\16\1\15\1\12"+
    "\1\17\1\20\1\4\1\12\1\4\3\15\1\21\1\5"+
    "\1\15\1\17\1\22\1\12\1\23\1\12\1\2\1\24"+
    "\1\4\1\24\1\12\2\24\1\25\1\4\1\25\1\1"+
    "\1\5\21\1\1\12\1\1\1\12\1\26\1\12\1\2"+
    "\1\12\3\15\1\2\2\27\3\5\1\30\6\2\1\31"+
    "\11\2\1\31\24\2\1\32\1\33\1\0\1\2\1\0"+
    "\1\2\1\0\2\15\3\5\1\30\1\15\1\17\1\15"+
    "\3\0\1\5\2\24\1\0\1\25\3\5\1\30\3\1"+
    "\1\31\10\1\1\31\17\1\1\0\1\1\1\0\1\34"+
    "\3\15\1\34\1\2\1\5\1\0\2\30\13\2\1\31"+
    "\33\2\1\35\2\36\1\2\2\5\1\15\2\30\3\36"+
    "\1\24\2\36\2\5\1\1\2\30\31\1\1\36\1\15"+
    "\1\36\2\15\2\0\2\30\1\2\1\37\2\2\1\31"+
    "\7\2\1\40\20\2\1\0\1\36\1\15\2\30\1\24"+
    "\1\1\2\30\1\31\16\1\2\15\1\36\1\41\11\2"+
    "\1\42\1\2\1\43\12\2\1\44\1\36\1\45\15\1"+
    "\1\36\1\46\5\2\1\47\1\2\1\31\4\2\1\50"+
    "\4\1\1\31\2\1\1\2\1\51\2\2\1\52\1\1"+
    "\1\53\1\2\1\54\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[449];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4"+
    "\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554"+
    "\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4"+
    "\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u039c"+
    "\0\u039c\0\u0814\0\u0840\0\u0840\0\u086c\0\u0898\0\u0814\0\u08c4"+
    "\0\u08f0\0\u0814\0\u091c\0\u0948\0\u0814\0\u0974\0\u09a0\0\u09cc"+
    "\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c"+
    "\0\u0b58\0\u0b84\0\u0bb0\0\u0814\0\u0bdc\0\u0c08\0\u0c34\0\u0c60"+
    "\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0"+
    "\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20"+
    "\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080"+
    "\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c\0\u0814\0\u1188\0\u11b4"+
    "\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314"+
    "\0\u0814\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448"+
    "\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8"+
    "\0\u15d4\0\u1600\0\u162c\0\u1658\0\u1684\0\u16b0\0\u16dc\0\u1708"+
    "\0\u1734\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1810\0\u183c\0\u1868"+
    "\0\u1894\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u1970\0\u199c\0\u19c8"+
    "\0\u0840\0\u19f4\0\u1a20\0\u1a4c\0\u1a78\0\u1aa4\0\u0974\0\u1ad0"+
    "\0\u1afc\0\u1b28\0\u0a7c\0\u1b54\0\u1b80\0\u1bac\0\u1bd8\0\u1c04"+
    "\0\u1bd8\0\u0bdc\0\u0c34\0\u1c30\0\u1c5c\0\u1c88\0\u1c88\0\u1cb4"+
    "\0\u1ce0\0\u0dc0\0\u1d0c\0\u1d38\0\u1d64\0\u1d90\0\u1dbc\0\u1de8"+
    "\0\u1e14\0\u1e40\0\u1e6c\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48"+
    "\0\u0dc0\0\u1f74\0\u1fa0\0\u1fcc\0\u1ff8\0\u2024\0\u2050\0\u207c"+
    "\0\u20a8\0\u20d4\0\u2100\0\u212c\0\u2158\0\u2184\0\u21b0\0\u21dc"+
    "\0\u19f4\0\u2208\0\u1188\0\u19f4\0\u2234\0\u2260\0\u228c\0\u22b8"+
    "\0\u22e4\0\u2310\0\u233c\0\u0814\0\u2368\0\u2394\0\u23c0\0\u23ec"+
    "\0\u2418\0\u2444\0\u2470\0\u249c\0\u24c8\0\u24f4\0\u2520\0\u254c"+
    "\0\u039c\0\u2578\0\u25a4\0\u25d0\0\u25fc\0\u2628\0\u2654\0\u2680"+
    "\0\u26ac\0\u26d8\0\u2704\0\u2730\0\u275c\0\u2788\0\u27b4\0\u27e0"+
    "\0\u280c\0\u2838\0\u2864\0\u2890\0\u28bc\0\u28e8\0\u2914\0\u2940"+
    "\0\u296c\0\u2998\0\u29c4\0\u29f0\0\u0814\0\u039c\0\u0814\0\u2a1c"+
    "\0\u2a48\0\u2a74\0\u2aa0\0\u0a7c\0\u2acc\0\u0a50\0\u0974\0\u0a7c"+
    "\0\u2af8\0\u0c34\0\u0d3c\0\u2b24\0\u2b50\0\u2b7c\0\u0dc0\0\u2ba8"+
    "\0\u2bd4\0\u2c00\0\u2c2c\0\u2c58\0\u2c84\0\u2cb0\0\u2cdc\0\u2d08"+
    "\0\u2d34\0\u2d60\0\u2d8c\0\u2db8\0\u2de4\0\u2e10\0\u2e3c\0\u2e68"+
    "\0\u2e94\0\u2ec0\0\u2eec\0\u2f18\0\u2f44\0\u2f70\0\u2f9c\0\u2fc8"+
    "\0\u2ff4\0\u0dc0\0\u3020\0\u120c\0\u304c\0\u22b8\0\u3078\0\u30a4"+
    "\0\u30d0\0\u2310\0\u30fc\0\u039c\0\u3128\0\u3154\0\u3180\0\u31ac"+
    "\0\u31d8\0\u3204\0\u3230\0\u325c\0\u3288\0\u32b4\0\u039c\0\u32e0"+
    "\0\u330c\0\u3338\0\u3364\0\u3390\0\u33bc\0\u33e8\0\u3414\0\u3440"+
    "\0\u346c\0\u3498\0\u34c4\0\u34f0\0\u351c\0\u3548\0\u3574\0\u35a0"+
    "\0\u22e4\0\u35cc\0\u35f8\0\u2a74\0\u3624\0\u3650\0\u367c\0\u2b50"+
    "\0\u36a8\0\u36d4\0\u3700\0\u372c\0\u3758\0\u3784\0\u37b0\0\u37dc"+
    "\0\u3808\0\u3834\0\u3860\0\u388c\0\u38b8\0\u38e4\0\u3910\0\u393c"+
    "\0\u3968\0\u3020\0\u039c\0\u3994\0\u39c0\0\u39ec\0\u3a18\0\u3a44"+
    "\0\u3a70\0\u3a9c\0\u3ac8\0\u3af4\0\u039c\0\u3b20\0\u039c\0\u3b4c"+
    "\0\u3b78\0\u3ba4\0\u3bd0\0\u3bfc\0\u3c28\0\u3c54\0\u3c80\0\u3cac"+
    "\0\u3cd8\0\u039c\0\u3078\0\u0c34\0\u3d04\0\u3d30\0\u3d5c\0\u3d88"+
    "\0\u3db4\0\u3de0\0\u3e0c\0\u3e38\0\u3e64\0\u3e90\0\u3ebc\0\u3ee8"+
    "\0\u3f14\0\u393c\0\u039c\0\u3f40\0\u3f6c\0\u3f98\0\u3fc4\0\u3ff0"+
    "\0\u039c\0\u401c\0\u4048\0\u4074\0\u40a0\0\u40cc\0\u40f8\0\u039c"+
    "\0\u4124\0\u4150\0\u417c\0\u41a8\0\u41d4\0\u4200\0\u422c\0\u4258"+
    "\0\u039c\0\u4284\0\u42b0\0\u039c\0\u42dc\0\u039c\0\u4308\0\u039c"+
    "\0\u4334";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[449];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\26\1\27\1\30\1\31\1\27\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\26\1\46\1\47\1\50\1\26\1\51\1\52"+
    "\1\53\2\26\1\54\1\55\1\56\1\26\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\26\1\67"+
    "\4\26\1\27\1\30\1\31\1\27\1\70\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\26\1\46\1\47\1\50\1\26\1\51\1\52"+
    "\1\53\2\26\1\54\1\55\1\56\1\71\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\26\1\67"+
    "\3\26\1\72\1\73\1\30\1\72\1\73\1\72\1\33"+
    "\46\72\1\73\1\30\1\72\1\73\1\72\1\33\27\72"+
    "\1\74\15\72\1\26\1\73\1\30\1\26\1\73\1\32"+
    "\1\33\30\26\1\75\2\26\3\75\1\26\1\75\1\26"+
    "\1\75\4\26\1\73\1\30\1\26\1\73\1\32\1\33"+
    "\27\26\1\71\1\75\2\26\3\75\1\26\1\75\1\26"+
    "\1\75\3\26\1\76\1\77\1\100\1\101\1\77\1\102"+
    "\1\33\45\76\1\103\1\104\1\103\1\105\1\104\1\106"+
    "\1\107\27\103\1\110\15\103\1\76\1\77\1\100\1\101"+
    "\1\77\1\106\1\33\27\76\1\111\15\76\1\26\1\112"+
    "\1\30\1\26\1\112\1\32\1\33\30\26\1\113\2\26"+
    "\1\114\2\115\1\116\1\75\1\26\1\75\4\26\1\112"+
    "\1\30\1\26\1\112\1\32\1\33\27\26\1\71\1\113"+
    "\2\26\1\114\2\115\1\116\1\75\1\26\1\75\3\26"+
    "\1\117\1\120\1\121\1\122\1\120\1\121\1\33\1\123"+
    "\45\117\1\120\1\121\1\122\1\120\1\121\1\33\1\123"+
    "\26\117\1\124\15\117\1\125\1\77\1\126\1\125\1\77"+
    "\1\125\1\33\46\125\1\77\1\126\1\125\1\77\1\125"+
    "\1\33\27\125\1\127\15\125\6\130\1\131\1\132\1\133"+
    "\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
    "\1\130\1\144\1\130\1\145\1\130\1\146\1\147\3\130"+
    "\1\150\1\151\1\152\10\130\1\153\1\130\1\67\11\130"+
    "\1\131\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
    "\1\141\1\142\1\143\1\130\1\144\1\130\1\145\1\130"+
    "\1\146\1\147\3\130\1\150\1\151\1\152\1\154\7\130"+
    "\1\153\1\130\1\67\3\130\1\26\1\73\1\30\1\26"+
    "\1\73\1\32\1\33\30\26\1\155\2\26\1\156\2\157"+
    "\1\160\1\161\1\26\1\75\3\26\1\162\2\104\1\162"+
    "\1\104\1\32\1\107\27\162\1\163\1\104\2\162\3\104"+
    "\1\162\1\164\1\162\1\104\3\162\1\76\1\73\1\100"+
    "\1\101\1\73\1\102\1\33\45\76\1\103\1\104\1\103"+
    "\1\105\1\104\1\102\1\107\27\103\1\110\15\103\1\26"+
    "\2\0\1\26\3\0\30\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\3\26\1\0\1\27\2\0\1\27"+
    "\51\0\1\30\51\0\1\26\1\166\1\0\1\26\1\167"+
    "\2\0\30\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\3\26\5\0\1\32\46\0\1\170\1\171\1\170"+
    "\1\172\1\0\1\170\1\173\45\170\1\26\2\0\1\26"+
    "\3\0\1\26\1\174\3\26\1\175\5\26\1\176\6\26"+
    "\1\177\3\26\1\200\1\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\4\26\2\0\1\26\3\0\1\201"+
    "\27\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\1\26\1\202\24\26\1\203"+
    "\1\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\2\26\1\204\1\26\1\205"+
    "\1\26\1\206\21\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\5\26\1\207"+
    "\7\26\1\210\2\26\1\211\7\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\2\26\1\212\25\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\5\26\1\213"+
    "\2\26\1\214\17\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\14\26\1\215"+
    "\13\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\2\26\1\216\3\26\1\217"+
    "\4\26\1\220\14\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\2\26\1\221"+
    "\3\26\1\222\3\26\1\223\1\26\1\224\1\26\1\225"+
    "\11\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\4\26\1\226\23\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\5\26\1\227\22\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\4\26\1\230\23\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\1\26\1\231"+
    "\2\26\1\232\23\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\1\233\5\26"+
    "\1\234\21\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\6\26\1\222\21\26"+
    "\1\0\2\26\3\0\1\26\1\165\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\2\26\1\235\25\26\1\0\2\26"+
    "\3\0\1\26\1\165\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\4\26\1\236\23\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\4\26\2\0\1\26\3\0\4\26"+
    "\1\237\12\26\1\240\10\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\3\26\37\0\1\241\2\0\1\62"+
    "\127\0\1\62\11\0\1\26\2\0\1\26\3\0\30\26"+
    "\1\0\2\26\1\62\2\0\1\26\1\165\1\26\1\0"+
    "\3\26\47\0\1\242\1\0\1\243\7\0\1\70\46\0"+
    "\1\244\2\0\1\244\1\0\2\245\27\244\1\26\1\245"+
    "\2\244\3\245\1\244\1\246\1\244\1\245\3\244\1\0"+
    "\1\73\2\0\1\73\47\0\1\245\2\0\1\245\1\0"+
    "\31\245\1\0\15\245\1\76\1\0\1\76\1\247\1\0"+
    "\1\76\1\0\45\76\1\0\1\77\2\0\1\77\47\0"+
    "\1\76\1\0\1\100\1\247\1\0\1\76\1\0\46\76"+
    "\1\166\1\76\1\247\1\167\1\76\1\0\46\76\1\0"+
    "\1\76\1\247\1\0\1\102\1\0\45\76\1\103\1\104"+
    "\2\103\1\104\1\76\1\104\45\103\5\104\1\0\46\104"+
    "\1\103\1\250\2\103\1\251\1\76\1\104\45\103\1\76"+
    "\1\0\1\76\1\247\1\0\1\106\1\0\45\76\1\252"+
    "\1\253\1\252\1\254\1\104\1\170\1\255\45\252\1\256"+
    "\1\104\1\103\1\256\1\104\1\257\1\260\27\256\1\103"+
    "\15\256\1\257\1\0\1\76\1\261\1\0\1\257\1\245"+
    "\27\257\1\76\15\257\1\0\1\112\2\0\1\112\106\0"+
    "\1\262\2\0\1\114\53\0\1\114\11\0\1\26\2\0"+
    "\1\26\3\0\30\26\1\0\2\26\1\114\2\0\1\26"+
    "\1\165\1\26\1\0\3\26\1\117\1\0\1\117\1\263"+
    "\1\0\1\117\1\0\45\117\1\0\1\120\2\0\1\120"+
    "\47\0\1\117\1\0\1\121\1\263\1\0\1\121\1\264"+
    "\46\117\1\166\1\117\1\263\1\167\1\117\1\0\46\117"+
    "\1\0\1\117\1\263\1\0\1\117\1\0\5\117\1\265"+
    "\37\117\1\266\1\0\1\117\1\267\1\0\1\266\1\245"+
    "\27\266\1\117\15\266\1\125\1\0\2\125\1\0\1\125"+
    "\1\0\46\125\1\0\1\126\1\125\1\0\1\125\1\0"+
    "\45\125\1\270\1\0\1\125\1\270\1\0\1\270\1\245"+
    "\27\270\1\125\15\270\46\130\1\0\1\130\1\0\3\130"+
    "\1\271\1\272\1\271\1\273\1\130\1\271\1\274\37\271"+
    "\1\170\1\271\1\170\3\271\10\130\1\275\24\130\1\276"+
    "\10\130\1\0\1\130\1\0\12\130\1\277\36\130\1\0"+
    "\1\130\1\0\13\130\1\300\35\130\1\0\1\130\1\0"+
    "\14\130\1\301\1\130\1\302\1\130\1\303\30\130\1\0"+
    "\1\130\1\0\17\130\1\304\7\130\1\305\2\130\1\306"+
    "\16\130\1\0\1\130\1\0\14\130\1\307\34\130\1\0"+
    "\1\130\1\0\17\130\1\310\2\130\1\311\26\130\1\0"+
    "\1\130\1\0\26\130\1\312\22\130\1\0\1\130\1\0"+
    "\14\130\1\313\3\130\1\314\4\130\1\315\23\130\1\0"+
    "\1\130\1\0\14\130\1\316\7\130\1\317\1\130\1\320"+
    "\1\130\1\321\20\130\1\0\1\130\1\0\16\130\1\322"+
    "\32\130\1\0\1\130\1\0\16\130\1\323\32\130\1\0"+
    "\1\130\1\0\16\130\1\324\32\130\1\0\1\130\1\0"+
    "\20\130\1\325\30\130\1\0\1\130\1\0\14\130\1\326"+
    "\34\130\1\0\1\130\1\0\16\130\1\327\32\130\1\0"+
    "\1\130\1\0\16\130\1\330\32\130\1\0\1\130\1\0"+
    "\3\130\47\0\1\331\4\0\1\332\2\130\1\332\1\130"+
    "\31\332\1\130\7\332\1\245\1\332\1\245\3\332\37\0"+
    "\1\333\2\0\1\156\53\0\1\156\11\0\1\26\2\0"+
    "\1\26\3\0\30\26\1\0\2\26\1\156\2\0\1\26"+
    "\1\165\1\26\1\0\3\26\47\0\1\334\4\0\1\162"+
    "\2\104\1\162\1\104\1\0\1\104\30\162\1\104\2\162"+
    "\3\104\1\162\1\335\1\162\1\104\3\162\1\336\2\104"+
    "\1\336\1\104\1\245\1\260\27\336\1\162\1\260\2\336"+
    "\3\260\1\336\1\337\1\336\1\260\3\336\5\104\1\0"+
    "\41\104\1\340\4\104\1\26\2\0\1\26\3\0\30\26"+
    "\1\0\2\26\3\0\1\26\1\165\1\341\1\0\3\26"+
    "\2\0\1\166\2\0\1\166\47\0\2\166\2\0\1\166"+
    "\46\0\1\170\1\171\1\170\1\172\1\0\47\170\1\264"+
    "\1\342\2\264\1\343\47\264\1\173\1\344\1\173\1\345"+
    "\1\0\47\173\1\26\2\0\1\26\3\0\1\26\1\346"+
    "\26\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\20\26\1\347\7\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\11\26\1\350\16\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\17\26\1\351\10\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\4\26\1\352"+
    "\23\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\4\26\1\353\23\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\6\26\1\354\21\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\1\355\27\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\1\26\1\356\26\26"+
    "\1\0\2\26\3\0\1\26\1\165\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\1\26\1\357\26\26\1\0\2\26"+
    "\3\0\1\26\1\165\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\13\26\1\360\14\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\4\26\2\0\1\26\3\0\20\26"+
    "\1\361\7\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\11\26\1\362\16\26"+
    "\1\0\2\26\3\0\1\26\1\165\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\20\26\1\363\7\26\1\0\2\26"+
    "\3\0\1\26\1\165\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\16\26\1\364\11\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\4\26\2\0\1\26\3\0\10\26"+
    "\1\365\14\26\1\366\2\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\4\26\2\0\1\26\3\0\1\367"+
    "\4\26\1\370\12\26\1\371\7\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\6\26\1\372\21\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\1\26\1\373"+
    "\26\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\1\26\1\226\3\26\1\374"+
    "\5\26\1\375\14\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\4\26\1\376"+
    "\23\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\1\26\1\377\26\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\5\26\1\u0100\22\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\1\236\27\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\10\26\1\u0101\4\26"+
    "\1\u0102\12\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\1\26\1\u0103\26\26"+
    "\1\0\2\26\3\0\1\26\1\165\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\11\26\1\u0104\16\26\1\0\2\26"+
    "\3\0\1\26\1\165\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\20\26\1\u0105\7\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\4\26\2\0\1\26\3\0\11\26"+
    "\1\u0106\16\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\6\26\1\u0107\21\26"+
    "\1\0\2\26\3\0\1\26\1\165\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\16\26\1\u0108\11\26\1\0\2\26"+
    "\3\0\1\26\1\165\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\10\26\1\u0109\17\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\4\26\2\0\1\26\3\0\1\26"+
    "\1\361\26\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\6\26\1\u010a\21\26"+
    "\1\0\2\26\3\0\1\26\1\165\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\13\26\1\352\14\26\1\0\2\26"+
    "\3\0\1\26\1\165\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\13\26\1\u010b\14\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\4\26\2\0\1\26\3\0\4\26"+
    "\1\u010c\23\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\3\26\2\331\1\0\43\331\1\0\1\331\1\u010d"+
    "\3\331\2\243\1\0\43\243\1\0\3\243\1\u010d\1\243"+
    "\1\244\2\0\1\244\1\0\2\245\27\244\1\u010e\1\245"+
    "\2\244\3\245\1\244\1\246\1\244\1\245\3\244\1\245"+
    "\2\0\1\245\1\0\31\245\1\u010f\15\245\1\244\2\0"+
    "\1\244\1\0\2\245\27\244\1\u010e\1\245\2\244\3\245"+
    "\1\244\1\246\1\u0110\1\245\3\244\2\104\1\250\2\104"+
    "\1\166\47\104\2\250\2\104\1\166\46\104\1\252\1\253"+
    "\1\252\1\254\1\104\1\170\46\252\1\u0111\1\u0112\2\u0111"+
    "\1\u0113\1\264\46\u0111\1\255\1\u0114\1\255\1\u0115\1\104"+
    "\1\173\46\255\1\256\1\104\1\103\1\256\1\104\1\257"+
    "\1\260\27\256\1\u0116\15\256\1\257\1\0\1\76\1\261"+
    "\1\0\1\257\1\245\27\257\1\u0117\15\257\1\260\2\104"+
    "\1\260\1\104\1\245\30\260\1\u0118\15\260\1\264\1\171"+
    "\2\264\1\0\47\264\1\117\1\0\1\117\1\263\1\0"+
    "\1\117\1\0\20\117\1\u0119\24\117\1\266\1\0\1\117"+
    "\1\267\1\0\1\266\1\245\27\266\1\u011a\15\266\1\270"+
    "\1\0\1\125\1\270\1\0\1\270\1\245\27\270\1\u011b"+
    "\15\270\1\271\1\272\1\271\1\273\1\130\41\271\1\170"+
    "\1\271\1\170\3\271\1\u011c\1\u011d\2\u011c\1\u011e\41\u011c"+
    "\1\264\1\u011c\1\264\3\u011c\1\274\1\u011f\1\274\1\u0120"+
    "\1\130\41\274\1\173\1\274\1\173\3\274\10\130\1\u0121"+
    "\35\130\1\0\1\130\1\0\16\130\1\u0122\32\130\1\0"+
    "\1\130\1\0\16\130\1\u0123\32\130\1\0\1\130\1\0"+
    "\20\130\1\u0124\30\130\1\0\1\130\1\0\13\130\1\u0125"+
    "\35\130\1\0\1\130\1\0\13\130\1\u0126\35\130\1\0"+
    "\1\130\1\0\25\130\1\u0127\23\130\1\0\1\130\1\0"+
    "\32\130\1\311\16\130\1\0\1\130\1\0\23\130\1\u0128"+
    "\25\130\1\0\1\130\1\0\32\130\1\u0129\16\130\1\0"+
    "\1\130\1\0\30\130\1\u012a\20\130\1\0\1\130\1\0"+
    "\22\130\1\u012b\26\130\1\0\1\130\1\0\20\130\1\u012c"+
    "\30\130\1\0\1\130\1\0\13\130\1\u012d\35\130\1\0"+
    "\1\130\1\0\13\130\1\322\3\130\1\u012e\5\130\1\u012f"+
    "\23\130\1\0\1\130\1\0\16\130\1\u0130\32\130\1\0"+
    "\1\130\1\0\13\130\1\u0131\35\130\1\0\1\130\1\0"+
    "\12\130\1\327\36\130\1\0\1\130\1\0\22\130\1\u0132"+
    "\4\130\1\u0133\21\130\1\0\1\130\1\0\13\130\1\u0134"+
    "\35\130\1\0\1\130\1\0\23\130\1\u0135\25\130\1\0"+
    "\1\130\1\0\23\130\1\u0136\25\130\1\0\1\130\1\0"+
    "\30\130\1\u0137\20\130\1\0\1\130\1\0\13\130\1\311"+
    "\35\130\1\0\1\130\1\0\20\130\1\u0138\30\130\1\0"+
    "\1\130\1\0\25\130\1\u0122\23\130\1\0\1\130\1\0"+
    "\25\130\1\u0139\23\130\1\0\1\130\1\0\3\130\1\332"+
    "\2\130\1\332\1\130\31\332\1\u013a\7\332\1\245\1\332"+
    "\1\245\3\332\1\162\2\104\1\162\1\104\1\0\1\104"+
    "\30\162\1\104\2\162\3\104\1\162\1\335\1\u013b\1\104"+
    "\3\162\1\336\2\104\1\336\1\104\1\245\1\260\27\336"+
    "\1\u013c\1\260\2\336\3\260\1\336\1\337\1\336\1\260"+
    "\4\336\2\104\1\336\1\104\1\245\1\260\27\336\1\u013c"+
    "\1\260\2\336\3\260\1\336\1\337\1\u013d\1\260\3\336"+
    "\2\u013e\1\104\2\u013e\1\331\40\u013e\1\104\1\u013e\1\104"+
    "\3\u013e\1\341\1\u013f\1\0\1\341\3\u013f\30\341\1\u013f"+
    "\2\341\3\u013f\1\341\1\165\1\341\1\26\3\341\1\342"+
    "\1\0\1\342\1\u0140\1\0\47\342\1\0\1\342\52\0"+
    "\1\u0141\1\u0142\2\u0141\1\343\47\u0141\1\26\2\0\1\26"+
    "\3\0\2\26\1\234\25\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\4\26\2\0\1\26\3\0\6\26"+
    "\1\u0143\21\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\1\u0144\27\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\2\26\1\u0145\25\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\13\26\1\361\14\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\13\26\1\362"+
    "\14\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\7\26\1\235\20\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\1\26\1\u0146\26\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\20\26\1\u0147\7\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\5\26\1\u0148"+
    "\22\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\20\26\1\u0149\7\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\17\26\1\u014a\10\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\11\26\1\u014b\5\26\1\u014c\10\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\20\26\1\u014d\7\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\2\26\1\361"+
    "\25\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\13\26\1\u014e\14\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\30\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\2\26\1\u014f\1\26\2\0\1\26\3\0"+
    "\1\u0150\17\26\1\u0151\7\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\4\26\2\0\1\26\3\0\1\u0152"+
    "\27\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\13\26\1\u0153\14\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\1\u0154\27\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\4\26\2\0\1\26\3\0\20\26"+
    "\1\u0155\7\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\1\361\15\26\1\u0156"+
    "\11\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\26\26\1\346\1\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\16\26\1\361\11\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\25\26\1\366\2\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\10\26\1\u0157"+
    "\17\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\11\26\1\377\16\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\6\26\1\u0158\21\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\16\26\1\u0159\11\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\1\u015a\27\26"+
    "\1\0\2\26\3\0\1\26\1\165\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\1\u015b\27\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\26\26\1\u015c\1\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\12\26\1\u015d"+
    "\15\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\6\26\1\u015e\21\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\5\26\1\361\22\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\14\26\1\u0153\13\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\16\26\1\u015f"+
    "\11\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\3\26\1\u0110\1\u013f\1\0\1\u0110\1\u013f\2\u0160\27\u0110"+
    "\1\u0161\1\u0160\2\u0110\3\u0160\1\u0110\1\246\1\u0110\1\244"+
    "\3\u0110\1\u0111\1\253\2\u0111\1\104\1\264\46\u0111\1\u0112"+
    "\1\104\1\u0112\1\u0162\1\104\1\342\46\u0112\1\104\1\u0112"+
    "\3\104\1\0\46\104\1\u0163\1\u0164\2\u0163\1\u0113\1\u0141"+
    "\46\u0163\1\117\1\0\1\117\1\263\1\0\1\117\1\0"+
    "\1\u0165\44\117\1\u011c\1\272\2\u011c\1\130\41\u011c\1\264"+
    "\1\u011c\1\264\3\u011c\1\u011d\1\130\1\u011d\1\u0166\1\130"+
    "\41\u011d\1\342\1\u011d\1\342\3\u011d\1\130\1\u011d\44\130"+
    "\1\0\1\130\1\0\3\130\1\u0167\1\u0168\2\u0167\1\u011e"+
    "\41\u0167\1\u0141\1\u0167\1\u0141\3\u0167\11\130\1\325\34\130"+
    "\1\0\1\130\1\0\25\130\1\311\23\130\1\0\1\130"+
    "\1\0\25\130\1\u0128\23\130\1\0\1\130\1\0\21\130"+
    "\1\326\27\130\1\0\1\130\1\0\32\130\1\u0169\16\130"+
    "\1\0\1\130\1\0\17\130\1\u016a\31\130\1\0\1\130"+
    "\1\0\32\130\1\u016b\16\130\1\0\1\130\1\0\31\130"+
    "\1\u016c\17\130\1\0\1\130\1\0\23\130\1\u016d\5\130"+
    "\1\u016e\17\130\1\0\1\130\1\0\32\130\1\147\16\130"+
    "\1\0\1\130\1\0\14\130\1\311\34\130\1\0\1\130"+
    "\1\0\25\130\1\u016f\23\130\1\0\1\130\1\0\12\130"+
    "\1\u0170\36\130\1\0\1\130\1\0\32\130\1\u0171\16\130"+
    "\1\0\1\130\1\0\12\130\1\311\15\130\1\u0172\20\130"+
    "\1\0\1\130\1\0\40\130\1\u0121\10\130\1\0\1\130"+
    "\1\0\30\130\1\311\20\130\1\0\1\130\1\0\22\130"+
    "\1\u0173\26\130\1\0\1\130\1\0\23\130\1\u0131\25\130"+
    "\1\0\1\130\1\0\20\130\1\u0174\30\130\1\0\1\130"+
    "\1\0\30\130\1\u0175\20\130\1\0\1\130\1\0\12\130"+
    "\1\u0176\36\130\1\0\1\130\1\0\24\130\1\u0177\24\130"+
    "\1\0\1\130\1\0\17\130\1\311\31\130\1\0\1\130"+
    "\1\0\26\130\1\u016f\22\130\1\0\1\130\1\0\3\130"+
    "\1\u013b\1\u0178\1\104\1\u013b\1\u0178\1\u013f\1\u0178\30\u013b"+
    "\1\u0178\2\u013b\3\u0178\1\u013b\1\335\1\u013b\1\162\3\u013b"+
    "\1\u013d\1\u0178\1\104\1\u013d\1\u0178\1\u0160\1\u0179\27\u013d"+
    "\1\u017a\1\u0179\2\u013d\3\u0179\1\u013d\1\337\1\u013d\1\336"+
    "\3\u013d\2\u013f\1\0\43\u013f\1\0\1\u013f\1\26\3\u013f"+
    "\1\0\1\342\2\0\1\343\47\0\1\u0141\1\344\2\u0141"+
    "\1\0\47\u0141\1\26\2\0\1\26\3\0\10\26\1\u017b"+
    "\17\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\1\26\1\u017c\26\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\1\26\1\u017d\26\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\11\26\1\361\1\26\1\u017e\14\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\6\26\1\u017f\21\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\25\26\1\u0180"+
    "\2\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\4\26\1\u0181\23\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\14\26\1\u0182\13\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\1\26\1\u0183\26\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\6\26\1\234"+
    "\21\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\14\26\1\u0184\13\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\30\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\2\26\1\u0185\1\26\2\0\1\26\3\0"+
    "\1\u0186\27\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\10\26\1\u0187\17\26"+
    "\1\0\2\26\3\0\1\26\1\165\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\1\361\27\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\4\26\1\u0188\23\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\11\26\1\u0189"+
    "\16\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\1\u018a\27\26\1\0\2\26"+
    "\3\0\1\26\1\165\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\6\26\1\u018b\21\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\4\26\2\0\1\26\3\0\17\26"+
    "\1\361\10\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\3\26\1\u018c\24\26"+
    "\1\0\2\26\3\0\1\26\1\165\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\10\26\1\u018d\17\26\1\0\2\26"+
    "\3\0\1\26\1\165\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\5\26\1\u018e\22\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\4\26\2\0\1\26\3\0\4\26"+
    "\1\u018f\23\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\11\26\1\u0190\16\26"+
    "\1\0\2\26\3\0\1\26\1\165\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\5\26\1\u0191\22\26\1\0\2\26"+
    "\3\0\1\26\1\165\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\12\26\1\u0192\15\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\3\26\1\u0160\1\u013f\1\0\1\u0160"+
    "\1\u013f\31\u0160\1\u0193\7\u0160\1\245\1\u0160\1\244\3\u0160"+
    "\1\104\1\u0112\2\104\1\u0113\1\0\46\104\1\u0163\1\u0114"+
    "\2\u0163\1\104\1\u0141\46\u0163\1\117\1\0\1\117\1\263"+
    "\1\0\1\117\1\0\10\117\1\u0194\34\117\1\130\1\u011d"+
    "\2\130\1\u011e\41\130\1\0\1\130\1\0\3\130\1\u0167"+
    "\1\u011f\2\u0167\1\130\41\u0167\1\u0141\1\u0167\1\u0141\3\u0167"+
    "\20\130\1\311\1\130\1\u0195\23\130\1\0\1\130\1\0"+
    "\20\130\1\u0196\30\130\1\0\1\130\1\0\37\130\1\u0197"+
    "\11\130\1\0\1\130\1\0\16\130\1\u0198\32\130\1\0"+
    "\1\130\1\0\26\130\1\u0199\22\130\1\0\1\130\1\0"+
    "\13\130\1\u019a\35\130\1\0\1\130\1\0\12\130\1\311"+
    "\36\130\1\0\1\130\1\0\16\130\1\u019b\32\130\1\0"+
    "\1\130\1\0\23\130\1\u019c\25\130\1\0\1\130\1\0"+
    "\12\130\1\u019d\36\130\1\0\1\130\1\0\20\130\1\u019e"+
    "\30\130\1\0\1\130\1\0\31\130\1\311\17\130\1\0"+
    "\1\130\1\0\15\130\1\u019f\33\130\1\0\1\130\1\0"+
    "\17\130\1\u01a0\31\130\1\0\1\130\1\0\23\130\1\u01a1"+
    "\25\130\1\0\1\130\1\0\3\130\2\u0178\1\104\2\u0178"+
    "\1\u013f\40\u0178\1\104\1\u0178\1\162\3\u0178\1\u0179\1\u0178"+
    "\1\104\1\u0179\1\u0178\1\u0160\30\u0179\1\u01a2\7\u0179\1\260"+
    "\1\u0179\1\336\3\u0179\1\26\2\0\1\26\3\0\16\26"+
    "\1\u01a3\11\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\6\26\1\u01a4\21\26"+
    "\1\0\2\26\3\0\1\26\1\165\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\6\26\1\u0102\21\26\1\0\2\26"+
    "\3\0\1\26\1\165\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\5\26\1\u01a5\22\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\4\26\2\0\1\26\3\0\4\26"+
    "\1\u01a6\23\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\16\26\1\u01a7\11\26"+
    "\1\0\2\26\3\0\1\26\1\165\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\10\26\1\u0101\17\26\1\0\2\26"+
    "\3\0\1\26\1\165\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\1\u0101\27\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\20\26\1\u01a8"+
    "\7\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\10\26\1\u01a9\17\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\25\26\1\u01a7\2\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\16\26\1\u01aa\11\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\1\26\1\u01ab"+
    "\26\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\22\26\1\361\5\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\2\26\1\u01a6\25\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\6\26\1\u01ac\21\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\4\26\1\u01ad"+
    "\23\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\16\26\1\u01ae\11\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\14\26\1\u01af\13\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\1\u01b0\27\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\3\26\15\130\1\u0133\30\130\1\0\1\130\1\0"+
    "\17\130\1\u01b1\31\130\1\0\1\130\1\0\16\130\1\u01b2"+
    "\32\130\1\0\1\130\1\0\30\130\1\u01b3\20\130\1\0"+
    "\1\130\1\0\22\130\1\u0132\26\130\1\0\1\130\1\0"+
    "\12\130\1\u0132\36\130\1\0\1\130\1\0\37\130\1\u01b3"+
    "\11\130\1\0\1\130\1\0\30\130\1\u01b4\20\130\1\0"+
    "\1\130\1\0\13\130\1\u01b5\35\130\1\0\1\130\1\0"+
    "\34\130\1\311\14\130\1\0\1\130\1\0\14\130\1\u01b2"+
    "\34\130\1\0\1\130\1\0\16\130\1\u01b6\32\130\1\0"+
    "\1\130\1\0\26\130\1\u01b7\22\130\1\0\1\130\1\0"+
    "\3\130\1\26\2\0\1\26\3\0\20\26\1\u01b8\7\26"+
    "\1\0\2\26\3\0\1\26\1\165\1\26\1\0\4\26"+
    "\2\0\1\26\3\0\7\26\1\361\20\26\1\0\2\26"+
    "\3\0\1\26\1\165\1\26\1\0\4\26\2\0\1\26"+
    "\3\0\1\26\1\207\26\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\4\26\2\0\1\26\3\0\12\26"+
    "\1\361\15\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\4\26\2\0\1\26\3\0\1\u01b9\27\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\1\26\1\u0148\26\26\1\0\2\26\3\0"+
    "\1\26\1\165\1\26\1\0\4\26\2\0\1\26\3\0"+
    "\21\26\1\u01ba\6\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\5\26\1\u01bb"+
    "\22\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\23\26\1\u0153\4\26\1\0"+
    "\2\26\3\0\1\26\1\165\1\26\1\0\4\26\2\0"+
    "\1\26\3\0\1\u01bc\27\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\4\26\2\0\1\26\3\0\15\26"+
    "\1\u0102\12\26\1\0\2\26\3\0\1\26\1\165\1\26"+
    "\1\0\3\26\16\130\1\311\27\130\1\0\1\130\1\0"+
    "\13\130\1\304\35\130\1\0\1\130\1\0\24\130\1\311"+
    "\24\130\1\0\1\130\1\0\13\130\1\u016a\35\130\1\0"+
    "\1\130\1\0\33\130\1\u01bd\15\130\1\0\1\130\1\0"+
    "\35\130\1\u016f\13\130\1\0\1\130\1\0\27\130\1\u0133"+
    "\21\130\1\0\1\130\1\0\3\130\1\26\2\0\1\26"+
    "\3\0\1\u01be\27\26\1\0\2\26\3\0\1\26\1\165"+
    "\1\26\1\0\4\26\2\0\1\26\3\0\2\26\1\u01bf"+
    "\25\26\1\0\2\26\3\0\1\26\1\165\1\26\1\0"+
    "\4\26\2\0\1\26\3\0\1\u01c0\27\26\1\0\2\26"+
    "\3\0\1\26\1\165\1\26\1\0\3\26\11\130\1\u01c1"+
    "\34\130\1\0\1\130\1\0\3\130\1\26\2\0\1\26"+
    "\3\0\14\26\1\377\13\26\1\0\2\26\3\0\1\26"+
    "\1\165\1\26\1\0\3\26\23\130\1\u0131\22\130\1\0"+
    "\1\130\1\0\3\130";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17248];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\2\1\4\0\34\1\1\11\4\1\1\11\2\1"+
    "\1\11\2\1\1\11\16\1\1\11\41\1\1\11\12\1"+
    "\1\11\51\1\1\0\1\1\1\0\1\1\1\0\11\1"+
    "\3\0\3\1\1\0\41\1\1\0\1\1\1\0\7\1"+
    "\1\0\1\11\50\1\1\11\1\1\1\11\57\1\2\0"+
    "\37\1\1\0\141\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[449];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MakefileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MakefileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case INCLUDES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 450: break;
            case EXPORT: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 451: break;
            case EXPORTVAR: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 452: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return FUNCTION_PARAM_TEXT;
            } 
            // fall through
          case 45: break;
          case 2: 
            { return IDENTIFIER;
            } 
            // fall through
          case 46: break;
          case 3: 
            { return EOL;
            } 
            // fall through
          case 47: break;
          case 4: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 48: break;
          case 5: 
            { return COMMENT;
            } 
            // fall through
          case 49: break;
          case 6: 
            { return COLON;
            } 
            // fall through
          case 50: break;
          case 7: 
            { yybegin(SOURCE_FORCED); return SEMICOLON;
            } 
            // fall through
          case 51: break;
          case 8: 
            { return PIPE;
            } 
            // fall through
          case 52: break;
          case 9: 
            { yybegin(SOURCE); return ASSIGN;
            } 
            // fall through
          case 53: break;
          case 10: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 54: break;
          case 11: 
            { yybegin(YYINITIAL); return FUNCTION_END;
            } 
            // fall through
          case 55: break;
          case 12: 
            { yybegin(SOURCE); return TAB;
            } 
            // fall through
          case 56: break;
          case 13: 
            { yypushback(yylength()); yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 57: break;
          case 14: 
            { yybegin(YYINITIAL); return EOL;
            } 
            // fall through
          case 58: break;
          case 15: 
            { return LINE;
            } 
            // fall through
          case 59: break;
          case 16: 
            { yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 60: break;
          case 17: 
            { return TAB;
            } 
            // fall through
          case 61: break;
          case 18: 
            { yybegin(DEFINEBODY); return WHITE_SPACE;
            } 
            // fall through
          case 62: break;
          case 19: 
            { return ASSIGN;
            } 
            // fall through
          case 63: break;
          case 20: 
            { return VARIABLE_VALUE_LINE;
            } 
            // fall through
          case 64: break;
          case 21: 
            { yybegin(YYINITIAL); return CONDITION;
            } 
            // fall through
          case 65: break;
          case 22: 
            { yybegin(EXPORTVAR); return ASSIGN;
            } 
            // fall through
          case 66: break;
          case 23: 
            { return SPLIT;
            } 
            // fall through
          case 67: break;
          case 24: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 68: break;
          case 25: 
            { return FUNCTION_NAME;
            } 
            // fall through
          case 69: break;
          case 26: 
            { return DOUBLECOLON;
            } 
            // fall through
          case 70: break;
          case 27: 
            { return FUNCTION_START;
            } 
            // fall through
          case 71: break;
          case 28: 
            { yybegin(FUNCTION); return FUNCTION_START;
            } 
            // fall through
          case 72: break;
          case 29: 
            { return VARIABLE_USAGE;
            } 
            // fall through
          case 73: break;
          case 30: 
            { return MACRO;
            } 
            // fall through
          case 74: break;
          case 31: 
            { yybegin(ELSE); return KEYWORD_ELSE;
            } 
            // fall through
          case 75: break;
          case 32: 
            { yybegin(CONDITIONALS); return KEYWORD_IFEQ;
            } 
            // fall through
          case 76: break;
          case 33: 
            { return KEYWORD_ENDIF;
            } 
            // fall through
          case 77: break;
          case 34: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNEQ;
            } 
            // fall through
          case 78: break;
          case 35: 
            { yybegin(CONDITIONALS); return KEYWORD_IFDEF;
            } 
            // fall through
          case 79: break;
          case 36: 
            { return KEYWORD_VPATH;
            } 
            // fall through
          case 80: break;
          case 37: 
            { yybegin(YYINITIAL); return KEYWORD_ENDEF;
            } 
            // fall through
          case 81: break;
          case 38: 
            { yybegin(EXPORT); return KEYWORD_EXPORT;
            } 
            // fall through
          case 82: break;
          case 39: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNDEF;
            } 
            // fall through
          case 83: break;
          case 40: 
            { yybegin(DEFINE); return KEYWORD_DEFINE;
            } 
            // fall through
          case 84: break;
          case 41: 
            { return KEYWORD_INCLUDE;
            } 
            // fall through
          case 85: break;
          case 42: 
            { return KEYWORD_PRIVATE;
            } 
            // fall through
          case 86: break;
          case 43: 
            { return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 87: break;
          case 44: 
            { yybegin(INCLUDES); return KEYWORD_UNDEFINE;
            } 
            // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
