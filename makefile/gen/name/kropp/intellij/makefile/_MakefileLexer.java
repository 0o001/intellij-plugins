/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package name.kropp.intellij.makefile;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import name.kropp.intellij.makefile.psi.MakefileTypes;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static name.kropp.intellij.makefile.psi.MakefileTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>MakefileLexer.flex</tt>
 */
public class _MakefileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PREREQUISITES = 2;
  public static final int ELSE = 4;
  public static final int INCLUDES = 6;
  public static final int SOURCE = 8;
  public static final int DEFINE = 10;
  public static final int DEFINEBODY = 12;
  public static final int CONDITIONALS = 14;
  public static final int FUNCTION = 16;
  public static final int EXPORT = 18;
  public static final int EXPORTVAR = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 
    16, 17, 18, 19, 20, 21
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\41\1\1\2\0\1\4\22\0\1\2\1\37\1\0\1\5\1\6\3\0\1\7\1\42\1\0\1\40\1\0"+
    "\1\43\14\0\1\33\1\34\1\0\1\36\1\0\1\37\1\32\33\0\1\3\4\0\1\14\1\31\1\25\1"+
    "\24\1\10\1\20\1\17\1\22\1\16\2\0\1\23\1\0\1\15\1\12\1\26\1\45\1\11\1\21\1"+
    "\27\1\30\1\44\1\13\1\46\3\0\1\35\203\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\20\0\2\1\4\0\1\2\2\3\1\4\10\2\1\5"+
    "\1\6\1\7\1\2\1\3\2\2\1\10\1\11\4\2"+
    "\1\12\1\13\1\14\3\15\1\2\1\7\1\16\1\17"+
    "\1\3\1\7\1\16\1\3\1\16\1\20\1\7\1\21"+
    "\1\7\1\2\1\22\1\7\3\22\1\23\1\3\2\23"+
    "\1\1\1\4\1\7\1\24\1\1\1\7\1\25\1\7"+
    "\1\2\1\4\1\26\13\2\1\27\2\2\1\0\2\30"+
    "\3\2\1\31\1\0\1\2\1\0\2\16\3\0\3\22"+
    "\1\0\2\23\1\4\1\26\1\0\1\1\1\0\1\2"+
    "\1\0\5\2\1\32\14\2\2\33\3\2\5\0\5\2"+
    "\5\16\1\33\6\22\1\33\5\23\1\33\5\0\1\32"+
    "\1\33\7\2\1\34\3\2\1\35\12\2\6\0\6\2"+
    "\6\16\7\22\6\23\6\0\6\2\1\36\3\2\1\37"+
    "\1\2\1\40\3\2\1\41\3\2\6\0\6\2\6\16"+
    "\6\22\1\42\6\23\6\0\3\2\1\43\2\2\1\44"+
    "\2\2\1\45\1\46\2\2\1\47\2\2\3\0\1\43"+
    "\2\0\3\2\1\43\2\2\3\16\1\43\2\16\3\22"+
    "\1\43\2\22\3\23\1\43\2\23\3\0\1\43\2\0"+
    "\1\50\2\2\1\51\2\2\1\52\1\53\2\2\1\54"+
    "\1\50\2\0\1\51\1\0\1\50\2\2\1\51\1\2"+
    "\1\50\2\16\1\51\1\16\1\50\2\22\1\51\1\22"+
    "\1\50\2\23\1\51\1\23\1\50\2\0\1\51\1\0"+
    "\3\2\1\55\1\56\1\57\3\0\3\2\3\16\3\22"+
    "\3\23\3\0\1\60\2\2\1\60\2\0\1\60\2\2"+
    "\1\60\2\16\1\60\2\22\1\60\2\23\1\60\2\0"+
    "\1\61\1\2\1\61\1\0\1\61\1\2\1\61\1\16"+
    "\1\61\1\22\1\61\1\23\1\61\1\0\7\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[463];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a\0\u0381"+
    "\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u046b\0\u0492\0\u04b9"+
    "\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1"+
    "\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729"+
    "\0\u035a\0\u035a\0\u0555\0\u0750\0\u0777\0\u079e\0\u0555\0\u07c5"+
    "\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af\0\u08d6\0\u08fd"+
    "\0\u0555\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7\0\u0a0e"+
    "\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f\0\u0555"+
    "\0\u0b46\0\u0b6d\0\u0555\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u0c30"+
    "\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68"+
    "\0\u0d8f\0\u0db6\0\u057c\0\u0ddd\0\u0e04\0\u0e2b\0\u0555\0\u0e52"+
    "\0\u0e79\0\u0ea0\0\u0ec7\0\u057c\0\u0eee\0\u0f15\0\u07c5\0\u0f3c"+
    "\0\u0f63\0\u0f63\0\u0924\0\u0972\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fd8"+
    "\0\u0fff\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2\0\u0b94\0\u10e9"+
    "\0\u1110\0\u1137\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u035a\0\u11fa"+
    "\0\u1221\0\u1248\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332"+
    "\0\u1359\0\u1380\0\u13a7\0\u035a\0\u0555\0\u13ce\0\u13f5\0\u141c"+
    "\0\u1443\0\u146a\0\u1491\0\u14b8\0\u14df\0\u1506\0\u152d\0\u1554"+
    "\0\u157b\0\u15a2\0\u15c9\0\u15f0\0\u1617\0\u163e\0\u1665\0\u07c5"+
    "\0\u168c\0\u16b3\0\u16da\0\u1701\0\u1728\0\u174f\0\u0972\0\u1776"+
    "\0\u179d\0\u17c4\0\u17eb\0\u1812\0\u0a35\0\u1839\0\u1860\0\u1887"+
    "\0\u18ae\0\u18d5\0\u0555\0\u0ad1\0\u18fc\0\u1923\0\u194a\0\u1971"+
    "\0\u1998\0\u19bf\0\u19e6\0\u035a\0\u1a0d\0\u1a34\0\u1a5b\0\u035a"+
    "\0\u1a82\0\u1aa9\0\u1ad0\0\u1af7\0\u1b1e\0\u1b45\0\u1b6c\0\u1b93"+
    "\0\u1bba\0\u1be1\0\u1c08\0\u1c2f\0\u1c56\0\u1c7d\0\u1ca4\0\u1ccb"+
    "\0\u1cf2\0\u1d19\0\u1d40\0\u1d67\0\u1d8e\0\u1db5\0\u1ddc\0\u1e03"+
    "\0\u1e2a\0\u1e51\0\u1e78\0\u1e9f\0\u1ec6\0\u1eed\0\u1f14\0\u1f3b"+
    "\0\u1f62\0\u1f89\0\u1fb0\0\u1fd7\0\u1ffe\0\u2025\0\u204c\0\u2073"+
    "\0\u209a\0\u20c1\0\u20e8\0\u210f\0\u2136\0\u215d\0\u2184\0\u21ab"+
    "\0\u21d2\0\u21f9\0\u2220\0\u2247\0\u226e\0\u035a\0\u2295\0\u22bc"+
    "\0\u22e3\0\u035a\0\u230a\0\u035a\0\u2331\0\u2358\0\u237f\0\u035a"+
    "\0\u23a6\0\u23cd\0\u23f4\0\u241b\0\u2442\0\u2469\0\u2490\0\u24b7"+
    "\0\u24de\0\u2505\0\u252c\0\u2553\0\u257a\0\u25a1\0\u25c8\0\u25ef"+
    "\0\u2616\0\u263d\0\u2664\0\u268b\0\u26b2\0\u26d9\0\u2700\0\u2727"+
    "\0\u274e\0\u2775\0\u279c\0\u0972\0\u27c3\0\u27ea\0\u2811\0\u2838"+
    "\0\u285f\0\u2886\0\u28ad\0\u28d4\0\u28fb\0\u2922\0\u2949\0\u2970"+
    "\0\u2997\0\u29be\0\u29e5\0\u10e9\0\u2a0c\0\u2a33\0\u035a\0\u2a5a"+
    "\0\u2a81\0\u035a\0\u035a\0\u2aa8\0\u2acf\0\u035a\0\u2af6\0\u2b1d"+
    "\0\u2b44\0\u2b6b\0\u2b92\0\u0555\0\u2bb9\0\u2be0\0\u2c07\0\u2c2e"+
    "\0\u2c55\0\u035a\0\u2c7c\0\u2ca3\0\u2cca\0\u2cf1\0\u2d18\0\u07c5"+
    "\0\u2d3f\0\u2d66\0\u2d8d\0\u2db4\0\u2ddb\0\u0972\0\u2e02\0\u2e29"+
    "\0\u2e50\0\u2e77\0\u2e9e\0\u0a35\0\u2ec5\0\u2eec\0\u2f13\0\u2f3a"+
    "\0\u2f61\0\u1110\0\u2f88\0\u2faf\0\u10e9\0\u2fd6\0\u2ffd\0\u10e9"+
    "\0\u3024\0\u304b\0\u035a\0\u035a\0\u3072\0\u3099\0\u035a\0\u0555"+
    "\0\u30c0\0\u30e7\0\u0555\0\u310e\0\u035a\0\u3135\0\u315c\0\u035a"+
    "\0\u3183\0\u07c5\0\u31aa\0\u31d1\0\u07c5\0\u31f8\0\u0972\0\u321f"+
    "\0\u3246\0\u0972\0\u326d\0\u0a35\0\u3294\0\u32bb\0\u0a35\0\u32e2"+
    "\0\u1110\0\u3309\0\u3330\0\u1110\0\u3357\0\u337e\0\u33a5\0\u33cc"+
    "\0\u035a\0\u035a\0\u035a\0\u33f3\0\u341a\0\u3441\0\u3468\0\u348f"+
    "\0\u34b6\0\u34dd\0\u3504\0\u352b\0\u3552\0\u3579\0\u35a0\0\u35c7"+
    "\0\u35ee\0\u3615\0\u363c\0\u3663\0\u368a\0\u10e9\0\u36b1\0\u36d8"+
    "\0\u0555\0\u36ff\0\u3726\0\u035a\0\u374d\0\u3774\0\u07c5\0\u379b"+
    "\0\u37c2\0\u0972\0\u37e9\0\u3810\0\u0a35\0\u3837\0\u385e\0\u1110"+
    "\0\u3885\0\u38ac\0\u10e9\0\u38d3\0\u0555\0\u38fa\0\u035a\0\u3921"+
    "\0\u07c5\0\u3948\0\u0972\0\u396f\0\u0a35\0\u3996\0\u1110\0\u39bd"+
    "\0\u10e9\0\u0555\0\u035a\0\u07c5\0\u0972\0\u0a35\0\u1110";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[463];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\27\1\30\1\31\1\27\1\30\1\32\1\33\1\27"+
    "\1\34\1\27\1\35\3\27\1\36\2\27\1\37\2\27"+
    "\1\40\1\27\1\41\1\27\1\42\2\27\1\43\2\27"+
    "\1\44\1\45\1\46\1\47\1\27\1\37\1\50\3\27"+
    "\1\30\1\31\1\27\1\30\1\32\1\33\1\27\1\34"+
    "\1\27\1\35\3\27\1\36\2\27\1\37\2\27\1\40"+
    "\1\27\1\41\1\27\1\42\1\27\1\51\1\43\2\27"+
    "\1\44\1\45\1\46\1\52\1\27\1\37\1\50\3\27"+
    "\1\53\1\31\1\54\1\53\1\32\1\33\1\27\1\55"+
    "\1\27\1\56\13\27\1\57\4\27\1\60\1\61\1\62"+
    "\1\44\1\45\1\46\1\47\6\27\1\53\1\31\1\54"+
    "\1\53\1\32\1\33\1\27\1\55\1\27\1\56\13\27"+
    "\1\57\3\27\1\51\1\60\1\61\1\62\1\44\1\45"+
    "\1\46\1\47\5\27\1\63\1\53\1\31\1\63\1\53"+
    "\1\32\1\64\41\63\1\53\1\31\1\63\1\53\1\32"+
    "\1\64\23\63\1\65\14\63\1\27\1\53\1\31\1\27"+
    "\1\53\1\32\1\66\24\27\1\67\2\27\2\67\1\27"+
    "\1\47\6\27\1\53\1\31\1\27\1\53\1\32\1\66"+
    "\23\27\1\51\1\67\2\27\2\67\1\27\1\47\5\27"+
    "\1\70\1\71\1\72\1\73\1\71\1\32\1\74\32\70"+
    "\1\75\6\70\1\71\1\72\1\73\1\71\1\32\1\74"+
    "\23\70\1\76\6\70\1\75\5\70\1\27\1\77\1\31"+
    "\1\27\1\77\1\32\1\66\24\27\1\100\2\27\1\101"+
    "\1\102\1\103\1\47\6\27\1\77\1\31\1\27\1\77"+
    "\1\32\1\66\23\27\1\51\1\100\2\27\1\101\1\102"+
    "\1\103\1\47\5\27\1\104\1\30\1\104\1\105\1\30"+
    "\1\32\1\106\1\104\1\107\37\104\1\30\1\104\1\105"+
    "\1\30\1\32\1\106\1\104\1\107\21\104\1\110\14\104"+
    "\1\111\1\71\1\112\1\111\1\71\1\32\1\113\41\111"+
    "\1\71\1\112\1\111\1\71\1\32\1\113\23\111\1\114"+
    "\14\111\5\115\1\116\1\117\33\115\1\120\11\115\1\116"+
    "\1\117\23\115\1\121\7\115\1\120\4\115\1\27\1\53"+
    "\1\31\1\27\1\53\1\32\1\33\24\27\1\122\2\27"+
    "\1\123\1\124\1\125\1\47\6\27\1\53\1\31\1\27"+
    "\1\53\1\32\1\33\23\27\1\51\1\122\2\27\1\123"+
    "\1\124\1\125\1\47\5\27\1\70\1\53\1\72\1\73"+
    "\1\53\1\32\1\74\32\70\1\75\6\70\1\53\1\72"+
    "\1\73\1\53\1\32\1\74\23\70\1\76\6\70\1\75"+
    "\5\70\1\27\2\0\1\27\2\0\25\27\1\0\2\27"+
    "\2\0\1\27\1\0\5\27\1\0\1\30\2\0\1\30"+
    "\44\0\1\31\44\0\1\126\1\0\2\126\1\0\1\127"+
    "\41\126\1\27\2\0\1\27\2\0\1\27\1\130\23\27"+
    "\1\0\2\27\2\0\1\27\1\0\6\27\2\0\1\27"+
    "\2\0\7\27\1\131\5\27\1\132\7\27\1\0\2\27"+
    "\2\0\1\27\1\0\4\27\1\133\1\27\2\0\1\27"+
    "\2\0\25\27\1\0\2\27\2\0\1\27\1\0\2\27"+
    "\1\134\3\27\2\0\1\27\2\0\7\27\1\135\2\27"+
    "\1\136\12\27\1\0\2\27\2\0\1\27\1\0\6\27"+
    "\2\0\1\27\2\0\10\27\1\137\14\27\1\0\2\27"+
    "\2\0\1\27\1\0\6\27\2\0\1\27\2\0\2\27"+
    "\1\140\22\27\1\0\2\27\2\0\1\27\1\0\6\27"+
    "\2\0\1\27\2\0\3\27\1\141\21\27\1\0\2\27"+
    "\2\0\1\27\1\0\6\27\2\0\1\27\2\0\7\27"+
    "\1\142\15\27\1\0\2\27\2\0\1\27\1\0\5\27"+
    "\33\0\1\143\2\0\1\44\115\0\1\44\10\0\1\27"+
    "\2\0\1\27\2\0\25\27\1\0\2\27\1\44\1\0"+
    "\1\27\1\0\5\27\41\0\1\47\5\0\1\27\2\0"+
    "\1\27\2\0\20\27\1\144\4\27\1\0\2\27\2\0"+
    "\1\27\1\0\5\27\1\145\2\0\1\145\1\0\1\146"+
    "\24\145\1\27\1\146\2\145\2\146\1\145\1\146\5\145"+
    "\41\0\1\52\6\0\1\53\2\0\1\53\42\0\1\27"+
    "\1\147\1\0\1\27\1\150\1\0\25\27\1\0\2\27"+
    "\2\0\1\27\1\0\6\27\2\0\1\27\2\0\25\27"+
    "\1\0\2\27\2\0\1\27\1\0\4\27\1\151\1\27"+
    "\2\0\1\27\2\0\25\27\1\0\2\27\2\0\1\27"+
    "\1\0\2\27\1\152\3\27\2\0\1\27\2\0\3\27"+
    "\1\153\21\27\1\0\2\27\2\0\1\27\1\0\5\27"+
    "\33\0\1\154\2\0\1\44\17\0\1\155\37\0\1\146"+
    "\2\0\1\146\1\0\25\146\1\0\14\146\1\27\2\0"+
    "\1\27\2\0\1\27\1\156\23\27\1\0\2\27\2\0"+
    "\1\27\1\0\5\27\1\70\1\0\1\70\1\157\1\0"+
    "\42\70\1\0\1\71\2\0\1\71\42\0\1\70\1\0"+
    "\1\72\1\157\1\0\43\70\1\147\1\70\1\157\1\150"+
    "\43\70\1\0\1\70\1\157\1\0\2\70\1\160\40\70"+
    "\1\0\1\70\1\157\1\0\34\70\1\75\5\70\1\161"+
    "\1\0\1\70\1\162\1\0\25\161\1\70\14\161\1\0"+
    "\1\77\2\0\1\77\75\0\1\163\2\0\1\101\46\0"+
    "\1\101\10\0\1\27\2\0\1\27\2\0\25\27\1\0"+
    "\2\27\1\101\1\0\1\27\1\0\5\27\1\104\1\0"+
    "\1\104\1\164\1\0\43\104\1\147\1\104\1\164\1\150"+
    "\43\104\1\0\1\104\1\164\1\0\2\104\1\165\40\104"+
    "\1\0\1\104\1\164\1\0\10\104\1\166\31\104\1\167"+
    "\1\0\1\104\1\170\1\0\25\167\1\104\14\167\1\111"+
    "\1\0\2\111\2\0\42\111\1\0\1\112\1\111\2\0"+
    "\42\111\1\0\2\111\2\0\1\111\1\171\37\111\1\172"+
    "\1\0\1\111\1\172\1\0\1\146\24\172\1\111\14\172"+
    "\6\115\1\0\33\115\1\0\4\115\1\173\1\115\2\173"+
    "\1\115\1\174\1\126\33\173\1\126\4\173\7\0\1\175"+
    "\37\0\1\176\2\115\1\176\1\115\1\176\1\146\23\176"+
    "\1\115\7\176\1\146\4\176\33\0\1\177\2\0\1\123"+
    "\46\0\1\123\10\0\1\27\2\0\1\27\2\0\25\27"+
    "\1\0\2\27\1\123\1\0\1\27\1\0\5\27\1\126"+
    "\1\0\2\126\1\0\42\126\1\127\1\0\2\127\1\0"+
    "\42\127\1\200\1\201\1\0\1\200\2\201\2\200\1\202"+
    "\2\200\1\203\2\200\1\204\2\200\1\205\4\200\1\206"+
    "\4\200\1\201\2\200\2\201\1\200\1\201\1\207\4\200"+
    "\1\27\2\0\1\27\2\0\16\27\1\210\6\27\1\0"+
    "\2\27\2\0\1\27\1\0\6\27\2\0\1\27\2\0"+
    "\13\27\1\211\11\27\1\0\2\27\2\0\1\27\1\0"+
    "\6\27\2\0\1\27\2\0\20\27\1\212\4\27\1\0"+
    "\2\27\2\0\1\27\1\0\6\27\2\0\1\27\2\0"+
    "\2\27\1\213\22\27\1\0\2\27\2\0\1\27\1\0"+
    "\6\27\2\0\1\27\2\0\17\27\1\214\5\27\1\0"+
    "\2\27\2\0\1\27\1\0\6\27\2\0\1\27\2\0"+
    "\2\27\1\215\4\27\1\216\6\27\1\217\6\27\1\0"+
    "\2\27\2\0\1\27\1\0\6\27\2\0\1\27\2\0"+
    "\7\27\1\135\15\27\1\0\2\27\2\0\1\27\1\0"+
    "\6\27\2\0\1\27\2\0\12\27\1\220\12\27\1\0"+
    "\2\27\2\0\1\27\1\0\6\27\2\0\1\27\2\0"+
    "\10\27\1\221\14\27\1\0\2\27\2\0\1\27\1\0"+
    "\6\27\2\0\1\27\2\0\16\27\1\222\6\27\1\0"+
    "\2\27\2\0\1\27\1\0\6\27\2\0\1\27\2\0"+
    "\6\27\1\223\16\27\1\0\2\27\2\0\1\27\1\0"+
    "\5\27\1\145\2\0\1\145\1\0\1\146\24\145\1\224"+
    "\1\146\2\145\2\146\1\145\1\146\5\145\1\146\2\0"+
    "\1\146\1\0\25\146\1\225\14\146\1\0\1\147\45\0"+
    "\1\27\2\0\1\27\2\0\20\27\1\226\4\27\1\0"+
    "\2\27\2\0\1\27\1\0\6\27\2\0\1\27\2\0"+
    "\2\27\1\227\22\27\1\0\2\27\2\0\1\27\1\0"+
    "\6\27\2\0\1\27\2\0\10\27\1\230\14\27\1\0"+
    "\2\27\2\0\1\27\1\0\5\27\10\0\1\231\2\0"+
    "\1\232\2\0\1\233\2\0\1\234\4\0\1\235\20\0"+
    "\1\27\2\0\1\27\2\0\2\27\1\236\2\27\1\237"+
    "\2\27\1\240\2\27\1\241\4\27\1\242\4\27\1\0"+
    "\2\27\2\0\1\27\1\0\5\27\1\70\1\0\1\70"+
    "\1\157\1\0\3\70\1\243\2\70\1\244\2\70\1\245"+
    "\2\70\1\246\4\70\1\247\20\70\1\161\1\0\1\70"+
    "\1\162\1\0\25\161\1\250\14\161\1\104\1\0\1\104"+
    "\1\164\1\0\3\104\1\251\2\104\1\252\2\104\1\253"+
    "\2\104\1\254\4\104\1\255\21\104\1\0\1\104\1\164"+
    "\1\0\17\104\1\256\22\104\1\167\1\0\1\104\1\170"+
    "\1\0\25\167\1\257\14\167\1\111\1\0\2\111\2\0"+
    "\2\111\1\260\2\111\1\261\2\111\1\262\2\111\1\263"+
    "\4\111\1\264\20\111\1\172\1\0\1\111\1\172\1\0"+
    "\1\146\24\172\1\265\14\172\1\173\1\115\2\173\1\115"+
    "\1\173\1\126\33\173\1\126\4\173\1\174\1\115\2\174"+
    "\1\115\1\174\1\127\33\174\1\127\4\174\2\201\1\0"+
    "\5\201\1\266\2\201\1\267\2\201\1\270\2\201\1\271"+
    "\4\201\1\272\13\201\1\273\4\201\1\176\2\115\1\176"+
    "\1\115\1\176\1\146\23\176\1\274\7\176\1\146\4\176"+
    "\1\200\1\201\1\0\1\200\2\201\25\200\1\201\2\200"+
    "\2\201\1\200\1\201\1\207\4\200\2\201\1\0\37\201"+
    "\1\273\4\201\1\200\1\201\1\0\1\200\2\201\3\200"+
    "\1\275\21\200\1\201\2\200\2\201\1\200\1\201\1\207"+
    "\5\200\1\201\1\0\1\200\2\201\6\200\1\276\1\200"+
    "\1\277\14\200\1\201\2\200\2\201\1\200\1\201\1\207"+
    "\5\200\1\201\1\0\1\200\2\201\7\200\1\300\15\200"+
    "\1\201\2\200\2\201\1\200\1\201\1\207\5\200\1\201"+
    "\1\0\1\200\2\201\14\200\1\301\10\200\1\201\2\200"+
    "\2\201\1\200\1\201\1\207\5\200\1\201\1\0\1\200"+
    "\2\201\6\200\1\302\16\200\1\201\2\200\2\201\1\200"+
    "\1\201\1\207\4\200\1\27\2\0\1\27\2\0\10\27"+
    "\1\303\14\27\1\0\2\27\2\0\1\27\1\0\6\27"+
    "\2\0\1\27\2\0\2\27\1\304\22\27\1\0\2\27"+
    "\2\0\1\27\1\0\6\27\2\0\1\27\2\0\4\27"+
    "\1\305\20\27\1\0\2\27\2\0\1\27\1\0\6\27"+
    "\2\0\1\27\2\0\3\27\1\306\21\27\1\0\2\27"+
    "\2\0\1\27\1\0\6\27\2\0\1\27\2\0\15\27"+
    "\1\307\7\27\1\0\2\27\2\0\1\27\1\0\6\27"+
    "\2\0\1\27\2\0\25\27\1\0\2\27\2\0\1\27"+
    "\1\0\3\27\1\310\2\27\2\0\1\27\2\0\2\27"+
    "\1\311\13\27\1\312\6\27\1\0\2\27\2\0\1\27"+
    "\1\0\6\27\2\0\1\27\2\0\2\27\1\313\22\27"+
    "\1\0\2\27\2\0\1\27\1\0\6\27\2\0\1\27"+
    "\2\0\10\27\1\314\14\27\1\0\2\27\2\0\1\27"+
    "\1\0\6\27\2\0\1\27\2\0\25\27\1\0\2\27"+
    "\2\0\1\27\1\0\2\27\1\315\3\27\2\0\1\27"+
    "\2\0\2\27\1\316\22\27\1\0\2\27\2\0\1\27"+
    "\1\0\6\27\2\0\1\27\2\0\21\27\1\317\3\27"+
    "\1\0\2\27\2\0\1\27\1\0\6\27\2\0\1\27"+
    "\2\0\4\27\1\320\20\27\1\0\2\27\2\0\1\27"+
    "\1\0\6\27\2\0\1\27\2\0\3\27\1\321\21\27"+
    "\1\0\2\27\2\0\1\27\1\0\6\27\2\0\1\27"+
    "\2\0\25\27\1\0\2\27\2\0\1\27\1\0\2\27"+
    "\1\322\2\27\11\0\1\323\51\0\1\324\1\0\1\325"+
    "\45\0\1\326\53\0\1\327\40\0\1\330\32\0\1\27"+
    "\2\0\1\27\2\0\3\27\1\331\21\27\1\0\2\27"+
    "\2\0\1\27\1\0\6\27\2\0\1\27\2\0\6\27"+
    "\1\332\1\27\1\333\14\27\1\0\2\27\2\0\1\27"+
    "\1\0\6\27\2\0\1\27\2\0\7\27\1\334\15\27"+
    "\1\0\2\27\2\0\1\27\1\0\6\27\2\0\1\27"+
    "\2\0\14\27\1\335\10\27\1\0\2\27\2\0\1\27"+
    "\1\0\6\27\2\0\1\27\2\0\6\27\1\336\16\27"+
    "\1\0\2\27\2\0\1\27\1\0\5\27\1\70\1\0"+
    "\1\70\1\157\1\0\4\70\1\337\36\70\1\0\1\70"+
    "\1\157\1\0\7\70\1\340\1\70\1\341\31\70\1\0"+
    "\1\70\1\157\1\0\10\70\1\342\32\70\1\0\1\70"+
    "\1\157\1\0\15\70\1\343\25\70\1\0\1\70\1\157"+
    "\1\0\7\70\1\344\32\70\1\104\1\0\1\104\1\164"+
    "\1\0\4\104\1\345\36\104\1\0\1\104\1\164\1\0"+
    "\7\104\1\346\1\104\1\347\31\104\1\0\1\104\1\164"+
    "\1\0\10\104\1\350\32\104\1\0\1\104\1\164\1\0"+
    "\15\104\1\351\25\104\1\0\1\104\1\164\1\0\7\104"+
    "\1\352\33\104\1\0\1\104\1\164\1\0\3\104\1\353"+
    "\36\104\1\111\1\0\2\111\2\0\3\111\1\354\36\111"+
    "\1\0\2\111\2\0\6\111\1\355\1\111\1\356\31\111"+
    "\1\0\2\111\2\0\7\111\1\357\32\111\1\0\2\111"+
    "\2\0\14\111\1\360\25\111\1\0\2\111\2\0\6\111"+
    "\1\361\32\111\2\201\1\0\6\201\1\362\30\201\1\273"+
    "\6\201\1\0\11\201\1\363\1\201\1\364\23\201\1\273"+
    "\6\201\1\0\12\201\1\365\24\201\1\273\6\201\1\0"+
    "\17\201\1\366\17\201\1\273\6\201\1\0\11\201\1\367"+
    "\25\201\1\273\4\201\1\200\1\201\1\0\1\200\2\201"+
    "\3\200\1\370\21\200\1\201\2\200\2\201\1\200\1\201"+
    "\1\207\5\200\1\201\1\0\1\200\2\201\3\200\1\371"+
    "\21\200\1\201\2\200\2\201\1\200\1\201\1\207\5\200"+
    "\1\201\1\0\1\200\2\201\15\200\1\372\7\200\1\201"+
    "\2\200\2\201\1\200\1\201\1\207\5\200\1\201\1\0"+
    "\1\200\2\201\12\200\1\373\12\200\1\201\2\200\2\201"+
    "\1\200\1\201\1\207\5\200\1\201\1\0\1\200\2\201"+
    "\2\200\1\374\22\200\1\201\2\200\2\201\1\200\1\201"+
    "\1\207\5\200\1\201\1\0\1\200\2\201\21\200\1\375"+
    "\3\200\1\201\2\200\2\201\1\200\1\201\1\207\4\200"+
    "\1\27\2\0\1\27\2\0\12\27\1\376\12\27\1\0"+
    "\2\27\2\0\1\27\1\0\6\27\2\0\1\27\2\0"+
    "\3\27\1\377\21\27\1\0\2\27\2\0\1\27\1\0"+
    "\6\27\2\0\1\27\2\0\3\27\1\u0100\21\27\1\0"+
    "\2\27\2\0\1\27\1\0\6\27\2\0\1\27\2\0"+
    "\22\27\1\u0101\2\27\1\0\2\27\2\0\1\27\1\0"+
    "\6\27\2\0\1\27\2\0\25\27\1\0\2\27\2\0"+
    "\1\27\1\0\3\27\1\u0102\2\27\2\0\1\27\2\0"+
    "\2\27\1\u0103\22\27\1\0\2\27\2\0\1\27\1\0"+
    "\6\27\2\0\1\27\2\0\12\27\1\u0104\12\27\1\0"+
    "\2\27\2\0\1\27\1\0\6\27\2\0\1\27\2\0"+
    "\7\27\1\u0105\15\27\1\0\2\27\2\0\1\27\1\0"+
    "\6\27\2\0\1\27\2\0\6\27\1\u0106\16\27\1\0"+
    "\2\27\2\0\1\27\1\0\6\27\2\0\1\27\2\0"+
    "\12\27\1\u0107\12\27\1\0\2\27\2\0\1\27\1\0"+
    "\6\27\2\0\1\27\2\0\14\27\1\u0108\10\27\1\0"+
    "\2\27\2\0\1\27\1\0\6\27\2\0\1\27\2\0"+
    "\3\27\1\u0109\21\27\1\0\2\27\2\0\1\27\1\0"+
    "\6\27\2\0\1\27\2\0\3\27\1\u010a\21\27\1\0"+
    "\2\27\2\0\1\27\1\0\6\27\2\0\1\27\2\0"+
    "\6\27\1\u010b\16\27\1\0\2\27\2\0\1\27\1\0"+
    "\5\27\11\0\1\u010c\46\0\1\u010d\60\0\1\u010e\43\0"+
    "\1\u010f\36\0\1\u0110\65\0\1\u0111\17\0\1\27\2\0"+
    "\1\27\2\0\3\27\1\u0112\21\27\1\0\2\27\2\0"+
    "\1\27\1\0\6\27\2\0\1\27\2\0\3\27\1\u0113"+
    "\21\27\1\0\2\27\2\0\1\27\1\0\6\27\2\0"+
    "\1\27\2\0\15\27\1\u0114\7\27\1\0\2\27\2\0"+
    "\1\27\1\0\6\27\2\0\1\27\2\0\12\27\1\u0115"+
    "\12\27\1\0\2\27\2\0\1\27\1\0\6\27\2\0"+
    "\1\27\2\0\2\27\1\u0116\22\27\1\0\2\27\2\0"+
    "\1\27\1\0\6\27\2\0\1\27\2\0\21\27\1\u0117"+
    "\3\27\1\0\2\27\2\0\1\27\1\0\5\27\1\70"+
    "\1\0\1\70\1\157\1\0\4\70\1\u0118\36\70\1\0"+
    "\1\70\1\157\1\0\4\70\1\u0119\36\70\1\0\1\70"+
    "\1\157\1\0\16\70\1\u011a\24\70\1\0\1\70\1\157"+
    "\1\0\13\70\1\u011b\27\70\1\0\1\70\1\157\1\0"+
    "\3\70\1\u011c\37\70\1\0\1\70\1\157\1\0\22\70"+
    "\1\u011d\17\70\1\104\1\0\1\104\1\164\1\0\4\104"+
    "\1\u011e\36\104\1\0\1\104\1\164\1\0\4\104\1\u011f"+
    "\36\104\1\0\1\104\1\164\1\0\16\104\1\u0120\24\104"+
    "\1\0\1\104\1\164\1\0\13\104\1\u0121\27\104\1\0"+
    "\1\104\1\164\1\0\3\104\1\u0122\37\104\1\0\1\104"+
    "\1\164\1\0\22\104\1\u0123\20\104\1\0\1\104\1\164"+
    "\1\0\13\104\1\u0124\26\104\1\111\1\0\2\111\2\0"+
    "\3\111\1\u0125\36\111\1\0\2\111\2\0\3\111\1\u0126"+
    "\36\111\1\0\2\111\2\0\15\111\1\u0127\24\111\1\0"+
    "\2\111\2\0\12\111\1\u0128\27\111\1\0\2\111\2\0"+
    "\2\111\1\u0129\37\111\1\0\2\111\2\0\21\111\1\u012a"+
    "\17\111\2\201\1\0\6\201\1\u012b\30\201\1\273\6\201"+
    "\1\0\6\201\1\u012c\30\201\1\273\6\201\1\0\20\201"+
    "\1\u012d\16\201\1\273\6\201\1\0\15\201\1\u012e\21\201"+
    "\1\273\6\201\1\0\5\201\1\u012f\31\201\1\273\6\201"+
    "\1\0\24\201\1\u0130\12\201\1\273\4\201\1\200\1\201"+
    "\1\0\1\200\2\201\4\200\1\u0131\20\200\1\201\2\200"+
    "\2\201\1\200\1\201\1\207\5\200\1\201\1\0\1\200"+
    "\2\201\7\200\1\u0132\15\200\1\201\2\200\2\201\1\200"+
    "\1\201\1\207\5\200\1\201\1\0\1\200\2\201\16\200"+
    "\1\u0133\6\200\1\201\2\200\2\201\1\200\1\201\1\207"+
    "\5\200\1\201\1\0\1\200\2\201\4\200\1\u0134\20\200"+
    "\1\201\2\200\2\201\1\200\1\201\1\207\5\200\1\201"+
    "\1\0\1\200\2\201\15\200\1\u0135\7\200\1\201\2\200"+
    "\2\201\1\200\1\201\1\207\5\200\1\201\1\0\1\200"+
    "\2\201\14\200\1\u0136\10\200\1\201\2\200\2\201\1\200"+
    "\1\201\1\207\4\200\1\27\2\0\1\27\2\0\21\27"+
    "\1\u0137\3\27\1\0\2\27\2\0\1\27\1\0\6\27"+
    "\2\0\1\27\2\0\10\27\1\u0138\14\27\1\0\2\27"+
    "\2\0\1\27\1\0\6\27\2\0\1\27\2\0\16\27"+
    "\1\u0139\6\27\1\0\2\27\2\0\1\27\1\0\6\27"+
    "\2\0\1\27\2\0\12\27\1\u013a\12\27\1\0\2\27"+
    "\2\0\1\27\1\0\6\27\2\0\1\27\2\0\2\27"+
    "\1\u013b\22\27\1\0\2\27\2\0\1\27\1\0\6\27"+
    "\2\0\1\27\2\0\21\27\1\u013c\3\27\1\0\2\27"+
    "\2\0\1\27\1\0\6\27\2\0\1\27\2\0\10\27"+
    "\1\u013d\14\27\1\0\2\27\2\0\1\27\1\0\6\27"+
    "\2\0\1\27\2\0\21\27\1\u013e\3\27\1\0\2\27"+
    "\2\0\1\27\1\0\6\27\2\0\1\27\2\0\10\27"+
    "\1\u013f\14\27\1\0\2\27\2\0\1\27\1\0\6\27"+
    "\2\0\1\27\2\0\21\27\1\u0140\3\27\1\0\2\27"+
    "\2\0\1\27\1\0\5\27\12\0\1\u0141\51\0\1\u0142"+
    "\55\0\1\u0143\34\0\1\u0144\57\0\1\u0145\45\0\1\u0146"+
    "\24\0\1\27\2\0\1\27\2\0\4\27\1\u0147\20\27"+
    "\1\0\2\27\2\0\1\27\1\0\6\27\2\0\1\27"+
    "\2\0\7\27\1\u0148\15\27\1\0\2\27\2\0\1\27"+
    "\1\0\6\27\2\0\1\27\2\0\16\27\1\u0149\6\27"+
    "\1\0\2\27\2\0\1\27\1\0\6\27\2\0\1\27"+
    "\2\0\4\27\1\u014a\20\27\1\0\2\27\2\0\1\27"+
    "\1\0\6\27\2\0\1\27\2\0\15\27\1\u014b\7\27"+
    "\1\0\2\27\2\0\1\27\1\0\6\27\2\0\1\27"+
    "\2\0\14\27\1\u014c\10\27\1\0\2\27\2\0\1\27"+
    "\1\0\5\27\1\70\1\0\1\70\1\157\1\0\5\70"+
    "\1\u014d\35\70\1\0\1\70\1\157\1\0\10\70\1\u014e"+
    "\32\70\1\0\1\70\1\157\1\0\17\70\1\u014f\23\70"+
    "\1\0\1\70\1\157\1\0\5\70\1\u0150\35\70\1\0"+
    "\1\70\1\157\1\0\16\70\1\u0151\24\70\1\0\1\70"+
    "\1\157\1\0\15\70\1\u0152\24\70\1\104\1\0\1\104"+
    "\1\164\1\0\5\104\1\u0153\35\104\1\0\1\104\1\164"+
    "\1\0\10\104\1\u0154\32\104\1\0\1\104\1\164\1\0"+
    "\17\104\1\u0155\23\104\1\0\1\104\1\164\1\0\5\104"+
    "\1\u0156\35\104\1\0\1\104\1\164\1\0\16\104\1\u0157"+
    "\24\104\1\0\1\104\1\164\1\0\15\104\1\u0158\24\104"+
    "\1\111\1\0\2\111\2\0\4\111\1\u0159\35\111\1\0"+
    "\2\111\2\0\7\111\1\u015a\32\111\1\0\2\111\2\0"+
    "\16\111\1\u015b\23\111\1\0\2\111\2\0\4\111\1\u015c"+
    "\35\111\1\0\2\111\2\0\15\111\1\u015d\24\111\1\0"+
    "\2\111\2\0\14\111\1\u015e\24\111\2\201\1\0\7\201"+
    "\1\u015f\27\201\1\273\6\201\1\0\12\201\1\u0160\24\201"+
    "\1\273\6\201\1\0\21\201\1\u0161\15\201\1\273\6\201"+
    "\1\0\7\201\1\u0162\27\201\1\273\6\201\1\0\20\201"+
    "\1\u0163\16\201\1\273\6\201\1\0\17\201\1\u0164\17\201"+
    "\1\273\4\201\1\200\1\201\1\0\1\200\2\201\3\200"+
    "\1\u0165\21\200\1\201\2\200\2\201\1\200\1\201\1\207"+
    "\5\200\1\201\1\0\1\200\2\201\10\200\1\u0166\14\200"+
    "\1\201\2\200\2\201\1\200\1\201\1\207\5\200\1\201"+
    "\1\0\1\200\2\201\17\200\1\u0167\5\200\1\201\2\200"+
    "\2\201\1\200\1\201\1\207\5\200\1\201\1\0\1\200"+
    "\2\201\15\200\1\u0168\7\200\1\201\2\200\2\201\1\200"+
    "\1\201\1\207\5\200\1\201\1\0\1\200\2\201\13\200"+
    "\1\u0169\11\200\1\201\2\200\2\201\1\200\1\201\1\207"+
    "\4\200\1\27\2\0\1\27\2\0\16\27\1\u016a\6\27"+
    "\1\0\2\27\2\0\1\27\1\0\6\27\2\0\1\27"+
    "\2\0\2\27\1\u016b\22\27\1\0\2\27\2\0\1\27"+
    "\1\0\6\27\2\0\1\27\2\0\2\27\1\u016c\22\27"+
    "\1\0\2\27\2\0\1\27\1\0\6\27\2\0\1\27"+
    "\2\0\7\27\1\u016d\15\27\1\0\2\27\2\0\1\27"+
    "\1\0\6\27\2\0\1\27\2\0\16\27\1\u016e\6\27"+
    "\1\0\2\27\2\0\1\27\1\0\6\27\2\0\1\27"+
    "\2\0\2\27\1\u016f\22\27\1\0\2\27\2\0\1\27"+
    "\1\0\5\27\11\0\1\u0170\53\0\1\u0171\55\0\1\u0172"+
    "\44\0\1\u0173\44\0\1\u0174\25\0\1\27\2\0\1\27"+
    "\2\0\3\27\1\u0175\21\27\1\0\2\27\2\0\1\27"+
    "\1\0\6\27\2\0\1\27\2\0\10\27\1\u0176\14\27"+
    "\1\0\2\27\2\0\1\27\1\0\6\27\2\0\1\27"+
    "\2\0\17\27\1\u0177\5\27\1\0\2\27\2\0\1\27"+
    "\1\0\6\27\2\0\1\27\2\0\15\27\1\u0178\7\27"+
    "\1\0\2\27\2\0\1\27\1\0\6\27\2\0\1\27"+
    "\2\0\13\27\1\u0179\11\27\1\0\2\27\2\0\1\27"+
    "\1\0\5\27\1\70\1\0\1\70\1\157\1\0\4\70"+
    "\1\u017a\36\70\1\0\1\70\1\157\1\0\11\70\1\u017b"+
    "\31\70\1\0\1\70\1\157\1\0\20\70\1\u017c\22\70"+
    "\1\0\1\70\1\157\1\0\16\70\1\u017d\24\70\1\0"+
    "\1\70\1\157\1\0\14\70\1\u017e\25\70\1\104\1\0"+
    "\1\104\1\164\1\0\4\104\1\u017f\36\104\1\0\1\104"+
    "\1\164\1\0\11\104\1\u0180\31\104\1\0\1\104\1\164"+
    "\1\0\20\104\1\u0181\22\104\1\0\1\104\1\164\1\0"+
    "\16\104\1\u0182\24\104\1\0\1\104\1\164\1\0\14\104"+
    "\1\u0183\25\104\1\111\1\0\2\111\2\0\3\111\1\u0184"+
    "\36\111\1\0\2\111\2\0\10\111\1\u0185\31\111\1\0"+
    "\2\111\2\0\17\111\1\u0186\22\111\1\0\2\111\2\0"+
    "\15\111\1\u0187\24\111\1\0\2\111\2\0\13\111\1\u0188"+
    "\25\111\2\201\1\0\6\201\1\u0189\30\201\1\273\6\201"+
    "\1\0\13\201\1\u018a\23\201\1\273\6\201\1\0\22\201"+
    "\1\u018b\14\201\1\273\6\201\1\0\20\201\1\u018c\16\201"+
    "\1\273\6\201\1\0\16\201\1\u018d\20\201\1\273\4\201"+
    "\1\200\1\201\1\0\1\200\2\201\7\200\1\u018e\15\200"+
    "\1\201\2\200\2\201\1\200\1\201\1\207\5\200\1\201"+
    "\1\0\1\200\2\201\6\200\1\u018f\16\200\1\201\2\200"+
    "\2\201\1\200\1\201\1\207\5\200\1\201\1\0\1\200"+
    "\2\201\22\200\1\u0190\2\200\1\201\2\200\2\201\1\200"+
    "\1\201\1\207\4\200\1\27\2\0\1\27\2\0\2\27"+
    "\1\u0191\22\27\1\0\2\27\2\0\1\27\1\0\6\27"+
    "\2\0\1\27\2\0\2\27\1\u0192\22\27\1\0\2\27"+
    "\2\0\1\27\1\0\6\27\2\0\1\27\2\0\2\27"+
    "\1\u0193\22\27\1\0\2\27\2\0\1\27\1\0\5\27"+
    "\15\0\1\u0194\45\0\1\u0195\62\0\1\u0196\16\0\1\27"+
    "\2\0\1\27\2\0\7\27\1\u0197\15\27\1\0\2\27"+
    "\2\0\1\27\1\0\6\27\2\0\1\27\2\0\6\27"+
    "\1\u0198\16\27\1\0\2\27\2\0\1\27\1\0\6\27"+
    "\2\0\1\27\2\0\22\27\1\u0199\2\27\1\0\2\27"+
    "\2\0\1\27\1\0\5\27\1\70\1\0\1\70\1\157"+
    "\1\0\10\70\1\u019a\32\70\1\0\1\70\1\157\1\0"+
    "\7\70\1\u019b\33\70\1\0\1\70\1\157\1\0\23\70"+
    "\1\u019c\16\70\1\104\1\0\1\104\1\164\1\0\10\104"+
    "\1\u019d\32\104\1\0\1\104\1\164\1\0\7\104\1\u019e"+
    "\33\104\1\0\1\104\1\164\1\0\23\104\1\u019f\16\104"+
    "\1\111\1\0\2\111\2\0\7\111\1\u01a0\32\111\1\0"+
    "\2\111\2\0\6\111\1\u01a1\33\111\1\0\2\111\2\0"+
    "\22\111\1\u01a2\16\111\2\201\1\0\12\201\1\u01a3\24\201"+
    "\1\273\6\201\1\0\11\201\1\u01a4\25\201\1\273\6\201"+
    "\1\0\25\201\1\u01a5\11\201\1\273\4\201\1\200\1\201"+
    "\1\0\1\200\2\201\11\200\1\u01a6\13\200\1\201\2\200"+
    "\2\201\1\200\1\201\1\207\5\200\1\201\1\0\1\200"+
    "\2\201\3\200\1\u01a7\21\200\1\201\2\200\2\201\1\200"+
    "\1\201\1\207\5\200\1\201\1\0\1\200\2\201\23\200"+
    "\1\u01a8\1\200\1\201\2\200\2\201\1\200\1\201\1\207"+
    "\4\200\17\0\1\u01a9\40\0\1\u01aa\66\0\1\u01ab\15\0"+
    "\1\27\2\0\1\27\2\0\11\27\1\u01ac\13\27\1\0"+
    "\2\27\2\0\1\27\1\0\6\27\2\0\1\27\2\0"+
    "\3\27\1\u01ad\21\27\1\0\2\27\2\0\1\27\1\0"+
    "\6\27\2\0\1\27\2\0\23\27\1\u01ae\1\27\1\0"+
    "\2\27\2\0\1\27\1\0\5\27\1\70\1\0\1\70"+
    "\1\157\1\0\12\70\1\u01af\30\70\1\0\1\70\1\157"+
    "\1\0\4\70\1\u01b0\36\70\1\0\1\70\1\157\1\0"+
    "\24\70\1\u01b1\15\70\1\104\1\0\1\104\1\164\1\0"+
    "\12\104\1\u01b2\30\104\1\0\1\104\1\164\1\0\4\104"+
    "\1\u01b3\36\104\1\0\1\104\1\164\1\0\24\104\1\u01b4"+
    "\15\104\1\111\1\0\2\111\2\0\11\111\1\u01b5\30\111"+
    "\1\0\2\111\2\0\3\111\1\u01b6\36\111\1\0\2\111"+
    "\2\0\23\111\1\u01b7\15\111\2\201\1\0\14\201\1\u01b8"+
    "\22\201\1\273\6\201\1\0\6\201\1\u01b9\30\201\1\273"+
    "\6\201\1\0\26\201\1\u01ba\10\201\1\273\4\201\1\200"+
    "\1\201\1\0\1\200\2\201\16\200\1\u01bb\6\200\1\201"+
    "\2\200\2\201\1\200\1\201\1\207\5\200\1\201\1\0"+
    "\1\200\2\201\13\200\1\u01bc\11\200\1\201\2\200\2\201"+
    "\1\200\1\201\1\207\4\200\24\0\1\u01bd\43\0\1\u01be"+
    "\25\0\1\27\2\0\1\27\2\0\16\27\1\u01bf\6\27"+
    "\1\0\2\27\2\0\1\27\1\0\6\27\2\0\1\27"+
    "\2\0\13\27\1\u01c0\11\27\1\0\2\27\2\0\1\27"+
    "\1\0\5\27\1\70\1\0\1\70\1\157\1\0\17\70"+
    "\1\u01c1\23\70\1\0\1\70\1\157\1\0\14\70\1\u01c2"+
    "\25\70\1\104\1\0\1\104\1\164\1\0\17\104\1\u01c3"+
    "\23\104\1\0\1\104\1\164\1\0\14\104\1\u01c4\25\104"+
    "\1\111\1\0\2\111\2\0\16\111\1\u01c5\23\111\1\0"+
    "\2\111\2\0\13\111\1\u01c6\25\111\2\201\1\0\21\201"+
    "\1\u01c7\15\201\1\273\6\201\1\0\16\201\1\u01c8\20\201"+
    "\1\273\4\201\1\200\1\201\1\0\1\200\2\201\21\200"+
    "\1\u01c9\3\200\1\201\2\200\2\201\1\200\1\201\1\207"+
    "\4\200\27\0\1\u01ca\17\0\1\27\2\0\1\27\2\0"+
    "\21\27\1\u01cb\3\27\1\0\2\27\2\0\1\27\1\0"+
    "\5\27\1\70\1\0\1\70\1\157\1\0\22\70\1\u01cc"+
    "\17\70\1\104\1\0\1\104\1\164\1\0\22\104\1\u01cd"+
    "\17\104\1\111\1\0\2\111\2\0\21\111\1\u01ce\17\111"+
    "\2\201\1\0\24\201\1\u01cf\12\201\1\273\4\201";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14820];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\20\0\2\1\4\0\15\1\1\11\16\1\1\11\3\1"+
    "\1\11\11\1\1\11\16\1\1\11\2\1\1\11\22\1"+
    "\1\0\1\11\5\1\1\0\1\1\1\0\2\1\3\0"+
    "\3\1\1\0\4\1\1\0\1\1\1\0\1\1\1\0"+
    "\23\1\1\11\3\1\5\0\30\1\5\0\1\11\27\1"+
    "\6\0\31\1\6\0\24\1\6\0\31\1\6\0\20\1"+
    "\3\0\1\11\2\0\30\1\3\0\1\1\2\0\13\1"+
    "\1\11\2\0\1\11\1\0\25\1\2\0\1\1\1\0"+
    "\6\1\3\0\14\1\3\0\3\1\1\11\2\0\15\1"+
    "\2\0\2\1\1\11\1\0\11\1\1\0\1\1\1\11"+
    "\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[463];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MakefileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MakefileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall though
        case '\u000C':  // fall though
        case '\u0085':  // fall though
        case '\u2028':  // fall though
        case '\u2029':  // fall though
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case PREREQUISITES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 464: break;
            case INCLUDES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 465: break;
            case EXPORT: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 466: break;
            case EXPORTVAR: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 467: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return FUNCTION_PARAM_TEXT;
            } 
            // fall through
          case 51: break;
          case 2: 
            { return IDENTIFIER;
            } 
            // fall through
          case 52: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 53: break;
          case 4: 
            { return COMMENT;
            } 
            // fall through
          case 54: break;
          case 5: 
            { yybegin(PREREQUISITES); return COLON;
            } 
            // fall through
          case 55: break;
          case 6: 
            { yybegin(SOURCE); return ASSIGN;
            } 
            // fall through
          case 56: break;
          case 7: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 57: break;
          case 8: 
            { yybegin(SOURCE); return TAB;
            } 
            // fall through
          case 58: break;
          case 9: 
            { yybegin(YYINITIAL); return EOL;
            } 
            // fall through
          case 59: break;
          case 10: 
            { return COLON;
            } 
            // fall through
          case 60: break;
          case 11: 
            { yybegin(SOURCE); return SEMICOLON;
            } 
            // fall through
          case 61: break;
          case 12: 
            { return PIPE;
            } 
            // fall through
          case 62: break;
          case 13: 
            { yypushback(yylength()); yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 63: break;
          case 14: 
            { return LINE;
            } 
            // fall through
          case 64: break;
          case 15: 
            { yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 65: break;
          case 16: 
            { yybegin(DEFINEBODY); return WHITE_SPACE;
            } 
            // fall through
          case 66: break;
          case 17: 
            { return ASSIGN;
            } 
            // fall through
          case 67: break;
          case 18: 
            { return VARIABLE_VALUE_LINE;
            } 
            // fall through
          case 68: break;
          case 19: 
            { yybegin(YYINITIAL); return CONDITION;
            } 
            // fall through
          case 69: break;
          case 20: 
            { yybegin(YYINITIAL); return FUNCTION_END;
            } 
            // fall through
          case 70: break;
          case 21: 
            { yybegin(EXPORTVAR); return ASSIGN;
            } 
            // fall through
          case 71: break;
          case 22: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 72: break;
          case 23: 
            { yybegin(PREREQUISITES); return DOUBLECOLON;
            } 
            // fall through
          case 73: break;
          case 24: 
            { return SPLIT;
            } 
            // fall through
          case 74: break;
          case 25: 
            { return DOUBLECOLON;
            } 
            // fall through
          case 75: break;
          case 26: 
            { return VARIABLE_USAGE;
            } 
            // fall through
          case 76: break;
          case 27: 
            { return MACRO;
            } 
            // fall through
          case 77: break;
          case 28: 
            { yybegin(ELSE); return KEYWORD_ELSE;
            } 
            // fall through
          case 78: break;
          case 29: 
            { yybegin(CONDITIONALS); return KEYWORD_IFEQ;
            } 
            // fall through
          case 79: break;
          case 30: 
            { return KEYWORD_ENDIF;
            } 
            // fall through
          case 80: break;
          case 31: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNEQ;
            } 
            // fall through
          case 81: break;
          case 32: 
            { yybegin(CONDITIONALS); return KEYWORD_IFDEF;
            } 
            // fall through
          case 82: break;
          case 33: 
            { yybegin(INCLUDES); return KEYWORD_VPATH;
            } 
            // fall through
          case 83: break;
          case 34: 
            { yybegin(YYINITIAL); return KEYWORD_ENDEF;
            } 
            // fall through
          case 84: break;
          case 35: 
            { yybegin(FUNCTION); return FUNCTION_INFO;
            } 
            // fall through
          case 85: break;
          case 36: 
            { yybegin(EXPORT); return KEYWORD_EXPORT;
            } 
            // fall through
          case 86: break;
          case 37: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNDEF;
            } 
            // fall through
          case 87: break;
          case 38: 
            { yybegin(DEFINE); return KEYWORD_DEFINE;
            } 
            // fall through
          case 88: break;
          case 39: 
            { yybegin(YYINITIAL); return KEYWORD_EXPORT;
            } 
            // fall through
          case 89: break;
          case 40: 
            { yybegin(FUNCTION); return FUNCTION_ERROR;
            } 
            // fall through
          case 90: break;
          case 41: 
            { yybegin(FUNCTION); return FUNCTION_SHELL;
            } 
            // fall through
          case 91: break;
          case 42: 
            { yybegin(INCLUDES); return KEYWORD_INCLUDE;
            } 
            // fall through
          case 92: break;
          case 43: 
            { return KEYWORD_PRIVATE;
            } 
            // fall through
          case 93: break;
          case 44: 
            { yybegin(YYINITIAL); return KEYWORD_PRIVATE;
            } 
            // fall through
          case 94: break;
          case 45: 
            { return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 95: break;
          case 46: 
            { yybegin(INCLUDES); return KEYWORD_UNDEFINE;
            } 
            // fall through
          case 96: break;
          case 47: 
            { yybegin(YYINITIAL); return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 97: break;
          case 48: 
            { yybegin(FUNCTION); return FUNCTION_WARNING;
            } 
            // fall through
          case 98: break;
          case 49: 
            { yybegin(FUNCTION); return FUNCTION_WILDCARD;
            } 
            // fall through
          case 99: break;
          case 50: 
            { yybegin(FUNCTION); return FUNCTION_PATHSUBST;
            } 
            // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
