/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package name.kropp.intellij.makefile;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static name.kropp.intellij.makefile.psi.MakefileTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>MakefileLexer.flex</tt>
 */
public class _MakefileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INCLUDES = 2;
  public static final int SOURCE = 4;
  public static final int SOURCE_FORCED = 6;
  public static final int DEFINE = 8;
  public static final int DEFINEBODY = 10;
  public static final int CONDITIONALS = 12;
  public static final int FUNCTION = 14;
  public static final int EXPORT = 16;
  public static final int EXPORTVAR = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4,  5,  4,  6,  7,  8,  9, 10, 11, 12, 13, 14, 
    15, 16,  4, 17
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\1\2\0\1\4\22\0\1\2\1\45\1\52\1\6\1\47\3\0\1\50\1\51\1\0\1\46\1"+
    "\41\1\30\14\0\1\37\1\40\1\0\1\43\1\0\1\44\1\36\33\0\1\3\4\0\1\13\1\24\1\34"+
    "\1\27\1\7\1\17\1\16\1\21\1\15\1\33\1\0\1\22\1\32\1\14\1\11\1\26\1\54\1\10"+
    "\1\20\1\25\1\23\1\35\1\12\1\31\2\0\1\55\1\42\1\53\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\2\1\3\0\1\2\1\3\1\4\1\2\1\4"+
    "\1\5\23\2\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\2\2\1\13\1\14\1\15\1\13\1\16\1\17\1\2"+
    "\1\20\1\13\1\21\1\4\1\13\1\4\3\22\1\23"+
    "\1\5\1\22\1\21\1\24\1\13\1\25\1\13\1\2"+
    "\1\26\1\4\1\26\1\13\2\26\1\27\1\30\1\4"+
    "\1\27\1\1\1\5\21\1\1\13\1\31\1\1\1\13"+
    "\1\32\1\13\1\2\1\13\3\22\1\0\2\33\2\5"+
    "\1\34\6\2\1\35\11\2\1\35\24\2\1\36\1\37"+
    "\1\40\1\0\1\41\1\2\3\0\2\22\2\5\1\34"+
    "\1\22\1\21\1\22\3\0\1\5\2\26\1\0\1\27"+
    "\2\5\1\34\3\1\1\35\10\1\1\35\17\1\1\0"+
    "\1\1\1\0\1\42\3\22\1\42\1\0\1\5\1\0"+
    "\1\34\13\2\1\35\33\2\2\43\1\0\2\5\1\22"+
    "\1\34\3\43\1\26\2\43\2\5\1\1\1\34\31\1"+
    "\1\44\1\43\1\22\1\43\2\22\1\0\1\34\1\2"+
    "\1\45\2\2\1\35\7\2\1\46\20\2\1\43\1\22"+
    "\1\34\1\26\1\1\1\34\1\35\16\1\1\43\1\47"+
    "\11\2\1\50\1\2\1\51\12\2\1\52\1\53\15\1"+
    "\1\54\5\2\1\55\1\2\1\35\3\2\1\56\4\1"+
    "\1\35\1\1\1\2\1\57\2\2\1\60\1\1\1\61"+
    "\1\2\1\62\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[434];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"+
    "\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592"+
    "\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702"+
    "\0\u0730\0\u075e\0\u078c\0\u07ba\0\u033c\0\u07e8\0\u033c\0\u07e8"+
    "\0\u0816\0\u0816\0\u0844\0\u0872\0\u07e8\0\u07e8\0\u08a0\0\u07e8"+
    "\0\u08ce\0\u08fc\0\u092a\0\u07e8\0\u0958\0\u0986\0\u09b4\0\u09e2"+
    "\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52"+
    "\0\u0b80\0\u07e8\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94"+
    "\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04"+
    "\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74"+
    "\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4"+
    "\0\u1112\0\u1140\0\u07e8\0\u116e\0\u119c\0\u07e8\0\u11ca\0\u11f8"+
    "\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368"+
    "\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8"+
    "\0\u1506\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648"+
    "\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8"+
    "\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928"+
    "\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u0816"+
    "\0\u07e8\0\u07e8\0\u08a0\0\u07e8\0\u1a98\0\u1ac6\0\u1af4\0\u0958"+
    "\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64"+
    "\0\u1c36\0\u0bae\0\u0c0a\0\u1c92\0\u1cc0\0\u1cee\0\u1cee\0\u1d1c"+
    "\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c"+
    "\0\u1eba\0\u1ee8\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1fce\0\u0dd6"+
    "\0\u1ffc\0\u202a\0\u2058\0\u2086\0\u20b4\0\u20e2\0\u2110\0\u213e"+
    "\0\u216c\0\u219a\0\u21c8\0\u21f6\0\u2224\0\u2252\0\u2280\0\u22ae"+
    "\0\u22dc\0\u11ca\0\u22ae\0\u230a\0\u2338\0\u2366\0\u2394\0\u23c2"+
    "\0\u23f0\0\u241e\0\u244c\0\u247a\0\u24a8\0\u24d6\0\u2504\0\u2532"+
    "\0\u2560\0\u258e\0\u25bc\0\u25ea\0\u2618\0\u2646\0\u033c\0\u2674"+
    "\0\u26a2\0\u26d0\0\u26fe\0\u272c\0\u275a\0\u2788\0\u27b6\0\u27e4"+
    "\0\u2812\0\u2840\0\u286e\0\u289c\0\u28ca\0\u28f8\0\u2926\0\u2954"+
    "\0\u2982\0\u29b0\0\u29de\0\u2a0c\0\u2a3a\0\u2a68\0\u2a96\0\u2ac4"+
    "\0\u2af2\0\u2b20\0\u033c\0\u07e8\0\u2b4e\0\u2b7c\0\u2baa\0\u2bd8"+
    "\0\u2c06\0\u0a10\0\u0958\0\u0a3e\0\u2c34\0\u0c0a\0\u0d1e\0\u2c62"+
    "\0\u2c90\0\u2cbe\0\u2cec\0\u2d1a\0\u2d48\0\u2d76\0\u2da4\0\u2dd2"+
    "\0\u2e00\0\u2e2e\0\u2e5c\0\u2e8a\0\u2eb8\0\u2ee6\0\u2f14\0\u2f42"+
    "\0\u2f70\0\u2f9e\0\u2fcc\0\u2ffa\0\u3028\0\u3056\0\u3084\0\u30b2"+
    "\0\u30e0\0\u310e\0\u313c\0\u316a\0\u07e8\0\u0dd6\0\u3198\0\u1254"+
    "\0\u31c6\0\u2394\0\u31f4\0\u3222\0\u3250\0\u033c\0\u327e\0\u32ac"+
    "\0\u32da\0\u3308\0\u3336\0\u3364\0\u3392\0\u33c0\0\u33ee\0\u341c"+
    "\0\u033c\0\u344a\0\u3478\0\u34a6\0\u34d4\0\u3502\0\u3530\0\u355e"+
    "\0\u358c\0\u35ba\0\u35e8\0\u3616\0\u3644\0\u3672\0\u36a0\0\u36ce"+
    "\0\u36fc\0\u23c2\0\u372a\0\u3758\0\u3786\0\u37b4\0\u37e2\0\u3810"+
    "\0\u383e\0\u386c\0\u389a\0\u38c8\0\u38f6\0\u3924\0\u3952\0\u3980"+
    "\0\u39ae\0\u39dc\0\u3a0a\0\u3a38\0\u3a66\0\u3a94\0\u3198\0\u033c"+
    "\0\u3ac2\0\u3af0\0\u3b1e\0\u3b4c\0\u3b7a\0\u3ba8\0\u3bd6\0\u3c04"+
    "\0\u3c32\0\u033c\0\u3c60\0\u033c\0\u3c8e\0\u3cbc\0\u3cea\0\u3d18"+
    "\0\u3d46\0\u3d74\0\u3da2\0\u3dd0\0\u3dfe\0\u3e2c\0\u033c\0\u0c0a"+
    "\0\u3e5a\0\u3e88\0\u3eb6\0\u3ee4\0\u3f12\0\u3f40\0\u3f6e\0\u3f9c"+
    "\0\u3fca\0\u3ff8\0\u4026\0\u4054\0\u4082\0\u033c\0\u40b0\0\u40de"+
    "\0\u410c\0\u413a\0\u4168\0\u033c\0\u4196\0\u41c4\0\u41f2\0\u4220"+
    "\0\u424e\0\u033c\0\u427c\0\u42aa\0\u42d8\0\u4306\0\u4334\0\u4362"+
    "\0\u4390\0\u033c\0\u43be\0\u43ec\0\u033c\0\u441a\0\u033c\0\u4448"+
    "\0\u033c\0\u4476";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[434];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\23\1\24\1\25\1\26\1\24\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\23\1\43\1\44\1\45\1\23\1\46\1\47"+
    "\1\50\2\23\1\51\1\52\1\53\1\23\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\3\23\1\24\1\25\1\26\1\24"+
    "\1\71\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\23\1\43\1\44\1\45"+
    "\1\23\1\46\1\47\1\50\2\23\1\51\1\52\1\53"+
    "\1\72\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\3\23\1\73"+
    "\1\25\1\23\1\73\1\27\1\30\30\23\1\74\1\23"+
    "\1\74\1\23\3\74\1\23\5\74\3\23\1\73\1\25"+
    "\1\23\1\73\1\27\1\30\27\23\1\72\1\74\1\23"+
    "\1\74\1\23\3\74\1\23\5\74\2\23\1\75\1\73"+
    "\1\76\1\77\1\73\1\100\1\30\47\75\1\101\1\102"+
    "\1\101\1\103\1\102\1\104\1\105\27\101\1\106\17\101"+
    "\1\75\1\73\1\76\1\77\1\73\1\104\1\30\27\75"+
    "\1\107\17\75\1\23\1\110\1\25\1\23\1\110\1\27"+
    "\1\30\30\23\1\111\1\23\1\74\1\23\1\112\2\113"+
    "\1\114\5\74\3\23\1\110\1\25\1\23\1\110\1\27"+
    "\1\30\27\23\1\72\1\111\1\23\1\74\1\23\1\112"+
    "\2\113\1\114\5\74\2\23\1\115\1\116\1\117\1\120"+
    "\1\116\1\117\1\30\1\121\47\115\1\116\1\117\1\120"+
    "\1\116\1\117\1\30\1\121\26\115\1\122\17\115\1\123"+
    "\1\124\1\125\1\123\1\124\1\123\1\30\50\123\1\124"+
    "\1\125\1\123\1\124\1\123\1\30\27\123\1\126\17\123"+
    "\6\127\1\130\1\131\1\132\1\133\1\134\1\135\1\136"+
    "\1\137\1\140\1\141\1\142\1\127\1\143\1\127\1\144"+
    "\1\127\1\145\1\146\3\127\1\147\1\150\1\151\11\127"+
    "\1\152\1\127\1\153\12\127\1\130\1\131\1\132\1\133"+
    "\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\127"+
    "\1\143\1\127\1\144\1\127\1\145\1\146\3\127\1\147"+
    "\1\150\1\151\1\154\10\127\1\152\1\127\1\153\4\127"+
    "\1\23\1\73\1\25\1\23\1\73\1\27\1\30\30\23"+
    "\1\155\1\23\1\74\1\23\1\156\2\157\1\160\1\161"+
    "\4\74\2\23\1\162\2\102\1\162\1\102\1\27\1\105"+
    "\27\162\1\163\1\102\1\162\1\102\1\162\3\102\1\162"+
    "\1\164\4\102\2\162\1\101\1\102\1\101\1\103\1\102"+
    "\1\100\1\105\27\101\1\106\17\101\1\23\2\0\1\23"+
    "\3\0\30\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\2\23\1\0\1\24\2\0\1\24"+
    "\53\0\1\25\53\0\1\23\1\166\1\0\1\23\1\167"+
    "\2\0\30\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\2\23\5\0\1\27\50\0\1\170"+
    "\1\0\1\170\1\171\1\0\1\170\1\172\47\170\1\23"+
    "\2\0\1\23\3\0\1\23\1\173\3\23\1\174\5\23"+
    "\1\175\6\23\1\176\3\23\1\177\1\23\1\0\3\23"+
    "\3\0\1\23\1\165\1\23\1\0\1\23\1\0\3\23"+
    "\2\0\1\23\3\0\1\200\27\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\1\23\1\201\24\23\1\202\1\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\2\23\1\203\1\23\1\204"+
    "\1\23\1\205\21\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\5\23\1\206\7\23\1\207\2\23\1\210\7\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\2\23\1\211\25\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\5\23\1\212\2\23\1\213"+
    "\17\23\1\0\3\23\3\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\3\23\2\0\1\23\3\0\14\23\1\214"+
    "\13\23\1\0\3\23\3\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\3\23\2\0\1\23\3\0\2\23\1\215"+
    "\3\23\1\216\4\23\1\217\14\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\2\23\1\220\3\23\1\221\3\23\1\222"+
    "\1\23\1\223\1\23\1\224\11\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\4\23\1\225\23\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\5\23\1\226\22\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\4\23\1\227\23\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\1\23\1\230\2\23\1\231\23\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\1\232\5\23\1\233\21\23"+
    "\1\0\3\23\3\0\1\23\1\165\1\23\1\0\1\23"+
    "\1\0\3\23\2\0\1\23\3\0\6\23\1\221\21\23"+
    "\1\0\3\23\3\0\1\23\1\165\1\23\1\0\1\23"+
    "\1\0\3\23\2\0\1\23\3\0\2\23\1\234\25\23"+
    "\1\0\3\23\3\0\1\23\1\165\1\23\1\0\1\23"+
    "\1\0\3\23\2\0\1\23\3\0\4\23\1\235\23\23"+
    "\1\0\3\23\3\0\1\23\1\165\1\23\1\0\1\23"+
    "\1\0\3\23\2\0\1\23\3\0\4\23\1\236\12\23"+
    "\1\237\10\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\2\23\37\0\1\240\3\0\1\60"+
    "\133\0\1\60\12\0\1\23\2\0\1\23\3\0\30\23"+
    "\1\0\3\23\1\60\2\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\2\23\50\0\1\241\4\0\1\242\52\243"+
    "\1\244\3\243\5\0\1\71\50\0\1\245\2\0\1\245"+
    "\1\0\2\246\27\245\1\23\1\246\3\245\3\246\1\245"+
    "\1\247\1\245\1\246\1\245\1\246\2\245\1\0\1\73"+
    "\2\0\1\73\51\0\1\75\1\0\1\75\1\250\1\0"+
    "\1\75\1\0\50\75\1\0\1\76\1\250\1\0\1\75"+
    "\1\0\50\75\1\166\1\75\1\250\1\167\1\75\1\0"+
    "\50\75\1\0\1\75\1\250\1\0\1\100\1\0\47\75"+
    "\1\101\1\102\2\101\1\102\1\75\1\102\47\101\5\102"+
    "\1\0\50\102\1\101\1\251\2\101\1\252\1\75\1\102"+
    "\47\101\1\75\1\0\1\75\1\250\1\0\1\104\1\0"+
    "\47\75\1\253\1\102\1\253\1\254\1\102\1\170\1\255"+
    "\47\253\1\256\1\102\1\101\1\256\1\102\1\257\1\260"+
    "\27\256\1\101\17\256\1\257\1\0\1\75\1\261\1\0"+
    "\1\257\1\246\27\257\1\75\17\257\1\0\1\110\2\0"+
    "\1\110\110\0\1\262\3\0\1\112\55\0\1\112\12\0"+
    "\1\23\2\0\1\23\3\0\30\23\1\0\3\23\1\112"+
    "\2\0\1\23\1\165\1\23\1\0\1\23\1\0\2\23"+
    "\1\115\1\0\1\115\1\263\1\0\1\115\1\0\47\115"+
    "\1\0\1\116\2\0\1\116\51\0\1\115\1\0\1\117"+
    "\1\263\1\0\1\117\1\264\50\115\1\166\1\115\1\263"+
    "\1\167\1\115\1\0\50\115\1\0\1\115\1\263\1\0"+
    "\1\115\1\0\5\115\1\265\41\115\1\266\1\0\1\115"+
    "\1\267\1\0\1\266\1\246\27\266\1\115\17\266\1\123"+
    "\1\0\2\123\1\0\1\123\1\0\47\123\1\0\1\124"+
    "\2\0\1\124\51\0\1\123\1\0\1\125\1\123\1\0"+
    "\1\123\1\0\47\123\1\270\1\0\1\123\1\270\1\0"+
    "\1\270\1\246\27\270\1\123\17\270\47\127\1\0\1\127"+
    "\1\0\4\127\1\271\1\127\1\271\1\272\1\127\1\271"+
    "\1\273\40\271\1\170\1\271\1\170\4\271\10\127\1\274"+
    "\24\127\1\275\11\127\1\0\1\127\1\0\13\127\1\276"+
    "\37\127\1\0\1\127\1\0\14\127\1\277\36\127\1\0"+
    "\1\127\1\0\15\127\1\300\1\127\1\301\1\127\1\302"+
    "\31\127\1\0\1\127\1\0\20\127\1\303\7\127\1\304"+
    "\2\127\1\305\17\127\1\0\1\127\1\0\15\127\1\306"+
    "\35\127\1\0\1\127\1\0\20\127\1\307\2\127\1\310"+
    "\27\127\1\0\1\127\1\0\27\127\1\311\23\127\1\0"+
    "\1\127\1\0\15\127\1\312\3\127\1\313\4\127\1\314"+
    "\24\127\1\0\1\127\1\0\15\127\1\315\7\127\1\316"+
    "\1\127\1\317\1\127\1\320\21\127\1\0\1\127\1\0"+
    "\17\127\1\321\33\127\1\0\1\127\1\0\17\127\1\322"+
    "\33\127\1\0\1\127\1\0\17\127\1\323\33\127\1\0"+
    "\1\127\1\0\21\127\1\324\31\127\1\0\1\127\1\0"+
    "\15\127\1\325\35\127\1\0\1\127\1\0\17\127\1\326"+
    "\33\127\1\0\1\127\1\0\17\127\1\327\33\127\1\0"+
    "\1\127\1\0\4\127\50\0\1\330\5\0\1\331\2\127"+
    "\1\331\1\127\31\331\1\127\10\331\1\246\1\331\1\246"+
    "\4\331\37\0\1\332\3\0\1\156\55\0\1\156\12\0"+
    "\1\23\2\0\1\23\3\0\30\23\1\0\3\23\1\156"+
    "\2\0\1\23\1\165\1\23\1\0\1\23\1\0\2\23"+
    "\50\0\1\333\5\0\1\162\2\102\1\162\1\102\1\0"+
    "\1\102\30\162\1\102\3\162\3\102\1\162\1\334\1\162"+
    "\1\102\1\162\1\102\2\162\1\335\2\102\1\335\1\102"+
    "\1\246\1\260\27\335\1\162\1\260\3\335\3\260\1\335"+
    "\1\336\1\335\1\260\1\335\1\260\2\335\5\102\1\0"+
    "\42\102\1\337\5\102\50\0\1\340\7\0\1\166\2\0"+
    "\1\166\51\0\2\166\2\0\1\166\50\0\1\170\1\0"+
    "\1\170\1\171\1\0\51\170\1\264\1\341\2\264\1\342"+
    "\51\264\1\172\1\0\1\172\1\343\1\0\51\172\1\23"+
    "\2\0\1\23\3\0\1\23\1\344\26\23\1\0\3\23"+
    "\3\0\1\23\1\165\1\23\1\0\1\23\1\0\3\23"+
    "\2\0\1\23\3\0\20\23\1\345\7\23\1\0\3\23"+
    "\3\0\1\23\1\165\1\23\1\0\1\23\1\0\3\23"+
    "\2\0\1\23\3\0\11\23\1\346\16\23\1\0\3\23"+
    "\3\0\1\23\1\165\1\23\1\0\1\23\1\0\3\23"+
    "\2\0\1\23\3\0\17\23\1\347\10\23\1\0\3\23"+
    "\3\0\1\23\1\165\1\23\1\0\1\23\1\0\3\23"+
    "\2\0\1\23\3\0\4\23\1\350\23\23\1\0\3\23"+
    "\3\0\1\23\1\165\1\23\1\0\1\23\1\0\3\23"+
    "\2\0\1\23\3\0\4\23\1\351\23\23\1\0\3\23"+
    "\3\0\1\23\1\165\1\23\1\0\1\23\1\0\3\23"+
    "\2\0\1\23\3\0\6\23\1\352\21\23\1\0\3\23"+
    "\3\0\1\23\1\165\1\23\1\0\1\23\1\0\3\23"+
    "\2\0\1\23\3\0\1\353\27\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\1\23\1\354\26\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\1\23\1\355\26\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\13\23\1\356\14\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\20\23\1\357\7\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\11\23\1\360\16\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\20\23\1\361\7\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\16\23\1\362\11\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\10\23\1\363\14\23\1\364\2\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\1\365\4\23\1\366\12\23"+
    "\1\367\7\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\3\23\2\0\1\23\3\0\6\23"+
    "\1\370\21\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\3\23\2\0\1\23\3\0\1\23"+
    "\1\371\26\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\3\23\2\0\1\23\3\0\1\23"+
    "\1\225\3\23\1\372\5\23\1\373\14\23\1\0\3\23"+
    "\3\0\1\23\1\165\1\23\1\0\1\23\1\0\3\23"+
    "\2\0\1\23\3\0\4\23\1\374\23\23\1\0\3\23"+
    "\3\0\1\23\1\165\1\23\1\0\1\23\1\0\3\23"+
    "\2\0\1\23\3\0\1\23\1\375\26\23\1\0\3\23"+
    "\3\0\1\23\1\165\1\23\1\0\1\23\1\0\3\23"+
    "\2\0\1\23\3\0\5\23\1\376\22\23\1\0\3\23"+
    "\3\0\1\23\1\165\1\23\1\0\1\23\1\0\3\23"+
    "\2\0\1\23\3\0\1\235\27\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\10\23\1\377\4\23\1\u0100\12\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\1\23\1\u0101\26\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\11\23\1\u0102\16\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\20\23\1\u0103\7\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\11\23\1\u0104\16\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\6\23\1\u0105\21\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\16\23\1\u0106\11\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\10\23\1\u0107\17\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\1\23\1\357\26\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\6\23\1\u0108\21\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\13\23\1\350\14\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\13\23\1\u0109\14\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\4\23\1\u010a\23\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\2\23\1\245\2\0\1\245\1\0\2\246\27\245\1\u010b"+
    "\1\246\3\245\3\246\1\245\1\247\1\245\1\246\1\245"+
    "\1\246\2\245\1\246\2\0\1\246\1\0\31\246\1\u010c"+
    "\20\246\2\0\1\246\1\0\31\246\1\u010c\11\246\1\u010d"+
    "\5\246\2\102\1\251\2\102\1\166\51\102\2\251\2\102"+
    "\1\166\50\102\1\253\1\102\1\253\1\254\1\102\1\170"+
    "\50\253\1\u010e\1\u010f\2\u010e\1\u0110\1\264\50\u010e\1\255"+
    "\1\102\1\255\1\u0111\1\102\1\172\50\255\1\256\1\102"+
    "\1\101\1\256\1\102\1\257\1\260\27\256\1\u0112\17\256"+
    "\1\257\1\0\1\75\1\261\1\0\1\257\1\246\27\257"+
    "\1\u0113\17\257\1\260\2\102\1\260\1\102\1\246\30\260"+
    "\1\u0114\17\260\1\264\1\0\2\264\1\0\51\264\1\115"+
    "\1\0\1\115\1\263\1\0\1\115\1\0\20\115\1\u0115"+
    "\26\115\1\266\1\0\1\115\1\267\1\0\1\266\1\246"+
    "\27\266\1\u0116\17\266\1\270\1\0\1\123\1\270\1\0"+
    "\1\270\1\246\27\270\1\u0117\17\270\1\271\1\127\1\271"+
    "\1\272\1\127\42\271\1\170\1\271\1\170\4\271\1\u0118"+
    "\1\u0119\2\u0118\1\u011a\42\u0118\1\264\1\u0118\1\264\4\u0118"+
    "\1\273\1\127\1\273\1\u011b\1\127\42\273\1\172\1\273"+
    "\1\172\4\273\10\127\1\u011c\36\127\1\0\1\127\1\0"+
    "\17\127\1\u011d\33\127\1\0\1\127\1\0\17\127\1\u011e"+
    "\33\127\1\0\1\127\1\0\21\127\1\u011f\31\127\1\0"+
    "\1\127\1\0\14\127\1\u0120\36\127\1\0\1\127\1\0"+
    "\14\127\1\u0121\36\127\1\0\1\127\1\0\26\127\1\u0122"+
    "\24\127\1\0\1\127\1\0\33\127\1\310\17\127\1\0"+
    "\1\127\1\0\24\127\1\u0123\26\127\1\0\1\127\1\0"+
    "\33\127\1\u0124\17\127\1\0\1\127\1\0\31\127\1\u0125"+
    "\21\127\1\0\1\127\1\0\23\127\1\u0126\27\127\1\0"+
    "\1\127\1\0\21\127\1\u0127\31\127\1\0\1\127\1\0"+
    "\14\127\1\u0128\36\127\1\0\1\127\1\0\14\127\1\321"+
    "\3\127\1\u0129\5\127\1\u012a\24\127\1\0\1\127\1\0"+
    "\17\127\1\u012b\33\127\1\0\1\127\1\0\14\127\1\u012c"+
    "\36\127\1\0\1\127\1\0\13\127\1\326\37\127\1\0"+
    "\1\127\1\0\23\127\1\u012d\4\127\1\u012e\22\127\1\0"+
    "\1\127\1\0\14\127\1\u012f\36\127\1\0\1\127\1\0"+
    "\24\127\1\u0130\26\127\1\0\1\127\1\0\24\127\1\u0131"+
    "\26\127\1\0\1\127\1\0\31\127\1\u0132\21\127\1\0"+
    "\1\127\1\0\14\127\1\310\36\127\1\0\1\127\1\0"+
    "\21\127\1\u0133\31\127\1\0\1\127\1\0\26\127\1\u011d"+
    "\24\127\1\0\1\127\1\0\26\127\1\u0134\24\127\1\0"+
    "\1\127\1\0\4\127\2\330\1\0\44\330\1\0\1\330"+
    "\1\u0135\4\330\1\331\2\127\1\331\1\127\31\331\1\u0136"+
    "\10\331\1\246\1\331\1\246\4\331\5\102\1\0\42\102"+
    "\1\u0137\5\102\1\335\2\102\1\335\1\102\1\246\1\260"+
    "\27\335\1\u0138\1\260\3\335\3\260\1\335\1\336\1\335"+
    "\1\260\1\335\1\260\2\335\1\260\2\102\1\260\1\102"+
    "\1\246\30\260\1\u0114\11\260\1\u0139\5\260\2\u013a\1\102"+
    "\2\u013a\1\330\41\u013a\1\102\1\u013a\1\102\4\u013a\2\340"+
    "\1\0\44\340\1\0\1\340\1\23\4\340\1\341\1\0"+
    "\1\341\1\u013b\1\0\51\341\1\0\1\341\54\0\1\u013c"+
    "\1\341\2\u013c\1\342\51\u013c\1\23\2\0\1\23\3\0"+
    "\2\23\1\233\25\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\6\23\1\u013d\21\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\1\u013e\27\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\3\23\2\0\1\23\3\0\2\23"+
    "\1\u013f\25\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\3\23\2\0\1\23\3\0\13\23"+
    "\1\357\14\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\3\23\2\0\1\23\3\0\13\23"+
    "\1\360\14\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\3\23\2\0\1\23\3\0\7\23"+
    "\1\234\20\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\3\23\2\0\1\23\3\0\1\23"+
    "\1\u0140\26\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\3\23\2\0\1\23\3\0\20\23"+
    "\1\u0141\7\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\3\23\2\0\1\23\3\0\5\23"+
    "\1\u0142\22\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\3\23\2\0\1\23\3\0\20\23"+
    "\1\u0143\7\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\3\23\2\0\1\23\3\0\17\23"+
    "\1\u0144\10\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\3\23\2\0\1\23\3\0\11\23"+
    "\1\u0145\5\23\1\u0146\10\23\1\0\3\23\3\0\1\23"+
    "\1\165\1\23\1\0\1\23\1\0\3\23\2\0\1\23"+
    "\3\0\20\23\1\u0147\7\23\1\0\3\23\3\0\1\23"+
    "\1\165\1\23\1\0\1\23\1\0\3\23\2\0\1\23"+
    "\3\0\2\23\1\357\25\23\1\0\3\23\3\0\1\23"+
    "\1\165\1\23\1\0\1\23\1\0\3\23\2\0\1\23"+
    "\3\0\13\23\1\u0148\14\23\1\0\3\23\3\0\1\23"+
    "\1\165\1\23\1\0\1\23\1\0\3\23\2\0\1\23"+
    "\3\0\30\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\1\u0149\2\23\2\0\1\23\3\0"+
    "\1\u014a\17\23\1\u014b\7\23\1\0\3\23\3\0\1\23"+
    "\1\165\1\23\1\0\1\23\1\0\3\23\2\0\1\23"+
    "\3\0\1\u014c\27\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\13\23\1\u014d\14\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\1\u014e\27\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\3\23\2\0\1\23\3\0\20\23"+
    "\1\u014f\7\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\3\23\2\0\1\23\3\0\1\357"+
    "\15\23\1\u0150\11\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\26\23\1\344\1\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\16\23\1\357\11\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\25\23\1\364\2\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\10\23\1\u0151\17\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\11\23\1\375\16\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\6\23\1\u0152\21\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\16\23\1\u0153\11\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\1\u0154\27\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\3\23\2\0\1\23\3\0\1\u0155"+
    "\27\23\1\0\3\23\3\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\3\23\2\0\1\23\3\0\26\23\1\u0156"+
    "\1\23\1\0\3\23\3\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\3\23\2\0\1\23\3\0\11\23\1\u0157"+
    "\16\23\1\0\3\23\3\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\3\23\2\0\1\23\3\0\6\23\1\u0158"+
    "\21\23\1\0\3\23\3\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\3\23\2\0\1\23\3\0\5\23\1\357"+
    "\22\23\1\0\3\23\3\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\3\23\2\0\1\23\3\0\14\23\1\u014d"+
    "\13\23\1\0\3\23\3\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\3\23\2\0\1\23\3\0\16\23\1\u0159"+
    "\11\23\1\0\3\23\3\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\2\23\1\u010d\1\340\1\0\1\u010d\1\340"+
    "\31\u010d\1\u015a\10\u010d\1\246\1\u010d\1\245\4\u010d\1\u010e"+
    "\1\102\2\u010e\1\102\1\264\50\u010e\1\u010f\1\102\1\u010f"+
    "\1\u015b\1\102\1\341\50\u010f\1\102\1\u010f\3\102\1\0"+
    "\50\102\1\u015c\1\u010f\2\u015c\1\u0110\1\u013c\50\u015c\1\115"+
    "\1\0\1\115\1\263\1\0\1\115\1\0\1\u015d\46\115"+
    "\1\u0118\1\127\2\u0118\1\127\42\u0118\1\264\1\u0118\1\264"+
    "\4\u0118\1\u0119\1\127\1\u0119\1\u015e\1\127\42\u0119\1\341"+
    "\1\u0119\1\341\4\u0119\1\127\1\u0119\45\127\1\0\1\127"+
    "\1\0\4\127\1\u015f\1\u0119\2\u015f\1\u011a\42\u015f\1\u013c"+
    "\1\u015f\1\u013c\4\u015f\11\127\1\324\35\127\1\0\1\127"+
    "\1\0\26\127\1\310\24\127\1\0\1\127\1\0\26\127"+
    "\1\u0123\24\127\1\0\1\127\1\0\22\127\1\325\30\127"+
    "\1\0\1\127\1\0\33\127\1\u0160\17\127\1\0\1\127"+
    "\1\0\20\127\1\u0161\32\127\1\0\1\127\1\0\33\127"+
    "\1\u0162\17\127\1\0\1\127\1\0\32\127\1\u0163\20\127"+
    "\1\0\1\127\1\0\24\127\1\u0164\5\127\1\u0165\20\127"+
    "\1\0\1\127\1\0\33\127\1\146\17\127\1\0\1\127"+
    "\1\0\15\127\1\310\35\127\1\0\1\127\1\0\26\127"+
    "\1\u0166\24\127\1\0\1\127\1\0\13\127\1\u0167\37\127"+
    "\1\0\1\127\1\0\33\127\1\u0168\17\127\1\0\1\127"+
    "\1\0\13\127\1\310\15\127\1\u0169\21\127\1\0\1\127"+
    "\1\0\41\127\1\u011c\11\127\1\0\1\127\1\0\31\127"+
    "\1\310\21\127\1\0\1\127\1\0\23\127\1\u016a\27\127"+
    "\1\0\1\127\1\0\24\127\1\u012c\26\127\1\0\1\127"+
    "\1\0\21\127\1\u016b\31\127\1\0\1\127\1\0\31\127"+
    "\1\u016c\21\127\1\0\1\127\1\0\13\127\1\u016d\37\127"+
    "\1\0\1\127\1\0\24\127\1\u016e\26\127\1\0\1\127"+
    "\1\0\20\127\1\310\32\127\1\0\1\127\1\0\27\127"+
    "\1\u0166\23\127\1\0\1\127\1\0\4\127\2\u0137\1\102"+
    "\2\u0137\1\340\41\u0137\1\102\1\u0137\1\162\4\u0137\1\u0139"+
    "\1\u0137\1\102\1\u0139\1\u0137\1\u010d\30\u0139\1\u016f\10\u0139"+
    "\1\260\1\u0139\1\335\4\u0139\1\0\1\341\2\0\1\342"+
    "\51\0\1\u013c\1\0\2\u013c\1\0\51\u013c\1\23\2\0"+
    "\1\23\3\0\10\23\1\u0170\17\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\1\23\1\u0171\26\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\1\23\1\u0172\26\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\11\23\1\357\1\23\1\u0173\14\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\6\23\1\u0174\21\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\25\23\1\u0175\2\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\4\23\1\u0176\23\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\14\23\1\u0177\13\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\1\23\1\u0178\26\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\6\23\1\233\21\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\14\23\1\u0179\13\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\30\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\1\u017a\2\23"+
    "\2\0\1\23\3\0\1\u017b\27\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\10\23\1\u017c\17\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\3\23\2\0"+
    "\1\23\3\0\1\357\27\23\1\0\3\23\3\0\1\23"+
    "\1\165\1\23\1\0\1\23\1\0\3\23\2\0\1\23"+
    "\3\0\4\23\1\u017d\23\23\1\0\3\23\3\0\1\23"+
    "\1\165\1\23\1\0\1\23\1\0\3\23\2\0\1\23"+
    "\3\0\11\23\1\u017e\16\23\1\0\3\23\3\0\1\23"+
    "\1\165\1\23\1\0\1\23\1\0\3\23\2\0\1\23"+
    "\3\0\1\u017f\27\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\6\23\1\u0180\21\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\17\23\1\357\10\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\3\23\1\u0181\24\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\10\23\1\u0182\17\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\5\23\1\u0183\22\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\4\23\1\u0184\23\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\14\23\1\u0185\13\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\5\23\1\u0186\22\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\3\23\2\0\1\23\3\0"+
    "\12\23\1\u0187\15\23\1\0\3\23\3\0\1\23\1\165"+
    "\1\23\1\0\1\23\1\0\2\23\1\102\1\u010f\2\102"+
    "\1\u0110\1\0\50\102\1\u015c\1\102\2\u015c\1\102\1\u013c"+
    "\50\u015c\1\115\1\0\1\115\1\263\1\0\1\115\1\0"+
    "\10\115\1\u0188\36\115\1\127\1\u0119\2\127\1\u011a\42\127"+
    "\1\0\1\127\1\0\4\127\1\u015f\1\127\2\u015f\1\127"+
    "\42\u015f\1\u013c\1\u015f\1\u013c\4\u015f\20\127\1\310\1\127"+
    "\1\u0189\24\127\1\0\1\127\1\0\21\127\1\u018a\31\127"+
    "\1\0\1\127\1\0\40\127\1\u018b\12\127\1\0\1\127"+
    "\1\0\17\127\1\u018c\33\127\1\0\1\127\1\0\27\127"+
    "\1\u018d\23\127\1\0\1\127\1\0\14\127\1\u018e\36\127"+
    "\1\0\1\127\1\0\13\127\1\310\37\127\1\0\1\127"+
    "\1\0\17\127\1\u018f\33\127\1\0\1\127\1\0\24\127"+
    "\1\u0190\26\127\1\0\1\127\1\0\13\127\1\u0191\37\127"+
    "\1\0\1\127\1\0\21\127\1\u0192\31\127\1\0\1\127"+
    "\1\0\32\127\1\310\20\127\1\0\1\127\1\0\16\127"+
    "\1\u0193\34\127\1\0\1\127\1\0\20\127\1\u0194\32\127"+
    "\1\0\1\127\1\0\27\127\1\u0195\23\127\1\0\1\127"+
    "\1\0\4\127\1\23\2\0\1\23\3\0\16\23\1\u0196"+
    "\11\23\1\0\3\23\3\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\3\23\2\0\1\23\3\0\6\23\1\u0197"+
    "\21\23\1\0\3\23\3\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\3\23\2\0\1\23\3\0\6\23\1\u0100"+
    "\21\23\1\0\3\23\3\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\3\23\2\0\1\23\3\0\5\23\1\u0198"+
    "\22\23\1\0\3\23\3\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\3\23\2\0\1\23\3\0\4\23\1\u0199"+
    "\23\23\1\0\3\23\3\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\3\23\2\0\1\23\3\0\16\23\1\u019a"+
    "\11\23\1\0\3\23\3\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\3\23\2\0\1\23\3\0\10\23\1\377"+
    "\17\23\1\0\3\23\3\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\3\23\2\0\1\23\3\0\1\377\27\23"+
    "\1\0\3\23\3\0\1\23\1\165\1\23\1\0\1\23"+
    "\1\0\3\23\2\0\1\23\3\0\20\23\1\u019b\7\23"+
    "\1\0\3\23\3\0\1\23\1\165\1\23\1\0\1\23"+
    "\1\0\3\23\2\0\1\23\3\0\10\23\1\u019c\17\23"+
    "\1\0\3\23\3\0\1\23\1\165\1\23\1\0\1\23"+
    "\1\0\3\23\2\0\1\23\3\0\25\23\1\u019a\2\23"+
    "\1\0\3\23\3\0\1\23\1\165\1\23\1\0\1\23"+
    "\1\0\3\23\2\0\1\23\3\0\16\23\1\u019d\11\23"+
    "\1\0\3\23\3\0\1\23\1\165\1\23\1\0\1\23"+
    "\1\0\3\23\2\0\1\23\3\0\1\23\1\u019e\26\23"+
    "\1\0\3\23\3\0\1\23\1\165\1\23\1\0\1\23"+
    "\1\0\3\23\2\0\1\23\3\0\22\23\1\357\5\23"+
    "\1\0\3\23\3\0\1\23\1\165\1\23\1\0\1\23"+
    "\1\0\3\23\2\0\1\23\3\0\2\23\1\u0199\25\23"+
    "\1\0\3\23\3\0\1\23\1\165\1\23\1\0\1\23"+
    "\1\0\3\23\2\0\1\23\3\0\6\23\1\u019f\21\23"+
    "\1\0\3\23\3\0\1\23\1\165\1\23\1\0\1\23"+
    "\1\0\3\23\2\0\1\23\3\0\4\23\1\u01a0\23\23"+
    "\1\0\3\23\3\0\1\23\1\165\1\23\1\0\1\23"+
    "\1\0\3\23\2\0\1\23\3\0\16\23\1\u01a1\11\23"+
    "\1\0\3\23\3\0\1\23\1\165\1\23\1\0\1\23"+
    "\1\0\3\23\2\0\1\23\3\0\15\23\1\u0100\12\23"+
    "\1\0\3\23\3\0\1\23\1\165\1\23\1\0\1\23"+
    "\1\0\3\23\2\0\1\23\3\0\1\u01a2\27\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\2\23\15\127\1\u012e\31\127\1\0\1\127\1\0\20\127"+
    "\1\u01a3\32\127\1\0\1\127\1\0\17\127\1\u01a4\33\127"+
    "\1\0\1\127\1\0\31\127\1\u01a5\21\127\1\0\1\127"+
    "\1\0\23\127\1\u012d\27\127\1\0\1\127\1\0\13\127"+
    "\1\u012d\37\127\1\0\1\127\1\0\40\127\1\u01a5\12\127"+
    "\1\0\1\127\1\0\31\127\1\u01a6\21\127\1\0\1\127"+
    "\1\0\14\127\1\u01a7\36\127\1\0\1\127\1\0\35\127"+
    "\1\310\15\127\1\0\1\127\1\0\15\127\1\u01a4\35\127"+
    "\1\0\1\127\1\0\17\127\1\u01a8\33\127\1\0\1\127"+
    "\1\0\30\127\1\u012e\22\127\1\0\1\127\1\0\4\127"+
    "\1\23\2\0\1\23\3\0\20\23\1\u01a9\7\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\7\23\1\357\20\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\1\23\1\206\26\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\12\23\1\357\15\23\1\0"+
    "\3\23\3\0\1\23\1\165\1\23\1\0\1\23\1\0"+
    "\3\23\2\0\1\23\3\0\1\u01aa\27\23\1\0\3\23"+
    "\3\0\1\23\1\165\1\23\1\0\1\23\1\0\3\23"+
    "\2\0\1\23\3\0\1\23\1\u0142\26\23\1\0\3\23"+
    "\3\0\1\23\1\165\1\23\1\0\1\23\1\0\3\23"+
    "\2\0\1\23\3\0\21\23\1\u01ab\6\23\1\0\3\23"+
    "\3\0\1\23\1\165\1\23\1\0\1\23\1\0\3\23"+
    "\2\0\1\23\3\0\5\23\1\u01ac\22\23\1\0\3\23"+
    "\3\0\1\23\1\165\1\23\1\0\1\23\1\0\3\23"+
    "\2\0\1\23\3\0\23\23\1\u014d\4\23\1\0\3\23"+
    "\3\0\1\23\1\165\1\23\1\0\1\23\1\0\3\23"+
    "\2\0\1\23\3\0\1\u01ad\27\23\1\0\3\23\3\0"+
    "\1\23\1\165\1\23\1\0\1\23\1\0\2\23\16\127"+
    "\1\310\30\127\1\0\1\127\1\0\14\127\1\303\36\127"+
    "\1\0\1\127\1\0\25\127\1\310\25\127\1\0\1\127"+
    "\1\0\14\127\1\u0161\36\127\1\0\1\127\1\0\34\127"+
    "\1\u01ae\16\127\1\0\1\127\1\0\36\127\1\u0166\14\127"+
    "\1\0\1\127\1\0\4\127\1\23\2\0\1\23\3\0"+
    "\1\u01af\27\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\3\23\2\0\1\23\3\0\2\23"+
    "\1\u01b0\25\23\1\0\3\23\3\0\1\23\1\165\1\23"+
    "\1\0\1\23\1\0\3\23\2\0\1\23\3\0\1\u01b1"+
    "\27\23\1\0\3\23\3\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\2\23\11\127\1\u01b2\35\127\1\0\1\127"+
    "\1\0\4\127\1\23\2\0\1\23\3\0\14\23\1\375"+
    "\13\23\1\0\3\23\3\0\1\23\1\165\1\23\1\0"+
    "\1\23\1\0\2\23\23\127\1\u012c\23\127\1\0\1\127"+
    "\1\0\4\127";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17572];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\2\1\3\0\33\1\1\11\1\1\1\11\4\1"+
    "\2\11\1\1\1\11\3\1\1\11\15\1\1\11\40\1"+
    "\1\11\2\1\1\11\6\1\1\0\53\1\2\11\1\0"+
    "\1\11\1\1\3\0\10\1\3\0\3\1\1\0\40\1"+
    "\1\0\1\1\1\0\5\1\1\0\1\1\1\0\51\1"+
    "\1\11\1\0\47\1\1\11\5\1\1\0\167\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[434];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MakefileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MakefileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case INCLUDES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 435: break;
            case EXPORT: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 436: break;
            case EXPORTVAR: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 437: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return FUNCTION_PARAM_TEXT;
            } 
            // fall through
          case 51: break;
          case 2: 
            { return IDENTIFIER;
            } 
            // fall through
          case 52: break;
          case 3: 
            { return EOL;
            } 
            // fall through
          case 53: break;
          case 4: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 54: break;
          case 5: 
            { return COMMENT;
            } 
            // fall through
          case 55: break;
          case 6: 
            { return COLON;
            } 
            // fall through
          case 56: break;
          case 7: 
            { yybegin(SOURCE_FORCED); return SEMICOLON;
            } 
            // fall through
          case 57: break;
          case 8: 
            { return COMMA;
            } 
            // fall through
          case 58: break;
          case 9: 
            { return PIPE;
            } 
            // fall through
          case 59: break;
          case 10: 
            { yybegin(SOURCE); return ASSIGN;
            } 
            // fall through
          case 60: break;
          case 11: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 61: break;
          case 12: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 62: break;
          case 13: 
            { return FUNCTION_END;
            } 
            // fall through
          case 63: break;
          case 14: 
            { return VARIABLE_END;
            } 
            // fall through
          case 64: break;
          case 15: 
            { yybegin(SOURCE); return TAB;
            } 
            // fall through
          case 65: break;
          case 16: 
            { yybegin(YYINITIAL); return EOL;
            } 
            // fall through
          case 66: break;
          case 17: 
            { return TEXT;
            } 
            // fall through
          case 67: break;
          case 18: 
            { yypushback(yylength()); yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 68: break;
          case 19: 
            { return TAB;
            } 
            // fall through
          case 69: break;
          case 20: 
            { yybegin(DEFINEBODY); return WHITE_SPACE;
            } 
            // fall through
          case 70: break;
          case 21: 
            { return ASSIGN;
            } 
            // fall through
          case 71: break;
          case 22: 
            { return VARIABLE_VALUE_LINE;
            } 
            // fall through
          case 72: break;
          case 23: 
            { yybegin(YYINITIAL); return CONDITION;
            } 
            // fall through
          case 73: break;
          case 24: 
            { yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 74: break;
          case 25: 
            { yybegin(YYINITIAL); return FUNCTION_END;
            } 
            // fall through
          case 75: break;
          case 26: 
            { yybegin(EXPORTVAR); return ASSIGN;
            } 
            // fall through
          case 76: break;
          case 27: 
            { return SPLIT;
            } 
            // fall through
          case 77: break;
          case 28: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 78: break;
          case 29: 
            { return FUNCTION_NAME;
            } 
            // fall through
          case 79: break;
          case 30: 
            { return DOUBLECOLON;
            } 
            // fall through
          case 80: break;
          case 31: 
            { return FUNCTION_START;
            } 
            // fall through
          case 81: break;
          case 32: 
            { return VARIABLE_START;
            } 
            // fall through
          case 82: break;
          case 33: 
            { return STRING;
            } 
            // fall through
          case 83: break;
          case 34: 
            { yybegin(FUNCTION); return FUNCTION_START;
            } 
            // fall through
          case 84: break;
          case 35: 
            { return MACRO;
            } 
            // fall through
          case 85: break;
          case 36: 
            { return VARIABLE_USAGE;
            } 
            // fall through
          case 86: break;
          case 37: 
            { return KEYWORD_ELSE;
            } 
            // fall through
          case 87: break;
          case 38: 
            { return KEYWORD_IFEQ;
            } 
            // fall through
          case 88: break;
          case 39: 
            { return KEYWORD_ENDIF;
            } 
            // fall through
          case 89: break;
          case 40: 
            { return KEYWORD_IFNEQ;
            } 
            // fall through
          case 90: break;
          case 41: 
            { return KEYWORD_IFDEF;
            } 
            // fall through
          case 91: break;
          case 42: 
            { return KEYWORD_VPATH;
            } 
            // fall through
          case 92: break;
          case 43: 
            { yybegin(YYINITIAL); return KEYWORD_ENDEF;
            } 
            // fall through
          case 93: break;
          case 44: 
            { yybegin(EXPORT); return KEYWORD_EXPORT;
            } 
            // fall through
          case 94: break;
          case 45: 
            { return KEYWORD_IFNDEF;
            } 
            // fall through
          case 95: break;
          case 46: 
            { yybegin(DEFINE); return KEYWORD_DEFINE;
            } 
            // fall through
          case 96: break;
          case 47: 
            { return KEYWORD_INCLUDE;
            } 
            // fall through
          case 97: break;
          case 48: 
            { return KEYWORD_PRIVATE;
            } 
            // fall through
          case 98: break;
          case 49: 
            { return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 99: break;
          case 50: 
            { yybegin(INCLUDES); return KEYWORD_UNDEFINE;
            } 
            // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
