/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package name.kropp.intellij.makefile;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static name.kropp.intellij.makefile.psi.MakefileTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>MakefileLexer.flex</tt>
 */
public class _MakefileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PREREQUISITES = 2;
  public static final int ELSE = 4;
  public static final int INCLUDES = 6;
  public static final int SOURCE = 8;
  public static final int DEFINE = 10;
  public static final int DEFINEBODY = 12;
  public static final int CONDITIONALS = 14;
  public static final int FUNCTION = 16;
  public static final int FUNCTION_PREREQ = 18;
  public static final int EXPORT = 20;
  public static final int EXPORTVAR = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 
    16, 17, 18, 19, 20, 21, 22, 23
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\41\1\1\2\0\1\4\22\0\1\2\1\37\1\0\1\5\1\6\3\0\1\7\1\42\1\0\1\40\1\0"+
    "\1\43\14\0\1\33\1\34\1\0\1\36\1\0\1\37\1\32\33\0\1\3\4\0\1\14\1\31\1\25\1"+
    "\24\1\10\1\20\1\17\1\22\1\16\2\0\1\23\1\0\1\15\1\12\1\26\1\45\1\11\1\21\1"+
    "\27\1\30\1\44\1\13\1\46\3\0\1\35\203\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\20\0\4\1\4\0\1\2\2\3\1\4\10\2\1\5"+
    "\1\6\1\7\1\2\1\3\2\2\1\10\1\11\5\2"+
    "\1\12\1\13\1\14\2\15\1\7\1\16\1\17\1\3"+
    "\1\7\1\3\1\16\1\20\1\7\1\21\1\7\1\2"+
    "\2\22\1\7\2\22\1\23\1\3\1\23\1\1\1\4"+
    "\1\7\1\24\1\1\1\25\1\7\1\26\1\7\1\2"+
    "\2\4\1\27\13\2\1\30\2\2\1\0\2\31\4\2"+
    "\1\32\1\0\1\16\3\0\1\4\2\22\1\0\1\23"+
    "\2\4\1\27\1\0\1\1\1\0\1\4\1\0\1\27"+
    "\6\2\1\33\14\2\2\34\10\2\1\34\1\22\2\34"+
    "\2\4\1\1\1\27\1\33\1\34\1\0\1\27\7\2"+
    "\1\35\3\2\1\36\20\2\1\22\1\1\1\27\6\2"+
    "\1\37\3\2\1\40\1\2\1\41\3\2\1\42\11\2"+
    "\1\43\3\2\1\44\2\2\1\45\2\2\1\46\1\47"+
    "\5\2\1\50\2\2\1\51\2\2\1\52\2\2\1\53"+
    "\2\2\1\54\1\55\1\2\1\56\2\2\1\57\2\2"+
    "\1\60\3\2\1\61\1\62\3\2\1\63\1\64\2\2"+
    "\1\65\2\2\1\66\1\2\1\67\1\2\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a\0\u0381"+
    "\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u046b\0\u0492\0\u04b9"+
    "\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1"+
    "\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729"+
    "\0\u0750\0\u0777\0\u079e\0\u03a8\0\u03a8\0\u05a3\0\u07c5\0\u05a3"+
    "\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af\0\u08d6\0\u08fd"+
    "\0\u05a3\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7\0\u0a0e"+
    "\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8\0\u05a3\0\u0b1f"+
    "\0\u05a3\0\u0b46\0\u05a3\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09"+
    "\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41"+
    "\0\u0d68\0\u0d8f\0\u0db6\0\u05ca\0\u0ddd\0\u0e04\0\u0e2b\0\u05a3"+
    "\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\u05ca\0\u07ec\0\u0f15"+
    "\0\u0f15\0\u0924\0\u0972\0\u0f3c\0\u0f63\0\u0f8a\0\u0f8a\0\u0fb1"+
    "\0\u0fd8\0\u0fff\0\u1026\0\u104d\0\u1074\0\u0b6d\0\u109b\0\u10c2"+
    "\0\u10e9\0\u1110\0\u1137\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u03a8"+
    "\0\u11fa\0\u1221\0\u1248\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u130b"+
    "\0\u1332\0\u1359\0\u1380\0\u13a7\0\u03a8\0\u05a3\0\u13ce\0\u13f5"+
    "\0\u141c\0\u1443\0\u146a\0\u1491\0\u14b8\0\u14df\0\u07ec\0\u1506"+
    "\0\u0972\0\u0a35\0\u152d\0\u1554\0\u157b\0\u15a2\0\u05a3\0\u0aaa"+
    "\0\u15c9\0\u15f0\0\u1617\0\u163e\0\u1665\0\u168c\0\u16b3\0\u16da"+
    "\0\u1701\0\u03a8\0\u1728\0\u174f\0\u1776\0\u03a8\0\u179d\0\u17c4"+
    "\0\u17eb\0\u1812\0\u1839\0\u1860\0\u1887\0\u18ae\0\u18d5\0\u18fc"+
    "\0\u1923\0\u194a\0\u1971\0\u1998\0\u19bf\0\u19e6\0\u1a0d\0\u1a34"+
    "\0\u1a5b\0\u1a82\0\u1aa9\0\u1ad0\0\u1af7\0\u1b1e\0\u1b45\0\u03a8"+
    "\0\u1b6c\0\u1b93\0\u1bba\0\u03a8\0\u1be1\0\u03a8\0\u1c08\0\u1c2f"+
    "\0\u1c56\0\u03a8\0\u1c7d\0\u1ca4\0\u1ccb\0\u1cf2\0\u1d19\0\u1d40"+
    "\0\u1d67\0\u1d8e\0\u1db5\0\u0972\0\u1ddc\0\u1e03\0\u1e2a\0\u1110"+
    "\0\u1e51\0\u1e78\0\u03a8\0\u1e9f\0\u1ec6\0\u03a8\0\u03a8\0\u1eed"+
    "\0\u1f14\0\u1f3b\0\u1f62\0\u1f89\0\u1110\0\u1fb0\0\u1fd7\0\u03a8"+
    "\0\u1ffe\0\u2025\0\u1110\0\u204c\0\u2073\0\u1110\0\u209a\0\u20c1"+
    "\0\u03a8\0\u03a8\0\u20e8\0\u1110\0\u210f\0\u2136\0\u1110\0\u215d"+
    "\0\u2184\0\u03a8\0\u21ab\0\u21d2\0\u21f9\0\u03a8\0\u03a8\0\u2220"+
    "\0\u2247\0\u226e\0\u03a8\0\u1110\0\u2295\0\u22bc\0\u1110\0\u22e3"+
    "\0\u230a\0\u1110\0\u2331\0\u1110\0\u2358\0\u1110\0\u1110";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\31\1\32\1\33\1\31\1\32\1\34\1\35\1\31"+
    "\1\36\1\31\1\37\3\31\1\40\2\31\1\41\2\31"+
    "\1\42\1\31\1\43\1\31\1\44\2\31\1\45\2\31"+
    "\1\46\1\47\1\50\1\51\1\31\1\41\1\52\3\31"+
    "\1\32\1\33\1\31\1\32\1\34\1\35\1\31\1\36"+
    "\1\31\1\37\3\31\1\40\2\31\1\41\2\31\1\42"+
    "\1\31\1\43\1\31\1\44\1\31\1\53\1\45\2\31"+
    "\1\46\1\47\1\50\1\54\1\31\1\41\1\52\3\31"+
    "\1\55\1\33\1\56\1\55\1\34\1\57\1\31\1\60"+
    "\1\31\1\61\13\31\1\62\4\31\1\63\1\64\1\65"+
    "\1\46\1\47\1\50\1\51\6\31\1\55\1\33\1\56"+
    "\1\55\1\34\1\57\1\31\1\60\1\31\1\61\13\31"+
    "\1\62\3\31\1\53\1\63\1\64\1\65\1\46\1\47"+
    "\1\50\1\51\5\31\1\66\1\55\1\33\1\66\1\55"+
    "\1\34\42\66\1\55\1\33\1\66\1\55\1\34\24\66"+
    "\1\67\14\66\1\31\1\55\1\33\1\31\1\55\1\34"+
    "\25\31\1\70\2\31\2\70\1\31\1\51\6\31\1\55"+
    "\1\33\1\31\1\55\1\34\24\31\1\53\1\70\2\31"+
    "\2\70\1\31\1\51\5\31\1\71\1\72\1\73\1\74"+
    "\1\72\1\34\33\71\1\75\6\71\1\72\1\73\1\74"+
    "\1\72\1\34\24\71\1\76\6\71\1\75\5\71\1\31"+
    "\1\77\1\33\1\31\1\77\1\34\25\31\1\100\2\31"+
    "\1\101\1\102\1\103\1\51\6\31\1\77\1\33\1\31"+
    "\1\77\1\34\24\31\1\53\1\100\2\31\1\101\1\102"+
    "\1\103\1\51\5\31\1\104\1\32\1\105\1\106\1\32"+
    "\1\34\2\104\1\107\30\104\1\105\6\104\1\32\1\105"+
    "\1\106\1\32\1\34\2\104\1\107\21\104\1\110\6\104"+
    "\1\105\5\104\1\111\1\72\1\112\1\111\1\72\1\34"+
    "\42\111\1\72\1\112\1\111\1\72\1\34\24\111\1\113"+
    "\14\111\5\114\1\115\1\116\33\114\1\117\11\114\1\115"+
    "\1\116\23\114\1\120\7\114\1\117\11\114\1\115\1\116"+
    "\33\114\1\121\11\114\1\115\1\116\23\114\1\120\7\114"+
    "\1\121\4\114\1\31\1\55\1\33\1\31\1\55\1\34"+
    "\1\35\24\31\1\122\2\31\1\123\1\124\1\125\1\51"+
    "\6\31\1\55\1\33\1\31\1\55\1\34\1\35\23\31"+
    "\1\53\1\122\2\31\1\123\1\124\1\125\1\51\5\31"+
    "\1\71\1\55\1\73\1\74\1\55\1\34\33\71\1\75"+
    "\6\71\1\55\1\73\1\74\1\55\1\34\24\71\1\76"+
    "\6\71\1\75\5\71\1\31\2\0\1\31\2\0\25\31"+
    "\1\0\2\31\2\0\1\31\1\0\5\31\1\0\1\32"+
    "\2\0\1\32\44\0\1\33\44\0\1\126\1\0\1\126"+
    "\1\127\1\0\1\130\41\126\1\31\2\0\1\31\2\0"+
    "\1\31\1\131\23\31\1\0\2\31\2\0\1\31\1\0"+
    "\6\31\2\0\1\31\2\0\7\31\1\132\5\31\1\133"+
    "\7\31\1\0\2\31\2\0\1\31\1\0\4\31\1\134"+
    "\1\31\2\0\1\31\2\0\25\31\1\0\2\31\2\0"+
    "\1\31\1\0\2\31\1\135\3\31\2\0\1\31\2\0"+
    "\7\31\1\136\2\31\1\137\12\31\1\0\2\31\2\0"+
    "\1\31\1\0\6\31\2\0\1\31\2\0\10\31\1\140"+
    "\14\31\1\0\2\31\2\0\1\31\1\0\6\31\2\0"+
    "\1\31\2\0\2\31\1\141\22\31\1\0\2\31\2\0"+
    "\1\31\1\0\6\31\2\0\1\31\2\0\3\31\1\142"+
    "\21\31\1\0\2\31\2\0\1\31\1\0\6\31\2\0"+
    "\1\31\2\0\7\31\1\143\15\31\1\0\2\31\2\0"+
    "\1\31\1\0\5\31\33\0\1\144\2\0\1\46\115\0"+
    "\1\46\10\0\1\31\2\0\1\31\2\0\25\31\1\0"+
    "\2\31\1\46\1\0\1\31\1\0\5\31\41\0\1\51"+
    "\5\0\1\31\2\0\1\31\2\0\20\31\1\145\4\31"+
    "\1\0\2\31\2\0\1\31\1\0\5\31\1\146\2\0"+
    "\1\146\1\0\1\147\24\146\1\31\1\147\2\146\2\147"+
    "\1\146\1\147\5\146\41\0\1\54\6\0\1\55\2\0"+
    "\1\55\42\0\1\31\1\150\1\0\1\31\1\151\1\0"+
    "\25\31\1\0\2\31\2\0\1\31\1\0\6\31\2\0"+
    "\1\31\2\0\1\31\1\152\23\31\1\0\2\31\2\0"+
    "\1\31\1\0\6\31\2\0\1\31\2\0\25\31\1\0"+
    "\2\31\2\0\1\31\1\0\4\31\1\153\1\31\2\0"+
    "\1\31\2\0\25\31\1\0\2\31\2\0\1\31\1\0"+
    "\2\31\1\154\3\31\2\0\1\31\2\0\3\31\1\155"+
    "\21\31\1\0\2\31\2\0\1\31\1\0\5\31\33\0"+
    "\1\156\2\0\1\46\10\0\1\147\2\0\1\147\1\0"+
    "\25\147\1\0\14\147\1\71\1\0\1\71\1\157\2\0"+
    "\41\71\1\0\1\72\2\0\1\72\42\0\1\71\1\0"+
    "\1\73\1\157\2\0\42\71\1\150\1\71\1\157\1\151"+
    "\1\0\42\71\1\0\1\71\1\157\2\0\33\71\1\75"+
    "\5\71\1\160\1\0\1\71\1\161\1\0\1\147\24\160"+
    "\1\71\14\160\1\0\1\77\2\0\1\77\75\0\1\162"+
    "\2\0\1\101\46\0\1\101\10\0\1\31\2\0\1\31"+
    "\2\0\25\31\1\0\2\31\1\101\1\0\1\31\1\0"+
    "\5\31\1\104\1\0\1\104\1\163\2\0\42\104\1\0"+
    "\1\105\1\163\1\0\1\164\33\104\1\105\6\104\1\150"+
    "\1\104\1\163\1\151\1\0\42\104\1\0\1\104\1\163"+
    "\2\0\7\104\1\165\31\104\1\166\1\0\1\104\1\167"+
    "\1\0\1\147\24\166\1\104\14\166\1\111\1\0\2\111"+
    "\2\0\42\111\1\0\1\112\1\111\2\0\41\111\1\170"+
    "\1\0\1\111\1\170\1\0\1\147\24\170\1\111\14\170"+
    "\6\114\1\0\33\114\1\0\4\114\1\171\1\114\1\171"+
    "\1\172\1\114\1\173\1\126\33\171\1\126\4\171\7\0"+
    "\1\174\37\0\1\175\2\114\1\175\1\114\1\175\1\147"+
    "\23\175\1\114\7\175\1\147\4\175\33\0\1\176\2\0"+
    "\1\123\46\0\1\123\10\0\1\31\2\0\1\31\2\0"+
    "\25\31\1\0\2\31\1\123\1\0\1\31\1\0\5\31"+
    "\1\126\1\0\1\126\1\127\1\0\42\126\1\164\1\177"+
    "\2\164\1\200\42\164\1\130\1\0\1\130\1\201\1\0"+
    "\42\130\1\202\1\174\1\0\1\202\2\174\2\202\1\203"+
    "\2\202\1\204\2\202\1\205\2\202\1\206\4\202\1\207"+
    "\4\202\1\174\2\202\2\174\1\202\1\174\1\210\4\202"+
    "\1\31\2\0\1\31\2\0\16\31\1\211\6\31\1\0"+
    "\2\31\2\0\1\31\1\0\6\31\2\0\1\31\2\0"+
    "\13\31\1\212\11\31\1\0\2\31\2\0\1\31\1\0"+
    "\6\31\2\0\1\31\2\0\20\31\1\213\4\31\1\0"+
    "\2\31\2\0\1\31\1\0\6\31\2\0\1\31\2\0"+
    "\2\31\1\214\22\31\1\0\2\31\2\0\1\31\1\0"+
    "\6\31\2\0\1\31\2\0\17\31\1\215\5\31\1\0"+
    "\2\31\2\0\1\31\1\0\6\31\2\0\1\31\2\0"+
    "\2\31\1\216\4\31\1\217\6\31\1\220\6\31\1\0"+
    "\2\31\2\0\1\31\1\0\6\31\2\0\1\31\2\0"+
    "\7\31\1\136\15\31\1\0\2\31\2\0\1\31\1\0"+
    "\6\31\2\0\1\31\2\0\12\31\1\221\12\31\1\0"+
    "\2\31\2\0\1\31\1\0\6\31\2\0\1\31\2\0"+
    "\10\31\1\222\14\31\1\0\2\31\2\0\1\31\1\0"+
    "\6\31\2\0\1\31\2\0\16\31\1\223\6\31\1\0"+
    "\2\31\2\0\1\31\1\0\6\31\2\0\1\31\2\0"+
    "\6\31\1\224\16\31\1\0\2\31\2\0\1\31\1\0"+
    "\5\31\1\146\2\0\1\146\1\0\1\147\24\146\1\225"+
    "\1\147\2\146\2\147\1\146\1\147\5\146\1\147\2\0"+
    "\1\147\1\0\25\147\1\226\14\147\1\0\1\150\45\0"+
    "\1\202\1\174\1\0\1\202\2\174\2\202\1\227\2\202"+
    "\1\230\2\202\1\231\2\202\1\232\4\202\1\233\4\202"+
    "\1\174\2\202\2\174\1\202\1\174\1\210\4\202\1\31"+
    "\2\0\1\31\2\0\20\31\1\234\4\31\1\0\2\31"+
    "\2\0\1\31\1\0\6\31\2\0\1\31\2\0\2\31"+
    "\1\235\22\31\1\0\2\31\2\0\1\31\1\0\6\31"+
    "\2\0\1\31\2\0\10\31\1\236\14\31\1\0\2\31"+
    "\2\0\1\31\1\0\5\31\1\160\1\0\1\71\1\161"+
    "\1\0\1\147\24\160\1\237\14\160\1\164\1\0\2\164"+
    "\1\0\42\164\1\104\1\0\1\104\1\163\2\0\16\104"+
    "\1\240\22\104\1\166\1\0\1\104\1\167\1\0\1\147"+
    "\24\166\1\241\14\166\1\170\1\0\1\111\1\170\1\0"+
    "\1\147\24\170\1\242\14\170\1\171\1\114\1\171\1\172"+
    "\1\114\1\171\1\126\33\171\1\126\4\171\1\243\1\244"+
    "\2\243\1\245\1\243\1\164\33\243\1\164\4\243\1\173"+
    "\1\114\1\173\1\246\1\114\1\173\1\130\33\173\1\130"+
    "\4\173\2\174\1\0\37\174\1\247\4\174\1\175\2\114"+
    "\1\175\1\114\1\175\1\147\23\175\1\250\7\175\1\147"+
    "\4\175\1\177\1\0\1\177\1\251\1\0\42\177\1\0"+
    "\1\177\45\0\1\252\1\177\2\252\1\200\42\252\1\202"+
    "\1\174\1\0\1\202\2\174\25\202\1\174\2\202\2\174"+
    "\1\202\1\174\1\210\5\202\1\174\1\0\1\202\2\174"+
    "\3\202\1\253\21\202\1\174\2\202\2\174\1\202\1\174"+
    "\1\210\5\202\1\174\1\0\1\202\2\174\6\202\1\254"+
    "\1\202\1\255\14\202\1\174\2\202\2\174\1\202\1\174"+
    "\1\210\5\202\1\174\1\0\1\202\2\174\7\202\1\256"+
    "\15\202\1\174\2\202\2\174\1\202\1\174\1\210\5\202"+
    "\1\174\1\0\1\202\2\174\14\202\1\257\10\202\1\174"+
    "\2\202\2\174\1\202\1\174\1\210\5\202\1\174\1\0"+
    "\1\202\2\174\6\202\1\260\16\202\1\174\2\202\2\174"+
    "\1\202\1\174\1\210\4\202\1\31\2\0\1\31\2\0"+
    "\10\31\1\261\14\31\1\0\2\31\2\0\1\31\1\0"+
    "\6\31\2\0\1\31\2\0\2\31\1\262\22\31\1\0"+
    "\2\31\2\0\1\31\1\0\6\31\2\0\1\31\2\0"+
    "\4\31\1\263\20\31\1\0\2\31\2\0\1\31\1\0"+
    "\6\31\2\0\1\31\2\0\3\31\1\264\21\31\1\0"+
    "\2\31\2\0\1\31\1\0\6\31\2\0\1\31\2\0"+
    "\15\31\1\265\7\31\1\0\2\31\2\0\1\31\1\0"+
    "\6\31\2\0\1\31\2\0\25\31\1\0\2\31\2\0"+
    "\1\31\1\0\3\31\1\266\2\31\2\0\1\31\2\0"+
    "\2\31\1\267\13\31\1\270\6\31\1\0\2\31\2\0"+
    "\1\31\1\0\6\31\2\0\1\31\2\0\2\31\1\271"+
    "\22\31\1\0\2\31\2\0\1\31\1\0\6\31\2\0"+
    "\1\31\2\0\10\31\1\272\14\31\1\0\2\31\2\0"+
    "\1\31\1\0\6\31\2\0\1\31\2\0\25\31\1\0"+
    "\2\31\2\0\1\31\1\0\2\31\1\273\3\31\2\0"+
    "\1\31\2\0\2\31\1\274\22\31\1\0\2\31\2\0"+
    "\1\31\1\0\6\31\2\0\1\31\2\0\21\31\1\275"+
    "\3\31\1\0\2\31\2\0\1\31\1\0\5\31\1\202"+
    "\1\174\1\0\1\202\2\174\3\202\1\276\21\202\1\174"+
    "\2\202\2\174\1\202\1\174\1\210\5\202\1\174\1\0"+
    "\1\202\2\174\6\202\1\277\1\202\1\300\14\202\1\174"+
    "\2\202\2\174\1\202\1\174\1\210\5\202\1\174\1\0"+
    "\1\202\2\174\7\202\1\301\15\202\1\174\2\202\2\174"+
    "\1\202\1\174\1\210\5\202\1\174\1\0\1\202\2\174"+
    "\14\202\1\302\10\202\1\174\2\202\2\174\1\202\1\174"+
    "\1\210\5\202\1\174\1\0\1\202\2\174\6\202\1\303"+
    "\16\202\1\174\2\202\2\174\1\202\1\174\1\210\4\202"+
    "\1\31\2\0\1\31\2\0\4\31\1\304\20\31\1\0"+
    "\2\31\2\0\1\31\1\0\6\31\2\0\1\31\2\0"+
    "\3\31\1\305\21\31\1\0\2\31\2\0\1\31\1\0"+
    "\6\31\2\0\1\31\2\0\25\31\1\0\2\31\2\0"+
    "\1\31\1\0\2\31\1\306\2\31\1\104\1\0\1\104"+
    "\1\163\2\0\2\104\1\307\36\104\1\243\1\114\2\243"+
    "\1\114\1\243\1\164\33\243\1\164\4\243\1\244\1\114"+
    "\1\244\1\310\1\114\1\244\1\177\33\244\1\177\4\244"+
    "\1\114\1\244\4\114\1\0\33\114\1\0\4\114\1\311"+
    "\1\244\2\311\1\245\1\311\1\252\33\311\1\252\4\311"+
    "\1\0\1\177\2\0\1\200\42\0\1\252\1\0\2\252"+
    "\1\0\42\252\1\202\1\174\1\0\1\202\2\174\3\202"+
    "\1\312\21\202\1\174\2\202\2\174\1\202\1\174\1\210"+
    "\5\202\1\174\1\0\1\202\2\174\3\202\1\313\21\202"+
    "\1\174\2\202\2\174\1\202\1\174\1\210\5\202\1\174"+
    "\1\0\1\202\2\174\15\202\1\314\7\202\1\174\2\202"+
    "\2\174\1\202\1\174\1\210\5\202\1\174\1\0\1\202"+
    "\2\174\12\202\1\315\12\202\1\174\2\202\2\174\1\202"+
    "\1\174\1\210\5\202\1\174\1\0\1\202\2\174\2\202"+
    "\1\316\22\202\1\174\2\202\2\174\1\202\1\174\1\210"+
    "\5\202\1\174\1\0\1\202\2\174\21\202\1\317\3\202"+
    "\1\174\2\202\2\174\1\202\1\174\1\210\4\202\1\31"+
    "\2\0\1\31\2\0\12\31\1\320\12\31\1\0\2\31"+
    "\2\0\1\31\1\0\6\31\2\0\1\31\2\0\3\31"+
    "\1\321\21\31\1\0\2\31\2\0\1\31\1\0\6\31"+
    "\2\0\1\31\2\0\3\31\1\322\21\31\1\0\2\31"+
    "\2\0\1\31\1\0\6\31\2\0\1\31\2\0\22\31"+
    "\1\323\2\31\1\0\2\31\2\0\1\31\1\0\6\31"+
    "\2\0\1\31\2\0\25\31\1\0\2\31\2\0\1\31"+
    "\1\0\3\31\1\324\2\31\2\0\1\31\2\0\2\31"+
    "\1\325\22\31\1\0\2\31\2\0\1\31\1\0\6\31"+
    "\2\0\1\31\2\0\12\31\1\326\12\31\1\0\2\31"+
    "\2\0\1\31\1\0\6\31\2\0\1\31\2\0\7\31"+
    "\1\327\15\31\1\0\2\31\2\0\1\31\1\0\6\31"+
    "\2\0\1\31\2\0\6\31\1\330\16\31\1\0\2\31"+
    "\2\0\1\31\1\0\6\31\2\0\1\31\2\0\12\31"+
    "\1\331\12\31\1\0\2\31\2\0\1\31\1\0\6\31"+
    "\2\0\1\31\2\0\14\31\1\332\10\31\1\0\2\31"+
    "\2\0\1\31\1\0\5\31\1\202\1\174\1\0\1\202"+
    "\2\174\3\202\1\333\21\202\1\174\2\202\2\174\1\202"+
    "\1\174\1\210\5\202\1\174\1\0\1\202\2\174\3\202"+
    "\1\334\21\202\1\174\2\202\2\174\1\202\1\174\1\210"+
    "\5\202\1\174\1\0\1\202\2\174\15\202\1\335\7\202"+
    "\1\174\2\202\2\174\1\202\1\174\1\210\5\202\1\174"+
    "\1\0\1\202\2\174\12\202\1\336\12\202\1\174\2\202"+
    "\2\174\1\202\1\174\1\210\5\202\1\174\1\0\1\202"+
    "\2\174\2\202\1\337\22\202\1\174\2\202\2\174\1\202"+
    "\1\174\1\210\5\202\1\174\1\0\1\202\2\174\21\202"+
    "\1\340\3\202\1\174\2\202\2\174\1\202\1\174\1\210"+
    "\4\202\1\31\2\0\1\31\2\0\3\31\1\341\21\31"+
    "\1\0\2\31\2\0\1\31\1\0\6\31\2\0\1\31"+
    "\2\0\3\31\1\342\21\31\1\0\2\31\2\0\1\31"+
    "\1\0\6\31\2\0\1\31\2\0\6\31\1\343\16\31"+
    "\1\0\2\31\2\0\1\31\1\0\5\31\1\104\1\0"+
    "\1\104\1\163\2\0\12\104\1\344\26\104\1\114\1\244"+
    "\2\114\1\245\1\114\1\0\33\114\1\0\4\114\1\311"+
    "\1\114\2\311\1\114\1\311\1\252\33\311\1\252\4\311"+
    "\1\202\1\174\1\0\1\202\2\174\4\202\1\345\20\202"+
    "\1\174\2\202\2\174\1\202\1\174\1\210\5\202\1\174"+
    "\1\0\1\202\2\174\7\202\1\346\15\202\1\174\2\202"+
    "\2\174\1\202\1\174\1\210\5\202\1\174\1\0\1\202"+
    "\2\174\16\202\1\347\6\202\1\174\2\202\2\174\1\202"+
    "\1\174\1\210\5\202\1\174\1\0\1\202\2\174\4\202"+
    "\1\350\20\202\1\174\2\202\2\174\1\202\1\174\1\210"+
    "\5\202\1\174\1\0\1\202\2\174\15\202\1\351\7\202"+
    "\1\174\2\202\2\174\1\202\1\174\1\210\5\202\1\174"+
    "\1\0\1\202\2\174\14\202\1\352\10\202\1\174\2\202"+
    "\2\174\1\202\1\174\1\210\4\202\1\31\2\0\1\31"+
    "\2\0\21\31\1\353\3\31\1\0\2\31\2\0\1\31"+
    "\1\0\6\31\2\0\1\31\2\0\10\31\1\354\14\31"+
    "\1\0\2\31\2\0\1\31\1\0\6\31\2\0\1\31"+
    "\2\0\16\31\1\355\6\31\1\0\2\31\2\0\1\31"+
    "\1\0\6\31\2\0\1\31\2\0\12\31\1\356\12\31"+
    "\1\0\2\31\2\0\1\31\1\0\6\31\2\0\1\31"+
    "\2\0\2\31\1\357\22\31\1\0\2\31\2\0\1\31"+
    "\1\0\6\31\2\0\1\31\2\0\21\31\1\360\3\31"+
    "\1\0\2\31\2\0\1\31\1\0\6\31\2\0\1\31"+
    "\2\0\10\31\1\361\14\31\1\0\2\31\2\0\1\31"+
    "\1\0\5\31\1\202\1\174\1\0\1\202\2\174\4\202"+
    "\1\362\20\202\1\174\2\202\2\174\1\202\1\174\1\210"+
    "\5\202\1\174\1\0\1\202\2\174\7\202\1\363\15\202"+
    "\1\174\2\202\2\174\1\202\1\174\1\210\5\202\1\174"+
    "\1\0\1\202\2\174\16\202\1\364\6\202\1\174\2\202"+
    "\2\174\1\202\1\174\1\210\5\202\1\174\1\0\1\202"+
    "\2\174\4\202\1\365\20\202\1\174\2\202\2\174\1\202"+
    "\1\174\1\210\5\202\1\174\1\0\1\202\2\174\15\202"+
    "\1\366\7\202\1\174\2\202\2\174\1\202\1\174\1\210"+
    "\5\202\1\174\1\0\1\202\2\174\14\202\1\367\10\202"+
    "\1\174\2\202\2\174\1\202\1\174\1\210\4\202\1\31"+
    "\2\0\1\31\2\0\21\31\1\370\3\31\1\0\2\31"+
    "\2\0\1\31\1\0\6\31\2\0\1\31\2\0\10\31"+
    "\1\371\14\31\1\0\2\31\2\0\1\31\1\0\6\31"+
    "\2\0\1\31\2\0\21\31\1\372\3\31\1\0\2\31"+
    "\2\0\1\31\1\0\5\31\1\202\1\174\1\0\1\202"+
    "\2\174\3\202\1\373\21\202\1\174\2\202\2\174\1\202"+
    "\1\174\1\210\5\202\1\174\1\0\1\202\2\174\10\202"+
    "\1\374\14\202\1\174\2\202\2\174\1\202\1\174\1\210"+
    "\5\202\1\174\1\0\1\202\2\174\17\202\1\375\5\202"+
    "\1\174\2\202\2\174\1\202\1\174\1\210\5\202\1\174"+
    "\1\0\1\202\2\174\15\202\1\376\7\202\1\174\2\202"+
    "\2\174\1\202\1\174\1\210\5\202\1\174\1\0\1\202"+
    "\2\174\13\202\1\377\11\202\1\174\2\202\2\174\1\202"+
    "\1\174\1\210\4\202\1\31\2\0\1\31\2\0\16\31"+
    "\1\u0100\6\31\1\0\2\31\2\0\1\31\1\0\6\31"+
    "\2\0\1\31\2\0\2\31\1\u0101\22\31\1\0\2\31"+
    "\2\0\1\31\1\0\6\31\2\0\1\31\2\0\2\31"+
    "\1\u0102\22\31\1\0\2\31\2\0\1\31\1\0\6\31"+
    "\2\0\1\31\2\0\7\31\1\u0103\15\31\1\0\2\31"+
    "\2\0\1\31\1\0\5\31\1\202\1\174\1\0\1\202"+
    "\2\174\3\202\1\u0104\21\202\1\174\2\202\2\174\1\202"+
    "\1\174\1\210\5\202\1\174\1\0\1\202\2\174\10\202"+
    "\1\u0105\14\202\1\174\2\202\2\174\1\202\1\174\1\210"+
    "\5\202\1\174\1\0\1\202\2\174\17\202\1\u0106\5\202"+
    "\1\174\2\202\2\174\1\202\1\174\1\210\5\202\1\174"+
    "\1\0\1\202\2\174\15\202\1\u0107\7\202\1\174\2\202"+
    "\2\174\1\202\1\174\1\210\5\202\1\174\1\0\1\202"+
    "\2\174\13\202\1\u0108\11\202\1\174\2\202\2\174\1\202"+
    "\1\174\1\210\4\202\1\31\2\0\1\31\2\0\16\31"+
    "\1\u0109\6\31\1\0\2\31\2\0\1\31\1\0\6\31"+
    "\2\0\1\31\2\0\2\31\1\u010a\22\31\1\0\2\31"+
    "\2\0\1\31\1\0\5\31\1\202\1\174\1\0\1\202"+
    "\2\174\7\202\1\u010b\15\202\1\174\2\202\2\174\1\202"+
    "\1\174\1\210\5\202\1\174\1\0\1\202\2\174\6\202"+
    "\1\u010c\16\202\1\174\2\202\2\174\1\202\1\174\1\210"+
    "\5\202\1\174\1\0\1\202\2\174\22\202\1\u010d\2\202"+
    "\1\174\2\202\2\174\1\202\1\174\1\210\4\202\1\31"+
    "\2\0\1\31\2\0\2\31\1\u010e\22\31\1\0\2\31"+
    "\2\0\1\31\1\0\6\31\2\0\1\31\2\0\2\31"+
    "\1\u010f\22\31\1\0\2\31\2\0\1\31\1\0\5\31"+
    "\1\202\1\174\1\0\1\202\2\174\7\202\1\u0110\15\202"+
    "\1\174\2\202\2\174\1\202\1\174\1\210\5\202\1\174"+
    "\1\0\1\202\2\174\6\202\1\u0111\16\202\1\174\2\202"+
    "\2\174\1\202\1\174\1\210\5\202\1\174\1\0\1\202"+
    "\2\174\22\202\1\u0112\2\202\1\174\2\202\2\174\1\202"+
    "\1\174\1\210\4\202\1\31\2\0\1\31\2\0\2\31"+
    "\1\u0113\22\31\1\0\2\31\2\0\1\31\1\0\5\31"+
    "\1\202\1\174\1\0\1\202\2\174\11\202\1\u0114\13\202"+
    "\1\174\2\202\2\174\1\202\1\174\1\210\5\202\1\174"+
    "\1\0\1\202\2\174\3\202\1\u0115\21\202\1\174\2\202"+
    "\2\174\1\202\1\174\1\210\5\202\1\174\1\0\1\202"+
    "\2\174\23\202\1\u0116\1\202\1\174\2\202\2\174\1\202"+
    "\1\174\1\210\5\202\1\174\1\0\1\202\2\174\11\202"+
    "\1\u0117\13\202\1\174\2\202\2\174\1\202\1\174\1\210"+
    "\5\202\1\174\1\0\1\202\2\174\3\202\1\u0118\21\202"+
    "\1\174\2\202\2\174\1\202\1\174\1\210\5\202\1\174"+
    "\1\0\1\202\2\174\23\202\1\u0119\1\202\1\174\2\202"+
    "\2\174\1\202\1\174\1\210\5\202\1\174\1\0\1\202"+
    "\2\174\16\202\1\u011a\6\202\1\174\2\202\2\174\1\202"+
    "\1\174\1\210\5\202\1\174\1\0\1\202\2\174\13\202"+
    "\1\u011b\11\202\1\174\2\202\2\174\1\202\1\174\1\210"+
    "\5\202\1\174\1\0\1\202\2\174\16\202\1\u011c\6\202"+
    "\1\174\2\202\2\174\1\202\1\174\1\210\5\202\1\174"+
    "\1\0\1\202\2\174\13\202\1\u011d\11\202\1\174\2\202"+
    "\2\174\1\202\1\174\1\210\5\202\1\174\1\0\1\202"+
    "\2\174\21\202\1\u011e\3\202\1\174\2\202\2\174\1\202"+
    "\1\174\1\210\5\202\1\174\1\0\1\202\2\174\21\202"+
    "\1\u011f\3\202\1\174\2\202\2\174\1\202\1\174\1\210"+
    "\4\202";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9087];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\20\0\4\1\4\0\15\1\1\11\17\1\1\11\1\1"+
    "\1\11\10\1\1\11\15\1\1\11\1\1\1\11\1\1"+
    "\1\11\23\1\1\0\1\11\6\1\1\0\1\1\3\0"+
    "\3\1\1\0\4\1\1\0\1\1\1\0\1\1\1\0"+
    "\25\1\1\11\20\1\1\11\1\1\1\0\166\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MakefileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MakefileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case PREREQUISITES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 288: break;
            case INCLUDES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 289: break;
            case EXPORT: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 290: break;
            case EXPORTVAR: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 291: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return FUNCTION_PARAM_TEXT;
            } 
            // fall through
          case 58: break;
          case 2: 
            { return IDENTIFIER;
            } 
            // fall through
          case 59: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 60: break;
          case 4: 
            { return COMMENT;
            } 
            // fall through
          case 61: break;
          case 5: 
            { yybegin(PREREQUISITES); return COLON;
            } 
            // fall through
          case 62: break;
          case 6: 
            { yybegin(SOURCE); return ASSIGN;
            } 
            // fall through
          case 63: break;
          case 7: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 64: break;
          case 8: 
            { yybegin(SOURCE); return TAB;
            } 
            // fall through
          case 65: break;
          case 9: 
            { yybegin(YYINITIAL); return EOL;
            } 
            // fall through
          case 66: break;
          case 10: 
            { return COLON;
            } 
            // fall through
          case 67: break;
          case 11: 
            { yybegin(SOURCE); return SEMICOLON;
            } 
            // fall through
          case 68: break;
          case 12: 
            { return PIPE;
            } 
            // fall through
          case 69: break;
          case 13: 
            { yypushback(yylength()); yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 70: break;
          case 14: 
            { return LINE;
            } 
            // fall through
          case 71: break;
          case 15: 
            { yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 72: break;
          case 16: 
            { yybegin(DEFINEBODY); return WHITE_SPACE;
            } 
            // fall through
          case 73: break;
          case 17: 
            { return ASSIGN;
            } 
            // fall through
          case 74: break;
          case 18: 
            { return VARIABLE_VALUE_LINE;
            } 
            // fall through
          case 75: break;
          case 19: 
            { yybegin(YYINITIAL); return CONDITION;
            } 
            // fall through
          case 76: break;
          case 20: 
            { yybegin(YYINITIAL); return FUNCTION_END;
            } 
            // fall through
          case 77: break;
          case 21: 
            { yybegin(PREREQUISITES); return FUNCTION_END;
            } 
            // fall through
          case 78: break;
          case 22: 
            { yybegin(EXPORTVAR); return ASSIGN;
            } 
            // fall through
          case 79: break;
          case 23: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 80: break;
          case 24: 
            { yybegin(PREREQUISITES); return DOUBLECOLON;
            } 
            // fall through
          case 81: break;
          case 25: 
            { return SPLIT;
            } 
            // fall through
          case 82: break;
          case 26: 
            { return DOUBLECOLON;
            } 
            // fall through
          case 83: break;
          case 27: 
            { return VARIABLE_USAGE;
            } 
            // fall through
          case 84: break;
          case 28: 
            { return MACRO;
            } 
            // fall through
          case 85: break;
          case 29: 
            { yybegin(ELSE); return KEYWORD_ELSE;
            } 
            // fall through
          case 86: break;
          case 30: 
            { yybegin(CONDITIONALS); return KEYWORD_IFEQ;
            } 
            // fall through
          case 87: break;
          case 31: 
            { return KEYWORD_ENDIF;
            } 
            // fall through
          case 88: break;
          case 32: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNEQ;
            } 
            // fall through
          case 89: break;
          case 33: 
            { yybegin(CONDITIONALS); return KEYWORD_IFDEF;
            } 
            // fall through
          case 90: break;
          case 34: 
            { yybegin(INCLUDES); return KEYWORD_VPATH;
            } 
            // fall through
          case 91: break;
          case 35: 
            { yybegin(YYINITIAL); return KEYWORD_ENDEF;
            } 
            // fall through
          case 92: break;
          case 36: 
            { yybegin(FUNCTION); return FUNCTION_INFO;
            } 
            // fall through
          case 93: break;
          case 37: 
            { yybegin(EXPORT); return KEYWORD_EXPORT;
            } 
            // fall through
          case 94: break;
          case 38: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNDEF;
            } 
            // fall through
          case 95: break;
          case 39: 
            { yybegin(DEFINE); return KEYWORD_DEFINE;
            } 
            // fall through
          case 96: break;
          case 40: 
            { yybegin(FUNCTION_PREREQ); return FUNCTION_INFO;
            } 
            // fall through
          case 97: break;
          case 41: 
            { yybegin(YYINITIAL); return KEYWORD_EXPORT;
            } 
            // fall through
          case 98: break;
          case 42: 
            { yybegin(FUNCTION); return FUNCTION_ERROR;
            } 
            // fall through
          case 99: break;
          case 43: 
            { yybegin(FUNCTION); return FUNCTION_SHELL;
            } 
            // fall through
          case 100: break;
          case 44: 
            { yybegin(INCLUDES); return KEYWORD_INCLUDE;
            } 
            // fall through
          case 101: break;
          case 45: 
            { return KEYWORD_PRIVATE;
            } 
            // fall through
          case 102: break;
          case 46: 
            { yybegin(FUNCTION_PREREQ); return FUNCTION_ERROR;
            } 
            // fall through
          case 103: break;
          case 47: 
            { yybegin(FUNCTION_PREREQ); return FUNCTION_SHELL;
            } 
            // fall through
          case 104: break;
          case 48: 
            { yybegin(YYINITIAL); return KEYWORD_PRIVATE;
            } 
            // fall through
          case 105: break;
          case 49: 
            { return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 106: break;
          case 50: 
            { yybegin(INCLUDES); return KEYWORD_UNDEFINE;
            } 
            // fall through
          case 107: break;
          case 51: 
            { yybegin(YYINITIAL); return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 108: break;
          case 52: 
            { yybegin(FUNCTION); return FUNCTION_WARNING;
            } 
            // fall through
          case 109: break;
          case 53: 
            { yybegin(FUNCTION_PREREQ); return FUNCTION_WARNING;
            } 
            // fall through
          case 110: break;
          case 54: 
            { yybegin(FUNCTION); return FUNCTION_WILDCARD;
            } 
            // fall through
          case 111: break;
          case 55: 
            { yybegin(FUNCTION_PREREQ); return FUNCTION_WILDCARD;
            } 
            // fall through
          case 112: break;
          case 56: 
            { yybegin(FUNCTION); return FUNCTION_PATHSUBST;
            } 
            // fall through
          case 113: break;
          case 57: 
            { yybegin(FUNCTION_PREREQ); return FUNCTION_PATHSUBST;
            } 
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
