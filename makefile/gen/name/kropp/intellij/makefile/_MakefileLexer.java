/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package name.kropp.intellij.makefile;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static name.kropp.intellij.makefile.psi.MakefileTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>MakefileLexer.flex</tt>
 */
public class _MakefileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ELSE = 2;
  public static final int INCLUDES = 4;
  public static final int SOURCE = 6;
  public static final int SOURCE_FORCED = 8;
  public static final int DEFINE = 10;
  public static final int DEFINEBODY = 12;
  public static final int CONDITIONALS = 14;
  public static final int FUNCTION = 16;
  public static final int EXPORT = 18;
  public static final int EXPORTVAR = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4,  5,  6,  7,  6,  8,  9, 10, 11, 12, 13, 14, 
    15, 16, 17, 18,  6, 19
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\1\2\0\1\4\22\0\1\2\1\45\1\53\1\6\1\47\3\0\1\50\1\37\1\0\1\46\1"+
    "\0\1\30\14\0\1\40\1\41\1\0\1\43\1\0\1\44\1\36\33\0\1\3\4\0\1\13\1\24\1\34"+
    "\1\27\1\7\1\17\1\16\1\21\1\15\1\33\1\0\1\22\1\32\1\14\1\11\1\26\1\54\1\10"+
    "\1\20\1\25\1\23\1\35\1\12\1\31\2\0\1\51\1\42\1\52\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\2\1\3\0\1\2\1\3\1\4\1\2\1\4"+
    "\1\5\23\2\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\2\2\2\13\1\14\1\2\1\15\1\16\1\15\1\13"+
    "\1\17\1\4\1\13\1\4\3\15\1\20\1\5\1\15"+
    "\1\17\1\21\1\13\1\22\1\13\1\2\1\23\1\4"+
    "\1\23\1\13\2\23\1\24\1\25\1\4\1\24\1\1"+
    "\1\5\21\1\1\13\1\1\1\13\1\26\1\13\1\2"+
    "\1\13\3\15\1\2\2\27\3\5\1\30\6\2\1\31"+
    "\11\2\1\31\24\2\1\32\1\33\2\0\1\34\1\2"+
    "\1\0\1\2\1\0\2\15\3\5\1\30\1\15\1\17"+
    "\1\15\3\0\1\5\2\23\1\0\1\24\3\5\1\30"+
    "\3\1\1\31\10\1\1\31\17\1\1\0\1\1\1\0"+
    "\1\35\3\15\1\35\1\2\1\5\1\0\2\30\13\2"+
    "\1\31\33\2\1\36\2\37\1\2\2\5\1\15\2\30"+
    "\3\37\1\23\2\37\2\5\1\1\2\30\31\1\1\37"+
    "\1\15\1\37\2\15\2\0\2\30\1\2\1\40\2\2"+
    "\1\31\7\2\1\41\20\2\1\0\1\37\1\15\2\30"+
    "\1\23\1\1\2\30\1\31\16\1\2\15\1\37\1\42"+
    "\11\2\1\43\1\2\1\44\12\2\1\45\1\37\1\46"+
    "\15\1\1\37\1\47\5\2\1\50\1\2\1\31\4\2"+
    "\1\51\4\1\1\31\2\1\1\2\1\52\2\2\1\53"+
    "\1\1\1\54\1\2\1\55\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[451];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b"+
    "\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573"+
    "\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db"+
    "\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0384"+
    "\0\u0384\0\u07e9\0\u0843\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7"+
    "\0\u0924\0\u07e9\0\u0951\0\u097e\0\u07e9\0\u09ab\0\u09d8\0\u0a05"+
    "\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d"+
    "\0\u0b9a\0\u0bc7\0\u07e9\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8"+
    "\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10"+
    "\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78"+
    "\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0"+
    "\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1\0\u07e9\0\u11ee\0\u121b"+
    "\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383"+
    "\0\u07e9\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be"+
    "\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626"+
    "\0\u1653\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e"+
    "\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6"+
    "\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e"+
    "\0\u0843\0\u07e9\0\u1a8b\0\u08ca\0\u07e9\0\u1ab8\0\u1ae5\0\u1b12"+
    "\0\u09ab\0\u1b3f\0\u1b6c\0\u1b99\0\u0a8c\0\u1bc6\0\u1bf3\0\u1c20"+
    "\0\u1c4d\0\u1c7a\0\u1c4d\0\u0bf4\0\u0c4e\0\u1ca7\0\u1cd4\0\u1d01"+
    "\0\u1d01\0\u1d2e\0\u1d5b\0\u0e10\0\u1d88\0\u1db5\0\u1de2\0\u1e0f"+
    "\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a\0\u1f77"+
    "\0\u1fa4\0\u1fd1\0\u0e10\0\u1ffe\0\u202b\0\u2058\0\u2085\0\u20b2"+
    "\0\u20df\0\u210c\0\u2139\0\u2166\0\u2193\0\u21c0\0\u21ed\0\u221a"+
    "\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u11ee\0\u22a1\0\u22fb\0\u2328"+
    "\0\u2355\0\u2382\0\u23af\0\u23dc\0\u2409\0\u07e9\0\u2436\0\u2463"+
    "\0\u2490\0\u24bd\0\u24ea\0\u2517\0\u2544\0\u2571\0\u259e\0\u25cb"+
    "\0\u25f8\0\u2625\0\u0384\0\u2652\0\u267f\0\u26ac\0\u26d9\0\u2706"+
    "\0\u2733\0\u2760\0\u278d\0\u27ba\0\u27e7\0\u2814\0\u2841\0\u286e"+
    "\0\u289b\0\u28c8\0\u28f5\0\u2922\0\u294f\0\u297c\0\u29a9\0\u29d6"+
    "\0\u2a03\0\u2a30\0\u2a5d\0\u2a8a\0\u2ab7\0\u2ae4\0\u07e9\0\u0384"+
    "\0\u07e9\0\u2b11\0\u2b3e\0\u2b6b\0\u2b98\0\u0a8c\0\u2bc5\0\u0a5f"+
    "\0\u09ab\0\u0a8c\0\u2bf2\0\u0c4e\0\u0d5c\0\u2c1f\0\u2c4c\0\u2c79"+
    "\0\u0e10\0\u2ca6\0\u2cd3\0\u2d00\0\u2d2d\0\u2d5a\0\u2d87\0\u2db4"+
    "\0\u2de1\0\u2e0e\0\u2e3b\0\u2e68\0\u2e95\0\u2ec2\0\u2eef\0\u2f1c"+
    "\0\u2f49\0\u2f76\0\u2fa3\0\u2fd0\0\u2ffd\0\u302a\0\u3057\0\u3084"+
    "\0\u30b1\0\u30de\0\u310b\0\u0e10\0\u3138\0\u1275\0\u3165\0\u2382"+
    "\0\u3192\0\u31bf\0\u31ec\0\u23dc\0\u3219\0\u0384\0\u3246\0\u3273"+
    "\0\u32a0\0\u32cd\0\u32fa\0\u3327\0\u3354\0\u3381\0\u33ae\0\u33db"+
    "\0\u0384\0\u3408\0\u3435\0\u3462\0\u348f\0\u34bc\0\u34e9\0\u3516"+
    "\0\u3543\0\u3570\0\u359d\0\u35ca\0\u35f7\0\u3624\0\u3651\0\u367e"+
    "\0\u36ab\0\u36d8\0\u23af\0\u3705\0\u3732\0\u2b6b\0\u375f\0\u378c"+
    "\0\u37b9\0\u2c4c\0\u37e6\0\u3813\0\u3840\0\u386d\0\u389a\0\u38c7"+
    "\0\u38f4\0\u3921\0\u394e\0\u397b\0\u39a8\0\u39d5\0\u3a02\0\u3a2f"+
    "\0\u3a5c\0\u3a89\0\u3ab6\0\u3138\0\u0384\0\u3ae3\0\u3b10\0\u3b3d"+
    "\0\u3b6a\0\u3b97\0\u3bc4\0\u3bf1\0\u3c1e\0\u3c4b\0\u0384\0\u3c78"+
    "\0\u0384\0\u3ca5\0\u3cd2\0\u3cff\0\u3d2c\0\u3d59\0\u3d86\0\u3db3"+
    "\0\u3de0\0\u3e0d\0\u3e3a\0\u0384\0\u3192\0\u0c4e\0\u3e67\0\u3e94"+
    "\0\u3ec1\0\u3eee\0\u3f1b\0\u3f48\0\u3f75\0\u3fa2\0\u3fcf\0\u3ffc"+
    "\0\u4029\0\u4056\0\u4083\0\u3a89\0\u0384\0\u40b0\0\u40dd\0\u410a"+
    "\0\u4137\0\u4164\0\u0384\0\u4191\0\u41be\0\u41eb\0\u4218\0\u4245"+
    "\0\u4272\0\u0384\0\u429f\0\u42cc\0\u42f9\0\u4326\0\u4353\0\u4380"+
    "\0\u43ad\0\u43da\0\u0384\0\u4407\0\u4434\0\u0384\0\u4461\0\u0384"+
    "\0\u448e\0\u0384\0\u44bb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[451];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\25\1\26\1\27\1\30\1\26\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\25\1\45\1\46\1\47\1\25\1\50\1\51"+
    "\1\52\2\25\1\53\1\54\1\55\1\25\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\3\25"+
    "\1\67\2\25\1\26\1\27\1\30\1\26\1\70\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\25\1\45\1\46\1\47\1\25\1\50"+
    "\1\51\1\52\2\25\1\53\1\54\1\55\1\71\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\3\25\1\67\1\25\1\72\1\73\1\27\1\72\1\73"+
    "\1\72\1\32\47\72\1\73\1\27\1\72\1\73\1\72"+
    "\1\32\27\72\1\74\16\72\1\25\1\73\1\27\1\25"+
    "\1\73\1\31\1\32\30\25\2\75\2\25\3\75\1\25"+
    "\1\75\3\25\1\75\2\25\1\73\1\27\1\25\1\73"+
    "\1\31\1\32\27\25\1\71\2\75\2\25\3\75\1\25"+
    "\1\75\3\25\1\75\1\25\1\76\1\73\1\77\1\100"+
    "\1\73\1\101\1\32\46\76\1\102\1\103\1\102\1\104"+
    "\1\103\1\105\1\106\27\102\1\107\16\102\1\76\1\73"+
    "\1\77\1\100\1\73\1\105\1\32\27\76\1\110\16\76"+
    "\1\25\1\111\1\27\1\25\1\111\1\31\1\32\30\25"+
    "\1\75\1\112\2\25\1\113\2\114\1\115\1\75\3\25"+
    "\1\75\2\25\1\111\1\27\1\25\1\111\1\31\1\32"+
    "\27\25\1\71\1\75\1\112\2\25\1\113\2\114\1\115"+
    "\1\75\3\25\1\75\1\25\1\116\1\117\1\120\1\121"+
    "\1\117\1\120\1\32\1\122\46\116\1\117\1\120\1\121"+
    "\1\117\1\120\1\32\1\122\26\116\1\123\16\116\1\124"+
    "\1\125\1\126\1\124\1\125\1\124\1\32\47\124\1\125"+
    "\1\126\1\124\1\125\1\124\1\32\27\124\1\127\16\124"+
    "\6\130\1\131\1\132\1\133\1\134\1\135\1\136\1\137"+
    "\1\140\1\141\1\142\1\143\1\130\1\144\1\130\1\145"+
    "\1\130\1\146\1\147\3\130\1\150\1\151\1\152\1\130"+
    "\1\56\7\130\1\153\13\130\1\131\1\132\1\133\1\134"+
    "\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\130"+
    "\1\144\1\130\1\145\1\130\1\146\1\147\3\130\1\150"+
    "\1\151\1\152\1\154\1\56\7\130\1\153\5\130\1\25"+
    "\1\73\1\27\1\25\1\73\1\31\1\32\30\25\1\75"+
    "\1\155\2\25\1\156\2\157\1\160\1\161\3\25\1\75"+
    "\1\25\1\162\2\103\1\162\1\103\1\31\1\106\27\162"+
    "\1\163\2\103\2\162\3\103\1\162\1\164\3\162\1\103"+
    "\1\162\1\102\1\103\1\102\1\104\1\103\1\101\1\106"+
    "\27\102\1\107\16\102\1\25\2\0\1\25\3\0\30\25"+
    "\2\0\2\25\3\0\1\25\1\165\5\25\1\0\1\26"+
    "\2\0\1\26\52\0\1\27\52\0\1\25\1\166\1\0"+
    "\1\25\1\167\2\0\30\25\2\0\2\25\3\0\1\25"+
    "\1\165\5\25\5\0\1\31\47\0\1\170\1\171\1\170"+
    "\1\172\1\0\1\170\1\173\46\170\1\25\2\0\1\25"+
    "\3\0\1\25\1\174\3\25\1\175\5\25\1\176\6\25"+
    "\1\177\3\25\1\200\1\25\2\0\2\25\3\0\1\25"+
    "\1\165\6\25\2\0\1\25\3\0\1\201\27\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\1\25\1\202\24\25\1\203\1\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\2\25\1\204"+
    "\1\25\1\205\1\25\1\206\21\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\5\25\1\207"+
    "\7\25\1\210\2\25\1\211\7\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\2\25\1\212"+
    "\25\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\5\25\1\213\2\25\1\214\17\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\14\25\1\215\13\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\2\25\1\216\3\25\1\217"+
    "\4\25\1\220\14\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\2\25\1\221\3\25\1\222"+
    "\3\25\1\223\1\25\1\224\1\25\1\225\11\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\4\25\1\226\23\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\5\25\1\227\22\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\4\25\1\230\23\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\1\25\1\231\2\25\1\232"+
    "\23\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\1\233\5\25\1\234\21\25\2\0\2\25"+
    "\3\0\1\25\1\165\6\25\2\0\1\25\3\0\6\25"+
    "\1\222\21\25\2\0\2\25\3\0\1\25\1\165\6\25"+
    "\2\0\1\25\3\0\2\25\1\235\25\25\2\0\2\25"+
    "\3\0\1\25\1\165\6\25\2\0\1\25\3\0\4\25"+
    "\1\236\23\25\2\0\2\25\3\0\1\25\1\165\6\25"+
    "\2\0\1\25\3\0\4\25\1\237\12\25\1\240\10\25"+
    "\2\0\2\25\3\0\1\25\1\165\5\25\115\0\1\241"+
    "\2\0\1\62\54\0\1\62\11\0\1\25\2\0\1\25"+
    "\3\0\30\25\2\0\2\25\1\62\2\0\1\25\1\165"+
    "\5\25\50\0\1\242\1\243\3\0\53\244\1\245\1\244"+
    "\5\0\1\70\47\0\1\246\2\0\1\246\1\0\2\247"+
    "\27\246\1\25\2\247\2\246\3\247\1\246\1\250\5\246"+
    "\1\0\1\73\2\0\1\73\50\0\1\247\2\0\1\247"+
    "\1\0\31\247\1\0\16\247\1\76\1\0\1\76\1\251"+
    "\1\0\1\76\1\0\47\76\1\0\1\77\1\251\1\0"+
    "\1\76\1\0\47\76\1\166\1\76\1\251\1\167\1\76"+
    "\1\0\47\76\1\0\1\76\1\251\1\0\1\101\1\0"+
    "\46\76\1\102\1\103\2\102\1\103\1\76\1\103\46\102"+
    "\5\103\1\0\47\103\1\102\1\252\2\102\1\253\1\76"+
    "\1\103\46\102\1\76\1\0\1\76\1\251\1\0\1\105"+
    "\1\0\46\76\1\254\1\255\1\254\1\256\1\103\1\170"+
    "\1\257\46\254\1\260\1\103\1\102\1\260\1\103\1\261"+
    "\1\262\27\260\1\102\16\260\1\261\1\0\1\76\1\263"+
    "\1\0\1\261\1\247\27\261\1\76\16\261\1\0\1\111"+
    "\2\0\1\111\110\0\1\264\2\0\1\113\54\0\1\113"+
    "\11\0\1\25\2\0\1\25\3\0\30\25\2\0\2\25"+
    "\1\113\2\0\1\25\1\165\5\25\1\116\1\0\1\116"+
    "\1\265\1\0\1\116\1\0\46\116\1\0\1\117\2\0"+
    "\1\117\50\0\1\116\1\0\1\120\1\265\1\0\1\120"+
    "\1\266\47\116\1\166\1\116\1\265\1\167\1\116\1\0"+
    "\47\116\1\0\1\116\1\265\1\0\1\116\1\0\5\116"+
    "\1\267\40\116\1\270\1\0\1\116\1\271\1\0\1\270"+
    "\1\247\27\270\1\116\16\270\1\124\1\0\2\124\1\0"+
    "\1\124\1\0\46\124\1\0\1\125\2\0\1\125\50\0"+
    "\1\124\1\0\1\126\1\124\1\0\1\124\1\0\46\124"+
    "\1\272\1\0\1\124\1\272\1\0\1\272\1\247\27\272"+
    "\1\124\16\272\37\130\1\0\7\130\1\0\5\130\1\273"+
    "\1\274\1\273\1\275\1\130\1\273\1\276\30\273\1\170"+
    "\7\273\1\170\5\273\10\130\1\277\24\130\1\300\1\130"+
    "\1\0\7\130\1\0\14\130\1\301\27\130\1\0\7\130"+
    "\1\0\15\130\1\302\26\130\1\0\7\130\1\0\16\130"+
    "\1\303\1\130\1\304\1\130\1\305\21\130\1\0\7\130"+
    "\1\0\21\130\1\306\7\130\1\307\2\130\1\310\7\130"+
    "\1\0\7\130\1\0\16\130\1\311\25\130\1\0\7\130"+
    "\1\0\21\130\1\312\2\130\1\313\17\130\1\0\7\130"+
    "\1\0\30\130\1\314\13\130\1\0\7\130\1\0\16\130"+
    "\1\315\3\130\1\316\4\130\1\317\14\130\1\0\7\130"+
    "\1\0\16\130\1\320\7\130\1\321\1\130\1\322\1\130"+
    "\1\323\11\130\1\0\7\130\1\0\20\130\1\324\23\130"+
    "\1\0\7\130\1\0\20\130\1\325\23\130\1\0\7\130"+
    "\1\0\20\130\1\326\23\130\1\0\7\130\1\0\22\130"+
    "\1\327\21\130\1\0\7\130\1\0\16\130\1\330\25\130"+
    "\1\0\7\130\1\0\20\130\1\331\23\130\1\0\7\130"+
    "\1\0\20\130\1\332\23\130\1\0\7\130\1\0\5\130"+
    "\50\0\1\333\4\0\1\334\2\130\1\334\1\130\31\334"+
    "\1\130\1\247\7\334\1\247\5\334\40\0\1\335\2\0"+
    "\1\156\54\0\1\156\11\0\1\25\2\0\1\25\3\0"+
    "\30\25\2\0\2\25\1\156\2\0\1\25\1\165\5\25"+
    "\50\0\1\336\4\0\1\162\2\103\1\162\1\103\1\0"+
    "\1\103\30\162\2\103\2\162\3\103\1\162\1\337\5\162"+
    "\1\340\2\103\1\340\1\103\1\247\1\262\27\340\1\162"+
    "\2\262\2\340\3\262\1\340\1\341\5\340\5\103\1\0"+
    "\42\103\1\342\4\103\1\25\2\0\1\25\3\0\30\25"+
    "\2\0\2\25\3\0\1\25\1\165\1\343\4\25\2\0"+
    "\1\166\2\0\1\166\50\0\2\166\2\0\1\166\47\0"+
    "\1\170\1\171\1\170\1\172\1\0\50\170\1\266\1\344"+
    "\2\266\1\345\50\266\1\173\1\346\1\173\1\347\1\0"+
    "\50\173\1\25\2\0\1\25\3\0\1\25\1\350\26\25"+
    "\2\0\2\25\3\0\1\25\1\165\6\25\2\0\1\25"+
    "\3\0\20\25\1\351\7\25\2\0\2\25\3\0\1\25"+
    "\1\165\6\25\2\0\1\25\3\0\11\25\1\352\16\25"+
    "\2\0\2\25\3\0\1\25\1\165\6\25\2\0\1\25"+
    "\3\0\17\25\1\353\10\25\2\0\2\25\3\0\1\25"+
    "\1\165\6\25\2\0\1\25\3\0\4\25\1\354\23\25"+
    "\2\0\2\25\3\0\1\25\1\165\6\25\2\0\1\25"+
    "\3\0\4\25\1\355\23\25\2\0\2\25\3\0\1\25"+
    "\1\165\6\25\2\0\1\25\3\0\6\25\1\356\21\25"+
    "\2\0\2\25\3\0\1\25\1\165\6\25\2\0\1\25"+
    "\3\0\1\357\27\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\1\25\1\360\26\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\1\25\1\361\26\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\13\25\1\362\14\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\20\25\1\363\7\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\11\25\1\364\16\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\20\25\1\365\7\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\16\25\1\366\11\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\10\25\1\367\14\25\1\370\2\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\1\371\4\25"+
    "\1\372\12\25\1\373\7\25\2\0\2\25\3\0\1\25"+
    "\1\165\6\25\2\0\1\25\3\0\6\25\1\374\21\25"+
    "\2\0\2\25\3\0\1\25\1\165\6\25\2\0\1\25"+
    "\3\0\1\25\1\375\26\25\2\0\2\25\3\0\1\25"+
    "\1\165\6\25\2\0\1\25\3\0\1\25\1\226\3\25"+
    "\1\376\5\25\1\377\14\25\2\0\2\25\3\0\1\25"+
    "\1\165\6\25\2\0\1\25\3\0\4\25\1\u0100\23\25"+
    "\2\0\2\25\3\0\1\25\1\165\6\25\2\0\1\25"+
    "\3\0\1\25\1\u0101\26\25\2\0\2\25\3\0\1\25"+
    "\1\165\6\25\2\0\1\25\3\0\5\25\1\u0102\22\25"+
    "\2\0\2\25\3\0\1\25\1\165\6\25\2\0\1\25"+
    "\3\0\1\236\27\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\10\25\1\u0103\4\25\1\u0104"+
    "\12\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\1\25\1\u0105\26\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\11\25\1\u0106"+
    "\16\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\20\25\1\u0107\7\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\11\25\1\u0108"+
    "\16\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\6\25\1\u0109\21\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\16\25\1\u010a"+
    "\11\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\10\25\1\u010b\17\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\1\25\1\363"+
    "\26\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\6\25\1\u010c\21\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\13\25\1\354"+
    "\14\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\13\25\1\u010d\14\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\4\25\1\u010e"+
    "\23\25\2\0\2\25\3\0\1\25\1\165\5\25\2\243"+
    "\1\0\44\243\1\0\2\243\1\u010f\2\243\1\246\2\0"+
    "\1\246\1\0\2\247\27\246\1\u0110\2\247\2\246\3\247"+
    "\1\246\1\250\5\246\1\247\2\0\1\247\1\0\31\247"+
    "\1\u0111\16\247\1\246\2\0\1\246\1\0\2\247\27\246"+
    "\1\u0110\2\247\2\246\3\247\1\246\1\250\1\u0112\4\246"+
    "\2\103\1\252\2\103\1\166\50\103\2\252\2\103\1\166"+
    "\47\103\1\254\1\255\1\254\1\256\1\103\1\170\47\254"+
    "\1\u0113\1\u0114\2\u0113\1\u0115\1\266\47\u0113\1\257\1\u0116"+
    "\1\257\1\u0117\1\103\1\173\47\257\1\260\1\103\1\102"+
    "\1\260\1\103\1\261\1\262\27\260\1\u0118\16\260\1\261"+
    "\1\0\1\76\1\263\1\0\1\261\1\247\27\261\1\u0119"+
    "\16\261\1\262\2\103\1\262\1\103\1\247\30\262\1\u011a"+
    "\16\262\1\266\1\171\2\266\1\0\50\266\1\116\1\0"+
    "\1\116\1\265\1\0\1\116\1\0\20\116\1\u011b\25\116"+
    "\1\270\1\0\1\116\1\271\1\0\1\270\1\247\27\270"+
    "\1\u011c\16\270\1\272\1\0\1\124\1\272\1\0\1\272"+
    "\1\247\27\272\1\u011d\16\272\1\273\1\274\1\273\1\275"+
    "\1\130\32\273\1\170\7\273\1\170\5\273\1\u011e\1\u011f"+
    "\2\u011e\1\u0120\32\u011e\1\266\7\u011e\1\266\5\u011e\1\276"+
    "\1\u0121\1\276\1\u0122\1\130\32\276\1\173\7\276\1\173"+
    "\5\276\10\130\1\u0123\26\130\1\0\7\130\1\0\20\130"+
    "\1\u0124\23\130\1\0\7\130\1\0\20\130\1\u0125\23\130"+
    "\1\0\7\130\1\0\22\130\1\u0126\21\130\1\0\7\130"+
    "\1\0\15\130\1\u0127\26\130\1\0\7\130\1\0\15\130"+
    "\1\u0128\26\130\1\0\7\130\1\0\27\130\1\u0129\14\130"+
    "\1\0\7\130\1\0\34\130\1\313\7\130\1\0\7\130"+
    "\1\0\25\130\1\u012a\16\130\1\0\7\130\1\0\34\130"+
    "\1\u012b\7\130\1\0\7\130\1\0\32\130\1\u012c\11\130"+
    "\1\0\7\130\1\0\24\130\1\u012d\17\130\1\0\7\130"+
    "\1\0\22\130\1\u012e\21\130\1\0\7\130\1\0\15\130"+
    "\1\u012f\26\130\1\0\7\130\1\0\15\130\1\324\3\130"+
    "\1\u0130\5\130\1\u0131\14\130\1\0\7\130\1\0\20\130"+
    "\1\u0132\23\130\1\0\7\130\1\0\15\130\1\u0133\26\130"+
    "\1\0\7\130\1\0\14\130\1\331\27\130\1\0\7\130"+
    "\1\0\24\130\1\u0134\4\130\1\u0135\12\130\1\0\7\130"+
    "\1\0\15\130\1\u0136\26\130\1\0\7\130\1\0\25\130"+
    "\1\u0137\16\130\1\0\7\130\1\0\25\130\1\u0138\16\130"+
    "\1\0\7\130\1\0\32\130\1\u0139\11\130\1\0\7\130"+
    "\1\0\15\130\1\313\26\130\1\0\7\130\1\0\22\130"+
    "\1\u013a\21\130\1\0\7\130\1\0\27\130\1\u0124\14\130"+
    "\1\0\7\130\1\0\27\130\1\u013b\14\130\1\0\7\130"+
    "\1\0\5\130\2\333\1\0\34\333\1\u010f\7\333\1\0"+
    "\5\333\1\334\2\130\1\334\1\130\31\334\1\u013c\1\247"+
    "\7\334\1\247\5\334\1\162\2\103\1\162\1\103\1\0"+
    "\1\103\30\162\2\103\2\162\3\103\1\162\1\337\1\u013d"+
    "\4\162\1\340\2\103\1\340\1\103\1\247\1\262\27\340"+
    "\1\u013e\2\262\2\340\3\262\1\340\1\341\6\340\2\103"+
    "\1\340\1\103\1\247\1\262\27\340\1\u013e\2\262\2\340"+
    "\3\262\1\340\1\341\1\u013f\4\340\2\u0140\1\103\2\u0140"+
    "\1\333\31\u0140\1\103\7\u0140\1\103\5\u0140\1\343\1\u0141"+
    "\1\0\1\343\3\u0141\30\343\1\25\1\u0141\2\343\3\u0141"+
    "\1\343\1\165\5\343\1\344\1\0\1\344\1\u0142\1\0"+
    "\50\344\1\0\1\344\53\0\1\u0143\1\u0144\2\u0143\1\345"+
    "\50\u0143\1\25\2\0\1\25\3\0\2\25\1\234\25\25"+
    "\2\0\2\25\3\0\1\25\1\165\6\25\2\0\1\25"+
    "\3\0\6\25\1\u0145\21\25\2\0\2\25\3\0\1\25"+
    "\1\165\6\25\2\0\1\25\3\0\1\u0146\27\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\2\25\1\u0147\25\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\13\25\1\363\14\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\13\25\1\364\14\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\7\25\1\235\20\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\1\25\1\u0148\26\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\20\25\1\u0149\7\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\5\25\1\u014a\22\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\20\25\1\u014b\7\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\17\25\1\u014c\10\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\11\25\1\u014d\5\25\1\u014e"+
    "\10\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\20\25\1\u014f\7\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\2\25\1\363"+
    "\25\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\13\25\1\u0150\14\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\30\25\2\0"+
    "\2\25\3\0\1\25\1\165\4\25\1\u0151\1\25\2\0"+
    "\1\25\3\0\1\u0152\17\25\1\u0153\7\25\2\0\2\25"+
    "\3\0\1\25\1\165\6\25\2\0\1\25\3\0\1\u0154"+
    "\27\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\13\25\1\u0155\14\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\1\u0156\27\25"+
    "\2\0\2\25\3\0\1\25\1\165\6\25\2\0\1\25"+
    "\3\0\20\25\1\u0157\7\25\2\0\2\25\3\0\1\25"+
    "\1\165\6\25\2\0\1\25\3\0\1\363\15\25\1\u0158"+
    "\11\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\26\25\1\350\1\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\16\25\1\363"+
    "\11\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\25\25\1\370\2\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\10\25\1\u0159"+
    "\17\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\11\25\1\u0101\16\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\6\25\1\u015a"+
    "\21\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\16\25\1\u015b\11\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\1\u015c\27\25"+
    "\2\0\2\25\3\0\1\25\1\165\6\25\2\0\1\25"+
    "\3\0\1\u015d\27\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\26\25\1\u015e\1\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\12\25\1\u015f\15\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\6\25\1\u0160\21\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\5\25\1\363\22\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\14\25\1\u0155\13\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\16\25\1\u0161\11\25\2\0\2\25\3\0\1\25\1\165"+
    "\5\25\1\u0112\1\u0141\1\0\1\u0112\1\u0141\2\u0162\27\u0112"+
    "\1\u0163\1\246\1\u0162\2\u0112\3\u0162\1\u0112\1\250\5\u0112"+
    "\1\u0113\1\255\2\u0113\1\103\1\266\47\u0113\1\u0114\1\103"+
    "\1\u0114\1\u0164\1\103\1\344\47\u0114\1\103\1\u0114\3\103"+
    "\1\0\47\103\1\u0165\1\u0166\2\u0165\1\u0115\1\u0143\47\u0165"+
    "\1\116\1\0\1\116\1\265\1\0\1\116\1\0\1\u0167"+
    "\45\116\1\u011e\1\274\2\u011e\1\130\32\u011e\1\266\7\u011e"+
    "\1\266\5\u011e\1\u011f\1\130\1\u011f\1\u0168\1\130\32\u011f"+
    "\1\344\7\u011f\1\344\5\u011f\1\130\1\u011f\35\130\1\0"+
    "\7\130\1\0\5\130\1\u0169\1\u016a\2\u0169\1\u0120\32\u0169"+
    "\1\u0143\7\u0169\1\u0143\5\u0169\11\130\1\327\25\130\1\0"+
    "\7\130\1\0\27\130\1\313\14\130\1\0\7\130\1\0"+
    "\27\130\1\u012a\14\130\1\0\7\130\1\0\23\130\1\330"+
    "\20\130\1\0\7\130\1\0\34\130\1\u016b\7\130\1\0"+
    "\7\130\1\0\21\130\1\u016c\22\130\1\0\7\130\1\0"+
    "\34\130\1\u016d\7\130\1\0\7\130\1\0\33\130\1\u016e"+
    "\10\130\1\0\7\130\1\0\25\130\1\u016f\5\130\1\u0170"+
    "\10\130\1\0\7\130\1\0\34\130\1\147\7\130\1\0"+
    "\7\130\1\0\16\130\1\313\25\130\1\0\7\130\1\0"+
    "\27\130\1\u0171\14\130\1\0\7\130\1\0\14\130\1\u0172"+
    "\27\130\1\0\7\130\1\0\34\130\1\u0173\7\130\1\0"+
    "\7\130\1\0\14\130\1\313\15\130\1\u0174\11\130\1\0"+
    "\7\130\1\0\42\130\1\u0123\1\130\1\0\7\130\1\0"+
    "\32\130\1\313\11\130\1\0\7\130\1\0\24\130\1\u0175"+
    "\17\130\1\0\7\130\1\0\25\130\1\u0133\16\130\1\0"+
    "\7\130\1\0\22\130\1\u0176\21\130\1\0\7\130\1\0"+
    "\32\130\1\u0177\11\130\1\0\7\130\1\0\14\130\1\u0178"+
    "\27\130\1\0\7\130\1\0\26\130\1\u0179\15\130\1\0"+
    "\7\130\1\0\21\130\1\313\22\130\1\0\7\130\1\0"+
    "\30\130\1\u0171\13\130\1\0\7\130\1\0\5\130\1\u013d"+
    "\1\u017a\1\103\1\u013d\1\u017a\1\u0141\1\u017a\30\u013d\1\162"+
    "\1\u017a\2\u013d\3\u017a\1\u013d\1\337\5\u013d\1\u013f\1\u017a"+
    "\1\103\1\u013f\1\u017a\1\u0162\1\u017b\27\u013f\1\u017c\1\340"+
    "\1\u017b\2\u013f\3\u017b\1\u013f\1\341\5\u013f\2\u0141\1\0"+
    "\34\u0141\1\25\7\u0141\1\0\5\u0141\1\0\1\344\2\0"+
    "\1\345\50\0\1\u0143\1\346\2\u0143\1\0\50\u0143\1\25"+
    "\2\0\1\25\3\0\10\25\1\u017d\17\25\2\0\2\25"+
    "\3\0\1\25\1\165\6\25\2\0\1\25\3\0\1\25"+
    "\1\u017e\26\25\2\0\2\25\3\0\1\25\1\165\6\25"+
    "\2\0\1\25\3\0\1\25\1\u017f\26\25\2\0\2\25"+
    "\3\0\1\25\1\165\6\25\2\0\1\25\3\0\11\25"+
    "\1\363\1\25\1\u0180\14\25\2\0\2\25\3\0\1\25"+
    "\1\165\6\25\2\0\1\25\3\0\6\25\1\u0181\21\25"+
    "\2\0\2\25\3\0\1\25\1\165\6\25\2\0\1\25"+
    "\3\0\25\25\1\u0182\2\25\2\0\2\25\3\0\1\25"+
    "\1\165\6\25\2\0\1\25\3\0\4\25\1\u0183\23\25"+
    "\2\0\2\25\3\0\1\25\1\165\6\25\2\0\1\25"+
    "\3\0\14\25\1\u0184\13\25\2\0\2\25\3\0\1\25"+
    "\1\165\6\25\2\0\1\25\3\0\1\25\1\u0185\26\25"+
    "\2\0\2\25\3\0\1\25\1\165\6\25\2\0\1\25"+
    "\3\0\6\25\1\234\21\25\2\0\2\25\3\0\1\25"+
    "\1\165\6\25\2\0\1\25\3\0\14\25\1\u0186\13\25"+
    "\2\0\2\25\3\0\1\25\1\165\6\25\2\0\1\25"+
    "\3\0\30\25\2\0\2\25\3\0\1\25\1\165\4\25"+
    "\1\u0187\1\25\2\0\1\25\3\0\1\u0188\27\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\10\25\1\u0189\17\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\1\363\27\25\2\0\2\25"+
    "\3\0\1\25\1\165\6\25\2\0\1\25\3\0\4\25"+
    "\1\u018a\23\25\2\0\2\25\3\0\1\25\1\165\6\25"+
    "\2\0\1\25\3\0\11\25\1\u018b\16\25\2\0\2\25"+
    "\3\0\1\25\1\165\6\25\2\0\1\25\3\0\1\u018c"+
    "\27\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\6\25\1\u018d\21\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\17\25\1\363"+
    "\10\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\3\25\1\u018e\24\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\10\25\1\u018f"+
    "\17\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\5\25\1\u0190\22\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\4\25\1\u0191"+
    "\23\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\11\25\1\u0192\16\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\5\25\1\u0193"+
    "\22\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\12\25\1\u0194\15\25\2\0\2\25\3\0"+
    "\1\25\1\165\5\25\1\u0162\1\u0141\1\0\1\u0162\1\u0141"+
    "\31\u0162\1\u0195\1\246\7\u0162\1\247\5\u0162\1\103\1\u0114"+
    "\2\103\1\u0115\1\0\47\103\1\u0165\1\u0116\2\u0165\1\103"+
    "\1\u0143\47\u0165\1\116\1\0\1\116\1\265\1\0\1\116"+
    "\1\0\10\116\1\u0196\35\116\1\130\1\u011f\2\130\1\u0120"+
    "\32\130\1\0\7\130\1\0\5\130\1\u0169\1\u0121\2\u0169"+
    "\1\130\32\u0169\1\u0143\7\u0169\1\u0143\5\u0169\20\130\1\313"+
    "\1\130\1\u0197\14\130\1\0\7\130\1\0\22\130\1\u0198"+
    "\21\130\1\0\7\130\1\0\41\130\1\u0199\2\130\1\0"+
    "\7\130\1\0\20\130\1\u019a\23\130\1\0\7\130\1\0"+
    "\30\130\1\u019b\13\130\1\0\7\130\1\0\15\130\1\u019c"+
    "\26\130\1\0\7\130\1\0\14\130\1\313\27\130\1\0"+
    "\7\130\1\0\20\130\1\u019d\23\130\1\0\7\130\1\0"+
    "\25\130\1\u019e\16\130\1\0\7\130\1\0\14\130\1\u019f"+
    "\27\130\1\0\7\130\1\0\22\130\1\u01a0\21\130\1\0"+
    "\7\130\1\0\33\130\1\313\10\130\1\0\7\130\1\0"+
    "\17\130\1\u01a1\24\130\1\0\7\130\1\0\21\130\1\u01a2"+
    "\22\130\1\0\7\130\1\0\25\130\1\u01a3\16\130\1\0"+
    "\7\130\1\0\5\130\2\u017a\1\103\2\u017a\1\u0141\31\u017a"+
    "\1\162\7\u017a\1\103\5\u017a\1\u017b\1\u017a\1\103\1\u017b"+
    "\1\u017a\1\u0162\30\u017b\1\u01a4\1\340\7\u017b\1\262\5\u017b"+
    "\1\25\2\0\1\25\3\0\16\25\1\u01a5\11\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\6\25\1\u01a6\21\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\6\25\1\u0104\21\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\5\25\1\u01a7\22\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\4\25\1\u01a8\23\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\16\25\1\u01a9\11\25\2\0\2\25\3\0\1\25\1\165"+
    "\6\25\2\0\1\25\3\0\10\25\1\u0103\17\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\1\u0103\27\25\2\0\2\25\3\0\1\25\1\165\6\25"+
    "\2\0\1\25\3\0\20\25\1\u01aa\7\25\2\0\2\25"+
    "\3\0\1\25\1\165\6\25\2\0\1\25\3\0\10\25"+
    "\1\u01ab\17\25\2\0\2\25\3\0\1\25\1\165\6\25"+
    "\2\0\1\25\3\0\25\25\1\u01a9\2\25\2\0\2\25"+
    "\3\0\1\25\1\165\6\25\2\0\1\25\3\0\16\25"+
    "\1\u01ac\11\25\2\0\2\25\3\0\1\25\1\165\6\25"+
    "\2\0\1\25\3\0\1\25\1\u01ad\26\25\2\0\2\25"+
    "\3\0\1\25\1\165\6\25\2\0\1\25\3\0\22\25"+
    "\1\363\5\25\2\0\2\25\3\0\1\25\1\165\6\25"+
    "\2\0\1\25\3\0\2\25\1\u01a8\25\25\2\0\2\25"+
    "\3\0\1\25\1\165\6\25\2\0\1\25\3\0\6\25"+
    "\1\u01ae\21\25\2\0\2\25\3\0\1\25\1\165\6\25"+
    "\2\0\1\25\3\0\4\25\1\u01af\23\25\2\0\2\25"+
    "\3\0\1\25\1\165\6\25\2\0\1\25\3\0\16\25"+
    "\1\u01b0\11\25\2\0\2\25\3\0\1\25\1\165\6\25"+
    "\2\0\1\25\3\0\14\25\1\u01b1\13\25\2\0\2\25"+
    "\3\0\1\25\1\165\6\25\2\0\1\25\3\0\1\u01b2"+
    "\27\25\2\0\2\25\3\0\1\25\1\165\5\25\15\130"+
    "\1\u0135\21\130\1\0\7\130\1\0\21\130\1\u01b3\22\130"+
    "\1\0\7\130\1\0\20\130\1\u01b4\23\130\1\0\7\130"+
    "\1\0\32\130\1\u01b5\11\130\1\0\7\130\1\0\24\130"+
    "\1\u0134\17\130\1\0\7\130\1\0\14\130\1\u0134\27\130"+
    "\1\0\7\130\1\0\41\130\1\u01b5\2\130\1\0\7\130"+
    "\1\0\32\130\1\u01b6\11\130\1\0\7\130\1\0\15\130"+
    "\1\u01b7\26\130\1\0\7\130\1\0\36\130\1\313\5\130"+
    "\1\0\7\130\1\0\16\130\1\u01b4\25\130\1\0\7\130"+
    "\1\0\20\130\1\u01b8\23\130\1\0\7\130\1\0\30\130"+
    "\1\u01b9\13\130\1\0\7\130\1\0\5\130\1\25\2\0"+
    "\1\25\3\0\20\25\1\u01ba\7\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\7\25\1\363"+
    "\20\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\1\25\1\207\26\25\2\0\2\25\3\0"+
    "\1\25\1\165\6\25\2\0\1\25\3\0\12\25\1\363"+
    "\15\25\2\0\2\25\3\0\1\25\1\165\6\25\2\0"+
    "\1\25\3\0\1\u01bb\27\25\2\0\2\25\3\0\1\25"+
    "\1\165\6\25\2\0\1\25\3\0\1\25\1\u014a\26\25"+
    "\2\0\2\25\3\0\1\25\1\165\6\25\2\0\1\25"+
    "\3\0\21\25\1\u01bc\6\25\2\0\2\25\3\0\1\25"+
    "\1\165\6\25\2\0\1\25\3\0\5\25\1\u01bd\22\25"+
    "\2\0\2\25\3\0\1\25\1\165\6\25\2\0\1\25"+
    "\3\0\23\25\1\u0155\4\25\2\0\2\25\3\0\1\25"+
    "\1\165\6\25\2\0\1\25\3\0\1\u01be\27\25\2\0"+
    "\2\25\3\0\1\25\1\165\6\25\2\0\1\25\3\0"+
    "\15\25\1\u0104\12\25\2\0\2\25\3\0\1\25\1\165"+
    "\5\25\16\130\1\313\20\130\1\0\7\130\1\0\15\130"+
    "\1\306\26\130\1\0\7\130\1\0\26\130\1\313\15\130"+
    "\1\0\7\130\1\0\15\130\1\u016c\26\130\1\0\7\130"+
    "\1\0\35\130\1\u01bf\6\130\1\0\7\130\1\0\37\130"+
    "\1\u0171\4\130\1\0\7\130\1\0\31\130\1\u0135\12\130"+
    "\1\0\7\130\1\0\5\130\1\25\2\0\1\25\3\0"+
    "\1\u01c0\27\25\2\0\2\25\3\0\1\25\1\165\6\25"+
    "\2\0\1\25\3\0\2\25\1\u01c1\25\25\2\0\2\25"+
    "\3\0\1\25\1\165\6\25\2\0\1\25\3\0\1\u01c2"+
    "\27\25\2\0\2\25\3\0\1\25\1\165\5\25\11\130"+
    "\1\u01c3\25\130\1\0\7\130\1\0\5\130\1\25\2\0"+
    "\1\25\3\0\14\25\1\u0101\13\25\2\0\2\25\3\0"+
    "\1\25\1\165\5\25\23\130\1\u0133\13\130\1\0\7\130"+
    "\1\0\5\130";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\2\1\3\0\31\1\1\11\3\1\1\11\7\1"+
    "\1\11\2\1\1\11\15\1\1\11\42\1\1\11\12\1"+
    "\1\11\50\1\1\11\2\0\1\11\1\1\1\0\1\1"+
    "\1\0\11\1\3\0\3\1\1\0\41\1\1\0\1\1"+
    "\1\0\7\1\1\0\1\11\50\1\1\11\1\1\1\11"+
    "\57\1\2\0\37\1\1\0\141\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[451];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MakefileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MakefileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case INCLUDES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 452: break;
            case EXPORT: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 453: break;
            case EXPORTVAR: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 454: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return FUNCTION_PARAM_TEXT;
            } 
            // fall through
          case 46: break;
          case 2: 
            { return IDENTIFIER;
            } 
            // fall through
          case 47: break;
          case 3: 
            { return EOL;
            } 
            // fall through
          case 48: break;
          case 4: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 49: break;
          case 5: 
            { return COMMENT;
            } 
            // fall through
          case 50: break;
          case 6: 
            { yybegin(YYINITIAL); return FUNCTION_END;
            } 
            // fall through
          case 51: break;
          case 7: 
            { return COLON;
            } 
            // fall through
          case 52: break;
          case 8: 
            { yybegin(SOURCE_FORCED); return SEMICOLON;
            } 
            // fall through
          case 53: break;
          case 9: 
            { return PIPE;
            } 
            // fall through
          case 54: break;
          case 10: 
            { yybegin(SOURCE); return ASSIGN;
            } 
            // fall through
          case 55: break;
          case 11: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 56: break;
          case 12: 
            { yybegin(SOURCE); return TAB;
            } 
            // fall through
          case 57: break;
          case 13: 
            { yypushback(yylength()); yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 58: break;
          case 14: 
            { yybegin(YYINITIAL); return EOL;
            } 
            // fall through
          case 59: break;
          case 15: 
            { return TEXT;
            } 
            // fall through
          case 60: break;
          case 16: 
            { return TAB;
            } 
            // fall through
          case 61: break;
          case 17: 
            { yybegin(DEFINEBODY); return WHITE_SPACE;
            } 
            // fall through
          case 62: break;
          case 18: 
            { return ASSIGN;
            } 
            // fall through
          case 63: break;
          case 19: 
            { return VARIABLE_VALUE_LINE;
            } 
            // fall through
          case 64: break;
          case 20: 
            { yybegin(YYINITIAL); return CONDITION;
            } 
            // fall through
          case 65: break;
          case 21: 
            { yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 66: break;
          case 22: 
            { yybegin(EXPORTVAR); return ASSIGN;
            } 
            // fall through
          case 67: break;
          case 23: 
            { return SPLIT;
            } 
            // fall through
          case 68: break;
          case 24: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 69: break;
          case 25: 
            { return FUNCTION_NAME;
            } 
            // fall through
          case 70: break;
          case 26: 
            { return DOUBLECOLON;
            } 
            // fall through
          case 71: break;
          case 27: 
            { return FUNCTION_START;
            } 
            // fall through
          case 72: break;
          case 28: 
            { return STRING;
            } 
            // fall through
          case 73: break;
          case 29: 
            { yybegin(FUNCTION); return FUNCTION_START;
            } 
            // fall through
          case 74: break;
          case 30: 
            { return VARIABLE_USAGE;
            } 
            // fall through
          case 75: break;
          case 31: 
            { return MACRO;
            } 
            // fall through
          case 76: break;
          case 32: 
            { yybegin(ELSE); return KEYWORD_ELSE;
            } 
            // fall through
          case 77: break;
          case 33: 
            { yybegin(CONDITIONALS); return KEYWORD_IFEQ;
            } 
            // fall through
          case 78: break;
          case 34: 
            { return KEYWORD_ENDIF;
            } 
            // fall through
          case 79: break;
          case 35: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNEQ;
            } 
            // fall through
          case 80: break;
          case 36: 
            { yybegin(CONDITIONALS); return KEYWORD_IFDEF;
            } 
            // fall through
          case 81: break;
          case 37: 
            { return KEYWORD_VPATH;
            } 
            // fall through
          case 82: break;
          case 38: 
            { yybegin(YYINITIAL); return KEYWORD_ENDEF;
            } 
            // fall through
          case 83: break;
          case 39: 
            { yybegin(EXPORT); return KEYWORD_EXPORT;
            } 
            // fall through
          case 84: break;
          case 40: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNDEF;
            } 
            // fall through
          case 85: break;
          case 41: 
            { yybegin(DEFINE); return KEYWORD_DEFINE;
            } 
            // fall through
          case 86: break;
          case 42: 
            { return KEYWORD_INCLUDE;
            } 
            // fall through
          case 87: break;
          case 43: 
            { return KEYWORD_PRIVATE;
            } 
            // fall through
          case 88: break;
          case 44: 
            { return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 89: break;
          case 45: 
            { yybegin(INCLUDES); return KEYWORD_UNDEFINE;
            } 
            // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
