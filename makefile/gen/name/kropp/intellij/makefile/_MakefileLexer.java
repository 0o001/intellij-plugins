/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package name.kropp.intellij.makefile;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static name.kropp.intellij.makefile.psi.MakefileTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>MakefileLexer.flex</tt>
 */
public class _MakefileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INCLUDES = 2;
  public static final int SOURCE = 4;
  public static final int SOURCE_FORCED = 6;
  public static final int DEFINE = 8;
  public static final int DEFINEBODY = 10;
  public static final int CONDITIONALS = 12;
  public static final int FUNCTION = 14;
  public static final int EXPORT = 16;
  public static final int EXPORTVAR = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  2,  3,  2,  3,  2,  3,  2,  3,  2,  3,  2,  3, 
     2,  3,  2, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\1\2\0\1\4\22\0\1\2\1\44\1\46\1\6\1\50\3\45\1\51\1\52\1\45\1\44"+
    "\1\41\1\30\14\45\1\37\1\40\1\45\1\43\1\45\1\44\1\36\33\45\1\3\4\45\1\13\1"+
    "\24\1\34\1\27\1\7\1\17\1\16\1\21\1\15\1\33\1\45\1\22\1\32\1\14\1\11\1\26\1"+
    "\47\1\10\1\20\1\25\1\23\1\35\1\12\1\31\2\45\1\53\1\42\1\54\1\45\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\3\1\5\24\4"+
    "\1\6\1\7\1\10\1\11\1\12\2\4\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\4\1\1\2\21\2\5"+
    "\1\22\6\4\1\23\11\4\1\23\24\4\1\24\1\0"+
    "\1\25\1\0\1\4\1\0\1\22\13\4\1\23\33\4"+
    "\1\25\2\26\2\4\1\27\2\4\1\23\7\4\1\30"+
    "\20\4\1\31\1\32\11\4\1\33\1\4\1\34\12\4"+
    "\1\35\1\36\5\4\1\37\1\4\1\23\3\4\1\40"+
    "\1\4\1\41\2\4\1\42\1\43\1\4\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b"+
    "\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\264"+
    "\0\264\0\264\0\264\0\u0573\0\u05a0\0\264\0\264\0\264"+
    "\0\264\0\264\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae"+
    "\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816"+
    "\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e"+
    "\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6"+
    "\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e"+
    "\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6"+
    "\0\u0de3\0\u0384\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1"+
    "\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059"+
    "\0\u1086\0\u0384\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194"+
    "\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc"+
    "\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464"+
    "\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\264\0\264\0\u0384"+
    "\0\u1572\0\u159f\0\u0384\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680"+
    "\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761\0\u0384\0\u178e\0\u17bb"+
    "\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923"+
    "\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u0384\0\u0384"+
    "\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99"+
    "\0\u1bc6\0\u0384\0\u1bf3\0\u0384\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7"+
    "\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\u0384\0\u0384"+
    "\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u0384\0\u1ec3\0\u1ef0"+
    "\0\u1f1d\0\u1f4a\0\u1f77\0\u0384\0\u1fa4\0\u0384\0\u1fd1\0\u1ffe"+
    "\0\u0384\0\u0384\0\u202b\0\u0384";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\6\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\25\1\31\1\32"+
    "\1\33\2\25\1\34\1\35\1\36\1\25\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\25\1\45\1\25\1\46"+
    "\1\47\1\50\1\51\1\52\1\5\1\6\1\7\1\10"+
    "\1\6\1\53\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\25\1\31\1\32\1\33\2\25\1\34\1\35"+
    "\1\36\1\54\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\25\1\45\1\25\1\46\1\47\1\50\1\51\1\52"+
    "\6\5\1\12\54\5\1\12\27\5\1\55\16\5\56\0"+
    "\1\6\2\0\1\6\52\0\1\7\53\0\1\56\1\0"+
    "\1\25\1\57\2\0\30\25\5\0\4\25\12\0\1\11"+
    "\47\0\1\60\1\0\1\60\1\61\1\0\1\60\1\62"+
    "\46\60\3\0\1\25\3\0\1\25\1\63\3\25\1\64"+
    "\5\25\1\65\6\25\1\66\3\25\1\67\1\25\5\0"+
    "\4\25\10\0\1\25\3\0\1\70\27\25\5\0\4\25"+
    "\10\0\1\25\3\0\1\25\1\71\24\25\1\72\1\25"+
    "\5\0\4\25\10\0\1\25\3\0\2\25\1\73\1\25"+
    "\1\74\1\25\1\75\21\25\5\0\4\25\10\0\1\25"+
    "\3\0\5\25\1\76\7\25\1\77\2\25\1\100\7\25"+
    "\5\0\4\25\10\0\1\25\3\0\2\25\1\101\25\25"+
    "\5\0\4\25\10\0\1\25\3\0\5\25\1\102\2\25"+
    "\1\103\17\25\5\0\4\25\10\0\1\25\3\0\14\25"+
    "\1\104\13\25\5\0\4\25\10\0\1\25\3\0\2\25"+
    "\1\105\3\25\1\106\4\25\1\107\14\25\5\0\4\25"+
    "\10\0\1\25\3\0\2\25\1\110\3\25\1\111\3\25"+
    "\1\112\1\25\1\113\1\25\1\114\11\25\5\0\4\25"+
    "\10\0\1\25\3\0\30\25\5\0\4\25\10\0\1\25"+
    "\3\0\4\25\1\115\23\25\5\0\4\25\10\0\1\25"+
    "\3\0\5\25\1\116\22\25\5\0\4\25\10\0\1\25"+
    "\3\0\4\25\1\117\23\25\5\0\4\25\10\0\1\25"+
    "\3\0\1\25\1\120\2\25\1\121\23\25\5\0\4\25"+
    "\10\0\1\25\3\0\1\122\5\25\1\123\21\25\5\0"+
    "\4\25\10\0\1\25\3\0\6\25\1\111\21\25\5\0"+
    "\4\25\10\0\1\25\3\0\2\25\1\124\25\25\5\0"+
    "\4\25\10\0\1\25\3\0\4\25\1\125\23\25\5\0"+
    "\4\25\10\0\1\25\3\0\4\25\1\126\12\25\1\127"+
    "\10\25\5\0\4\25\44\0\1\130\3\0\1\43\14\0"+
    "\1\25\3\0\30\25\4\0\1\43\4\25\5\0\3\131"+
    "\1\45\3\131\30\45\5\131\2\45\1\132\1\45\5\131"+
    "\5\0\1\53\47\0\1\133\2\0\1\134\1\0\2\133"+
    "\27\134\1\25\5\133\4\134\6\133\2\0\1\133\1\0"+
    "\31\133\1\0\16\133\2\0\1\56\2\0\1\56\50\0"+
    "\2\56\2\0\1\56\47\0\1\60\1\0\1\60\1\61"+
    "\1\0\53\60\1\61\1\135\50\60\1\62\1\0\1\62"+
    "\1\136\1\0\50\62\3\0\1\25\3\0\1\25\1\137"+
    "\26\25\5\0\4\25\10\0\1\25\3\0\20\25\1\140"+
    "\7\25\5\0\4\25\10\0\1\25\3\0\11\25\1\141"+
    "\16\25\5\0\4\25\10\0\1\25\3\0\17\25\1\142"+
    "\10\25\5\0\4\25\10\0\1\25\3\0\4\25\1\143"+
    "\23\25\5\0\4\25\10\0\1\25\3\0\4\25\1\144"+
    "\23\25\5\0\4\25\10\0\1\25\3\0\6\25\1\145"+
    "\21\25\5\0\4\25\10\0\1\25\3\0\1\146\27\25"+
    "\5\0\4\25\10\0\1\25\3\0\1\25\1\147\26\25"+
    "\5\0\4\25\10\0\1\25\3\0\1\25\1\150\26\25"+
    "\5\0\4\25\10\0\1\25\3\0\13\25\1\151\14\25"+
    "\5\0\4\25\10\0\1\25\3\0\20\25\1\152\7\25"+
    "\5\0\4\25\10\0\1\25\3\0\11\25\1\153\16\25"+
    "\5\0\4\25\10\0\1\25\3\0\20\25\1\154\7\25"+
    "\5\0\4\25\10\0\1\25\3\0\16\25\1\155\11\25"+
    "\5\0\4\25\10\0\1\25\3\0\10\25\1\156\14\25"+
    "\1\157\2\25\5\0\4\25\10\0\1\25\3\0\1\160"+
    "\4\25\1\161\12\25\1\162\7\25\5\0\4\25\10\0"+
    "\1\25\3\0\6\25\1\163\21\25\5\0\4\25\10\0"+
    "\1\25\3\0\1\25\1\164\26\25\5\0\4\25\10\0"+
    "\1\25\3\0\1\25\1\115\3\25\1\165\5\25\1\166"+
    "\14\25\5\0\4\25\10\0\1\25\3\0\4\25\1\167"+
    "\23\25\5\0\4\25\10\0\1\25\3\0\1\25\1\170"+
    "\26\25\5\0\4\25\10\0\1\25\3\0\5\25\1\171"+
    "\22\25\5\0\4\25\10\0\1\25\3\0\1\125\27\25"+
    "\5\0\4\25\10\0\1\25\3\0\10\25\1\172\4\25"+
    "\1\173\12\25\5\0\4\25\10\0\1\25\3\0\1\25"+
    "\1\174\26\25\5\0\4\25\10\0\1\25\3\0\11\25"+
    "\1\175\16\25\5\0\4\25\10\0\1\25\3\0\20\25"+
    "\1\176\7\25\5\0\4\25\10\0\1\25\3\0\11\25"+
    "\1\177\16\25\5\0\4\25\10\0\1\25\3\0\6\25"+
    "\1\200\21\25\5\0\4\25\10\0\1\25\3\0\16\25"+
    "\1\201\11\25\5\0\4\25\10\0\1\25\3\0\10\25"+
    "\1\202\17\25\5\0\4\25\10\0\1\25\3\0\1\25"+
    "\1\152\26\25\5\0\4\25\10\0\1\25\3\0\6\25"+
    "\1\203\21\25\5\0\4\25\10\0\1\25\3\0\13\25"+
    "\1\143\14\25\5\0\4\25\10\0\1\25\3\0\13\25"+
    "\1\204\14\25\5\0\4\25\10\0\1\25\3\0\4\25"+
    "\1\205\23\25\5\0\4\25\50\0\1\43\11\0\46\131"+
    "\1\206\6\131\1\133\2\0\1\133\1\0\31\133\1\207"+
    "\17\133\2\0\1\134\1\0\2\133\27\134\1\210\5\133"+
    "\4\134\5\133\1\0\1\60\53\0\1\62\1\60\1\62"+
    "\1\136\1\135\50\62\3\0\1\25\3\0\2\25\1\123"+
    "\25\25\5\0\4\25\10\0\1\25\3\0\1\211\5\25"+
    "\1\212\21\25\5\0\4\25\10\0\1\25\3\0\1\213"+
    "\27\25\5\0\4\25\10\0\1\25\3\0\2\25\1\214"+
    "\25\25\5\0\4\25\10\0\1\25\3\0\13\25\1\152"+
    "\14\25\5\0\4\25\10\0\1\25\3\0\13\25\1\153"+
    "\14\25\5\0\4\25\10\0\1\25\3\0\7\25\1\124"+
    "\20\25\5\0\4\25\10\0\1\25\3\0\1\25\1\215"+
    "\26\25\5\0\4\25\10\0\1\25\3\0\20\25\1\216"+
    "\7\25\5\0\4\25\10\0\1\25\3\0\5\25\1\217"+
    "\22\25\5\0\4\25\10\0\1\25\3\0\20\25\1\220"+
    "\7\25\5\0\4\25\10\0\1\25\3\0\17\25\1\221"+
    "\10\25\5\0\4\25\10\0\1\25\3\0\11\25\1\222"+
    "\5\25\1\223\10\25\5\0\4\25\10\0\1\25\3\0"+
    "\20\25\1\224\7\25\5\0\4\25\10\0\1\25\3\0"+
    "\2\25\1\152\25\25\5\0\4\25\10\0\1\25\3\0"+
    "\13\25\1\225\14\25\5\0\4\25\10\0\1\25\3\0"+
    "\30\25\5\0\3\25\1\226\10\0\1\25\3\0\1\227"+
    "\17\25\1\230\7\25\5\0\4\25\10\0\1\25\3\0"+
    "\1\231\27\25\5\0\4\25\10\0\1\25\3\0\13\25"+
    "\1\232\14\25\5\0\4\25\10\0\1\25\3\0\1\233"+
    "\27\25\5\0\4\25\10\0\1\25\3\0\20\25\1\234"+
    "\7\25\5\0\4\25\10\0\1\25\3\0\1\152\15\25"+
    "\1\235\11\25\5\0\4\25\10\0\1\25\3\0\26\25"+
    "\1\137\1\25\5\0\4\25\10\0\1\25\3\0\16\25"+
    "\1\152\11\25\5\0\4\25\10\0\1\25\3\0\25\25"+
    "\1\157\2\25\5\0\4\25\10\0\1\25\3\0\10\25"+
    "\1\236\17\25\5\0\4\25\10\0\1\25\3\0\11\25"+
    "\1\170\16\25\5\0\4\25\10\0\1\25\3\0\6\25"+
    "\1\237\21\25\5\0\4\25\10\0\1\25\3\0\16\25"+
    "\1\240\11\25\5\0\4\25\10\0\1\25\3\0\1\241"+
    "\27\25\5\0\4\25\10\0\1\25\3\0\1\242\27\25"+
    "\5\0\4\25\10\0\1\25\3\0\26\25\1\243\1\25"+
    "\5\0\4\25\10\0\1\25\3\0\11\25\1\244\16\25"+
    "\5\0\4\25\10\0\1\25\3\0\6\25\1\245\21\25"+
    "\5\0\4\25\10\0\1\25\3\0\5\25\1\152\22\25"+
    "\5\0\4\25\10\0\1\25\3\0\14\25\1\232\13\25"+
    "\5\0\4\25\10\0\1\25\3\0\16\25\1\246\11\25"+
    "\5\0\4\25\10\0\1\25\3\0\10\25\1\247\17\25"+
    "\5\0\4\25\10\0\1\25\3\0\10\25\1\250\17\25"+
    "\5\0\4\25\10\0\1\25\3\0\1\25\1\251\26\25"+
    "\5\0\4\25\10\0\1\25\3\0\1\25\1\252\26\25"+
    "\5\0\4\25\10\0\1\25\3\0\11\25\1\152\1\25"+
    "\1\253\14\25\5\0\4\25\10\0\1\25\3\0\6\25"+
    "\1\254\21\25\5\0\4\25\10\0\1\25\3\0\25\25"+
    "\1\255\2\25\5\0\4\25\10\0\1\25\3\0\4\25"+
    "\1\256\23\25\5\0\4\25\10\0\1\25\3\0\14\25"+
    "\1\257\13\25\5\0\4\25\10\0\1\25\3\0\1\25"+
    "\1\260\26\25\5\0\4\25\10\0\1\25\3\0\6\25"+
    "\1\123\21\25\5\0\4\25\10\0\1\25\3\0\14\25"+
    "\1\261\13\25\5\0\4\25\10\0\1\25\3\0\30\25"+
    "\5\0\3\25\1\262\10\0\1\25\3\0\1\263\27\25"+
    "\5\0\4\25\10\0\1\25\3\0\10\25\1\264\17\25"+
    "\5\0\4\25\10\0\1\25\3\0\1\152\27\25\5\0"+
    "\4\25\10\0\1\25\3\0\4\25\1\265\23\25\5\0"+
    "\4\25\10\0\1\25\3\0\11\25\1\266\16\25\5\0"+
    "\4\25\10\0\1\25\3\0\1\267\27\25\5\0\4\25"+
    "\10\0\1\25\3\0\6\25\1\270\21\25\5\0\4\25"+
    "\10\0\1\25\3\0\17\25\1\152\10\25\5\0\4\25"+
    "\10\0\1\25\3\0\3\25\1\271\24\25\5\0\4\25"+
    "\10\0\1\25\3\0\10\25\1\272\17\25\5\0\4\25"+
    "\10\0\1\25\3\0\5\25\1\273\22\25\5\0\4\25"+
    "\10\0\1\25\3\0\4\25\1\274\23\25\5\0\4\25"+
    "\10\0\1\25\3\0\14\25\1\275\13\25\5\0\4\25"+
    "\10\0\1\25\3\0\5\25\1\276\22\25\5\0\4\25"+
    "\10\0\1\25\3\0\12\25\1\277\15\25\5\0\4\25"+
    "\10\0\1\25\3\0\16\25\1\300\11\25\5\0\4\25"+
    "\10\0\1\25\3\0\6\25\1\301\21\25\5\0\4\25"+
    "\10\0\1\25\3\0\6\25\1\173\21\25\5\0\4\25"+
    "\10\0\1\25\3\0\5\25\1\302\22\25\5\0\4\25"+
    "\10\0\1\25\3\0\4\25\1\303\23\25\5\0\4\25"+
    "\10\0\1\25\3\0\16\25\1\304\11\25\5\0\4\25"+
    "\10\0\1\25\3\0\10\25\1\172\17\25\5\0\4\25"+
    "\10\0\1\25\3\0\1\172\27\25\5\0\4\25\10\0"+
    "\1\25\3\0\20\25\1\305\7\25\5\0\4\25\10\0"+
    "\1\25\3\0\10\25\1\306\17\25\5\0\4\25\10\0"+
    "\1\25\3\0\25\25\1\304\2\25\5\0\4\25\10\0"+
    "\1\25\3\0\16\25\1\307\11\25\5\0\4\25\10\0"+
    "\1\25\3\0\1\25\1\310\26\25\5\0\4\25\10\0"+
    "\1\25\3\0\22\25\1\152\5\25\5\0\4\25\10\0"+
    "\1\25\3\0\2\25\1\303\25\25\5\0\4\25\10\0"+
    "\1\25\3\0\6\25\1\311\21\25\5\0\4\25\10\0"+
    "\1\25\3\0\4\25\1\312\23\25\5\0\4\25\10\0"+
    "\1\25\3\0\16\25\1\313\11\25\5\0\4\25\10\0"+
    "\1\25\3\0\15\25\1\173\12\25\5\0\4\25\10\0"+
    "\1\25\3\0\1\314\27\25\5\0\4\25\10\0\1\25"+
    "\3\0\20\25\1\315\7\25\5\0\4\25\10\0\1\25"+
    "\3\0\7\25\1\152\20\25\5\0\4\25\10\0\1\25"+
    "\3\0\1\25\1\76\26\25\5\0\4\25\10\0\1\25"+
    "\3\0\12\25\1\152\15\25\5\0\4\25\10\0\1\25"+
    "\3\0\1\316\27\25\5\0\4\25\10\0\1\25\3\0"+
    "\1\25\1\217\26\25\5\0\4\25\10\0\1\25\3\0"+
    "\21\25\1\317\6\25\5\0\4\25\10\0\1\25\3\0"+
    "\5\25\1\320\22\25\5\0\4\25\10\0\1\25\3\0"+
    "\23\25\1\232\4\25\5\0\4\25\10\0\1\25\3\0"+
    "\1\321\27\25\5\0\4\25\10\0\1\25\3\0\1\322"+
    "\27\25\5\0\4\25\10\0\1\25\3\0\2\25\1\323"+
    "\25\25\5\0\4\25\10\0\1\25\3\0\1\324\27\25"+
    "\5\0\4\25\10\0\1\25\3\0\14\25\1\170\13\25"+
    "\5\0\4\25\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8280];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\32\1\4\11\2\1\5\11\56\1\1\0"+
    "\1\1\1\0\1\1\1\0\50\1\2\11\115\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MakefileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MakefileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 37: break;
          case 2: 
            { return EOL;
            } 
            // fall through
          case 38: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 39: break;
          case 4: 
            { return CHARS;
            } 
            // fall through
          case 40: break;
          case 5: 
            { return COMMENT;
            } 
            // fall through
          case 41: break;
          case 6: 
            { return COLON;
            } 
            // fall through
          case 42: break;
          case 7: 
            { return SEMICOLON;
            } 
            // fall through
          case 43: break;
          case 8: 
            { return COMMA;
            } 
            // fall through
          case 44: break;
          case 9: 
            { return PIPE;
            } 
            // fall through
          case 45: break;
          case 10: 
            { return ASSIGN;
            } 
            // fall through
          case 46: break;
          case 11: 
            { return DOLLAR;
            } 
            // fall through
          case 47: break;
          case 12: 
            { return OPEN_PAREN;
            } 
            // fall through
          case 48: break;
          case 13: 
            { return CLOSE_PAREN;
            } 
            // fall through
          case 49: break;
          case 14: 
            { return OPEN_CURLY;
            } 
            // fall through
          case 50: break;
          case 15: 
            { return CLOSE_CURLY;
            } 
            // fall through
          case 51: break;
          case 16: 
            { return TAB;
            } 
            // fall through
          case 52: break;
          case 17: 
            { return SPLIT;
            } 
            // fall through
          case 53: break;
          case 18: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 54: break;
          case 19: 
            { return FUNCTION_NAME;
            } 
            // fall through
          case 55: break;
          case 20: 
            { return DOUBLECOLON;
            } 
            // fall through
          case 56: break;
          case 21: 
            { return STRING;
            } 
            // fall through
          case 57: break;
          case 22: 
            { return MACRO;
            } 
            // fall through
          case 58: break;
          case 23: 
            { return KEYWORD_ELSE;
            } 
            // fall through
          case 59: break;
          case 24: 
            { return KEYWORD_IFEQ;
            } 
            // fall through
          case 60: break;
          case 25: 
            { return KEYWORD_ENDEF;
            } 
            // fall through
          case 61: break;
          case 26: 
            { return KEYWORD_ENDIF;
            } 
            // fall through
          case 62: break;
          case 27: 
            { return KEYWORD_IFNEQ;
            } 
            // fall through
          case 63: break;
          case 28: 
            { return KEYWORD_IFDEF;
            } 
            // fall through
          case 64: break;
          case 29: 
            { return KEYWORD_VPATH;
            } 
            // fall through
          case 65: break;
          case 30: 
            { return KEYWORD_EXPORT;
            } 
            // fall through
          case 66: break;
          case 31: 
            { return KEYWORD_IFNDEF;
            } 
            // fall through
          case 67: break;
          case 32: 
            { return KEYWORD_DEFINE;
            } 
            // fall through
          case 68: break;
          case 33: 
            { return KEYWORD_INCLUDE;
            } 
            // fall through
          case 69: break;
          case 34: 
            { return KEYWORD_PRIVATE;
            } 
            // fall through
          case 70: break;
          case 35: 
            { return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 71: break;
          case 36: 
            { return KEYWORD_UNDEFINE;
            } 
            // fall through
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
