/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package name.kropp.intellij.makefile;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import name.kropp.intellij.makefile.psi.MakefileTypes;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static name.kropp.intellij.makefile.psi.MakefileTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>MakefileLexer.flex</tt>
 */
public class _MakefileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PREREQUISITES = 2;
  public static final int ELSE = 4;
  public static final int INCLUDES = 6;
  public static final int SOURCE = 8;
  public static final int DEFINE = 10;
  public static final int DEFINEBODY = 12;
  public static final int CONDITIONALS = 14;
  public static final int FUNCTION = 16;
  public static final int EXPORT = 18;
  public static final int EXPORTVAR = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 
    16, 17, 18, 19, 20, 21
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\33\1\1\2\0\1\4\22\0\1\2\1\31\1\0\1\5\1\6\3\0\1\7\1\34\1\0\1\32\1\0"+
    "\1\40\14\0\1\25\1\26\1\0\1\30\1\0\1\31\1\24\33\0\1\3\4\0\1\14\1\0\1\35\1\37"+
    "\1\10\1\20\1\17\1\22\1\16\2\0\1\23\1\0\1\15\1\12\1\42\1\44\1\11\1\21\1\43"+
    "\1\36\1\41\1\13\1\45\3\0\1\27\203\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\20\0\2\1\4\0\1\2\2\3\1\4\5\2\1\5"+
    "\1\6\1\7\1\2\1\3\5\2\1\10\1\11\3\2"+
    "\1\12\1\13\1\14\1\2\3\15\1\2\1\7\1\16"+
    "\1\17\1\3\1\7\1\16\1\3\1\16\1\20\1\7"+
    "\1\21\1\7\1\2\1\22\1\7\3\22\1\23\1\3"+
    "\2\23\1\1\1\4\1\7\1\24\1\1\1\7\1\25"+
    "\1\7\1\2\1\4\1\26\10\2\1\27\5\2\1\0"+
    "\2\30\2\2\1\31\1\2\1\0\1\2\1\0\2\16"+
    "\3\0\3\22\1\0\2\23\1\4\1\26\1\0\1\1"+
    "\1\0\1\2\1\0\4\2\1\32\14\2\2\33\3\2"+
    "\4\0\4\2\4\16\1\33\5\22\1\33\4\23\1\33"+
    "\4\0\1\32\1\33\5\2\1\34\3\2\1\35\12\2"+
    "\4\0\4\2\4\16\5\22\4\23\4\0\4\2\1\36"+
    "\3\2\1\37\1\2\1\40\2\2\1\41\4\2\4\0"+
    "\4\2\4\16\4\22\1\42\4\23\4\0\2\2\1\43"+
    "\1\2\1\44\2\2\1\45\1\2\1\46\1\2\1\47"+
    "\2\2\2\0\1\43\1\0\2\2\1\43\1\2\2\16"+
    "\1\43\1\16\2\22\1\43\1\22\2\23\1\43\1\23"+
    "\2\0\1\43\1\0\1\50\1\2\1\51\1\2\1\52"+
    "\1\2\1\53\1\2\1\54\1\50\1\0\1\51\1\50"+
    "\1\2\1\51\1\50\1\16\1\51\1\50\1\22\1\51"+
    "\1\50\1\23\1\51\1\50\1\0\1\51\1\2\1\55"+
    "\1\56\1\57\1\0\1\2\1\16\1\22\1\23\1\0"+
    "\7\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a"+
    "\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a"+
    "\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474\0\u049a"+
    "\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca"+
    "\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u0344"+
    "\0\u0344\0\u06fa\0\u04c0\0\u0720\0\u0746\0\u076c\0\u04c0\0\u0792"+
    "\0\u07b8\0\u07de\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2"+
    "\0\u04c0\0\u08e8\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc"+
    "\0\u09f2\0\u0a18\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u04c0"+
    "\0\u0afc\0\u0b22\0\u04c0\0\u0b48\0\u0b6e\0\u0b94\0\u0bba\0\u0be0"+
    "\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e\0\u0cc4\0\u0cea\0\u04e6"+
    "\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8\0\u0dce\0\u04c0\0\u0df4"+
    "\0\u0e1a\0\u0e40\0\u04e6\0\u0e66\0\u0e8c\0\u0eb2\0\u0792\0\u0ed8"+
    "\0\u0efe\0\u0efe\0\u08e8\0\u0934\0\u0f24\0\u0f4a\0\u0f70\0\u0f70"+
    "\0\u0f96\0\u0fbc\0\u0fe2\0\u1008\0\u102e\0\u1054\0\u0b48\0\u107a"+
    "\0\u10a0\0\u10c6\0\u10ec\0\u1112\0\u1138\0\u0344\0\u115e\0\u1184"+
    "\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242\0\u1268\0\u128e\0\u12b4"+
    "\0\u12da\0\u1300\0\u0344\0\u04c0\0\u1326\0\u134c\0\u1372\0\u1398"+
    "\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456\0\u147c\0\u14a2\0\u14c8"+
    "\0\u14ee\0\u1514\0\u153a\0\u0792\0\u1560\0\u1586\0\u15ac\0\u15d2"+
    "\0\u15f8\0\u0934\0\u161e\0\u1644\0\u166a\0\u1690\0\u09f2\0\u16b6"+
    "\0\u16dc\0\u1702\0\u1728\0\u04c0\0\u0a8a\0\u174e\0\u1774\0\u179a"+
    "\0\u17c0\0\u17e6\0\u0344\0\u180c\0\u1832\0\u1858\0\u0344\0\u187e"+
    "\0\u18a4\0\u18ca\0\u18f0\0\u1916\0\u193c\0\u1962\0\u1988\0\u19ae"+
    "\0\u19d4\0\u19fa\0\u1a20\0\u1a46\0\u1a6c\0\u1a92\0\u1ab8\0\u1ade"+
    "\0\u1b04\0\u1b2a\0\u1b50\0\u1b76\0\u1b9c\0\u1bc2\0\u1be8\0\u1c0e"+
    "\0\u1c34\0\u1c5a\0\u1c80\0\u1ca6\0\u1ccc\0\u1cf2\0\u1d18\0\u1d3e"+
    "\0\u1d64\0\u1d8a\0\u1db0\0\u1dd6\0\u1dfc\0\u1e22\0\u0344\0\u1e48"+
    "\0\u1e6e\0\u1e94\0\u0344\0\u1eba\0\u0344\0\u1ee0\0\u1f06\0\u0344"+
    "\0\u1f2c\0\u1f52\0\u1f78\0\u1f9e\0\u1fc4\0\u1fea\0\u2010\0\u2036"+
    "\0\u205c\0\u2082\0\u20a8\0\u20ce\0\u20f4\0\u211a\0\u2140\0\u2166"+
    "\0\u218c\0\u21b2\0\u21d8\0\u21fe\0\u0934\0\u2224\0\u224a\0\u2270"+
    "\0\u2296\0\u22bc\0\u22e2\0\u2308\0\u232e\0\u2354\0\u237a\0\u107a"+
    "\0\u23a0\0\u0344\0\u23c6\0\u23ec\0\u0344\0\u2412\0\u0344\0\u2438"+
    "\0\u0344\0\u245e\0\u2484\0\u24aa\0\u24d0\0\u04c0\0\u24f6\0\u251c"+
    "\0\u2542\0\u0344\0\u2568\0\u258e\0\u25b4\0\u0792\0\u25da\0\u2600"+
    "\0\u2626\0\u0934\0\u264c\0\u2672\0\u2698\0\u09f2\0\u26be\0\u26e4"+
    "\0\u270a\0\u10a0\0\u2730\0\u107a\0\u2756\0\u107a\0\u277c\0\u0344"+
    "\0\u27a2\0\u0344\0\u27c8\0\u0344\0\u04c0\0\u27ee\0\u04c0\0\u0344"+
    "\0\u2814\0\u0344\0\u0792\0\u283a\0\u0792\0\u0934\0\u2860\0\u0934"+
    "\0\u09f2\0\u2886\0\u09f2\0\u10a0\0\u28ac\0\u10a0\0\u28d2\0\u0344"+
    "\0\u0344\0\u0344\0\u28f8\0\u291e\0\u2944\0\u296a\0\u2990\0\u29b6"+
    "\0\u107a\0\u04c0\0\u0344\0\u0792\0\u0934\0\u09f2\0\u10a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\27\1\30\1\31\1\27\1\30\1\32\1\33\1\27"+
    "\1\34\1\27\1\35\3\27\1\36\2\27\1\37\3\27"+
    "\1\40\2\27\1\41\1\42\1\43\1\44\2\27\1\45"+
    "\1\46\1\37\1\47\1\50\4\27\1\30\1\31\1\27"+
    "\1\30\1\32\1\33\1\27\1\34\1\27\1\35\3\27"+
    "\1\36\2\27\1\37\2\27\1\51\1\40\2\27\1\41"+
    "\1\42\1\43\1\52\2\27\1\45\1\46\1\37\1\47"+
    "\1\50\4\27\1\53\1\31\1\54\1\53\1\32\1\33"+
    "\1\27\1\55\1\27\1\56\12\27\1\57\1\60\1\61"+
    "\1\41\1\42\1\43\1\44\6\27\1\62\4\27\1\53"+
    "\1\31\1\54\1\53\1\32\1\33\1\27\1\55\1\27"+
    "\1\56\11\27\1\51\1\57\1\60\1\61\1\41\1\42"+
    "\1\43\1\44\6\27\1\62\3\27\1\63\1\53\1\31"+
    "\1\63\1\53\1\32\1\64\40\63\1\53\1\31\1\63"+
    "\1\53\1\32\1\64\15\63\1\65\21\63\1\27\1\53"+
    "\1\31\1\27\1\53\1\32\1\66\16\27\1\67\2\27"+
    "\2\67\1\27\1\44\13\27\1\53\1\31\1\27\1\53"+
    "\1\32\1\66\15\27\1\51\1\67\2\27\2\67\1\27"+
    "\1\44\12\27\1\70\1\71\1\72\1\73\1\71\1\32"+
    "\1\74\24\70\1\75\13\70\1\71\1\72\1\73\1\71"+
    "\1\32\1\74\15\70\1\76\6\70\1\75\12\70\1\27"+
    "\1\77\1\31\1\27\1\77\1\32\1\66\16\27\1\100"+
    "\2\27\1\101\1\102\1\103\1\44\13\27\1\77\1\31"+
    "\1\27\1\77\1\32\1\66\15\27\1\51\1\100\2\27"+
    "\1\101\1\102\1\103\1\44\12\27\1\104\1\30\1\104"+
    "\1\105\1\30\1\32\1\106\1\104\1\107\36\104\1\30"+
    "\1\104\1\105\1\30\1\32\1\106\1\104\1\107\13\104"+
    "\1\110\21\104\1\111\1\71\1\112\1\111\1\71\1\32"+
    "\1\113\40\111\1\71\1\112\1\111\1\71\1\32\1\113"+
    "\15\111\1\114\21\111\5\115\1\116\1\117\25\115\1\120"+
    "\16\115\1\116\1\117\15\115\1\121\7\115\1\120\11\115"+
    "\1\27\1\53\1\31\1\27\1\53\1\32\1\33\16\27"+
    "\1\122\2\27\1\123\1\124\1\125\1\44\13\27\1\53"+
    "\1\31\1\27\1\53\1\32\1\33\15\27\1\51\1\122"+
    "\2\27\1\123\1\124\1\125\1\44\12\27\1\70\1\53"+
    "\1\72\1\73\1\53\1\32\1\74\24\70\1\75\13\70"+
    "\1\53\1\72\1\73\1\53\1\32\1\74\15\70\1\76"+
    "\6\70\1\75\12\70\1\27\2\0\1\27\2\0\17\27"+
    "\1\0\2\27\2\0\1\27\1\0\12\27\1\0\1\30"+
    "\2\0\1\30\43\0\1\31\43\0\1\126\1\0\2\126"+
    "\1\0\1\127\40\126\1\27\2\0\1\27\2\0\1\27"+
    "\1\130\15\27\1\0\2\27\2\0\1\27\1\0\13\27"+
    "\2\0\1\27\2\0\7\27\1\131\5\27\1\132\1\27"+
    "\1\0\2\27\2\0\1\27\1\0\11\27\1\133\1\27"+
    "\2\0\1\27\2\0\17\27\1\0\2\27\2\0\1\27"+
    "\1\0\5\27\1\134\5\27\2\0\1\27\2\0\7\27"+
    "\1\135\2\27\1\136\4\27\1\0\2\27\2\0\1\27"+
    "\1\0\13\27\2\0\1\27\2\0\10\27\1\137\6\27"+
    "\1\0\2\27\2\0\1\27\1\0\12\27\25\0\1\140"+
    "\2\0\1\41\113\0\1\41\15\0\1\27\2\0\1\27"+
    "\2\0\17\27\1\0\2\27\1\41\1\0\1\27\1\0"+
    "\12\27\33\0\1\44\12\0\1\27\2\0\1\27\2\0"+
    "\7\27\1\141\7\27\1\0\2\27\2\0\1\27\1\0"+
    "\13\27\2\0\1\27\2\0\2\27\1\142\14\27\1\0"+
    "\2\27\2\0\1\27\1\0\13\27\2\0\1\27\2\0"+
    "\17\27\1\0\2\27\2\0\1\27\1\0\6\27\1\143"+
    "\4\27\2\0\1\27\2\0\3\27\1\144\13\27\1\0"+
    "\2\27\2\0\1\27\1\0\12\27\1\145\2\0\1\145"+
    "\1\0\1\146\16\145\1\27\1\146\2\145\2\146\1\145"+
    "\1\146\12\145\33\0\1\52\13\0\1\53\2\0\1\53"+
    "\41\0\1\27\1\147\1\0\1\27\1\150\1\0\17\27"+
    "\1\0\2\27\2\0\1\27\1\0\13\27\2\0\1\27"+
    "\2\0\17\27\1\0\2\27\2\0\1\27\1\0\11\27"+
    "\1\151\1\27\2\0\1\27\2\0\17\27\1\0\2\27"+
    "\2\0\1\27\1\0\5\27\1\152\4\27\25\0\1\153"+
    "\2\0\1\41\15\0\1\27\2\0\1\27\2\0\3\27"+
    "\1\154\13\27\1\0\2\27\2\0\1\27\1\0\12\27"+
    "\7\0\1\155\36\0\1\146\2\0\1\146\1\0\17\146"+
    "\1\0\21\146\1\27\2\0\1\27\2\0\1\27\1\156"+
    "\15\27\1\0\2\27\2\0\1\27\1\0\12\27\1\70"+
    "\1\0\1\70\1\157\1\0\41\70\1\0\1\71\2\0"+
    "\1\71\41\0\1\70\1\0\1\72\1\157\1\0\42\70"+
    "\1\147\1\70\1\157\1\150\42\70\1\0\1\70\1\157"+
    "\1\0\2\70\1\160\37\70\1\0\1\70\1\157\1\0"+
    "\26\70\1\75\12\70\1\161\1\0\1\70\1\162\1\0"+
    "\17\161\1\70\21\161\1\0\1\77\2\0\1\77\66\0"+
    "\1\163\2\0\1\101\45\0\1\101\15\0\1\27\2\0"+
    "\1\27\2\0\17\27\1\0\2\27\1\101\1\0\1\27"+
    "\1\0\12\27\1\104\1\0\1\104\1\164\1\0\42\104"+
    "\1\147\1\104\1\164\1\150\42\104\1\0\1\104\1\164"+
    "\1\0\2\104\1\165\37\104\1\0\1\104\1\164\1\0"+
    "\10\104\1\166\30\104\1\167\1\0\1\104\1\170\1\0"+
    "\17\167\1\104\21\167\1\111\1\0\2\111\2\0\41\111"+
    "\1\0\1\112\1\111\2\0\41\111\1\0\2\111\2\0"+
    "\1\111\1\171\36\111\1\172\1\0\1\111\1\172\1\0"+
    "\1\146\16\172\1\111\21\172\6\115\1\0\25\115\1\0"+
    "\11\115\1\173\1\115\2\173\1\115\1\174\1\126\25\173"+
    "\1\126\11\173\7\0\1\175\36\0\1\176\2\115\1\176"+
    "\1\115\1\176\1\146\15\176\1\115\7\176\1\146\11\176"+
    "\25\0\1\177\2\0\1\123\45\0\1\123\15\0\1\27"+
    "\2\0\1\27\2\0\17\27\1\0\2\27\1\123\1\0"+
    "\1\27\1\0\12\27\1\126\1\0\2\126\1\0\41\126"+
    "\1\127\1\0\2\127\1\0\41\127\1\200\2\201\1\200"+
    "\2\201\2\200\1\202\2\200\1\203\2\200\1\204\2\200"+
    "\1\205\3\200\1\201\2\200\2\201\1\200\1\201\1\206"+
    "\11\200\1\27\2\0\1\27\2\0\17\27\1\0\2\27"+
    "\2\0\1\27\1\0\3\27\1\207\7\27\2\0\1\27"+
    "\2\0\13\27\1\210\3\27\1\0\2\27\2\0\1\27"+
    "\1\0\13\27\2\0\1\27\2\0\17\27\1\0\2\27"+
    "\2\0\1\27\1\0\6\27\1\211\4\27\2\0\1\27"+
    "\2\0\2\27\1\212\14\27\1\0\2\27\2\0\1\27"+
    "\1\0\13\27\2\0\1\27\2\0\17\27\1\0\2\27"+
    "\2\0\1\27\1\0\1\27\1\213\11\27\2\0\1\27"+
    "\2\0\2\27\1\214\4\27\1\215\7\27\1\0\2\27"+
    "\2\0\1\27\1\0\3\27\1\216\7\27\2\0\1\27"+
    "\2\0\7\27\1\135\7\27\1\0\2\27\2\0\1\27"+
    "\1\0\13\27\2\0\1\27\2\0\17\27\1\0\2\27"+
    "\2\0\1\27\1\0\3\27\1\217\7\27\2\0\1\27"+
    "\2\0\12\27\1\220\4\27\1\0\2\27\2\0\1\27"+
    "\1\0\13\27\2\0\1\27\2\0\6\27\1\221\10\27"+
    "\1\0\2\27\2\0\1\27\1\0\13\27\2\0\1\27"+
    "\2\0\10\27\1\222\6\27\1\0\2\27\2\0\1\27"+
    "\1\0\12\27\1\145\2\0\1\145\1\0\1\146\16\145"+
    "\1\223\1\146\2\145\2\146\1\145\1\146\12\145\1\146"+
    "\2\0\1\146\1\0\17\146\1\224\21\146\1\0\1\147"+
    "\44\0\1\27\2\0\1\27\2\0\17\27\1\0\2\27"+
    "\2\0\1\27\1\0\6\27\1\225\4\27\2\0\1\27"+
    "\2\0\2\27\1\226\14\27\1\0\2\27\2\0\1\27"+
    "\1\0\13\27\2\0\1\27\2\0\10\27\1\227\6\27"+
    "\1\0\2\27\2\0\1\27\1\0\12\27\10\0\1\230"+
    "\2\0\1\231\2\0\1\232\2\0\1\233\24\0\1\27"+
    "\2\0\1\27\2\0\2\27\1\234\2\27\1\235\2\27"+
    "\1\236\2\27\1\237\3\27\1\0\2\27\2\0\1\27"+
    "\1\0\12\27\1\70\1\0\1\70\1\157\1\0\3\70"+
    "\1\240\2\70\1\241\2\70\1\242\2\70\1\243\24\70"+
    "\1\161\1\0\1\70\1\162\1\0\17\161\1\244\21\161"+
    "\1\104\1\0\1\104\1\164\1\0\3\104\1\245\2\104"+
    "\1\246\2\104\1\247\2\104\1\250\25\104\1\0\1\104"+
    "\1\164\1\0\32\104\1\251\6\104\1\167\1\0\1\104"+
    "\1\170\1\0\17\167\1\252\21\167\1\111\1\0\2\111"+
    "\2\0\2\111\1\253\2\111\1\254\2\111\1\255\2\111"+
    "\1\256\24\111\1\172\1\0\1\111\1\172\1\0\1\146"+
    "\16\172\1\257\21\172\1\173\1\115\2\173\1\115\1\173"+
    "\1\126\25\173\1\126\11\173\1\174\1\115\2\174\1\115"+
    "\1\174\1\127\25\174\1\127\11\174\10\201\1\260\2\201"+
    "\1\261\2\201\1\262\2\201\1\263\12\201\1\264\11\201"+
    "\1\176\2\115\1\176\1\115\1\176\1\146\15\176\1\265"+
    "\7\176\1\146\11\176\1\200\2\201\1\200\2\201\17\200"+
    "\1\201\2\200\2\201\1\200\1\201\1\206\11\200\34\201"+
    "\1\264\11\201\1\200\2\201\1\200\2\201\3\200\1\266"+
    "\13\200\1\201\2\200\2\201\1\200\1\201\1\206\12\200"+
    "\2\201\1\200\2\201\6\200\1\267\10\200\1\201\2\200"+
    "\2\201\1\200\1\201\1\206\12\200\2\201\1\200\2\201"+
    "\7\200\1\270\7\200\1\201\2\200\2\201\1\200\1\201"+
    "\1\206\12\200\2\201\1\200\2\201\14\200\1\271\2\200"+
    "\1\201\2\200\2\201\1\200\1\201\1\206\11\200\1\27"+
    "\2\0\1\27\2\0\10\27\1\272\6\27\1\0\2\27"+
    "\2\0\1\27\1\0\13\27\2\0\1\27\2\0\2\27"+
    "\1\273\14\27\1\0\2\27\2\0\1\27\1\0\13\27"+
    "\2\0\1\27\2\0\4\27\1\274\12\27\1\0\2\27"+
    "\2\0\1\27\1\0\13\27\2\0\1\27\2\0\3\27"+
    "\1\275\13\27\1\0\2\27\2\0\1\27\1\0\13\27"+
    "\2\0\1\27\2\0\15\27\1\276\1\27\1\0\2\27"+
    "\2\0\1\27\1\0\13\27\2\0\1\27\2\0\17\27"+
    "\1\0\2\27\2\0\1\27\1\0\10\27\1\277\2\27"+
    "\2\0\1\27\2\0\2\27\1\300\14\27\1\0\2\27"+
    "\2\0\1\27\1\0\3\27\1\301\7\27\2\0\1\27"+
    "\2\0\2\27\1\302\14\27\1\0\2\27\2\0\1\27"+
    "\1\0\13\27\2\0\1\27\2\0\2\27\1\303\14\27"+
    "\1\0\2\27\2\0\1\27\1\0\13\27\2\0\1\27"+
    "\2\0\10\27\1\304\6\27\1\0\2\27\2\0\1\27"+
    "\1\0\13\27\2\0\1\27\2\0\17\27\1\0\2\27"+
    "\2\0\1\27\1\0\7\27\1\305\3\27\2\0\1\27"+
    "\2\0\17\27\1\0\2\27\2\0\1\27\1\0\5\27"+
    "\1\306\5\27\2\0\1\27\2\0\4\27\1\307\12\27"+
    "\1\0\2\27\2\0\1\27\1\0\13\27\2\0\1\27"+
    "\2\0\3\27\1\310\13\27\1\0\2\27\2\0\1\27"+
    "\1\0\13\27\2\0\1\27\2\0\17\27\1\0\2\27"+
    "\2\0\1\27\1\0\5\27\1\311\4\27\11\0\1\312"+
    "\50\0\1\313\46\0\1\314\52\0\1\315\23\0\1\27"+
    "\2\0\1\27\2\0\3\27\1\316\13\27\1\0\2\27"+
    "\2\0\1\27\1\0\13\27\2\0\1\27\2\0\6\27"+
    "\1\317\10\27\1\0\2\27\2\0\1\27\1\0\13\27"+
    "\2\0\1\27\2\0\7\27\1\320\7\27\1\0\2\27"+
    "\2\0\1\27\1\0\13\27\2\0\1\27\2\0\14\27"+
    "\1\321\2\27\1\0\2\27\2\0\1\27\1\0\12\27"+
    "\1\70\1\0\1\70\1\157\1\0\4\70\1\322\35\70"+
    "\1\0\1\70\1\157\1\0\7\70\1\323\32\70\1\0"+
    "\1\70\1\157\1\0\10\70\1\324\31\70\1\0\1\70"+
    "\1\157\1\0\15\70\1\325\23\70\1\104\1\0\1\104"+
    "\1\164\1\0\4\104\1\326\35\104\1\0\1\104\1\164"+
    "\1\0\7\104\1\327\32\104\1\0\1\104\1\164\1\0"+
    "\10\104\1\330\31\104\1\0\1\104\1\164\1\0\15\104"+
    "\1\331\24\104\1\0\1\104\1\164\1\0\3\104\1\332"+
    "\35\104\1\111\1\0\2\111\2\0\3\111\1\333\35\111"+
    "\1\0\2\111\2\0\6\111\1\334\32\111\1\0\2\111"+
    "\2\0\7\111\1\335\31\111\1\0\2\111\2\0\14\111"+
    "\1\336\23\111\11\201\1\337\22\201\1\264\25\201\1\340"+
    "\17\201\1\264\26\201\1\341\16\201\1\264\33\201\1\342"+
    "\11\201\1\264\11\201\1\200\2\201\1\200\2\201\3\200"+
    "\1\343\13\200\1\201\2\200\2\201\1\200\1\201\1\206"+
    "\12\200\2\201\1\200\2\201\3\200\1\344\13\200\1\201"+
    "\2\200\2\201\1\200\1\201\1\206\12\200\2\201\1\200"+
    "\2\201\12\200\1\345\4\200\1\201\2\200\2\201\1\200"+
    "\1\201\1\206\12\200\2\201\1\200\2\201\2\200\1\346"+
    "\14\200\1\201\2\200\2\201\1\200\1\201\1\206\11\200"+
    "\1\27\2\0\1\27\2\0\12\27\1\347\4\27\1\0"+
    "\2\27\2\0\1\27\1\0\13\27\2\0\1\27\2\0"+
    "\3\27\1\350\13\27\1\0\2\27\2\0\1\27\1\0"+
    "\13\27\2\0\1\27\2\0\3\27\1\351\13\27\1\0"+
    "\2\27\2\0\1\27\1\0\13\27\2\0\1\27\2\0"+
    "\17\27\1\0\2\27\2\0\1\27\1\0\2\27\1\352"+
    "\10\27\2\0\1\27\2\0\17\27\1\0\2\27\2\0"+
    "\1\27\1\0\10\27\1\353\2\27\2\0\1\27\2\0"+
    "\2\27\1\354\14\27\1\0\2\27\2\0\1\27\1\0"+
    "\13\27\2\0\1\27\2\0\12\27\1\355\4\27\1\0"+
    "\2\27\2\0\1\27\1\0\13\27\2\0\1\27\2\0"+
    "\12\27\1\356\4\27\1\0\2\27\2\0\1\27\1\0"+
    "\13\27\2\0\1\27\2\0\7\27\1\357\7\27\1\0"+
    "\2\27\2\0\1\27\1\0\13\27\2\0\1\27\2\0"+
    "\14\27\1\360\2\27\1\0\2\27\2\0\1\27\1\0"+
    "\13\27\2\0\1\27\2\0\6\27\1\361\10\27\1\0"+
    "\2\27\2\0\1\27\1\0\13\27\2\0\1\27\2\0"+
    "\3\27\1\362\13\27\1\0\2\27\2\0\1\27\1\0"+
    "\13\27\2\0\1\27\2\0\3\27\1\363\13\27\1\0"+
    "\2\27\2\0\1\27\1\0\13\27\2\0\1\27\2\0"+
    "\6\27\1\364\10\27\1\0\2\27\2\0\1\27\1\0"+
    "\12\27\11\0\1\365\45\0\1\366\54\0\1\367\35\0"+
    "\1\370\35\0\1\27\2\0\1\27\2\0\3\27\1\371"+
    "\13\27\1\0\2\27\2\0\1\27\1\0\13\27\2\0"+
    "\1\27\2\0\3\27\1\372\13\27\1\0\2\27\2\0"+
    "\1\27\1\0\13\27\2\0\1\27\2\0\12\27\1\373"+
    "\4\27\1\0\2\27\2\0\1\27\1\0\13\27\2\0"+
    "\1\27\2\0\2\27\1\374\14\27\1\0\2\27\2\0"+
    "\1\27\1\0\12\27\1\70\1\0\1\70\1\157\1\0"+
    "\4\70\1\375\35\70\1\0\1\70\1\157\1\0\4\70"+
    "\1\376\35\70\1\0\1\70\1\157\1\0\13\70\1\377"+
    "\26\70\1\0\1\70\1\157\1\0\3\70\1\u0100\35\70"+
    "\1\104\1\0\1\104\1\164\1\0\4\104\1\u0101\35\104"+
    "\1\0\1\104\1\164\1\0\4\104\1\u0102\35\104\1\0"+
    "\1\104\1\164\1\0\13\104\1\u0103\26\104\1\0\1\104"+
    "\1\164\1\0\3\104\1\u0104\36\104\1\0\1\104\1\164"+
    "\1\0\13\104\1\u0105\25\104\1\111\1\0\2\111\2\0"+
    "\3\111\1\u0106\35\111\1\0\2\111\2\0\3\111\1\u0107"+
    "\35\111\1\0\2\111\2\0\12\111\1\u0108\26\111\1\0"+
    "\2\111\2\0\2\111\1\u0109\35\111\11\201\1\u010a\22\201"+
    "\1\264\22\201\1\u010b\22\201\1\264\31\201\1\u010c\13\201"+
    "\1\264\21\201\1\u010d\23\201\1\264\11\201\1\200\2\201"+
    "\1\200\2\201\4\200\1\u010e\12\200\1\201\2\200\2\201"+
    "\1\200\1\201\1\206\12\200\2\201\1\200\2\201\7\200"+
    "\1\u010f\7\200\1\201\2\200\2\201\1\200\1\201\1\206"+
    "\12\200\2\201\1\200\2\201\4\200\1\u0110\12\200\1\201"+
    "\2\200\2\201\1\200\1\201\1\206\12\200\2\201\1\200"+
    "\2\201\15\200\1\u0111\1\200\1\201\2\200\2\201\1\200"+
    "\1\201\1\206\11\200\1\27\2\0\1\27\2\0\17\27"+
    "\1\0\2\27\2\0\1\27\1\0\7\27\1\u0112\3\27"+
    "\2\0\1\27\2\0\10\27\1\u0113\6\27\1\0\2\27"+
    "\2\0\1\27\1\0\13\27\2\0\1\27\2\0\17\27"+
    "\1\0\2\27\2\0\1\27\1\0\3\27\1\u0114\7\27"+
    "\2\0\1\27\2\0\12\27\1\u0115\4\27\1\0\2\27"+
    "\2\0\1\27\1\0\13\27\2\0\1\27\2\0\10\27"+
    "\1\u0116\6\27\1\0\2\27\2\0\1\27\1\0\13\27"+
    "\2\0\1\27\2\0\2\27\1\u0117\14\27\1\0\2\27"+
    "\2\0\1\27\1\0\13\27\2\0\1\27\2\0\17\27"+
    "\1\0\2\27\2\0\1\27\1\0\7\27\1\u0118\3\27"+
    "\2\0\1\27\2\0\17\27\1\0\2\27\2\0\1\27"+
    "\1\0\7\27\1\u0119\3\27\2\0\1\27\2\0\10\27"+
    "\1\u011a\6\27\1\0\2\27\2\0\1\27\1\0\13\27"+
    "\2\0\1\27\2\0\17\27\1\0\2\27\2\0\1\27"+
    "\1\0\7\27\1\u011b\2\27\12\0\1\u011c\50\0\1\u011d"+
    "\42\0\1\u011e\56\0\1\u011f\22\0\1\27\2\0\1\27"+
    "\2\0\4\27\1\u0120\12\27\1\0\2\27\2\0\1\27"+
    "\1\0\13\27\2\0\1\27\2\0\7\27\1\u0121\7\27"+
    "\1\0\2\27\2\0\1\27\1\0\13\27\2\0\1\27"+
    "\2\0\4\27\1\u0122\12\27\1\0\2\27\2\0\1\27"+
    "\1\0\13\27\2\0\1\27\2\0\15\27\1\u0123\1\27"+
    "\1\0\2\27\2\0\1\27\1\0\12\27\1\70\1\0"+
    "\1\70\1\157\1\0\5\70\1\u0124\34\70\1\0\1\70"+
    "\1\157\1\0\10\70\1\u0125\31\70\1\0\1\70\1\157"+
    "\1\0\5\70\1\u0126\34\70\1\0\1\70\1\157\1\0"+
    "\16\70\1\u0127\22\70\1\104\1\0\1\104\1\164\1\0"+
    "\5\104\1\u0128\34\104\1\0\1\104\1\164\1\0\10\104"+
    "\1\u0129\31\104\1\0\1\104\1\164\1\0\5\104\1\u012a"+
    "\34\104\1\0\1\104\1\164\1\0\16\104\1\u012b\22\104"+
    "\1\111\1\0\2\111\2\0\4\111\1\u012c\34\111\1\0"+
    "\2\111\2\0\7\111\1\u012d\31\111\1\0\2\111\2\0"+
    "\4\111\1\u012e\34\111\1\0\2\111\2\0\15\111\1\u012f"+
    "\22\111\12\201\1\u0130\21\201\1\264\26\201\1\u0131\16\201"+
    "\1\264\23\201\1\u0132\21\201\1\264\34\201\1\u0133\10\201"+
    "\1\264\11\201\1\200\2\201\1\200\2\201\3\200\1\u0134"+
    "\13\200\1\201\2\200\2\201\1\200\1\201\1\206\12\200"+
    "\2\201\1\200\2\201\10\200\1\u0135\6\200\1\201\2\200"+
    "\2\201\1\200\1\201\1\206\12\200\2\201\1\200\2\201"+
    "\15\200\1\u0136\1\200\1\201\2\200\2\201\1\200\1\201"+
    "\1\206\11\200\1\27\2\0\1\27\2\0\17\27\1\0"+
    "\2\27\2\0\1\27\1\0\3\27\1\u0137\7\27\2\0"+
    "\1\27\2\0\2\27\1\u0138\14\27\1\0\2\27\2\0"+
    "\1\27\1\0\13\27\2\0\1\27\2\0\7\27\1\u0139"+
    "\7\27\1\0\2\27\2\0\1\27\1\0\13\27\2\0"+
    "\1\27\2\0\2\27\1\u013a\14\27\1\0\2\27\2\0"+
    "\1\27\1\0\13\27\2\0\1\27\2\0\17\27\1\0"+
    "\2\27\2\0\1\27\1\0\3\27\1\u013b\7\27\2\0"+
    "\1\27\2\0\2\27\1\u013c\14\27\1\0\2\27\2\0"+
    "\1\27\1\0\12\27\11\0\1\u013d\52\0\1\u013e\52\0"+
    "\1\u013f\22\0\1\27\2\0\1\27\2\0\3\27\1\u0140"+
    "\13\27\1\0\2\27\2\0\1\27\1\0\13\27\2\0"+
    "\1\27\2\0\10\27\1\u0141\6\27\1\0\2\27\2\0"+
    "\1\27\1\0\13\27\2\0\1\27\2\0\15\27\1\u0142"+
    "\1\27\1\0\2\27\2\0\1\27\1\0\12\27\1\70"+
    "\1\0\1\70\1\157\1\0\4\70\1\u0143\35\70\1\0"+
    "\1\70\1\157\1\0\11\70\1\u0144\30\70\1\0\1\70"+
    "\1\157\1\0\16\70\1\u0145\22\70\1\104\1\0\1\104"+
    "\1\164\1\0\4\104\1\u0146\35\104\1\0\1\104\1\164"+
    "\1\0\11\104\1\u0147\30\104\1\0\1\104\1\164\1\0"+
    "\16\104\1\u0148\22\104\1\111\1\0\2\111\2\0\3\111"+
    "\1\u0149\35\111\1\0\2\111\2\0\10\111\1\u014a\30\111"+
    "\1\0\2\111\2\0\15\111\1\u014b\22\111\11\201\1\u014c"+
    "\22\201\1\264\27\201\1\u014d\15\201\1\264\34\201\1\u014e"+
    "\10\201\1\264\11\201\1\200\2\201\1\200\2\201\7\200"+
    "\1\u014f\7\200\1\201\2\200\2\201\1\200\1\201\1\206"+
    "\11\200\1\27\2\0\1\27\2\0\2\27\1\u0150\14\27"+
    "\1\0\2\27\2\0\1\27\1\0\13\27\2\0\1\27"+
    "\2\0\2\27\1\u0151\14\27\1\0\2\27\2\0\1\27"+
    "\1\0\13\27\2\0\1\27\2\0\2\27\1\u0152\14\27"+
    "\1\0\2\27\2\0\1\27\1\0\12\27\15\0\1\u0153"+
    "\30\0\1\27\2\0\1\27\2\0\7\27\1\u0154\7\27"+
    "\1\0\2\27\2\0\1\27\1\0\12\27\1\70\1\0"+
    "\1\70\1\157\1\0\10\70\1\u0155\30\70\1\104\1\0"+
    "\1\104\1\164\1\0\10\104\1\u0156\30\104\1\111\1\0"+
    "\2\111\2\0\7\111\1\u0157\30\111\15\201\1\u0158\16\201"+
    "\1\264\11\201\1\200\2\201\1\200\2\201\11\200\1\u0159"+
    "\5\200\1\201\2\200\2\201\1\200\1\201\1\206\11\200"+
    "\17\0\1\u015a\26\0\1\27\2\0\1\27\2\0\11\27"+
    "\1\u015b\5\27\1\0\2\27\2\0\1\27\1\0\12\27"+
    "\1\70\1\0\1\70\1\157\1\0\12\70\1\u015c\26\70"+
    "\1\104\1\0\1\104\1\164\1\0\12\104\1\u015d\26\104"+
    "\1\111\1\0\2\111\2\0\11\111\1\u015e\26\111\17\201"+
    "\1\u015f\14\201\1\264\11\201";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10716];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\20\0\2\1\4\0\12\1\1\11\21\1\1\11\3\1"+
    "\1\11\11\1\1\11\16\1\1\11\2\1\1\11\22\1"+
    "\1\0\1\11\5\1\1\0\1\1\1\0\2\1\3\0"+
    "\3\1\1\0\4\1\1\0\1\1\1\0\1\1\1\0"+
    "\22\1\1\11\3\1\4\0\24\1\4\0\1\11\25\1"+
    "\4\0\21\1\4\0\22\1\4\0\21\1\4\0\16\1"+
    "\2\0\1\11\1\0\20\1\2\0\1\1\1\0\11\1"+
    "\1\11\1\0\1\11\15\1\1\0\5\1\1\0\4\1"+
    "\1\0\1\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MakefileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MakefileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall though
        case '\u000C':  // fall though
        case '\u0085':  // fall though
        case '\u2028':  // fall though
        case '\u2029':  // fall though
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case PREREQUISITES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 352: break;
            case INCLUDES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 353: break;
            case EXPORT: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 354: break;
            case EXPORTVAR: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 355: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return FUNCTION_PARAM_TEXT;
            } 
            // fall through
          case 49: break;
          case 2: 
            { return IDENTIFIER;
            } 
            // fall through
          case 50: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 51: break;
          case 4: 
            { return COMMENT;
            } 
            // fall through
          case 52: break;
          case 5: 
            { yybegin(PREREQUISITES); return COLON;
            } 
            // fall through
          case 53: break;
          case 6: 
            { yybegin(SOURCE); return ASSIGN;
            } 
            // fall through
          case 54: break;
          case 7: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 55: break;
          case 8: 
            { yybegin(SOURCE); return TAB;
            } 
            // fall through
          case 56: break;
          case 9: 
            { yybegin(YYINITIAL); return EOL;
            } 
            // fall through
          case 57: break;
          case 10: 
            { return COLON;
            } 
            // fall through
          case 58: break;
          case 11: 
            { yybegin(SOURCE); return SEMICOLON;
            } 
            // fall through
          case 59: break;
          case 12: 
            { return PIPE;
            } 
            // fall through
          case 60: break;
          case 13: 
            { yypushback(yylength()); yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 61: break;
          case 14: 
            { return LINE;
            } 
            // fall through
          case 62: break;
          case 15: 
            { yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 63: break;
          case 16: 
            { yybegin(DEFINEBODY); return WHITE_SPACE;
            } 
            // fall through
          case 64: break;
          case 17: 
            { return ASSIGN;
            } 
            // fall through
          case 65: break;
          case 18: 
            { return VARIABLE_VALUE_LINE;
            } 
            // fall through
          case 66: break;
          case 19: 
            { yybegin(YYINITIAL); return CONDITION;
            } 
            // fall through
          case 67: break;
          case 20: 
            { yybegin(YYINITIAL); return FUNCTION_END;
            } 
            // fall through
          case 68: break;
          case 21: 
            { yybegin(EXPORTVAR); return ASSIGN;
            } 
            // fall through
          case 69: break;
          case 22: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 70: break;
          case 23: 
            { yybegin(PREREQUISITES); return DOUBLECOLON;
            } 
            // fall through
          case 71: break;
          case 24: 
            { return SPLIT;
            } 
            // fall through
          case 72: break;
          case 25: 
            { return DOUBLECOLON;
            } 
            // fall through
          case 73: break;
          case 26: 
            { return VARIABLE_USAGE;
            } 
            // fall through
          case 74: break;
          case 27: 
            { return MACRO;
            } 
            // fall through
          case 75: break;
          case 28: 
            { yybegin(ELSE); return KEYWORD_ELSE;
            } 
            // fall through
          case 76: break;
          case 29: 
            { yybegin(CONDITIONALS); return KEYWORD_IFEQ;
            } 
            // fall through
          case 77: break;
          case 30: 
            { return KEYWORD_ENDIF;
            } 
            // fall through
          case 78: break;
          case 31: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNEQ;
            } 
            // fall through
          case 79: break;
          case 32: 
            { yybegin(CONDITIONALS); return KEYWORD_IFDEF;
            } 
            // fall through
          case 80: break;
          case 33: 
            { yybegin(INCLUDES); return KEYWORD_VPATH;
            } 
            // fall through
          case 81: break;
          case 34: 
            { yybegin(YYINITIAL); return KEYWORD_ENDEF;
            } 
            // fall through
          case 82: break;
          case 35: 
            { yybegin(FUNCTION); return FUNCTION_INFO;
            } 
            // fall through
          case 83: break;
          case 36: 
            { yybegin(EXPORT); return KEYWORD_EXPORT;
            } 
            // fall through
          case 84: break;
          case 37: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNDEF;
            } 
            // fall through
          case 85: break;
          case 38: 
            { yybegin(DEFINE); return KEYWORD_DEFINE;
            } 
            // fall through
          case 86: break;
          case 39: 
            { yybegin(YYINITIAL); return KEYWORD_EXPORT;
            } 
            // fall through
          case 87: break;
          case 40: 
            { yybegin(FUNCTION); return FUNCTION_ERROR;
            } 
            // fall through
          case 88: break;
          case 41: 
            { yybegin(FUNCTION); return FUNCTION_SHELL;
            } 
            // fall through
          case 89: break;
          case 42: 
            { yybegin(INCLUDES); return KEYWORD_INCLUDE;
            } 
            // fall through
          case 90: break;
          case 43: 
            { return KEYWORD_PRIVATE;
            } 
            // fall through
          case 91: break;
          case 44: 
            { yybegin(YYINITIAL); return KEYWORD_PRIVATE;
            } 
            // fall through
          case 92: break;
          case 45: 
            { return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 93: break;
          case 46: 
            { yybegin(INCLUDES); return KEYWORD_UNDEFINE;
            } 
            // fall through
          case 94: break;
          case 47: 
            { yybegin(YYINITIAL); return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 95: break;
          case 48: 
            { yybegin(FUNCTION); return FUNCTION_WARNING;
            } 
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
