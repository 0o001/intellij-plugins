{
  parserClass = "name.kropp.intellij.makefile.MakefileParser"
  extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix = "Makefile"
  psiImplClassSuffix = "Impl"
  psiPackage = "name.kropp.intellij.makefile.psi"
  psiImplPackage = "name.kropp.intellij.makefile.psi.impl"

  elementTypeHolderClass = "name.kropp.intellij.makefile.psi.MakefileTypes"
  elementTypeClass = "name.kropp.intellij.makefile.psi.MakefileElementType"
  tokenTypeClass = "name.kropp.intellij.makefile.psi.MakefileTokenType"

  tokens = [
    COLON = ":"
    SEMICOLON = ";"
    ASSIGN = "="
    PIPE = "|"
    KEYWORD_INCLUDE = "include"
    KEYWORD_IFEQ = "ifeq"
    KEYWORD_IFNEQ = "ifneq"
    KEYWORD_IFNDEF = "ifndef"
    KEYWORD_ELSE = "else"
    KEYWORD_ENDIF = "endif"
    KEYWORD_ENDEF = "endef"
    KEYWORD_DEFINE = "define"
    KEYWORD_UNDEFINE = "undefine"
    KEYWORD_OVERRIDE = "override"
    KEYWORD_EXPORT = "export"
  ]

  psiImplUtilClass = "name.kropp.intellij.makefile.psi.MakefilePsiImplUtil"
}

makefile ::= (rule|variable-assignment|directive|comment)*

private directive ::= define|include|undefine|override|export

rule ::= target_line (';' EOL? | EOL) recipe
recipe ::= (conditional|commands)?

target_line ::= targets ':' prerequisites {pin=2 methods=[getTargetName]}
targets ::= target+
target ::= identifier {mixin="name.kropp.intellij.makefile.psi.impl.MakefileNamedElementImpl" implements="name.kropp.intellij.makefile.psi.MakefileNamedElement" methods=[getName setName getNameIdentifier]}

prerequisites ::= normal_prerequisites ('|' order_only_prerequisites)?
normal_prerequisites ::= prerequisite*
order_only_prerequisites ::= prerequisite+
prerequisite ::= identifier {mixin="name.kropp.intellij.makefile.psi.impl.MakefilePrerequisiteMixin"}

commands ::= command*

conditional ::= ('ifeq'|'ifneq'|'ifndef') condition thenbranch ('else' elsebranch)* 'endif'

thenbranch ::= commands
elsebranch ::= commands

meta variable-assignment ::= variable assignment variable-value? {pin=2}
private assignment ::= ('='|':='|'::='|'?='|'!='|'+=')
variable ::= identifier
define ::= 'define' variable assignment? variable-value-line* 'endef' {pin=1 methods=[getAssignment getValue]}
undefine ::= 'undefine' variable EOL
override ::= 'override' variable-assignment
export ::= 'export' (variable-assignment|variable)?

include ::= ('include'|'-include'|'sinclude') filename+ EOL
filename ::= identifier {mixin="name.kropp.intellij.makefile.psi.impl.MakefileFilenameMixin"}