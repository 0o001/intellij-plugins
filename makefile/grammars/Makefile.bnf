{
  parserClass = "name.kropp.intellij.makefile.MakefileParser"
  extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix = "Makefile"
  psiImplClassSuffix = "Impl"
  psiPackage = "name.kropp.intellij.makefile.psi"
  psiImplPackage = "name.kropp.intellij.makefile.psi.impl"

  elementTypeHolderClass = "name.kropp.intellij.makefile.psi.MakefileTypes"
  elementTypeClass = "name.kropp.intellij.makefile.psi.MakefileElementType"
  tokenTypeClass = "name.kropp.intellij.makefile.psi.MakefileTokenType"

  tokens = [
    COLON = ":"
    ASSIGN = "="
  ]

  psiImplUtilClass = "name.kropp.intellij.makefile.psi.MakefilePsiImplUtil"
}

makefile ::= (rule|variable|include|conditional|comment)*

rule ::= target_line EOL (commands|conditional)?

target_line ::= target ':' dependencies {pin=2 methods=[getTargetName]}
target ::= identifier {mixin="name.kropp.intellij.makefile.psi.impl.MakefileNamedElementImpl" implements="name.kropp.intellij.makefile.psi.MakefileNamedElement" methods=[getName setName getNameIdentifier]}

dependencies ::= dependency*
dependency ::= identifier {mixin="name.kropp.intellij.makefile.psi.impl.MakefileDependencyMixin"}

commands ::= command*

conditional ::= ifeq condition thenbranch else_ EOL elsebranch endif

ifeq ::= 'ifeq'
else_ ::= 'else'
endif ::= 'endif'
thenbranch ::= commands
elsebranch ::= commands

variable ::= variable_name ('='|':='|'::='|'?='|'!='|'+=') variable_value? EOL {pin=2}
variable_name ::= identifier

include ::= 'include' filename