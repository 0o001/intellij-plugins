{
  parserClass = "name.kropp.intellij.makefile.MakefileParser"
  parserUtilClass = "name.kropp.intellij.makefile.MakefileParserUtil"
  extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix = "Makefile"
  psiImplClassSuffix = "Impl"
  psiPackage = "name.kropp.intellij.makefile.psi"
  psiImplPackage = "name.kropp.intellij.makefile.psi.impl"

  elementTypeHolderClass = "name.kropp.intellij.makefile.psi.MakefileTypes"
  elementTypeClass = "name.kropp.intellij.makefile.psi.MakefileElementType"
  tokenTypeClass = "name.kropp.intellij.makefile.psi.MakefileTokenType"

  tokens = [
    TAB = "\t"
    COLON = ":"
    DOUBLECOLON = "::"
    SEMICOLON = ";"
    COMMA = ","
    ASSIGN = "="
    PIPE = "|"

    DOLLAR = "$"
    OPEN_PAREN = "("
    CLOSE_PAREN = ")"
    OPEN_CURLY = "{"
    CLOSE_CURLY = "}"

    KEYWORD_INCLUDE = "include"
    KEYWORD_IFEQ = "ifeq"
    KEYWORD_IFNEQ = "ifneq"
    KEYWORD_IFDEF = "ifdef"
    KEYWORD_IFNDEF = "ifndef"
    KEYWORD_ELSE = "else"
    KEYWORD_ENDIF = "endif"
    KEYWORD_ENDEF = "endef"
    KEYWORD_DEFINE = "define"
    KEYWORD_UNDEFINE = "undefine"
    KEYWORD_OVERRIDE = "override"
    KEYWORD_EXPORT = "export"
    KEYWORD_PRIVATE = "private"
    KEYWORD_VPATH = "vpath"
  ]

  psiImplUtilClass = "name.kropp.intellij.makefile.psi.MakefilePsiImplUtil"
}

makefile ::= any*

private any ::= (conditional|rule|command|variable-assignment|directive|function|macro|EOL)

private recover ::= !(EOL | split)

directive ::= define|include|undefine|override|export|privatevar|vpath

rule ::= target_line recipe? {methods=[getTargets]}
recipe ::= (command|conditional)+ (command|conditional|EOL)* {methods=[isEmpty] implements=["com.intellij.psi.PsiLanguageInjectionHost"] mixin="name.kropp.intellij.makefile.psi.impl.MakefileRecipeElementImpl"}
command ::= '\t'+ multiline EOL? {pin=1}
inline_command ::= multiline
private multiline ::= split* line (split+ line)*
private line ::= <<parseLine>>
private defline ::= <<parseLineNotEndef>>

target_line ::= targets (':'|'::') (target_pattern ':')? (exportvar|override|privatevar|variable-assignment|prerequisites (';' inline_command?)? EOL?) {pin=2 methods=[getTargetName]}
targets ::= target+
target ::= identifier|function-name|function|variable-usage {mixin="name.kropp.intellij.makefile.psi.impl.MakefileNamedElementImpl" implements=["name.kropp.intellij.makefile.psi.MakefileNamedElement" "com.intellij.navigation.NavigationItem"] stubClass="name.kropp.intellij.makefile.stub.MakefileTargetStubElement"   elementTypeFactory="name.kropp.intellij.makefile.stub.MakefileTargetStubElementType.getInstance" methods=[getName setName getNameIdentifier getPresentation isSpecialTarget isPatternTarget matches getDocComment]}

target_pattern ::= identifier

prerequisites ::= normal_prerequisites ('|' order_only_prerequisites)?
normal_prerequisites ::= prerequisite* (split prerequisite*)*
order_only_prerequisites ::= prerequisite* (split prerequisite*)*
prerequisite ::= identifier|variable-usage|function {mixin="name.kropp.intellij.makefile.psi.impl.MakefilePrerequisiteMixin" methods=[updateText isPhonyTarget]}

private condition-recover ::= !'endif'
private conditional-keyword ::= ('ifeq'|'ifneq'|'ifdef'|'ifndef')
conditional ::= conditional-keyword condition EOL block conditional-else* 'endif' {pin=1}
conditional-else ::= 'else' (conditional-keyword condition block | EOL? block) {pin=1}
condition ::= ('(' (condition-body|',')* ')') | condition-body condition-body?
private condition-body ::= identifier|variable-usage|function|string
block ::= any*

identifier ::= (chars|function-name|directive)+
meta variable-assignment ::= variable assignment variable-value {pin=2 methods=[getAssignment getValue]}
private assignment ::= ('='|':='|'::='|'?='|'!='|'+=')
variable ::= identifier
meta variable-value ::= multiline
define ::= 'define' variable assignment? EOL (defline EOL)* 'endef' {pin=1 methods=[getAssignment getValue]}
undefine ::= 'undefine' variable EOL? {pin=1}
override ::= 'override' (undefine|variable-assignment) {pin=1}
export ::= 'export' (variable-assignment|variable)? EOL? {pin=1}
private exportvar ::= 'export' variable-assignment {pin=1}
privatevar ::= 'private' variable-assignment {pin=1}

include ::= ('include'|'-include'|'sinclude') (filename|variable-usage)+ EOL? {pin=1}
filename ::= identifier {mixin="name.kropp.intellij.makefile.psi.impl.MakefileFilenameMixin"}

vpath ::= 'vpath' (pattern directory*)? EOL? {pin=1}
pattern ::= identifier
directory ::= identifier|'include' {mixin="name.kropp.intellij.makefile.psi.impl.MakefileFilenameMixin"}

private function-recover ::= !( ')' | EOL )
function ::= '$' '(' function-name function-param* ')'
function-name ::= ('error'|'warning'|'info'|'shell'|'subst'|'patsubst'|'strip'|'findstring'|
                    'filter'|'filter-out'|'sort'|'word'|'wordlist'|'words'|'firstword'|'lastword'|'dir'|'notdir'|'suffix'|
                    'basename'|'addsuffix'|'addprefix'|'join'|'wildcard'|'realpath'|'abspath'|'if'|'or'|'and'|
                    'foreach'|'file'|'call'|'value'|'eval'|'origin'|'flavor'|'guile')
meta function-param ::= (string|'$''$'|variable-usage|chars|','|'|'|function-name|function|assignment|':'|';'|split)+ {recoverWhile=function-recover}

variable-usage ::= ('$''(' <<parseVariableUsageParen>>) | ('$''{' <<parseVariableUsageCurly>>)

comment ::=
doc_comment ::=