package com.intellij.coldFusion

import com.intellij.codeInsight.completion.CompletionType
import com.intellij.openapi.vfs.VirtualFile
import com.intellij.sql.completion.SqlCompletionTestCase
import com.intellij.sql.datasource.SqlDataSourceTestCase
import com.intellij.sql.dialects.SqlDialectMappings
import com.intellij.sql.dialects.SqlLanguageDialect
import com.intellij.sql.dialects.sqlite.SqliteDialect
import com.intellij.sql.psi.SqlLanguage
import com.intellij.util.FileContentUtil

/**
 * SQL injection completion tests for CFML without using data from datasource. Assuming that it is necessary to test only one of dialects, so let's take SQL92 for example.  Original tests and data are got from {@link com.intellij.sql.completion.AllSqlCompletionTest}
 *
 * @author Sergey Karashevich
 */
class CfmlSqlInjectionCompletionDatasourceTest : SqlCompletionTestCase(null) {

  val CFML_QUERY_TEMPLATE = "<cfquery><insert></cfquery>"

  override fun getTestDataPath(): String = CfmlTestUtil.BASE_TEST_DATA_PATH + basePath

  override fun getBasePath() = "/injection"


  fun testCompletionFromDataSource() {
    //this object needed just for data source creation
    object: SqlDataSourceTestCase() {
      fun create() {
        this.myFixture = this@CfmlSqlInjectionCompletionDatasourceTest.myFixture
        createDataSource(SqliteDialect.INSTANCE, "Sqlite.create.ddl")
      }
    }.create()
    doTestVariants("select * from <caret>", CompletionType.BASIC, 1, SqlCompletionTestCase.MatchType.CONTAINS, "autogenerated_author")
  }

  override fun doTestVariants(sql: String,
                              type: CompletionType,
                              count: Int,
                              matchType: SqlCompletionTestCase.MatchType,
                              vararg variants: String): Unit {
    val dialect = SqlLanguage.INSTANCE.dialects.find { it.id == "SQL92" }
    SqlDialectMappings.getInstance(project).setMapping(null, dialect as SqlLanguageDialect)
    val file = myFixture.file
    if (file != null) FileContentUtil.reparseFiles(project, listOf<VirtualFile>(file.virtualFile), false)
    println(javaClass.simpleName + "." + getTestName(true) + ": " + dialect.getID())
    configureByTemplate(CFML_QUERY_TEMPLATE, sql)
    doTestVariantsInner(type, count, matchType, *variants)
  }

  private fun configureByTemplate(cfmlTemplate: String, sqlInjection: String) {
    val CFML_FILE_TEXT = cfmlTemplate.replace("<insert>", sqlInjection)
    myFixture.configureByText("a.cfml", CFML_FILE_TEXT)
  }

}
