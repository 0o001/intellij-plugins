1
// если родитель динамический, то значит аллоцированный id относительно не root scope (в котором будет осущеcтвляться чтение на клиенте), поэтому мы должны создать StaticInstanceReferenceInDeferredParentInstance
// (то есть в root scope по аллоцированному id будет находиться не сам объект, а объект-ссылка (StaticInstanceReferenceInDeferredParentInstance это mx.core.ITransientDeferredInstance) на него)

2
// pendingFirstSetProperty нужен только и только на момент чтения атрибутов — то есть его значение актуально только на момент чтения атрибутов объекта
    // и не может существовать в один момент времени несколько его значений — мы можем спокойно иметь его как поле объекта, а не в контексте.
    // Необходимость его вызвана тем, что на момент чтения атрибута вида gap.B="3" мы еще не знаем, динамический или статический объект (так как атрибуты includeIn/excludeFrom могут быть определены после),
    // если объект в итоге динамический — то соответствующий AddItems осуществляет writeStaticInstanceReferenceInDeferredParentInstance (для pendingFirstSetProperty аллоцирован id — мы должны записать помимо собственно ссылки, сам объект), иначе же мы тут проверяем,
    // должны ли мы для этого аллоцированного id создавать StaticInstanceReferenceInDeferredParentInstance — если родитель объекта является динамическим, то да, должны.
    
3
// если контекст статический (а это так, раз вызван этот метод) и pendingFirstSetProperty равен null
      // (то есть не было вообще никаких state specific attributes (раз контекст статический, значит pendingFirstSetProperty не обнулялось в includeIn)),
      // то значит аллоцирование id было вызвано выражением биндинга в каком-либо атрибуте 
      
      4
      // для flex 4.5 мы можем размещать наши классы сразу после StyleProtoChain, но для 4.1 (из него еще не вынесли mx.swc) не можем — CSSStyleDeclaration определяется позже, поэтому мы размещаем как раз после него
            // в то же время располагать после CSSStyleDeclaration для 4.5 мы не можем, поэтому место инжектирования зависит от версии flex sdk
            
4

/* мы не можем знать, есть ли у объекта атрибуты includeIn/excludeFrom, поэтому мы для первого (1: title.A="dd" 2: title.B="dfsdfsdf") ничего не ставим, а для второго и последующих
  аллоцируем reference от рута — если это static object в root scope, то он и возьмет этот id, а если это static object в dynamic object scope — то мы этот id используем для StaticInstanceReferenceInDeferredParentInstance,
  id которого всегда в root scope */

5

/**
   * Если для свойства нет дескриптора (FlexCssPropertyDescriptor), то это означает:
   * 1) свойство устарело, но его забыли убрать из CSS файла
   * 2) разработчик компонента поленился писать аннотацию свойства
   * 3) проблемы IDEA
   * Третий вариант не рассматриваем, отличить первый от второго мы не можем.
   * Проигнорировать свойство нельзя — поэтому мы на основе общего механизма CssTerm пытаемся понять, какой тип имеет свойство
   */

7
/**
   * not legal case for flex
   * А вообще нельзя такое иметь. Нельзя. Потому что CodeContext, собирающий манифесты, при ModuleOrderEntry берет из такого модуля только и только манифесты во flex-config, но не смотрит на exportable lib
   * А во Flex SDK есть такая вот порнография — http://juick.com/develar/1217004 — Поэтому это может быть причиной мистических ошибок (ComboBase не будет квалифицирован, то есть как и что будет в runtime, непредсказуемо).
   */
   
8

//  AnchorStyles также как свойства в UICOmponent, то есть их descriptor.getTypeName() будет не FlexAnnotationNames.STYLE, а Function

9

// при проигрывании эффекта получается так, что приложение начинает изменять свои размеры — как бы расползается. Это происходит так как spark Application подвешивается на stage resize. 
    // Во избежание этого, мы устанавливаем размер для документа не как setActualSize, а как explicit size (в этом случае Application не подвешивается). 
    // Исправить саму реализацию Application мы можем, так как для этого нужно инжектировать байт-код — проще так сделать.