// this script should be executed *after* project compiled, as it uses classes of 'flex-ui-designer' module

// this is called to build artifacts to be used when running from sources
target('default': "Build Flex UI Designer artifacts") {
  home = guessHome(this)
  home = "$home/../../.."; // IDEA\flex\tools\flex-ui-designer is detected
  doExecute("$home", "$home/out", "$home/out/classes/production/flex-ui-designer")
}

binding.setVariable("includeFile", {String filepath ->
  Script s = groovyShell.parse(new File(filepath))
  s.setBinding(binding)
  s
})

def guessHome(Script script) {
  File home = new File(script["gant.file"].substring("file:".length()))

  while (home != null) {
    if (home.isDirectory()) {
      if (new File(home, ".idea").exists()) return home.getCanonicalPath()
    }
    home = home.getParentFile()
  }
  return null
}

def execute(home, sandbox, targetFolder) {
  if (isDefined("pluginFilter")) {
    if (!pluginFilter.contains("flex-ui-designer")) return
  }
  project.stage("building Flex library for flex-ui-designer plugin")
  doExecute(home, sandbox, targetFolder)
}

class SwfDescriptor {
  String config;
  String basedir;
  boolean isSwc;

  SwfDescriptor(String config, String basedir, boolean isSwc) {
    this.config = config;
    this.basedir = basedir;
    this.isSwc = isSwc;
  }
}


private def doExecute(home, sandbox, targetFolder) {
  flexBuildHome = "$home/flex/tools/flex-ui-designer/build-gant";
  flexSandbox = "$sandbox/ui-designer"

  ant.delete(dir: "$flexSandbox")
  ant.mkdir(dir: "$flexSandbox")

  ant.copy(toDir: "$flexSandbox/repo", overwrite: "true") {
    fileset(dir: "$flexBuildHome/../lib")
  }

  List<SwfDescriptor> swfDescriptors = includeFile("$flexBuildHome/flex_ui_designer_swfs_build.gant").getList();
  swfDescriptors.each {
    if (it.config.startsWith("flex-injection-") || it.config.equals("shared.xml")) {
      buildFlex(it.config, it.basedir, flexBuildHome, flexSandbox, it.isSwc)
    }
  };

  buildAssets()

  swfDescriptors.each {
    if (!it.config.startsWith("flex-injection-") && !it.config.equals("shared.xml")) {
      buildFlex(it.config, it.basedir, flexBuildHome, flexSandbox, it.isSwc);
    }
  };

  ant.copy(file: "$flexSandbox/main-loader-1.0-SNAPSHOT.swf", tofile: "$targetFolder/designer.swf")
  ant.copy(file: "$flexBuildHome/../main/resources/descriptor.xml", todir: "$targetFolder")
  ant.copy(todir: "$targetFolder") {
    fileset(dir: "$flexSandbox", includes: "**/*injection-*.swc")
  }
}

private def buildAssets() {
  ant.java(className: "org.flyti.assetBuilder.AssetBuilderMojo", fork: "true", failOnError: "true") {
    classpath {
      pathelement(path: "$flexBuildHome/libs/asset-builder-maven-plugin-1.4-SNAPSHOT.jar")
      pathelement(path: "$flexBuildHome/libs/snakeyaml-1.8-s2.jar")
      pathelement(path: "$flexBuildHome/libs/plexus-utils-2.0.6.jar")
      pathelement(path: "$flexBuildHome/libs/jai-core-1.1.3.jar")
      pathelement(path: "$flexBuildHome/libs/jai-codec-1.1.3.jar")
      pathelement(path: "$home/community/plugins/maven/maven2-server-impl/lib/maven-2.2.1-uber.jar")
    }
    arg(value: "$flexBuildHome/../plaf/aqua/resources/assets.yml") // descriptor
    arg(value: "$flexSandbox/assets") // output file
    arg(value: "$flexBuildHome/../plaf/aqua/resources") // sources
  }
}

def buildFlex(config, basedir, flexBuildHome, flexSandbox, isSwc) {
  ant.copy(file: "$flexBuildHome/flex-configs/${config}", toDir: "$flexSandbox", overwrite: "true")

  ant.replace(file: "$flexSandbox/${config}") {
    replacefilter(token: "@@target@@", value: "$flexSandbox")
    replacefilter(token: "@@baseDir@@", value: "$flexBuildHome/../$basedir")
    replacefilter(token: "@@repo@@", value: "$flexSandbox/repo")
    replacefilter(token: "@@configs@@", value: "$flexBuildHome/flex-configs")
  }

  ant.java(className: "${isSwc ? "flex2.tools.Compc" : "flex2.tools.Mxmlc"}", fork: "true", failOnError: "true") {
    jvmarg(value: "-Dsun.io.useCanonCaches=false")
    jvmarg(value: "-Duser.language=en")
    jvmarg(value: "-Duser.region=en")
    jvmarg(value: "-Dflex.swf.uncompressed=true")
    classpath {
      fileset(dir: "$flexBuildHome/compiler-libs");
    }
    arg(value: "-load-config=$flexSandbox/${config}")
  }
}
