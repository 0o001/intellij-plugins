package com.intellij.flex.uiDesigner;

import com.intellij.facet.FacetManager;
import com.intellij.lang.javascript.flex.AutogeneratedLibraryUtils;
import com.intellij.lang.javascript.flex.FlexFacet;
import com.intellij.lang.javascript.flex.sdk.AirSdkType;
import com.intellij.lang.javascript.flex.sdk.FlexSdkType;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.projectRoots.Sdk;
import com.intellij.openapi.projectRoots.SdkType;
import com.intellij.openapi.roots.*;
import com.intellij.openapi.util.Key;
import com.intellij.openapi.vfs.JarFileSystem;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.util.Consumer;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.List;

public class LibraryCollector {
  private final List<OriginalLibrary> externalLibraries = new ArrayList<OriginalLibrary>();
  private static final Key<OriginalLibrary> LIBRARY = Key.create("FUD_LIBRARY");

  // user can set flex sdk and autogenerated sdk for facet simultaneous, so we prevent duplicates in externalLibraries
  private boolean flexSdkRegistered = false;
  private String flexSdkVersion;
  
  public List<OriginalLibrary> getExternalLibraries() {
    return externalLibraries;
  }

  public String getFlexSdkVersion() {
    return flexSdkVersion;
  }
  
  public static @NotNull OriginalLibrary createOriginalLibrary(@NotNull final VirtualFile virtualFile, @NotNull final VirtualFile jarFile, @NotNull final Consumer<OriginalLibrary> initializer, boolean fromSdk) {
    final String path = virtualFile.getPath();
    OriginalLibrary library = jarFile.getUserData(LIBRARY);
    if (library == null) {
      library = new OriginalLibrary(virtualFile.getNameWithoutExtension() + "." + Integer.toHexString(path.hashCode()), jarFile, fromSdk);
      jarFile.putUserData(LIBRARY, library);
      initializer.consume(library);
    }

    return library;
  }
  
  static void clearCache(VirtualFile jarFile) {
    assert ApplicationManager.getApplication().isUnitTestMode();
    jarFile.putUserData(LIBRARY, null);
  }

  // flex.swc is only aggregation library
  private static boolean isAutomationOrUselessLibrary(String libFileName) {
    return libFileName.startsWith("qtp") || libFileName.startsWith("automation") || libFileName.equals("flex.swc") 
            || libFileName.equals("servicemonitor.swc")  /* aircore contains all classes */
            || libFileName.equals("utilities.swc")  /* flex sdk 4.1 */
            || libFileName.equals("core.swc") /* hero (4.5) aggregation library */;
  }

  private static boolean isGlobalLibrary(String libFileName) {
    return libFileName.startsWith("airglobal") || libFileName.startsWith("playerglobal");
  }

  private static @Nullable VirtualFile getRealFileIfSwc(final VirtualFile jarFile) {
    if (jarFile.getFileSystem() instanceof JarFileSystem) {
      VirtualFile file = JarFileSystem.getInstance().getVirtualFileForJar(jarFile);
      if (file != null && !file.isDirectory() && "swc".equals(file.getExtension()) && !isGlobalLibrary(file.getName())) {
        return file;
      }
    }

    return null;
  }

  public List<OriginalLibrary> collect(Module module, Consumer<OriginalLibrary> initializer) {
    Sdk flexSdk = null;
    for (OrderEntry o : ModuleRootManager.getInstance(module).getOrderEntries()) {
      final DependencyScope scope = (o instanceof ExportableOrderEntry) ? ((ExportableOrderEntry) o).getScope() : DependencyScope.COMPILE;
      // IDEA set incorrect scope for playerglobal/airglobal â€” must be runtime, so it is meaningless check
      if (scope == DependencyScope.RUNTIME || scope == DependencyScope.TEST) {
        continue;
      }

      if (o instanceof LibraryOrderEntry) {
        collectFromLibraryOrderEnrty((LibraryOrderEntry) o, initializer);
      }
      else if (!flexSdkRegistered && o instanceof JdkOrderEntry) {
        final JdkOrderEntry jdkOrderEntry = ((JdkOrderEntry) o);
        SdkType sdkType = jdkOrderEntry.getJdk().getSdkType();
        if (sdkType instanceof FlexSdkType || sdkType instanceof AirSdkType) {
          flexSdk = jdkOrderEntry.getJdk();
          for (VirtualFile jarFile : jdkOrderEntry.getRootFiles(OrderRootType.CLASSES)) {
            VirtualFile file = getRealFileIfSwc(jarFile);
            if (file != null && !isAutomationOrUselessLibrary(file.getName())) {
              externalLibraries.add(createOriginalLibrary(file, jarFile, initializer, true));
            }
          }

          flexSdkRegistered = true;
        }
      }
      else if (o instanceof ModuleOrderEntry) {
        collectLibrariesFromModuleDependency(((ModuleOrderEntry) o).getModule());
      }
    }

    // flexmojos module has Java as module jdk, so, grab flex sdk from facet
    if (flexSdk == null) {
      FlexFacet facet = FacetManager.getInstance(module).getFacetByType(FlexFacet.ID);
      assert facet != null;
      flexSdk = facet.getConfiguration().getFlexSdk();
      assert flexSdk != null;
    }

    flexSdkVersion = flexSdk.getVersionString();
    assert flexSdkVersion != null && flexSdkVersion.length() >= 3;
    flexSdkVersion = flexSdkVersion.substring(0, 3);

    return externalLibraries;
  }

  private void collectFromLibraryOrderEnrty(LibraryOrderEntry libraryOrderEntry, Consumer<OriginalLibrary> initializer) {
    final boolean isAutogeneratedLibrary = AutogeneratedLibraryUtils.isAutogeneratedLibrary(libraryOrderEntry);
    if (isAutogeneratedLibrary && flexSdkRegistered) {
      return;
    }

    for (VirtualFile jarFile : libraryOrderEntry.getRootFiles(OrderRootType.CLASSES)) {
      VirtualFile file = getRealFileIfSwc(jarFile);
      if (file != null && (!isAutogeneratedLibrary || !isAutomationOrUselessLibrary(file.getName()))) {
        externalLibraries.add(createOriginalLibrary(file, jarFile, initializer, isAutogeneratedLibrary));
      }
    }
  }

  // 7
  private void collectLibrariesFromModuleDependency(Module module) {
    for (OrderEntry o : ModuleRootManager.getInstance(module).getOrderEntries()) {
      if (!(o instanceof ExportableOrderEntry) || !((ExportableOrderEntry) o).isExported()) {
        continue;
      }

      final DependencyScope scope = ((ExportableOrderEntry) o).getScope();
      if (scope == DependencyScope.RUNTIME || scope == DependencyScope.TEST) {
        continue;
      }

      if (o instanceof LibraryOrderEntry) {
        FlexUIDesignerApplicationManager.LOG.error("exported lib in module dependency is prohibited");
      }
    }
  }
}