package com.intellij.flex.uiDesigner.libraries;

import com.intellij.facet.FacetManager;
import com.intellij.flex.uiDesigner.LogMessageUtil;
import com.intellij.lang.javascript.flex.AutogeneratedLibraryUtils;
import com.intellij.lang.javascript.flex.FlexFacet;
import com.intellij.lang.javascript.flex.FlexUtils;
import com.intellij.lang.javascript.flex.library.FlexLibraryType;
import com.intellij.lang.javascript.flex.projectStructure.model.FlexBuildConfigurationManager;
import com.intellij.lang.javascript.flex.projectStructure.model.FlexIdeBuildConfiguration;
import com.intellij.lang.javascript.flex.projectStructure.options.BCUtils;
import com.intellij.lang.javascript.flex.projectStructure.options.FlexProjectRootsUtil;
import com.intellij.lang.javascript.flex.sdk.AirMobileSdkType;
import com.intellij.lang.javascript.flex.sdk.AirSdkType;
import com.intellij.lang.javascript.flex.sdk.FlexSdkType;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.projectRoots.Sdk;
import com.intellij.openapi.projectRoots.SdkType;
import com.intellij.openapi.roots.*;
import com.intellij.openapi.roots.impl.libraries.LibraryEx;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.openapi.vfs.JarFileSystem;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.openapi.vfs.VirtualFileManager;
import com.intellij.util.Consumer;
import com.intellij.util.Function;
import com.intellij.util.PlatformUtils;
import com.intellij.util.containers.ContainerUtil;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.List;

public class LibraryCollector {
  final List<Library> externalLibraries = new ArrayList<Library>();
  final List<Library> sdkLibraries = new ArrayList<Library>();
  private final LibraryManager libraryManager;

  // user can set flex sdk and autogenerated sdk for facet simultaneous, so we prevent duplicates in externalLibraries
  private boolean flexSdkRegistered = false;
  private String flexSdkVersion;
  private Sdk flexSdk;

  public LibraryCollector(LibraryManager libraryManager) {
    this.libraryManager = libraryManager;
  }

  public String getFlexSdkVersion() {
    return flexSdkVersion;
  }

  public Sdk getFlexSdk() {
    return flexSdk;
  }

  private static boolean isAutomationOrUselessLibrary(String name) {
    return name.startsWith("qtp") || name.startsWith("automation")
           || name.equals("flex.swc") /* flex.swc is only aggregation library */
           || name.equals("servicemonitor.swc")  /* aircore contains all classes */
           || name.equals("utilities.swc")  /* flex sdk 4.1 */
           || name.equals("core.swc") /* hero (4.5) aggregation library */
           || name.equals("applicationupdater.swc") /* applicationupdater_ui contains all classes */
           || name.equals("flash-integration.swc") || name.equals("authoringsupport.swc");
  }

  private static boolean isGlobalLibrary(String libFileName) {
    return libFileName.startsWith("airglobal") || libFileName.startsWith("playerglobal");
  }

  private static
  @Nullable
  VirtualFile getRealFileIfSwc(final VirtualFile jarFile) {
    if (jarFile.getFileSystem() instanceof JarFileSystem) {
      VirtualFile file = JarFileSystem.getInstance().getVirtualFileForJar(jarFile);
      if (file != null && !file.isDirectory() && "swc".equals(file.getExtension()) && !isGlobalLibrary(file.getName())) {
        return file;
      }
    }

    return null;
  }

  public void collect(Module module, final Consumer<Library> initializer) {
    Sdk sdk = null;

    OrderEntry[] orderEntries = ModuleRootManager.getInstance(module).getOrderEntries();
    if (PlatformUtils.isFlexIde()) {
      final FlexIdeBuildConfiguration bc = FlexBuildConfigurationManager.getInstance(module).getActiveConfiguration();
      orderEntries = ContainerUtil.mapNotNull(orderEntries, new Function<OrderEntry, OrderEntry>() {
        @Override
        public OrderEntry fun(OrderEntry orderEntry) {
          if (orderEntry instanceof LibraryOrderEntry) {
            com.intellij.openapi.roots.libraries.Library library = ((LibraryOrderEntry)orderEntry).getLibrary();
            if (library == null || !(((LibraryEx)library).getType() instanceof FlexLibraryType) ||
                !FlexProjectRootsUtil.dependsOnLibrary(bc, library, false)) {
              return null;
            }
          }
          return orderEntry;
        }
      }, new OrderEntry[0]);

      if (!flexSdkRegistered) {
        if (!libraryManager.isSdkRegistered(sdk, module)) {
          Sdk sdkWrapper = FlexUtils.createFlexSdkWrapper(bc);
          if (sdkWrapper != null) {
            sdk = sdkWrapper;
            Function<VirtualFile, VirtualFile> f = new Function<VirtualFile, VirtualFile>() {
              @Override
              public VirtualFile fun(VirtualFile virtualFile) {
                String swcPath = VirtualFileManager.extractPath(StringUtil.trimEnd(virtualFile.getUrl(), JarFileSystem.JAR_SEPARATOR));
                return BCUtils.getSdkEntryLinkageType(swcPath, bc) != null ? virtualFile : null;
              }
            };
            VirtualFile[] roots = ContainerUtil.mapNotNull(sdk.getRootProvider().getFiles(OrderRootType.CLASSES), f, new VirtualFile[0]);
            collectFromSdkOrderEntry(roots, initializer);
            flexSdkRegistered = true;
          }
        }
      }
    }

    for (OrderEntry o : orderEntries) {
      final DependencyScope scope = (o instanceof ExportableOrderEntry) ? ((ExportableOrderEntry)o).getScope() : DependencyScope.COMPILE;
      if (scope == DependencyScope.RUNTIME || scope == DependencyScope.TEST) {
        continue;
      }

      if (o instanceof LibraryOrderEntry) {
        collectFromLibraryOrderEnrty((LibraryOrderEntry)o, initializer);
      }
      else if (!flexSdkRegistered && o instanceof JdkOrderEntry) {
        if (libraryManager.isSdkRegistered(sdk, module)) {
          continue;
        }

        final JdkOrderEntry jdkOrderEntry = ((JdkOrderEntry)o);
        SdkType sdkType = jdkOrderEntry.getJdk().getSdkType();
        if (sdkType instanceof FlexSdkType || sdkType instanceof AirSdkType || sdkType instanceof AirMobileSdkType) {
          sdk = jdkOrderEntry.getJdk();
          collectFromSdkOrderEntry(jdkOrderEntry.getRootFiles(OrderRootType.CLASSES), initializer);

          flexSdkRegistered = true;
        }
      }
      else if (o instanceof ModuleOrderEntry) {
        collectLibrariesFromModuleDependency(((ModuleOrderEntry)o).getModule());
      }
    }

    // flexmojos module has Java as module jdk, so, grab flex sdk from facet
    if (sdk == null) {
      FlexFacet facet = FacetManager.getInstance(module).getFacetByType(FlexFacet.ID);
      assert facet != null;
      sdk = facet.getConfiguration().getFlexSdk();
      assert sdk != null;
    }
    else {
      flexSdk = sdk;
    }

    flexSdkVersion = sdk.getVersionString();
    assert flexSdkVersion != null && flexSdkVersion.length() >= 3;
    flexSdkVersion = flexSdkVersion.substring(0, 3);
  }

  private void collectFromSdkOrderEntry(VirtualFile[] roots, Consumer<Library> initializer) {
    for (VirtualFile jarFile : roots) {
      VirtualFile file = getRealFileIfSwc(jarFile);
      if (file != null && !isAutomationOrUselessLibrary(file.getName()) && librarySwfExists(jarFile)) {
        sdkLibraries.add(libraryManager.createOriginalLibrary(file, jarFile, initializer));
      }
    }
  }

  private void collectFromLibraryOrderEnrty(LibraryOrderEntry libraryOrderEntry, Consumer<Library> initializer) {
    final boolean isAutogeneratedLibrary = AutogeneratedLibraryUtils.isAutogeneratedLibrary(libraryOrderEntry);
    if (isAutogeneratedLibrary && flexSdkRegistered) {
      return;
    }

    for (VirtualFile jarFile : libraryOrderEntry.getRootFiles(OrderRootType.CLASSES)) {
      VirtualFile file = getRealFileIfSwc(jarFile);
      if (file != null && (!isAutogeneratedLibrary || !isAutomationOrUselessLibrary(file.getName())) && librarySwfExists(jarFile)) {
        externalLibraries.add(libraryManager.createOriginalLibrary(file, jarFile, initializer));
      }
    }
  }

  // IDEA-74117
  private static boolean librarySwfExists(VirtualFile file) {
    if (file.findChild(Library.SWF) == null) {
      LogMessageUtil.LOG.warn("SWC is corrupted: " + file.getPath());
      return false;
    }

    return true;
  }

  // 7
  private static void collectLibrariesFromModuleDependency(Module module) {
    for (OrderEntry o : ModuleRootManager.getInstance(module).getOrderEntries()) {
      if (!(o instanceof ExportableOrderEntry) || !((ExportableOrderEntry)o).isExported()) {
        continue;
      }

      final DependencyScope scope = ((ExportableOrderEntry)o).getScope();
      if (scope == DependencyScope.RUNTIME || scope == DependencyScope.TEST) {
        continue;
      }

      if (o instanceof LibraryOrderEntry) {
        LogMessageUtil.LOG.warn("exported lib in module dependency is prohibited");
      }
    }
  }
}