<Container xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns="cocoa" implements="org.jetbrains.actionSystem.DataContextProvider">
  <fx:Script><![CDATA[
    import cocoa.ContentView;
    import cocoa.pane.PaneItem;
    import cocoa.pane.PaneViewDataSource;
    import cocoa.plaf.LookAndFeel;

    import com.intellij.flex.uiDesigner.ComponentManager;

    import com.intellij.flex.uiDesigner.Document;
    import com.intellij.flex.uiDesigner.DocumentFactoryManager;
    import com.intellij.flex.uiDesigner.DocumentManager;
    import com.intellij.flex.uiDesigner.PlatformDataKeys;

    import org.jetbrains.actionSystem.DataContext;

    private const editorTabsSource:Vector.<PaneItem> = new Vector.<PaneItem>();
    private const editorPanes:PaneViewDataSource = new PaneViewDataSource(editorTabsSource);

    override public function addToSuperview(displayObjectContainer:DisplayObjectContainer, laf:LookAndFeel,
                                            superview:ContentView = null):void {
      editorTabView.dataSource = editorPanes;
      editorTabView.selectionChanged.add(editorTabSelectionChanged);

      editorPanes.itemRemoved.add(editorPaneRemoved);

      super.addToSuperview(displayObjectContainer, laf, superview);
    }

    private function documentToEditorTabIndex(document:Document):int {
      for (var i:int = 0; i < editorTabsSource.length; i++) {
        if (DocumentPaneItem(editorTabsSource[i]).document == document) {
          return i;
        }
      }

      return -1;
    }

    private function addDocument(document:Document):void {
      //if (documentToEditorTabIndex(document) != -1) {
      //  return;
      //}

      if (document.container == null) {
        document.container = new DocumentContainer(document.displayManager);
      }

      var paneItem:DocumentPaneItem = new DocumentPaneItem(document);
      paneItem.localizedTitle = document.file.name.substring(0, document.file.name.lastIndexOf("."));

      editorPanes.addItem(paneItem);
    }

    private static function editorTabSelectionChanged(oldItem:DocumentPaneItem, newItem:DocumentPaneItem):void {
      if (oldItem != null) {
        oldItem.document.displayManager.deactivated();
      }
      if (newItem != null) {
        var document:Document = newItem.document;
        document.displayManager.activated();
        DocumentManager(document.module.project.getComponent(DocumentManager)).document = document;
      }
    }

    public function selectEditorTab(document:Document):void {
      var index:int = documentToEditorTabIndex(document);
      if (index == -1) {
        addDocument(document);
        index = editorPanes.itemCount - 1;
      }

      editorTabView.selectedIndex = index;
    }

    //noinspection JSUnusedLocalSymbols
    private static function editorPaneRemoved(item:DocumentPaneItem, index:int):void {
      DocumentFactoryManager.getInstance().unregister(item.document);
    }

    private var _dataContext:DataContext;
    public function get dataContext():DataContext {
      return _dataContext;
    }

    public function set dataContext(value:DataContext):void {
      _dataContext = value;
    }

    private function autoScrollToSourceActionHandler(targetControl:CheckBox):void {
      ComponentManager(PlatformDataKeys.PROJECT.getData(_dataContext).getComponent(ComponentManager)).autoScrollToSource =
      targetControl.selected;
    }
    ]]></fx:Script>

  <TabView id="editorTabView" lafSubkey="ProjectView" c="cell 2 2, grow, id editorTabView">
    <toolbar>
      <Toolbar id="editorToolbar" lafSubkey="Editor" small="true">
        <SegmentedControl id="statesBar"/>
        <SegmentedControl id="elementTreeBar" lafKey="ElementTreeBar"/>
        <CheckBox title="AutoScroll to Source" c="align right" action="autoScrollToSourceActionHandler"/>
      </Toolbar>
    </toolbar>
  </TabView>
</Container>