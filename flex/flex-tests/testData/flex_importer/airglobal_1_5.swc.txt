native public function escape(s:String = undefined):String;
native public function encodeURI(uri:String = undefined):String;

public final class Boolean extends Object
{
  native public function Boolean(value:* = null):*;
  native AS3 function valueOf():Boolean;

  native AS3 function toString():String;
  static native public const length:int = 1;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}
native public function decodeURI(uri:String = undefined):String;

__AS3__$vec final dynamic class Vector$object extends Object
{
  native public function Vector$object(length:uint = 0,fixed:Boolean = false):*;

  native private function _shift():*;
  native AS3 function reverse():Vector$object;
  native AS3 function unshift(... rest):uint;
  native private function clamp(val:Number,len:uint):uint;
  native public function set length(value:uint):*;

  native AS3 function indexOf(value:Object,from:Number = 0):Number;
  native AS3 function pop():*;
  native AS3 function slice(start:Number = 0,end:Number = 2147483647):Vector$object;
  native private function _slice(start:Number = 0,end:Number = 2147483647):*;
  native AS3 function concat(... rest):Vector$object;

  native public function get fixed():Boolean;
  native private function _filter(callback:Function,thisObject:*):*;
  native AS3 function push(... rest):uint;
  native AS3 function every(checker:Function,thisObj:Object = null):Boolean;
  native AS3 function map(mapper:Function,thisObj:Object = null):*;

  native private function _map(callback:Function,thisObject:*):*;
  native AS3 function sort(comparefn:*):Vector$object;
  native private function _splice(start:*,deleteCount:*,items:Array):*;
  native private function _reverse():void;
  native AS3 function shift():*;

  native public function get length():uint;
  native public function set fixed(f:Boolean):*;
  native private function _spliceHelper(insertpoint:uint,insertcount:uint,deleteCount:uint,args:Object,offset:int):void;
  native AS3 function join(separator:String = ","):String;
  native AS3 function lastIndexOf(value:Object,from:Number = 2147483647):Number;

  native AS3 function toString():String;
  native AS3 function toLocaleString():String;
  native AS3 function forEach(eacher:Function,thisObj:Object = null):void;
  native private function _concat(items:Array):*;
  native private function set type(t:Object):void;

  native private function newThisType(length:uint = 0):Vector$object;
  native private function get type():Object;
  native AS3 function some(checker:*,thisObj:Object = null):Boolean;
  native AS3 function splice(start:Number,deleteCount:Number,... rest):Vector$object;
  native AS3 function filter(checker:Function,thisObj:Object = null):Vector$object;

  static native private final function castToThisType(item:*):Vector$object;
  static native private final function _forEach(o:*,callback:Function,thisObject:*):void;
  static native private final function _every(o:*,callback:Function,thisObject:*):Boolean;
  static native private final function _some(o:*,callback:Function,thisObject:*):Boolean;
  static native private final function _sort(o:*,args:Array):*;

  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}
native public function encodeURIComponent(uri:String = undefined):String;

public final class String extends Object
{
  native public function String(value:* = ""):*;
  native AS3 function match(p:* = null):Array;
  native private function _charAt(i:int = 0):String;

  native AS3 function indexOf(s:String = undefined,i:Number = 0):int;
  native private function _indexOf(s:String,i:int = 0):int;
  native private function _substr(start:int = 0,end:int = 2147483647):String;
  native AS3 function substring(start:Number = 0,end:Number = 2147483647):String;
  native AS3 function slice(start:Number = 0,end:Number = 2147483647):String;

  native AS3 function lastIndexOf(s:String = undefined,i:Number = 2147483647):int;
  native private function _lastIndexOf(s:String,i:int = 2147483647):int;
  native private function _charCodeAt(i:int = 0):Number;
  native AS3 function toLowerCase():String;
  native private function _substring(start:int = 0,end:int = 2147483647):String;

  native AS3 function split(delim:* = null,limit:* = NaN):Array;
  native AS3 function concat(... rest):String;
  native AS3 function toLocaleLowerCase():String;
  native private function _slice(start:int = 0,end:int = 2147483647):String;
  native public function get length():int;

  native AS3 function search(p:* = null):int;
  native AS3 function charAt(i:Number = 0):String;
  native AS3 function localeCompare(other:String = ""):int;
  native AS3 function toString():String;
  native AS3 function valueOf():String;

  native AS3 function substr(start:Number = 0,len:Number = 2147483647):String;
  native AS3 function replace(p:* = null,repl:* = null):String;
  native AS3 function charCodeAt(i:Number = 0):Number;
  native AS3 function toUpperCase():String;
  native AS3 function toLocaleUpperCase():String;

  static native private final function _replace(s:String,p:*,repl:*):String;
  static native public const length:int = 1;
  static native private final function _match(s:String,p:*):Array;
  static native private final function _search(s:String,p:*):int;
  static native private final function _split(s:String,delim:*,limit:uint):Array;

  static native AS3 final function fromCharCode(... rest):String;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

__AS3__$vec final dynamic class Vector$double extends Object
{
  native public function Vector$double(length:uint = 0,fixed:Boolean = false):*;
  native AS3 function shift():Number;
  native private function _shift():*;

  native AS3 function reverse():Vector$double;
  native AS3 function unshift(... rest):uint;
  native public function set length(value:uint):*;
  native AS3 function indexOf(value:Number,from:Number = 0):Number;
  native AS3 function pop():Number;

  native AS3 function slice(start:Number = 0,end:Number = 2147483647):Vector$double;
  native private function _slice(start:Number = 0,end:Number = 2147483647):*;
  native AS3 function concat(... rest):Vector$double;
  native AS3 function some(checker:*,thisObj:Object = null):Boolean;
  native private function _filter(callback:Function,thisObject:*):*;

  native AS3 function push(... rest):uint;
  native AS3 function every(checker:Function,thisObj:Object = null):Boolean;
  native AS3 function map(mapper:Function,thisObj:Object = null):*;
  native private function _map(callback:Function,thisObject:*):*;
  native AS3 function sort(comparefn:*):Vector$double;

  native private function _splice(start:*,deleteCount:*,items:Array):*;
  native private function _reverse():void;
  native public function get length():uint;
  native public function set fixed(f:Boolean):*;
  native private function _spliceHelper(insertpoint:uint,insertcount:uint,deleteCount:uint,args:Object,offset:int):void;

  native AS3 function forEach(eacher:Function,thisObj:Object = null):void;
  native AS3 function lastIndexOf(value:Number,from:Number = 2147483647):Number;
  native AS3 function toString():String;
  native AS3 function toLocaleString():String;
  native AS3 function join(separator:String = ","):String;

  native private function _concat(items:Array):*;
  native public function get fixed():Boolean;
  native AS3 function filter(checker:Function,thisObj:Object = null):Vector$double;
  native private function clamp(val:Number,len:uint):uint;
  native AS3 function splice(start:Number,deleteCount:Number,... rest):Vector$double;

  static native private final function castToThisType(item:*):Vector$double;
  static native private final function _some(o:*,callback:Function,thisObject:*):Boolean;
  static native private final function newThisType(length:uint = 0):Vector$double;
  static native private final function _forEach(o:*,callback:Function,thisObject:*):void;
  static native private final function _every(o:*,callback:Function,thisObject:*):Boolean;

  static native private final function _sort(o:*,args:Array):*;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

__AS3__$vec final dynamic class Vector$int extends Object
{
  native public function Vector$int(length:uint = 0,fixed:Boolean = false):*;
  native AS3 function shift():int;
  native private function _shift():*;

  native AS3 function reverse():Vector$int;
  native AS3 function unshift(... rest):uint;
  native public function set length(value:uint):*;
  native AS3 function indexOf(value:int,from:Number = 0):Number;
  native AS3 function pop():int;

  native AS3 function slice(start:Number = 0,end:Number = 2147483647):Vector$int;
  native private function _slice(start:Number = 0,end:Number = 2147483647):*;
  native AS3 function concat(... rest):Vector$int;
  native AS3 function some(checker:*,thisObj:Object = null):Boolean;
  native private function _filter(callback:Function,thisObject:*):*;

  native AS3 function push(... rest):uint;
  native AS3 function every(checker:Function,thisObj:Object = null):Boolean;
  native AS3 function map(mapper:Function,thisObj:Object = null):*;
  native private function _map(callback:Function,thisObject:*):*;
  native AS3 function sort(comparefn:*):Vector$int;

  native private function _splice(start:*,deleteCount:*,items:Array):*;
  native private function _reverse():void;
  native public function get length():uint;
  native public function set fixed(f:Boolean):*;
  native private function _spliceHelper(insertpoint:uint,insertcount:uint,deleteCount:uint,args:Object,offset:int):void;

  native AS3 function forEach(eacher:Function,thisObj:Object = null):void;
  native AS3 function lastIndexOf(value:int,from:Number = 2147483647):Number;
  native AS3 function toString():String;
  native AS3 function toLocaleString():String;
  native AS3 function join(separator:String = ","):String;

  native private function _concat(items:Array):*;
  native public function get fixed():Boolean;
  native AS3 function filter(checker:Function,thisObj:Object = null):Vector$int;
  native private function clamp(val:Number,len:uint):uint;
  native AS3 function splice(start:Number,deleteCount:Number,... rest):Vector$int;

  static native private final function castToThisType(item:*):Vector$int;
  static native private final function _some(o:*,callback:Function,thisObject:*):Boolean;
  static native private final function newThisType(length:uint = 0):Vector$int;
  static native private final function _forEach(o:*,callback:Function,thisObject:*):void;
  static native private final function _every(o:*,callback:Function,thisObject:*):Boolean;

  static native private final function _sort(o:*,args:Array):*;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

public dynamic class Array extends Object
{
  native public function Array(... rest):*;
  native AS3 function reverse():Array;
  native AS3 function map(callback:Function,thisObject:* = null):Array;

  native AS3 function shift():*;
  native public function get length():uint;
  native AS3 function unshift(... rest):uint;
  native AS3 function join(sep:* = null):String;
  native AS3 function lastIndexOf(searchElement:*,fromIndex:* = 2147483647):int;

  native public function set length(newLength:uint):*;
  native AS3 function indexOf(searchElement:*,fromIndex:* = 0):int;
  native AS3 function pop():*;
  native AS3 function slice(A:* = 0,B:* = NaN):Array;
  native AS3 function concat(... rest):Array;

  native AS3 function some(callback:Function,thisObject:* = null):Boolean;
  native AS3 function filter(callback:Function,thisObject:* = null):Array;
  native AS3 function forEach(callback:Function,thisObject:* = null):void;
  native AS3 function push(... rest):uint;
  native AS3 function every(callback:Function,thisObject:* = null):Boolean;

  native AS3 function splice(... rest):*;
  native AS3 function sortOn(names:*,options:* = 0,... rest):*;
  native AS3 function sort(... rest):*;
  static native public const CASEINSENSITIVE:uint = 1;
  static native private final function _shift(o:*):*;

  static native private final function _join(o:*,sep:*):String;
  static native private final function _indexOf(o:*,searchElement:*,fromIndex:int):int;
  static native private final function _pop(o:*):*;
  static native private final function _slice(o:*,A:Number,B:Number):Array;
  static native private final function _lastIndexOf(o:*,searchElement:*,fromIndex:int = 0):int;

  static native private final function _filter(o:*,callback:Function,thisObject:*):Array;
  static native private final function _splice(o:*,args:Array):Array;
  static native private final function _every(o:*,callback:Function,thisObject:*):Boolean;
  static native private final function _map(o:*,callback:Function,thisObject:*):Array;
  static native private final function _reverse(o:*):*;

  static native public const length:int = 1;
  static native private final function _forEach(o:*,callback:Function,thisObject:*):void;
  static native public const NUMERIC:uint = 16;
  static native public const UNIQUESORT:uint = 4;
  static native private final function _concat(o:*,args:Array):Array;

  static native private final function _some(o:*,callback:Function,thisObject:*):Boolean;
  static native public const RETURNINDEXEDARRAY:uint = 8;
  static native private final function _sortOn(o:*,names:*,options:*):*;
  static native private final function _sort(o:*,args:Array):*;
  static native public const DESCENDING:uint = 2;

  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

public final class Namespace extends Object
{
  native public function Namespace(prefix:* = null,uri:* = null):*;
  native AS3 function valueOf():String;
  native public function get prefix():*;
  native AS3 function toString():String;

  native public function get uri():String;
  static native public const length:* = 2;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}
native public function parseInt(s:String = NaN,radix:int = 0):Number;
native public const AS3:* = "http://adobe.com/AS3/2006/builtin";

native public const Infinity:Number = Infinity;
native public const undefined:*;

public dynamic class Class extends Object
{
  native public function Class():*;
  native public final function get prototype():*;
  static native public const length:int = 1;
}

public final class uint extends Object
{

  native public function uint(value:* = 0):*;
  native AS3 function toPrecision(p:* = 0):String;
  native AS3 function valueOf():uint;
  native AS3 function toFixed(p:* = 0):String;
  native AS3 function toExponential(p:* = 0):String;

  native AS3 function toString(radix:* = 10):String;
  static native public const MIN_VALUE:uint = 0;
  static native public const length:int = 1;
  static native public const MAX_VALUE:uint = NaN;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

native public const NaN:Number = NaN;

public dynamic class Object
{
  native public function Object():*;
  native AS3 function hasOwnProperty(V:* = null):Boolean;
  native AS3 function propertyIsEnumerable(V:* = null):Boolean;
  native AS3 function isPrototypeOf(V:* = null):Boolean;

  static native private final function _hasOwnProperty(o:*,V:String):Boolean;
  static native protected final function _dontEnumPrototype(proto:Object):void;
  static native private final function _propertyIsEnumerable(o:*,V:String):Boolean;
  static native private final function _isPrototypeOf(o:*,V:*):Boolean;
  static native protected final function _setPropertyIsEnumerable(o:*,V:String,enumerable:Boolean):void;

  static native private final function _toString(o:*):String;
  static native public const length:int = 1;
  static native public final function init():*;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}
native public function unescape(s:String = undefined):String;

__AS3__$vec final dynamic class Vector extends Object
{

  native public function Vector():*;
}
native public function parseFloat(str:String = NaN):Number;

public final class int extends Object
{
  native public function int(value:* = 0):*;
  native AS3 function toPrecision(p:* = 0):String;
  native AS3 function valueOf():int;

  native AS3 function toFixed(p:* = 0):String;
  native AS3 function toExponential(p:* = 0):String;
  native AS3 function toString(radix:* = 10):String;
  static native public const MIN_VALUE:int = -2147483648;
  static native public const length:int = 1;

  static native public const MAX_VALUE:int = 2147483647;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

public final class Number extends Object
{
  native public function Number(value:* = 0):*;
  native AS3 function toPrecision(p:* = 0):String;
  native AS3 function valueOf():Number;

  native AS3 function toFixed(p:* = 0):String;
  native AS3 function toExponential(p:* = 0):String;
  native AS3 function toString(radix:* = 10):String;
  static native public const MIN_VALUE:Number = 4.9E-324;
  static native public const length:int = 1;

  static native private const DTOSTR_FIXED:int = 1;
  static native public const POSITIVE_INFINITY:Number = Infinity;
  static native private const DTOSTR_PRECISION:int = 2;
  static native public const NEGATIVE_INFINITY:Number = -Infinity;
  static native private final function _convert(n:Number,precision:int,mode:int):String;

  static native public const MAX_VALUE:Number = NaN;
  static native private const DTOSTR_EXPONENTIAL:int = 3;
  static native private final function _toString(n:Number,radix:int):String;
  static native public const NaN:Number = NaN;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

native public function isNaN(n:Number = 0):Boolean;

public dynamic class Function extends Object
{
  native public function Function():*;
  native public function get prototype():*;
  native public function set prototype(p:*):*;
  native AS3 function call(thisArg:* = null,... rest):*;

  native public function get length():int;
  native AS3 function apply(thisArg:* = null,argArray:* = null):*;
  static native private final function emptyCtor():*;
  static native public const length:int = 1;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

native public function isFinite(n:Number = 0):Boolean;

private final class MethodClosure extends Function
{
  native private function MethodClosure():*;
  native public override function get prototype():*;
  native public override function set prototype(p:*):*;
  native private function get savedThis():Object;

  native public override function get length():int;
}

__AS3__$vec final dynamic class Vector$uint extends Object
{
  native public function Vector$uint(length:uint = 0,fixed:Boolean = false):*;
  native AS3 function shift():uint;
  native private function _shift():*;
  native AS3 function reverse():Vector$uint;

  native AS3 function unshift(... rest):uint;
  native public function set length(value:uint):*;
  native AS3 function indexOf(value:uint,from:Number = 0):Number;
  native AS3 function pop():uint;
  native AS3 function slice(start:Number = 0,end:Number = 2147483647):Vector$uint;

  native private function _slice(start:Number = 0,end:Number = 2147483647):*;
  native AS3 function concat(... rest):Vector$uint;
  native AS3 function some(checker:*,thisObj:Object = null):Boolean;
  native private function _filter(callback:Function,thisObject:*):*;
  native AS3 function push(... rest):uint;

  native AS3 function every(checker:Function,thisObj:Object = null):Boolean;
  native AS3 function map(mapper:Function,thisObj:Object = null):*;
  native private function _map(callback:Function,thisObject:*):*;
  native AS3 function sort(comparefn:*):Vector$uint;
  native private function _splice(start:*,deleteCount:*,items:Array):*;

  native private function _reverse():void;
  native public function get length():uint;
  native public function set fixed(f:Boolean):*;
  native private function _spliceHelper(insertpoint:uint,insertcount:uint,deleteCount:uint,args:Object,offset:int):void;
  native AS3 function forEach(eacher:Function,thisObj:Object = null):void;

  native AS3 function lastIndexOf(value:uint,from:Number = 2147483647):Number;
  native AS3 function toString():String;
  native AS3 function toLocaleString():String;
  native AS3 function join(separator:String = ","):String;
  native private function _concat(items:Array):*;

  native public function get fixed():Boolean;
  native AS3 function filter(checker:Function,thisObj:Object = null):Vector$uint;
  native private function clamp(val:Number,len:uint):uint;
  native AS3 function splice(start:Number,deleteCount:Number,... rest):Vector$uint;
  static native private final function castToThisType(item:*):Vector$uint;

  static native private final function _some(o:*,callback:Function,thisObject:*):Boolean;
  static native private final function newThisType(length:uint = 0):Vector$uint;
  static native private final function _forEach(o:*,callback:Function,thisObject:*):void;
  static native private final function _every(o:*,callback:Function,thisObject:*):Boolean;
  static native private final function _sort(o:*,args:Array):*;

  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}
native public function decodeURIComponent(uri:String = undefined):String;


public final class flash.xml.XMLTag extends Object
{
  native public function XMLTag():*;
  native public function get value():String;
  native public function set value(v:String):void;

  native public function set type(value:uint):void;
  native public function get type():uint;
  native public function set empty(value:Boolean):void;
  native public function set attrs(value:Object):void;
  native public function get empty():Boolean;

  native public function get attrs():Object;
}


[Version("10")]
public final class flash.net.NetStreamInfo extends Object
{
  native public function NetStreamInfo(curBPS:Number,byteCount:Number,maxBPS:Number,audioBPS:Number,audioByteCount:Number,videoBPS:Number,videoByteCount:Number,dataBPS:Number,dataByteCount:Number,playbackBPS:Number,droppedFrames:Number,audioBufferByteLength:Number,videoBufferByteLength:Number,dataBufferByteLength:Number,audioBufferLength:Number,videoBufferLength:Number,dataBufferLength:Number,srtt:Number,audioLossRate:Number):*;
  native public function get videoBufferByteLength():Number;
  native private var m_dataByteCount:Number;
  native public function get droppedFrames():Number;

  native private var m_videoBufferLength:Number;
  native public function get dataBytesPerSecond():Number;
  native private var m_audioBufferByteLength:Number;
  native private var m_byteCount:Number;
  native public function get dataBufferLength():Number;

  native public function get audioLossRate():Number;
  native public function get currentBytesPerSecond():Number;
  native public function get videoBytesPerSecond():Number;
  native private var m_dataBytesPerSecond:Number;
  native private var m_dataBufferLength:Number;

  native public function get videoByteCount():Number;
  native public function get SRTT():Number;
  native private var m_srtt:Number;
  native private var m_droppedFrames:Number;
  native private var m_videoBufferByteLength:Number;

  native public function get audioByteCount():Number;
  native public function get audioBytesPerSecond():Number;
  native private var m_videoByteCount:Number;
  native public function get dataBufferByteLength():Number;
  native public function get playbackBytesPerSecond():Number;

  native private var m_audioByteCount:Number;
  native private var m_audioLossRate:Number;
  native private var m_dataBufferByteLength:Number;
  native private var m_currentBytesPerSecond:Number;
  native private var m_videoBytesPerSecond:Number;

  native public function get maxBytesPerSecond():Number;
  native private var m_playbackBytesPerSecond:Number;
  native public function get dataByteCount():Number;
  native public function get audioBufferLength():Number;
  native public function get videoBufferLength():Number;

  native public function get audioBufferByteLength():Number;
  native public function get byteCount():Number;
  native private var m_audioBytesPerSecond:Number;
  native public function toString():String;
  native private var m_audioBufferLength:Number;

  native private var m_maxBytesPerSecond:Number;
}

native public function flash.sampler.pauseSampling():void;
native public function flash.sampler.stopSampling():void;
native public function flash.sampler.getMemberNames(o:Object,instanceNames:Boolean = false):Object;
native public function flash.sampler.getGetterInvocationCount(obj:Object,qname:QName):Number;

native public function flash.sampler.getInvocationCount(obj:Object,qname:QName):Number;
native public function flash.sampler.getSetterInvocationCount(obj:Object,qname:QName):Number;
native public function flash.sampler.isGetterSetter(obj:Object,qname:QName):Boolean;
native public function flash.sampler._getInvocationCount(obj:Object,qname:QName,type:uint):Number;

public class flash.sampler.Sample extends Object
{
  native public function Sample():*;

  native public const stack:Array;
  native public const time:Number;
}

public final class flash.sampler.DeleteObjectSample extends flash.sampler.Sample
{
  native public function DeleteObjectSample():*;
  native public const size:Number;
  native public const id:Number;
}

native public function flash.sampler.getSamples():Object;
native public function flash.sampler.getSampleCount():Number;

public final class flash.sampler.StackFrame extends Object
{
  native public function StackFrame():*;
  native public function toString():String;
  native public const line:uint;

  native public const name:String;
  native public const file:String;
}
native public function flash.sampler.startSampling():void;

public final class flash.sampler.NewObjectSample extends flash.sampler.Sample
{
  native public function NewObjectSample():*;
  native public const type:Class;

  native public const id:Number;
  native public function get object():*;
}
native public function flash.sampler.getSize(o:*):Number;
native public function flash.sampler.clearSamples():void;

native public function flash.net.navigateToURL(request:flash.net.URLRequest,window:String = null):void;

native public function flash.net.getClassByAlias(aliasName:String):Class;
native public function flash.net.registerClassAlias(aliasName:String,classObject:Class):void;
native public function flash.net.sendToURL(request:flash.net.URLRequest):void;


public interface flash.events.IEventDispatcher
{
  native function dispatchEvent(event:flash.events.Event):Boolean;
  native function hasEventListener(type:String):Boolean;

  native function willTrigger(type:String):Boolean;
  native function removeEventListener(type:String,listener:Function,useCapture:Boolean = false):void;
  native function addEventListener(type:String,listener:Function,useCapture:Boolean = false,priority:int = 0,useWeakReference:Boolean = false):void;
}


public class flash.events.WeakFunctionClosure extends Object
{
  native public function WeakFunctionClosure():*;
}

[Event(name="deactivate",type="flash.events.Event")]
[Event(name="activate",type="flash.events.Event")]
public class flash.events.EventDispatcher extends Object
  implements flash.events.IEventDispatcher
{
  native public function EventDispatcher(target:flash.events.IEventDispatcher = null):*;

  native public function dispatchEvent(event:flash.events.Event):Boolean;
  native public function willTrigger(type:String):Boolean;
  native public function removeEventListener(type:String,listener:Function,useCapture:Boolean = false):void;
  native public function toString():String;
  native private function dispatchEventFunction(event:flash.events.Event):Boolean;

  native public function hasEventListener(type:String):Boolean;
  native public function addEventListener(type:String,listener:Function,useCapture:Boolean = false,priority:int = 0,useWeakReference:Boolean = false):void;
  native private function dispatchHttpStatusEvent(status:uint,responseLocation:String,headers:String):void;
  native private function get listeners():Array;
  static native private final function trimHeaderValue(headerValue:String):String;
}

public class flash.events.WeakMethodClosure extends Object
{

  native public function WeakMethodClosure():*;
  native private function get savedThis():Object;
}


public class flash.security.XMLSignatureEnvelopedTransformer extends Object
{
  native public function XMLSignatureEnvelopedTransformer():*;
  native private function dummyFunction():void;
  native public function transform(sig:XML,doc:XML):XML;
}

public final class flash.security.RevocationCheckSettings extends Object
{

  native public function RevocationCheckSettings():*;
  static native public const BEST_EFFORT:String = "bestEffort";
  static native public const REQUIRED_IF_AVAILABLE:String = "requiredIfInfoAvailable";
  static native public const NEVER:String = "never";
  static native public const ALWAYS_REQUIRED:String = "alwaysRequired";
}

public final class flash.security.SignerTrustSettings extends Object
{

  native public function SignerTrustSettings():*;
  static native public const CODE_SIGNING:String = "codeSigning";
  static native public const SIGNING:String = "signing";
  static native public const PLAYLIST_SIGNING:String = "playlistSigning";
}

public class flash.security.CryptContext extends flash.events.EventDispatcher
{
  native public function CryptContext():*;

  native private function sendDownloadRequestSync(url:String):flash.utils.ByteArray;
  native public function setRevCheckSetting(setting:String):void;
  native private function iaddTimestampingRootRaw(cert:flash.utils.ByteArray):void;
  native public function getIDStatus():uint;
  native public function VerifySigASync(sig:String,data:String):void;

  native private function returnDownloadDataToTransportLayer(data:flash.utils.ByteArray):void;
  native private function iaddChainBuildingCertRaw(cert:flash.utils.ByteArray,trusted:Boolean):void;
  native private function postAndReceiveASync(url:String,header:String,data:flash.utils.ByteArray):void;
  native private function clearErrorLog():*;
  native public function addCRLRevEvidenceRaw(crl:flash.utils.ByteArray):void;

  native private function getSignerExtendedKeyUsagesInternal(array:Array):void;
  native public function getSignerTrustFlags():uint;
  native public function addChainBuildingCertRaw(cert:flash.utils.ByteArray,trusted:Boolean):void;
  native private function onAsyncDownloadError(event:flash.events.Event):void;
  native public function VerifySigSync(sig:String,data:String):void;

  native private function postAndReceiveSync(url:String,header:String,data:flash.utils.ByteArray):flash.utils.ByteArray;
  native private function iaddChainBuildingCertBase64(cert:String,trusted:Boolean):void;
  native public function addTimestampingRootRaw(cert:flash.utils.ByteArray):void;
  native public function getDataTBVStatus():uint;
  native public function HasValidVerifySession():Boolean;

  native private function getLastError():String;
  native public function verifyTimestamp(tsp:String,data:String):void;
  native private function onAsyncDownloadComplete(event:flash.events.Event):void;
  native public function useSystemTrustStore(trusted:Boolean):void;
  native public function getSignerTrustSettings():Array;

  native public function getIDSummaryFromSigChain(version:uint):String;
  native private function iaddCRLRevEvidenceBase64(crl:String):void;
  native private function onSyncDownloadError(event:flash.events.Event):void;
  native public function addChainBuildingCertBase64(cert:String,trusted:Boolean):void;
  native public function getOverallStatus():uint;

  native private function iVerifySigSync(sig:String,data:String):void;
  native public function getTimestampRevCheckSetting():String;
  native private function sendDownloadRequestASync(url:String):void;
  native private function iVerifySigASync(sig:String,data:String):void;
  native private function isetSignerCert(cert:String):*;

  native public function setSignerCert(cert:String):*;
  native private function isetSignerCertDN(dn:String):*;
  native public function getSignerIDSummary(version:uint):String;
  native private function iaddCRLRevEvidenceRaw(crl:flash.utils.ByteArray):void;
  native public function addCRLRevEvidenceBase64(crl:String):void;

  native public function getRevCheckSetting():String;
  native public function setTimestampRevCheckSetting(setting:String):void;
  native public function getUseSystemTrustStore():Boolean;
  native public function setSignerCertDN(dn:String):*;
  native public function get signerDN():String;

  native public function useCodeSigningValidationRules():void;
  native public function get signerCN():String;
  native public function getSignerExtendedKeyUsages():Array;
  static native internal const REVCHECK_ALWAYSREQUIRED:uint = 3;
  static native internal const STATUS_TROUBLE:uint = 3;

  static native internal const TRUSTFLAG_CODESIGNING:uint = 256;
  static native internal const REVCHECK_BEST_EFFORT:uint = 1;
  static native internal const STATUS_VALID:uint = 0;
  static native internal const STATUS_INVALID:uint = 1;
  static native internal const REVCHECK_NEVER:uint = 0;

  static native private final function setSynchronousFlag(urlRequest:flash.net.URLRequest):void;
  static native internal const TRUSTFLAG_PLAYLISTSIGNING:uint = 16;
  static native internal const TRUSTFLAG_SIGNING:uint = 1;
  static native internal const REVCHECK_REQUIRED_IF_AVAILABLE:uint = 2;
  static native internal const STATUS_UNKNOWN:uint = 2;
}

public final class flash.security.SignatureStatus extends Object
{

  native public function SignatureStatus():*;
  static native public const INVALID:String = "invalid";
  static native public const UNKNOWN:String = "unknown";
  static native public const VALID:String = "valid";
}

public interface flash.security.IURIDereferencer
{
  native function dereference(uri:String):flash.utils.IDataInput;
}

[Event(name="error",type="flash.events.ErrorEvent")]
[Event(name="complete",type="flash.events.Event")]
public class flash.security.XMLSignatureValidator extends flash.events.EventDispatcher
{

  native public function XMLSignatureValidator():*;
  native private var m_uriDereferencer:flash.security.IURIDereferencer;
  native public function get signerTrustSettings():Array;
  native private function applyTransforms(inData:flash.utils.IDataInput,transforms:XMLList,signature:XML):flash.utils.IDataInput;
  native public function get referencesStatus():String;

  native public function get signerCN():String;
  native private function verifyTimestamp(signature:XML):void;
  native public function get useSystemTrustStore():Boolean;
  native private var m_referencesValidationSetting:String;
  native public function set uriDereferencer(uriDerefer:flash.security.IURIDereferencer):void;

  native private var m_signedDataString:String;
  native private function setUseCodeSigningValidationRules():void;
  native private var m_isValidating:Boolean;
  native private function constructXMLCanonicalizer():flash.security.XMLCanonicalizer;
  native private function verifySync(signature:XML):void;

  native public function addCertificate(cert:flash.utils.ByteArray,trusted:Boolean):*;
  native public function get signerDN():String;
  native private function validateReferences(signature:XML):void;
  native public function get validityStatus():String;
  native public function set useSystemTrustStore(trusted:Boolean):void;

  native private function guessSignerIDSummary(signature:XML,version:uint):String;
  native private function verifyCommon(signature:XML):void;
  native public function set revocationCheckSetting(setting:String):void;
  native private function addTimestampingRoot(rootCert:flash.utils.ByteArray):void;
  native public function get identityStatus():String;

  native private function readSigKeyInfo(signature:XML):void;
  native public function get uriDereferencer():flash.security.IURIDereferencer;
  native public function get digestStatus():String;
  native private function getCryptContext():flash.security.CryptContext;
  native private function constructCryptContext():flash.security.CryptContext;

  native private var m_referenceStatus:String;
  native private function cryptContextCodeToStatus(cryptContextCode:uint):String;
  native private function constructEnvelopedTransformer():flash.security.XMLSignatureEnvelopedTransformer;
  native private function throwIfValidating():*;
  [Version("air1.5")]
  native public function set referencesValidationSetting(setting:String):void;

  native private function constructAVMPlusDigest():flash.security.AVMPlusDigest;
  native private function verifyReferences(signature:XML):Boolean;
  native private var m_sigValueString:String;
  native private function getTimestampRevocationCheckSetting():String;
  native private function setTimestampRevocationCheckSetting(setting:String):void;

  native private function getSignerIDSummary(version:uint):String;
  native public function get revocationCheckSetting():String;
  native public function get signerExtendedKeyUsages():Array;
  [Version("air1.5")]
  native public function get referencesValidationSetting():String;
  native private var m_cryptContext:flash.security.CryptContext;

  native public function verify(signature:XML):void;
  static native private const XML_TRANSFORM_C14N:String = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315";
  static native private const kInvalidCallError:uint = 2037;
  static native private const kInvalidParamError:uint = 2004;
  static native private const VALID_IDENTITY:String = "validIdentity";

  static native private const XMLDIGESTMETHOD_SHA256:String = "http://www.w3.org/2001/04/xmlenc#sha256";
  static native private const kNullPointerError:uint = 2007;
  static native private const XML_DSIG_NS:Namespace;
  static native private const XML_TRANSFORM_ENVELOPED_SIGNATURE:String = "http://www.w3.org/2000/09/xmldsig#enveloped-signature";
  static native private const VALID_OR_UNKNOWN_IDENTITY:String = "validOrUnknownIdentity";

  static native private const NEVER:String = "never";
  static native private const MAX_NUM_TRANSFORMS:uint = 20;
  static native private const XML_XADES_NAMESPACE:String = "http://uri.etsi.org/01903/v1.1.1#";
}

public class flash.security.AVMPlusDigest extends Object
{
  native public function AVMPlusDigest():*;
  native public function Init(algorithm:uint):void;

  native private function clearErrorLog():*;
  native private function iUpdate(data:flash.utils.IDataInput):uint;
  native private function iFinishDigest(inDigestToCompare:String):uint;
  native public function FinishDigest(inDigestToCompare:String):uint;
  native private function iUpdateWithString(data:String):uint;

  native public function Update(data:flash.utils.IDataInput):uint;
  native private function getLastError():String;
  native private function initInternal(algorithm:uint):void;
  native public function UpdateWithString(data:String):uint;
  static native internal const DIGESTMETHOD_SHA256:uint = 1;
}

public class flash.security.XMLCanonicalizer extends Object
{

  native public function XMLCanonicalizer():*;
  native private function CanonicalizeString(xmlString:String):String;
  native private function replaceEmptyTags():String;
  native private function c14nTransform(xml:String):String;
  native public function CanonicalizeXMLList(xmlList:XMLList):String;

  native public function CanonicalizeXML(xml:XML):String;
  native private function expandEmptyXMLTags(inputStr:String):String;
  native private function sortNameSpace(nsA:Namespace,nsB:Namespace):int;
}


[Version("10")]
public interface flash.display.IDrawCommand
{
}


[Version("10")]
public final class flash.text.engine.CFFHinting extends Object
{
  native public function CFFHinting():*;
  static native public const NONE:String = "none";

  static native public const HORIZONTAL_STEM:String = "horizontalStem";
}


public class flash.net.Responder extends Object
{
  native public function Responder(result:Function,status:Function = null):*;
}


public interface flash.utils.IDataInput
{
  native function get objectEncoding():uint;
  native function readUnsignedInt():uint;
  native function get bytesAvailable():uint;

  native function readShort():int;
  native function readDouble():Number;
  native function readMultiByte(length:uint,charSet:String):String;
  native function readFloat():Number;
  native function readUnsignedShort():uint;

  native function readBoolean():Boolean;
  native function readUnsignedByte():uint;
  native function readBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;
  native function set endian(type:String):void;
  native function readUTF():String;

  native function readInt():int;
  native function readUTFBytes(length:uint):String;
  native function get endian():String;
  native function readObject():*;
  native function set objectEncoding(version:uint):void;

  native function readByte():int;
}


public class flash.utils.ObjectInput extends Object
  implements flash.utils.IDataInput
{
  native public function ObjectInput():*;
  native public function readUnsignedInt():uint;
  native public function readByte():int;
  native public function readShort():int;

  native public function readDouble():Number;
  native public function readBoolean():Boolean;
  native public function readUnsignedByte():uint;
  native public function get objectEncoding():uint;
  native public function readObject():*;

  native public function readUnsignedShort():uint;
  native public function get endian():String;
  native public function get bytesAvailable():uint;
  native public function set objectEncoding(version:uint):void;
  native public function readMultiByte(length:uint,charSet:String):String;

  native public function readFloat():Number;
  native public function readUTF():String;
  native public function set endian(type:String):void;
  native public function readInt():int;
  native public function readUTFBytes(length:uint):String;

  native public function readBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;
}


public final class flash.events.EventPhase extends Object
{
  native public function EventPhase():*;
  static native public const BUBBLING_PHASE:uint = 3;
  static native public const AT_TARGET:uint = 2;
  static native public const CAPTURING_PHASE:uint = 1;
}


public final class flash.net.URLLoaderDataFormat extends Object
{

  native public function URLLoaderDataFormat():*;
  static native public const BINARY:String = "binary";
  static native public const VARIABLES:String = "variables";
  static native public const TEXT:String = "text";
}


public interface flash.net.IDynamicPropertyWriter
{
  native function writeDynamicProperties(obj:Object,output:flash.net.IDynamicPropertyOutput):void;
}


[Version("10")]
public class flash.geom.PerspectiveProjection extends Object
{

  native public function PerspectiveProjection():*;
  native public function get projectionCenter():flash.geom.Point;
  native public function toMatrix3D():flash.geom.Matrix3D;
  native public function get fieldOfView():Number;
  native public function set projectionCenter(p:flash.geom.Point):*;

  native public function get focalLength():Number;
  native public function set fieldOfView(fieldOfViewAngleInDegrees:Number):void;
  native public function set focalLength(value:Number):void;
}


public dynamic class SecurityError extends Error
{
  native public function SecurityError(message:* = "",id:* = 0):*;
  static native public const length:int = 1;
}

public dynamic class URIError extends Error
{

  native public function URIError(message:* = "",id:* = 0):*;
  static native public const length:int = 1;
}

public dynamic class ReferenceError extends Error
{
  native public function ReferenceError(message:* = "",id:* = 0):*;
  static native public const length:int = 1;
}

public dynamic class ArgumentError extends Error
{
  native public function ArgumentError(message:* = "",id:* = 0):*;

  static native public const length:int = 1;
}

public dynamic class EvalError extends Error
{
  native public function EvalError(message:* = "",id:* = 0):*;
  static native public const length:int = 1;
}

public dynamic class SyntaxError extends Error
{
  native public function SyntaxError(message:* = "",id:* = 0):*;
  static native public const length:int = 1;
}

public dynamic class UninitializedError extends Error
{

  native public function UninitializedError(message:* = "",id:* = 0):*;
  static native public const length:int = 1;
}

public dynamic class TypeError extends Error
{
  native public function TypeError(message:* = "",id:* = 0):*;
  static native public const length:int = 1;
}

public dynamic class DefinitionError extends Error
{
  native public function DefinitionError(message:* = "",id:* = 0):*;

  static native public const length:int = 1;
}

public dynamic class Error extends Object
{
  native public function Error(message:* = "",id:* = 0):*;
  native private function setErrorID(value:int):void;
  native public function getStackTrace():String;
  native private var _errorID:int;

  native public function get errorID():int;
  native public var message:*;
  native public var name:*;
  static native public final function throwError(type:Class,index:uint,... rest):*;
  static native public final function getErrorMessage(index:int):String;

  static native public const length:int = 1;
}

public dynamic class RangeError extends Error
{
  native public function RangeError(message:* = "",id:* = 0):*;
  static native public const length:int = 1;
}

public dynamic class VerifyError extends Error
{
  native public function VerifyError(message:* = "",id:* = 0):*;
  static native public const length:int = 1;
}


public dynamic class flash.errors.IOError extends Error
{

  native public function IOError(message:String = "",id:int = 0):*;
}

public dynamic class flash.errors.EOFError extends flash.errors.IOError
{
  native public function EOFError(message:String = "",id:int = 0):*;
}

public dynamic class flash.errors.StackOverflowError extends Error
{
  native public function StackOverflowError(message:String = "",id:int = 0):*;
}

public dynamic class flash.errors.InvalidSWFError extends Error
{
  native public function InvalidSWFError(message:String = "",id:int = 0):*;
}

public dynamic class flash.errors.ScriptTimeoutError extends Error
{
  native public function ScriptTimeoutError(message:String = "",id:int = 0):*;
}

public dynamic class flash.errors.IllegalOperationError extends Error
{

  native public function IllegalOperationError(message:String = "",id:int = 0):*;
}

public dynamic class flash.errors.MemoryError extends Error
{
  native public function MemoryError(message:String = "",id:int = 0):*;
}


[Version("10")]
public class flash.text.engine.ContentElement extends Object
{
  native public function ContentElement(elementFormat:flash.text.engine.ElementFormat = null,eventMirror:flash.events.EventDispatcher = null,textRotation:String = "rotate0"):*;
  native public function get textBlock():flash.text.engine.TextBlock;
  native public function set elementFormat(value:flash.text.engine.ElementFormat):void;

  native public function get textBlockBeginIndex():int;
  native public function get textRotation():String;
  native public function get text():String;
  native public function set eventMirror(value:flash.events.EventDispatcher):void;
  native public function get elementFormat():flash.text.engine.ElementFormat;

  native public var userData:*;
  native public function set textRotation(value:String):void;
  native public function get eventMirror():flash.events.EventDispatcher;
  native public function get rawText():String;
  native public function get groupElement():flash.text.engine.GroupElement;

  static native public const GRAPHIC_ELEMENT:uint = 65007;
}


[Version("10")]
public final class flash.text.engine.TextElement extends flash.text.engine.ContentElement
{
  native public function TextElement(text:String = null,elementFormat:flash.text.engine.ElementFormat = null,eventMirror:flash.events.EventDispatcher = null,textRotation:String = "rotate0"):*;
  native public function replaceText(beginIndex:int,endIndex:int,newText:String):void;
  native public function set text(value:String):void;
}


[Event(name="displaying",type="flash.events.Event")]
[Event(name="select",type="flash.events.Event")]
public class flash.display.NativeMenu extends flash.events.EventDispatcher
{
  native public function NativeMenu():*;

  native public function set items(itemArray:Array):void;
  native public function display(stage:flash.display.Stage,stageX:Number,stageY:Number):void;
  native public function removeAllItems():void;
  native public function get items():Array;
  native private function performKeyEquivalent(event:flash.events.KeyboardEvent):Boolean;

  native public function getItemIndex(item:flash.display.NativeMenuItem):int;
  native public function removeItemAt(index:int):flash.display.NativeMenuItem;
  native public function addSubmenuAt(submenu:NativeMenu,index:int,label:String):flash.display.NativeMenuItem;
  native public function containsItem(item:flash.display.NativeMenuItem):Boolean;
  native public function addItem(item:flash.display.NativeMenuItem):flash.display.NativeMenuItem;

  native private function _menuItemPerformKeyEquivalent(item:flash.display.NativeMenuItem,event:flash.events.KeyboardEvent):Boolean;
  native public function get numItems():int;
  native private function _display(stage:flash.display.Stage,stageX:Number,stageY:Number):*;
  native public function getItemAt(index:int):flash.display.NativeMenuItem;
  native public function clone():NativeMenu;

  native private function _getItemAt(index:int):flash.display.NativeMenuItem;
  native public function addItemAt(item:flash.display.NativeMenuItem,index:int):flash.display.NativeMenuItem;
  native private function _addItemAt(item:flash.display.NativeMenuItem,index:int):flash.display.NativeMenuItem;
  native private function _removeItemAt(index:int):flash.display.NativeMenuItem;
  native public function get parent():NativeMenu;

  native public function getItemByName(name:String):flash.display.NativeMenuItem;
  native private function _getItemByName(name:String):flash.display.NativeMenuItem;
  native private function _getItemIndex(item:flash.display.NativeMenuItem):int;
  native public function dispatchContextMenuSelect(event:flash.events.MouseEvent):*;
  native private function _containsItem(item:flash.display.NativeMenuItem):Boolean;

  native public function removeItem(item:flash.display.NativeMenuItem):flash.display.NativeMenuItem;
  native private function get _numItems():int;
  native public function setItemIndex(item:flash.display.NativeMenuItem,index:int):void;
  native public function addSubmenu(submenu:NativeMenu,label:String):flash.display.NativeMenuItem;
}


[Event(name="menuSelect",type="flash.events.ContextMenuEvent")]
public final class flash.ui.ContextMenu extends flash.display.NativeMenu
{
  native public function ContextMenu():*;

  native public override function get items():Array;
  native public override function display(stage:flash.display.Stage,stageX:Number,stageY:Number):void;
  native internal function _openLink():void;
  native public function get builtInItems():flash.ui.ContextMenuBuiltInItems;
  native private var m_showClipboardMenu:Boolean;

  native public override function set items(itemArray:Array):void;
  [Version("10")]
  native public function get link():flash.net.URLRequest;
  [Version("10")]
  native public function get clipboardItems():flash.ui.ContextMenuClipboardItems;
  native private var m_link:flash.net.URLRequest;
  native public function get customItems():Array;

  native public override function getItemIndex(item:flash.display.NativeMenuItem):int;
  native public override function removeItemAt(index:int):flash.display.NativeMenuItem;
  native public override function containsItem(item:flash.display.NativeMenuItem):Boolean;
  [Version("10")]
  native public function set clipboardItems(value:flash.ui.ContextMenuClipboardItems):void;
  [Version("10")]
  native public function get clipboardMenu():Boolean;

  native public override function get numItems():int;
  native public override function removeAllItems():void;
  native private var m_clipboardItems:flash.ui.ContextMenuClipboardItems;
  native public override function clone():flash.display.NativeMenu;
  native public function set customItems(value:Array):void;

  native public function hideBuiltInItems():void;
  native private var _builtInItems:flash.ui.ContextMenuBuiltInItems;
  native public override function addItemAt(item:flash.display.NativeMenuItem,index:int):flash.display.NativeMenuItem;
  [Version("10")]
  native public function set clipboardMenu(value:Boolean):void;
  native public override function getItemAt(index:int):flash.display.NativeMenuItem;

  native internal function _copyLink():void;
  [Version("10")]
  native public function set link(value:flash.net.URLRequest):void;
  native public function set builtInItems(value:flash.ui.ContextMenuBuiltInItems):void;
  native private var m_customItems:Array;
}


public class flash.desktop.Icon extends flash.events.EventDispatcher
{
  native public function Icon():*;

  native public function set bitmaps(ba:Array):void;
  native public function get bitmaps():Array;
  native private var _bitmaps:Array;
}


[Version("air1.5")]
public class flash.net.drm.DRMVoucher extends Object
{
  native public function DRMVoucher():*;
  native private function getStartDateInner():Number;

  native public function get policies():Object;
  native private function getOfflineLeaseStartDateInner():Number;
  native private var m_endDate:Date;
  native public function get playbackTimeWindow():flash.net.drm.DRMPlaybackTimeWindow;
  native public function get voucherEndDate():Date;

  native private var m_startDate:Date;
  native public function get voucherStartDate():Date;
  native private function getEndDateInner():Number;
  native private function setCustomPolicyObject(customPolicyObject:Object):void;
  native private var m_offlineLeaseExpirationDate:Date;

  native private var m_offlineLeaseStartDate:Date;
  native private var m_playbackTimeWindow:flash.net.drm.DRMPlaybackTimeWindow;
  native private function get playbackWindow():Number;
  native private function getOfflineLeaseExpirationDateInner():Number;
  native public function get offlineLeaseEndDate():Date;

  native private var m_customPolicies:Object;
  native private function get playbackEndTime():Number;
  native public function get offlineLeaseStartDate():Date;
  native private function get playStartTime():Number;
  native private function createCustomPolicyObject():void;
}

[Version("air1.5")]
public class flash.net.drm.DRMManager extends flash.events.EventDispatcher
{

  native public function DRMManager():*;
  native private function onDownloadVoucherComplete(theEvent:flash.events.DRMStatusEvent):void;
  native private function onDownloadVoucherError(theEvent:flash.events.DRMErrorEvent):void;
  native private function issueDRMStatusEvent(specificEventType:String,availableOffline:Boolean,anonymous:Boolean,policies:Object,metadata:flash.net.drm.DRMContentData,voucher:flash.net.drm.DRMVoucher,isLocal:Boolean):void;
  native private function getLastError():Error;

  native private function clearLastError():void;
  native private function downloadVoucher(contentData:flash.net.drm.DRMContentData):void;
  native public function loadVoucher(contentData:flash.net.drm.DRMContentData,setting:String):void;
  native private function storeVoucherInner(voucher:flash.net.drm.DRMVoucher):Boolean;
  native private function checkLastError():void;

  native private function setSAMLTokenInner(serverUrl:String,domain:String,token:String):void;
  native public function setAuthenticationToken(serverUrl:String,domain:String,token:flash.utils.ByteArray):void;
  native private function onAuthenticationComplete(theEvent:flash.events.DRMAuthenticationCompleteEvent):void;
  native private function onAuthenticationError(theEvent:flash.events.DRMAuthenticationErrorEvent):void;
  native public function authenticate(serverURL:String,domain:String,username:String,password:String):void;

  native private function issueDRMErrorEvent(metadata:flash.net.drm.DRMContentData,errorID:int,subErrorID:int):void;
  native private function onGetVoucherFromStoreComplete(theEvent:flash.events.DRMStatusEvent):void;
  native public function resetDRMVouchers():void;
  native private function onGetVoucherFromStoreWithAllowServerComplete(theEvent:flash.events.DRMStatusEvent):void;
  static native public final function getDRMManager():DRMManager;

  static native private var theManager:DRMManager = null;
  static native private final function isCalledFromRemoteSWF():Boolean;
  static native private final function checkRemoteSWFInvocation():void;
}

public class flash.net.drm.DRMCRLDownloadContext extends flash.events.EventDispatcher
{
  native public function DRMCRLDownloadContext():*;
  native internal var m_fileName:String;

  native private function onAsyncDownloadError(event:flash.events.Event):void;
  native private function downloadAndStoreCRL(url:String,targetFilename:String):void;
  native private function storeCRL(sourceURL:String,filename:String,crl:flash.utils.ByteArray):void;
  native internal var m_url:String;
  native private function onAsyncDownloadComplete(event:flash.events.Event):void;
}

public class flash.net.drm.DRMVoucherStoreContext extends flash.net.drm.DRMManagerSession
{

  native public function DRMVoucherStoreContext():*;
  native public override function onSessionComplete():void;
  native public override function onSessionError():void;
  native private function getVoucherFromStoreInner(data:flash.net.drm.DRMContentData):flash.net.drm.DRMVoucher;
  native private function setLastError(errorID:uint,subErrorID:uint):void;

  native public override function checkStatus():uint;
  native private var m_voucher:flash.net.drm.DRMVoucher;
  native public function getVoucherFromStore(inMetadata:flash.net.drm.DRMContentData):void;
}

[Version("air1.5")]
public final class flash.net.drm.LoadVoucherSetting extends Object
{
  native public function LoadVoucherSetting():*;
  static native public const LOCAL_ONLY:String = "localOnly";

  static native public const FORCE_REFRESH:String = "forceRefresh";
  static native public const ALLOW_SERVER:String = "allowServer";
}

[Version("air1.5")]
public class flash.net.drm.DRMPlaybackTimeWindow extends Object
{
  native public function DRMPlaybackTimeWindow(length:uint,start:uint,end:uint):*;
  native public function get period():uint;
  native private var m_endDate:Date;

  native private var m_length:uint;
  native public function get endDate():Date;
  native private var m_startDate:Date;
  native public function get startDate():Date;
}

public class flash.net.drm.DRMManagerSession extends flash.events.EventDispatcher
{
  native public function DRMManagerSession():*;

  native private var m_metadata:flash.net.drm.DRMContentData;
  native private function createMetadataFromByteArray(inRawData:flash.utils.ByteArray):flash.net.drm.DRMContentData;
  native public function issueDRMStatusEvent(inMetadata:flash.net.drm.DRMContentData,voucher:flash.net.drm.DRMVoucher,availableOffline:Boolean):*;
  native public function set metadata(inData:flash.net.drm.DRMContentData):void;
  native public function get metadata():flash.net.drm.DRMContentData;

  native public function onSessionComplete():void;
  native public function onSessionError():void;
  native private function issueDRMStatusEventInner(specificEventType:String,availableOffline:Boolean,anonymous:Boolean,policies:Object,metadata:flash.net.drm.DRMContentData,voucher:flash.net.drm.DRMVoucher,isLocal:Boolean):void;
  native public var m_isInSession:Boolean;
  native public function getLastSubErrorID():uint;

  native public function setMetadata(newMetadata:flash.utils.ByteArray):void;
  native public function checkStatus():uint;
  native private function onCheckStatus(ev:flash.events.TimerEvent):*;
  native public function getLastError():uint;
  native private var m_checkStatusTimer:flash.utils.Timer;

  native public function setTimerUp():void;
  native public function issueDRMErrorEvent(metadata:flash.net.drm.DRMContentData,errorID:int,subErrorID:int):void;
  static native internal const STATUS_FAILED:uint = 2;
  static native internal const STATUS_UNKNOWN:uint = 3;
  static native internal const STATUS_READY:uint = 0;

  static native internal const STATUS_NOTREADY:uint = 1;
}

[Version("air1.5")]
public final class flash.net.drm.AuthenticationMethod extends Object
{
  native public function AuthenticationMethod():*;
  static native public const USERNAME_AND_PASSWORD:String = "usernameAndPassword";
  static native public const ANONYMOUS:String = "anonymous";
}

[Version("air1.5")]
public class flash.net.drm.DRMContentData extends Object
{
  native public function DRMContentData():*;

  native private function getDomainInner():String;
  native public function get domain():String;
  native private var m_rawMetadata:flash.utils.ByteArray;
  native private var m_licenseID:String;
  native public function get serverURL():String;

  native private function getLicenseIDInner():String;
  native private function getRawMetadataInner(outMetadata:flash.utils.ByteArray):void;
  native private var m_secureTime:Date;
  native private function get rawMetadata():flash.utils.ByteArray;
  native public function get authenticationMethod():String;

  native public function get licenseID():String;
  native private var m_domain:String;
  native private function get FMRMSURL():String;
}

public class flash.net.drm.DRMAuthenticationContext extends flash.net.drm.DRMManagerSession
{
  native public function DRMAuthenticationContext():*;
  native public function get authenticationToken():flash.utils.ByteArray;

  native public override function checkStatus():uint;
  native public override function onSessionComplete():void;
  native public override function onSessionError():void;
  native private function getTokenInner(outToken:flash.utils.ByteArray):void;
  native public function authenticate(url:String,domain:String,username:String,password:String):void;

  native private var m_domain:String;
  native private function authenticateInner(url:String,domain:String,username:String,password:String):uint;
  native private function checkStatusInner():uint;
  native private var m_url:String;
}

public class flash.net.drm.DRMVoucherDownloadContext extends flash.net.drm.DRMManagerSession
{
  native public function DRMVoucherDownloadContext():*;

  native public override function onSessionComplete():void;
  native public override function onSessionError():void;
  native private function downloadInner(metadata:flash.net.drm.DRMContentData):uint;
  native public function download(inMetadata:flash.net.drm.DRMContentData):void;
  native public override function checkStatus():uint;

  native private function checkStatusInner():uint;
  native private function getVoucherInner():flash.net.drm.DRMVoucher;
  native public function get voucher():flash.net.drm.DRMVoucher;
}


public interface flash.display.IBitmapDrawable
{
}


[Event(name="render",type="flash.events.Event")]
[Event(name="removedFromStage",type="flash.events.Event")]
[Event(name="removed",type="flash.events.Event")]
[Event(name="exitFrame",type="flash.events.Event")]
[Event(name="frameConstructed",type="flash.events.Event")]
[Event(name="enterFrame",type="flash.events.Event")]
[Event(name="addedToStage",type="flash.events.Event")]
[Event(name="added",type="flash.events.Event")]
public class flash.display.DisplayObject extends flash.events.EventDispatcher
  implements flash.display.IBitmapDrawable
{
  native public function DisplayObject():*;
  native public function get visible():Boolean;

  native public function get rotation():Number;
  native private function _hitTest(use_xy:Boolean,x:Number,y:Number,useShape:Boolean,hitTestObject:DisplayObject):Boolean;
  native public function localToGlobal(point:flash.geom.Point):flash.geom.Point;
  native public function get name():String;
  native public function set width(value:Number):void;

  native public function globalToLocal(point:flash.geom.Point):flash.geom.Point;
  native public function get blendMode():String;
  native public function get scale9Grid():flash.geom.Rectangle;
  native public function set name(value:String):void;
  [Version("10")]
  native public function get rotationX():Number;

  [Version("10")]
  native public function get rotationY():Number;
  native public function set scaleX(value:Number):void;
  native public function set scaleY(value:Number):void;
  [Version("10")]
  native public function set scaleZ(value:Number):void;
  native public function get accessibilityProperties():flash.accessibility.AccessibilityProperties;

  native public function set scrollRect(value:flash.geom.Rectangle):void;
  [Version("10")]
  native public function get rotationZ():Number;
  native public function get height():Number;
  native public function set blendMode(value:String):void;
  native public function set scale9Grid(innerRectangle:flash.geom.Rectangle):void;

  native public function getBounds(targetCoordinateSpace:DisplayObject):flash.geom.Rectangle;
  [Version("10")]
  native public function set blendShader(value:flash.display.Shader):void;
  native public function get opaqueBackground():Object;
  native public function get parent():flash.display.DisplayObjectContainer;
  native public function get cacheAsBitmap():Boolean;

  [Version("10")]
  native public function set rotationX(value:Number):void;
  [Version("10")]
  native public function set rotationY(value:Number):void;
  [Version("10")]
  native public function set rotationZ(value:Number):void;
  [Version("10")]
  native public function local3DToGlobal(point3d:flash.geom.Vector3D):flash.geom.Point;
  native public function set alpha(value:Number):void;

  [Version("10")]
  native public function globalToLocal3D(point:flash.geom.Point):flash.geom.Vector3D;
  native public function set accessibilityProperties(value:flash.accessibility.AccessibilityProperties):void;
  native public function get width():Number;
  native public function hitTestPoint(x:Number,y:Number,shapeFlag:Boolean = false):Boolean;
  native public function set cacheAsBitmap(value:Boolean):void;

  native public function get scaleX():Number;
  native public function get scaleY():Number;
  [Version("10")]
  native public function get scaleZ():Number;
  native public function get scrollRect():flash.geom.Rectangle;
  native public function get mouseX():Number;

  native public function get mouseY():Number;
  native public function set height(value:Number):void;
  native public function set mask(value:DisplayObject):void;
  native public function getRect(targetCoordinateSpace:DisplayObject):flash.geom.Rectangle;
  native public function get alpha():Number;

  native public function set transform(value:flash.geom.Transform):void;
  native public function get loaderInfo():flash.display.LoaderInfo;
  native public function get root():DisplayObject;
  native public function set visible(value:Boolean):void;
  native public function set opaqueBackground(value:Object):void;

  native public function hitTestObject(obj:DisplayObject):Boolean;
  native public function get mask():DisplayObject;
  native public function set x(value:Number):void;
  native public function set y(value:Number):void;
  native public function get transform():flash.geom.Transform;

  [Version("10")]
  native public function set z(value:Number):void;
  native public function set filters(value:Array):void;
  native public function get x():Number;
  native public function get y():Number;
  [Version("10")]
  native public function get z():Number;

  native public function get filters():Array;
  native public function set rotation(value:Number):void;
  native public function get stage():flash.display.Stage;
}


public class flash.display.Bitmap extends flash.display.DisplayObject
{
  native public function Bitmap(bitmapData:flash.display.BitmapData = null,pixelSnapping:String = "auto",smoothing:Boolean = false):*;
  native public function set bitmapData(value:flash.display.BitmapData):void;

  native public function get pixelSnapping():String;
  native public function set pixelSnapping(value:String):void;
  native public function set smoothing(value:Boolean):void;
  native public function get bitmapData():flash.display.BitmapData;
  native public function get smoothing():Boolean;
}


public final class flash.system.FSCommand extends Object
{

  native public function FSCommand():*;
  static native public final function _fscommand(command:String,args:String):void;
}
native public function flash.system.fscommand(command:String,args:String = ""):void;

[Version("10")]
native public function adobe.utils.MMEndCommand(endStatus:Boolean,notifyString:String):void;
native public function adobe.utils.MMExecute(name:String):String;


public final class flash.external.ExternalInterface extends Object
{

  native public function ExternalInterface():*;
  static native private final function _objectToJS(value:*):String;
  static native private final function _evalJS(expression:String):String;
  static native private final function _argumentsToXML(obj:Array):String;
  static native public final function addCallback(functionName:String,closure:Function):void;

  static native private final function _addCallback(functionName:String,closure:Function):void;
  static native public final function get available():Boolean;
  static native private final function _toAS(obj:Object):*;
  static native private final function _getPropNames(obj:Object):Array;
  static native private final function _callIn(closure:Function,request:String):String;

  static native private final function get activeX():Boolean;
  static native private final function _escapeXML(s:String):String;
  static native private final function _callOut(request:String):String;
  static native public final function get objectID():String;
  static native private final function _toXML(value:*):String;

  static native private final function _objectToXML(obj:*):String;
  static native private final function _toJS(value:*):String;
  static native public final function call(functionName:String,... rest):*;
  static native private final function _arrayToAS(obj:Object):*;
  static native private final function _arrayToXML(obj:Array):String;

  static native private final function _objectToAS(obj:Object):*;
  static native public var marshallExceptions:Boolean = false;
  static native private final function _argumentsToAS(obj:*):Array;
  static native private final function _initJS():void;
  static native private final function _arrayToJS(value:Array):String;
}


public final class flash.system.Security extends Object
{

  native public function Security():*;
  static native public final function showSettings(panel:String = "default"):void;
  static native public final function get sandboxType():String;
  static native public final function get exactSettings():Boolean;
  static native internal final function duplicateSandboxBridgeOutputArgument(toplevel:Object,arg:*):*;

  static native public final function set exactSettings(value:Boolean):void;
  static native public const REMOTE:String = "remote";
  static native public const LOCAL_WITH_FILE:String = "localWithFile";
  static native public const LOCAL_TRUSTED:String = "localTrusted";
  static native public final function allowDomain(... rest):void;

  static native public final function allowInsecureDomain(... rest):void;
  static native internal final function duplicateSandboxBridgeInputArguments(toplevel:Object,args:Array):Array;
  static native private final function createSandboxBridgeProxyFunction(targetFunc:Function,targetObj:Object,srcToplevel:Object,destToplevel:Object):Function;
  static native public final function loadPolicyFile(url:String):void;
  static native public final function set disableAVM1Loading(value:Boolean):void;

  static native public const APPLICATION:String = "application";
  static native public const LOCAL_WITH_NETWORK:String = "localWithNetwork";
  [Inspectable(environment="none")]
  static native public final function get disableAVM1Loading():Boolean;
}


public class flash.desktop.NativeDragOptions extends Object
{
  native public function NativeDragOptions():*;
  native public var allowLink:Boolean = true;

  native public var allowMove:Boolean = true;
  native public function toString():String;
  native public var allowCopy:Boolean = true;
}

public class flash.desktop.NativeDragManager extends Object
{
  native public function NativeDragManager():*;
  static native public final function get dragInitiator():flash.display.InteractiveObject;

  static native public final function get dropAction():String;
  static native public final function get isDragging():Boolean;
  static native public final function set dropAction(dropAction:String):void;
  static native public final function acceptDragDrop(target:flash.display.InteractiveObject):void;
  static native public final function doDrag(dragInitiator:flash.display.InteractiveObject,clipboard:flash.desktop.Clipboard,dragImage:flash.display.BitmapData = null,offset:flash.geom.Point = null,allowedActions:flash.desktop.NativeDragOptions = null):void;
}

public class flash.desktop.JSClipboard extends Object
{

  native public function JSClipboard(writable:Boolean,forDragging:Boolean,clipboard:flash.desktop.Clipboard = null,dragOptions:flash.desktop.NativeDragOptions = null):*;
  native private var _propagationStopped:Boolean = false;
  native public function set propagationStopped(stopped:Boolean):void;
  native public function get dragOptions():flash.desktop.NativeDragOptions;
  native private var _dragOptions:flash.desktop.NativeDragOptions;

  native public function set dropEffect(effect:String):void;
  native private var _forDragging:Boolean;
  native public function set dragOptions(dragOptions:flash.desktop.NativeDragOptions):void;
  native public function get effectAllowed():String;
  native public function get clipboard():flash.desktop.Clipboard;

  native public function clearAllData():void;
  native public function getData(mimeType:String):Object;
  native public function get propagationStopped():Boolean;
  native private var _dropAction:String;
  native public function clearData(mimeType:String):void;

  native public function get dropEffect():String;
  native public function setData(mimeType:String,data:Object):Boolean;
  native private var _clipboard:flash.desktop.Clipboard;
  native public function set effectAllowed(effectAllowed:String):void;
  native public function get types():Array;

  native private var _writable:Boolean;
  static native private const URI_LIST_TYPE:String = "text/uri-list";
  static native private const _dropEffectNames:Array;
  static native private const BITMAP_TYPE:String = "image/x-vnd.adobe.air.bitmap";
  static native private const TEXT_TYPE:String = "text/plain";

  static native private const HTML_TYPE:String = "text/html";
  static native private const FILE_LIST_TYPE:String = "application/x-vnd.adobe.air.file-list";
  static native public final function urisFromURIList(uriList:String):Array;
}

public class flash.desktop.NativeDragActions extends Object
{
  native public function NativeDragActions():*;
  static native public const MOVE:String = "move";

  static native public const COPY:String = "copy";
  static native public const NONE:String = "none";
  static native public const LINK:String = "link";
}


public class flash.events.Event extends Object
{
  native public function Event(type:String,bubbles:Boolean = false,cancelable:Boolean = false):*;
  native public function isDefaultPrevented():Boolean;

  native public function get eventPhase():uint;
  native public function formatToString(className:String,... rest):String;
  native public function clone():Event;
  native public function get bubbles():Boolean;
  native public function preventDefault():void;

  native public function stopPropagation():void;
  native public function toString():String;
  native public function get target():Object;
  native public function get cancelable():Boolean;
  native public function get currentTarget():Object;

  native public function get type():String;
  native public function stopImmediatePropagation():void;
  static native public const CANCEL:String = "cancel";
  static native public const ENTER_FRAME:String = "enterFrame";
  static native public const NETWORK_CHANGE:String = "networkChange";

  static native public const SOUND_COMPLETE:String = "soundComplete";
  static native public const UNLOAD:String = "unload";
  static native public const INIT:String = "init";
  static native public const HTML_BOUNDS_CHANGE:String = "htmlBoundsChange";
  static native public const CLOSING:String = "closing";

  static native public const RENDER:String = "render";
  static native public const TAB_ENABLED_CHANGE:String = "tabEnabledChange";
  static native public const ADDED_TO_STAGE:String = "addedToStage";
  static native public const LOCATION_CHANGE:String = "locationChange";
  static native public const FRAME_CONSTRUCTED:String = "frameConstructed";

  static native public const TAB_CHILDREN_CHANGE:String = "tabChildrenChange";
  static native public const USER_PRESENT:String = "userPresent";
  static native public const CUT:String = "cut";
  static native public const CLEAR:String = "clear";
  static native public const CHANGE:String = "change";

  static native public const HTML_RENDER:String = "htmlRender";
  static native public const RESIZE:String = "resize";
  static native public const COMPLETE:String = "complete";
  static native public const FULLSCREEN:String = "fullScreen";
  static native public const SELECT_ALL:String = "selectAll";

  static native public const CONNECT:String = "connect";
  static native public const SCROLL:String = "scroll";
  static native public const OPEN:String = "open";
  static native public const USER_IDLE:String = "userIdle";
  static native public const CLOSE:String = "close";

  static native public const MOUSE_LEAVE:String = "mouseLeave";
  static native public const ADDED:String = "added";
  static native public const HTML_DOM_INITIALIZE:String = "htmlDOMInitialize";
  static native public const REMOVED:String = "removed";
  static native public const EXITING:String = "exiting";

  static native public const REMOVED_FROM_STAGE:String = "removedFromStage";
  static native public const EXIT_FRAME:String = "exitFrame";
  static native public const TAB_INDEX_CHANGE:String = "tabIndexChange";
  static native public const PASTE:String = "paste";
  static native public const COPY:String = "copy";

  static native public const DISPLAYING:String = "displaying";
  static native public const ACTIVATE:String = "activate";
  static native public const DEACTIVATE:String = "deactivate";
  static native public const SELECT:String = "select";
  static native public const ID3:String = "id3";
}


public class flash.events.KeyboardEvent extends flash.events.Event
{

  native public function KeyboardEvent(type:String,bubbles:Boolean = true,cancelable:Boolean = false,charCodeValue:uint = 0,keyCodeValue:uint = 0,keyLocationValue:uint = 0,ctrlKeyValue:Boolean = false,altKeyValue:Boolean = false,shiftKeyValue:Boolean = false,controlKeyValue:Boolean = false,commandKeyValue:Boolean = false):*;
  native public function set ctrlKey(value:Boolean):void;
  native public function get controlKey():Boolean;
  native public function set charCode(value:uint):void;
  native public function updateAfterEvent():void;

  native public function set controlKey(value:Boolean):void;
  native public function set altKey(value:Boolean):void;
  native public function get commandKey():Boolean;
  native public function set keyCode(value:uint):void;
  native private var m_keyCode:uint;

  native private var m_controlKey:Boolean;
  native public override function clone():flash.events.Event;
  native private var m_keyLocation:uint;
  native public function get charCode():uint;
  native public function set commandKey(value:Boolean):void;

  native public override function toString():String;
  native public function get keyCode():uint;
  native public function get ctrlKey():Boolean;
  native public function get altKey():Boolean;
  native public function set keyLocation(value:uint):void;

  native public function set shiftKey(value:Boolean):void;
  native public function get keyLocation():uint;
  native public function get shiftKey():Boolean;
  static native public const KEY_DOWN:String = "keyDown";
  static native public const KEY_UP:String = "keyUp";
}


public class flash.geom.Matrix extends Object
{

  native public function Matrix(a:Number = 1,b:Number = 0,c:Number = 0,d:Number = 1,tx:Number = 0,ty:Number = 0):*;
  native public var a:Number;
  native public var c:Number;
  native public var ty:Number;
  native public function createBox(scaleX:Number,scaleY:Number,rotation:Number = 0,tx:Number = 0,ty:Number = 0):void;

  native public var b:Number;
  native public var d:Number;
  native public function toString():String;
  native public function translate(dx:Number,dy:Number):void;
  native public function scale(sx:Number,sy:Number):void;

  native public var tx:Number;
  native public function concat(m:Matrix):void;
  native public function invert():void;
  native public function transformPoint(point:flash.geom.Point):flash.geom.Point;
  native public function rotate(angle:Number):void;

  native public function deltaTransformPoint(point:flash.geom.Point):flash.geom.Point;
  native public function clone():Matrix;
  native public function identity():void;
  native public function createGradientBox(width:Number,height:Number,rotation:Number = 0,tx:Number = 0,ty:Number = 0):void;
}


public class flash.events.FileListEvent extends flash.events.Event
{
  native public function FileListEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,files:Array = null):*;

  [ArrayElementType("flash.filesystem.File")]
  native public var files:Array;
  static native public const DIRECTORY_LISTING:String = "directoryListing";
  static native public const SELECT_MULTIPLE:String = "selectMultiple";
}


public final class flash.filters.DisplacementMapFilterMode extends Object
{
  native public function DisplacementMapFilterMode():*;
  static native public const COLOR:String = "color";

  static native public const IGNORE:String = "ignore";
  static native public const WRAP:String = "wrap";
  static native public const CLAMP:String = "clamp";
}


public class flash.geom.Rectangle extends Object
{
  native public function Rectangle(x:Number = 0,y:Number = 0,width:Number = 0,height:Number = 0):*;
  native public function containsPoint(point:flash.geom.Point):Boolean;

  native public function get size():flash.geom.Point;
  native public function set size(value:flash.geom.Point):void;
  native public function isEmpty():Boolean;
  native public var width:Number;
  native public function get left():Number;

  native public function inflatePoint(point:flash.geom.Point):void;
  native public function setEmpty():void;
  native public function set left(value:Number):void;
  native public function union(toUnion:Rectangle):Rectangle;
  native public function set right(value:Number):void;

  native public function offset(dx:Number,dy:Number):void;
  native public function get top():Number;
  native public function set bottom(value:Number):void;
  native public function equals(toCompare:Rectangle):Boolean;
  native public function intersection(toIntersect:Rectangle):Rectangle;

  native public function get right():Number;
  native public function clone():Rectangle;
  native public function inflate(dx:Number,dy:Number):void;
  native public function set bottomRight(value:flash.geom.Point):void;
  native public function containsRect(rect:Rectangle):Boolean;

  native public var height:Number;
  native public function set top(value:Number):void;
  native public function get bottom():Number;
  native public function toString():String;
  native public function contains(x:Number,y:Number):Boolean;

  native public function get bottomRight():flash.geom.Point;
  native public function intersects(toIntersect:Rectangle):Boolean;
  native public var x:Number;
  native public var y:Number;
  native public function get topLeft():flash.geom.Point;

  native public function offsetPoint(point:flash.geom.Point):void;
  native public function set topLeft(value:flash.geom.Point):void;
}


[Event(name="timerComplete",type="flash.events.TimerEvent")]
[Event(name="timer",type="flash.events.TimerEvent")]
public class flash.utils.Timer extends flash.events.EventDispatcher
{
  native public function Timer(delay:Number,repeatCount:int = 0):*;
  native private function _timerDispatch():void;
  native public function get delay():Number;

  native public function set delay(value:Number):void;
  native public function set repeatCount(value:int):void;
  native private var m_repeatCount:int;
  native private function _start(delay:Number,closure:Function):void;
  native private var m_iteration:int;

  native private function tick():void;
  native public function reset():void;
  native private var m_delay:Number;
  native public function get repeatCount():int;
  native public function start():void;

  native public function stop():void;
  native public function get currentCount():int;
  native public function get running():Boolean;
}

native public function flash.utils.setTimeout(closure:Function,delay:Number,... rest):uint;
native public function flash.utils.setInterval(closure:Function,delay:Number,... rest):uint;

native public function flash.utils.clearTimeout(id:uint):void;

public final class flash.utils.SetIntervalTimer extends flash.utils.Timer
{
  native public function SetIntervalTimer(closure:Function,delay:Number,repeats:Boolean,rest:Array):*;
  native private var closure:Function;
  native private var rest:Array;
  native private function onTimer(event:flash.events.Event):void;

  native internal var id:uint;
  native internal function clearArrayEntry():void;
  static native internal final function clearInterval(id:uint):void;
  static native private var intervals:Array;
}
native public function flash.utils.clearInterval(id:uint):void;


[Version("10")]
public class flash.text.engine.TextJustifier extends Object
{

  native public function TextJustifier(locale:String,lineJustification:String):*;
  native public function set lineJustification(value:String):void;
  native public function get locale():String;
  native private function setLocale(value:String):void;
  native public function clone():TextJustifier;

  native public function get lineJustification():String;
  static native public final function getJustifierForLocale(locale:String):TextJustifier;
}


public class flash.data.SQLMode extends Object
{
  native public function SQLMode():*;
  static native public const CREATE:String = "create";
  static native public const READ:String = "read";

  static native public const UPDATE:String = "update";
}


[Event(name="status",type="flash.events.StatusEvent")]
[Event(name="activity",type="flash.events.ActivityEvent")]
public final class flash.media.Microphone extends flash.events.EventDispatcher
{
  native public function Microphone():*;
  native public function set rate(rate:int):void;
  native public function set soundTransform(sndTransform:flash.media.SoundTransform):void;
  native public function get silenceLevel():Number;

  native public function setSilenceLevel(silenceLevel:Number,timeout:int = -1):void;
  native public function get gain():Number;
  native public function get rate():int;
  native public function setUseEchoSuppression(useEchoSuppression:Boolean):void;
  native public function get muted():Boolean;

  [Version("10")]
  native public function set codec(codec:String):void;
  native public function set gain(gain:Number):void;
  native public function get useEchoSuppression():Boolean;
  native public function get silenceTimeout():int;
  [Version("10")]
  native public function get encodeQuality():int;

  [Version("10")]
  native public function set encodeQuality(quality:int):void;
  native public function setLoopBack(state:Boolean = true):void;
  native public function get activityLevel():Number;
  [Version("10")]
  native public function get codec():String;
  native public function get index():int;

  native public function get name():String;
  native public function get soundTransform():flash.media.SoundTransform;
  [Version("10")]
  native public function set framesPerPacket(frames:int):void;
  [Version("10")]
  native public function get framesPerPacket():int;
  static native public final function getMicrophone(index:int = -1):Microphone;

  static native public final function get names():Array;
}


public final class flash.display.NativeWindowSystemChrome extends Object
{
  native public function NativeWindowSystemChrome():*;
  static native public const ALTERNATE:String = "alternate";
  static native public const NONE:String = "none";
  static native public const STANDARD:String = "standard";
}


[Event(name="contextMenu",type="flash.events.MouseEvent")]
[Event(name="nativeDragComplete",type="flash.events.NativeDragEvent")]
[Event(name="nativeDragUpdate",type="flash.events.NativeDragEvent")]
[Event(name="nativeDragStart",type="flash.events.NativeDragEvent")]
[Event(name="nativeDragExit",type="flash.events.NativeDragEvent")]
[Event(name="nativeDragDrop",type="flash.events.NativeDragEvent")]
[Event(name="nativeDragOver",type="flash.events.NativeDragEvent")]
[Event(name="nativeDragEnter",type="flash.events.NativeDragEvent")]
[Event(name="tabIndexChange",type="flash.events.Event")]
[Event(name="tabEnabledChange",type="flash.events.Event")]
[Event(name="tabChildrenChange",type="flash.events.Event")]
[Event(name="keyUp",type="flash.events.KeyboardEvent")]
[Event(name="keyDown",type="flash.events.KeyboardEvent")]
[Event(name="rightMouseUp",type="flash.events.MouseEvent")]
[Event(name="rightMouseDown",type="flash.events.MouseEvent")]
[Event(name="rightClick",type="flash.events.MouseEvent")]
[Event(name="middleMouseUp",type="flash.events.MouseEvent")]
[Event(name="middleMouseDown",type="flash.events.MouseEvent")]
[Event(name="middleClick",type="flash.events.MouseEvent")]
[Event(name="rollOver",type="flash.events.MouseEvent")]
[Event(name="rollOut",type="flash.events.MouseEvent")]
[Event(name="mouseWheel",type="flash.events.MouseEvent")]
[Event(name="mouseUp",type="flash.events.MouseEvent")]
[Event(name="mouseOver",type="flash.events.MouseEvent")]
[Event(name="mouseOut",type="flash.events.MouseEvent")]
[Event(name="mouseMove",type="flash.events.MouseEvent")]
[Event(name="mouseDown",type="flash.events.MouseEvent")]
[Event(name="doubleClick",type="flash.events.MouseEvent")]
[Event(name="click",type="flash.events.MouseEvent")]
[Event(name="mouseFocusChange",type="flash.events.FocusEvent")]
[Event(name="keyFocusChange",type="flash.events.FocusEvent")]
[Event(name="focusOut",type="flash.events.FocusEvent")]
[Event(name="focusIn",type="flash.events.FocusEvent")]
[Event(name="selectAll",type="flash.events.Event")]
[Event(name="paste",type="flash.events.Event")]
[Event(name="cut",type="flash.events.Event")]
[Event(name="copy",type="flash.events.Event")]
[Event(name="clear",type="flash.events.Event")]
public class flash.display.InteractiveObject extends flash.display.DisplayObject
{

  native public function InteractiveObject():*;
  native public function set accessibilityImplementation(value:flash.accessibility.AccessibilityImplementation):void;
  native public function set tabIndex(index:int):void;
  native public function get tabIndex():int;
  native private var _copyItem:flash.display.NativeMenuItem;

  native private function _defaultFP9ContextMenu():flash.display.NativeMenu;
  native private function _constructInteractiveObject():void;
  native public function get doubleClickEnabled():Boolean;
  native private function onContextMenuEvent(event:flash.events.MouseEvent):void;
  native private function _textCanCopy():Boolean;

  native private function _textCanPaste():Boolean;
  native public function set focusRect(focusRect:Object):void;
  [Version("10")]
  native private function get clipboardItems():flash.ui.ContextMenuClipboardItems;
  native public function set doubleClickEnabled(enabled:Boolean):void;
  native private var _pasteItem:flash.display.NativeMenuItem;

  [Version("10")]
  native private function configureClipboardItems(items:flash.ui.ContextMenuClipboardItems):*;
  native public function set tabEnabled(enabled:Boolean):void;
  native private function _getTextLinkAtMouse(event:flash.events.MouseEvent):String;
  native private var m_contextMenu:flash.display.NativeMenu = null;
  [Inspectable(environment="none")]
  native public function get accessibilityImplementation():flash.accessibility.AccessibilityImplementation;

  native private function _textCanClear():Boolean;
  native public function get mouseEnabled():Boolean;
  native private function _isRichTextEditor():Boolean;
  native private function _setContextMenuOwner():void;
  native public function get focusRect():Object;

  native public function get tabEnabled():Boolean;
  native public function get contextMenu():flash.display.NativeMenu;
  native private function _getEditString(key:String):String;
  native public function set contextMenu(cm:flash.display.NativeMenu):void;
  native private var _cutItem:flash.display.NativeMenuItem;

  native private var _selectAllItem:flash.display.NativeMenuItem;
  native private var _deleteItem:flash.display.NativeMenuItem;
  native private function _textCanCut():Boolean;
  native public function set mouseEnabled(enabled:Boolean):void;
}


public class flash.display.DisplayObjectContainer extends flash.display.InteractiveObject
{
  native public function DisplayObjectContainer():*;

  native public function get mouseChildren():Boolean;
  native public function get numChildren():int;
  native public function contains(child:flash.display.DisplayObject):Boolean;
  native public function swapChildrenAt(index1:int,index2:int):void;
  native public function getChildByName(name:String):flash.display.DisplayObject;

  native public function removeChildAt(index:int):flash.display.DisplayObject;
  native public function getChildIndex(child:flash.display.DisplayObject):int;
  native public function addChildAt(child:flash.display.DisplayObject,index:int):flash.display.DisplayObject;
  native public function set tabChildren(enable:Boolean):void;
  native public function get textSnapshot():flash.text.TextSnapshot;

  native public function swapChildren(child1:flash.display.DisplayObject,child2:flash.display.DisplayObject):void;
  native public function get tabChildren():Boolean;
  native public function getObjectsUnderPoint(point:flash.geom.Point):Array;
  native public function set mouseChildren(enable:Boolean):void;
  native public function removeChild(child:flash.display.DisplayObject):flash.display.DisplayObject;

  native public function getChildAt(index:int):flash.display.DisplayObject;
  native public function addChild(child:flash.display.DisplayObject):flash.display.DisplayObject;
  native public function areInaccessibleObjectsUnderPoint(point:flash.geom.Point):Boolean;
  native public function setChildIndex(child:flash.display.DisplayObject,index:int):void;
}


public final class flash.display.FocusDirection extends Object
{
  native public function FocusDirection():*;

  static native public const TOP:String = "top";
  static native public const NONE:String = "none";
  static native public const BOTTOM:String = "bottom";
}

[Event(name="fullScreen",type="flash.events.FullScreenEvent")]
[Event(name="resize",type="flash.events.Event")]
[Event(name="mouseLeave",type="flash.events.Event")]
public class flash.display.Stage extends flash.display.DisplayObjectContainer
{
  native public function Stage():*;
  native public override function set tabIndex(value:int):void;

  native public function set stageFocusRect(on:Boolean):void;
  native public function get align():String;
  native public override function willTrigger(type:String):Boolean;
  native public override function set mouseChildren(value:Boolean):void;
  native public function isFocusInaccessible():Boolean;

  native public function set stageHeight(value:int):void;
  native public override function hasEventListener(type:String):Boolean;
  native public function get scaleMode():String;
  native public override function addChildAt(child:flash.display.DisplayObject,index:int):flash.display.DisplayObject;
  native public function get showDefaultContextMenu():Boolean;

  native public override function set width(value:Number):void;
  native public function set showDefaultContextMenu(value:Boolean):void;
  native public override function set name(value:String):void;
  native public override function setChildIndex(child:flash.display.DisplayObject,index:int):void;
  native public function set align(value:String):void;

  native public function set scaleMode(value:String):void;
  native public override function set scaleX(value:Number):void;
  native public override function swapChildrenAt(index1:int,index2:int):void;
  native public override function set scaleY(value:Number):void;
  [Version("10")]
  native public override function set scaleZ(value:Number):void;

  [Version("10")]
  native public function get colorCorrection():String;
  native public override function set scrollRect(value:flash.geom.Rectangle):void;
  native public override function get numChildren():int;
  native public override function get height():Number;
  native public override function set blendMode(value:String):void;

  native public function assignFocus(objectToFocus:flash.display.InteractiveObject,direction:String):void;
  native public override function set scale9Grid(value:flash.geom.Rectangle):void;
  native public function get fullScreenWidth():uint;
  native public override function set tabEnabled(value:Boolean):void;
  native public function set focus(newFocus:flash.display.InteractiveObject):void;

  native public override function get textSnapshot():flash.text.TextSnapshot;
  native public function set fullScreenSourceRect(value:flash.geom.Rectangle):void;
  [Version("10")]
  native public override function set rotationY(value:Number):void;
  native public function set quality(value:String):void;
  [Version("10")]
  native public override function set rotationZ(value:Number):void;

  [Version("10")]
  native public override function set rotationX(value:Number):void;
  native public override function set alpha(value:Number):void;
  native public override function set focusRect(value:Object):void;
  native public override function set accessibilityImplementation(value:flash.accessibility.AccessibilityImplementation):void;
  [Version("10")]
  native public function set colorCorrection(value:String):void;

  native public override function get tabChildren():Boolean;
  native public override function get mouseChildren():Boolean;
  native public function get stageHeight():int;
  native public override function set cacheAsBitmap(value:Boolean):void;
  native public override function set mouseEnabled(value:Boolean):void;

  native public override function set accessibilityProperties(value:flash.accessibility.AccessibilityProperties):void;
  native public function invalidate():void;
  native public override function removeChildAt(index:int):flash.display.DisplayObject;
  native public override function addEventListener(type:String,listener:Function,useCapture:Boolean = false,priority:int = 0,useWeakReference:Boolean = false):void;
  native private function _displayState(value:String):void;

  native public override function dispatchEvent(event:flash.events.Event):Boolean;
  native public function set stageWidth(value:int):void;
  native public override function get width():Number;
  native private function requireOwnerPermissions():void;
  native public function get focus():flash.display.InteractiveObject;

  native public function get fullScreenSourceRect():flash.geom.Rectangle;
  native public override function set contextMenu(value:flash.display.NativeMenu):void;
  native public override function set height(value:Number):void;
  native public override function set opaqueBackground(value:Object):void;
  native public override function set mask(value:flash.display.DisplayObject):void;

  native public function set frameRate(value:Number):void;
  native public function get fullScreenHeight():uint;
  native public override function set visible(value:Boolean):void;
  native public function set displayState(value:String):void;
  native public function get nativeWindow():flash.display.NativeWindow;

  native public function get stageWidth():int;
  native private function _assignFocus(objectToFocus:flash.display.InteractiveObject,direction:String):void;
  [Exclude(name="y",kind="property")]
  [Exclude(name="x",kind="property")]
  [Exclude(name="visible",kind="property")]
  [Exclude(name="transform",kind="property")]
  [Exclude(name="tabIndex",kind="property")]
  [Exclude(name="tabEnabled",kind="property")]
  [Exclude(name="scrollRect",kind="property")]
  [Exclude(name="scaleY",kind="property")]
  [Exclude(name="scaleX",kind="property")]
  [Exclude(name="scale9Grid",kind="property")]
  [Exclude(name="rotation",kind="property")]
  [Exclude(name="opaqueBackground",kind="property")]
  [Exclude(name="name",kind="property")]
  [Exclude(name="mouseEnabled",kind="property")]
  [Exclude(name="mask",kind="property")]
  [Exclude(name="loaderInfo",kind="property")]
  [Exclude(name="focusRect",kind="property")]
  [Exclude(name="filters",kind="property")]
  [Exclude(name="contextMenu",kind="property")]
  [Exclude(name="cacheAsBitmap",kind="property")]
  [Exclude(name="blendMode",kind="property")]
  [Exclude(name="alpha",kind="property")]
  [Exclude(name="accessibilityProperties",kind="property")]
  [Exclude(name="accessibilityImplementation",kind="property")]
  native public function get frameRate():Number;
  [Version("10")]
  native public function get colorCorrectionSupport():String;
  native public function get displayState():String;

  native public override function set x(value:Number):void;
  native public override function set y(value:Number):void;
  [Version("10")]
  native public override function set z(value:Number):void;
  native public override function set filters(value:Array):void;
  native public override function set tabChildren(value:Boolean):void;

  native public override function set transform(value:flash.geom.Transform):void;
  native public override function addChild(child:flash.display.DisplayObject):flash.display.DisplayObject;
  native public override function set rotation(value:Number):void;
  native public function get stageFocusRect():Boolean;
  native public function get quality():String;

  static native private const kInvalidParamError:uint = 2004;
}


[Version("10")]
public interface flash.display.IGraphicsData
{
}


[Version("10")]
public interface flash.display.IGraphicsFill
{
}


[Version("10")]
public final class flash.display.GraphicsEndFill extends Object
  implements flash.display.IGraphicsFill,flash.display.IGraphicsData
{
  native public function GraphicsEndFill():*;
}


public final class flash.accessibility.Accessibility extends Object
{
  native public function Accessibility():*;
  [Inspectable(environment="none")]
  static native public final function sendEvent(source:flash.display.DisplayObject,childID:uint,eventType:uint,nonHTML:Boolean = false):void;
  static native public final function updateProperties():void;

  static native public final function get active():Boolean;
}


public final class flash.text.GridFitType extends Object
{
  native public function GridFitType():*;
  static native public const SUBPIXEL:String = "subpixel";
  static native public const NONE:String = "none";
  static native public const PIXEL:String = "pixel";
}


public final class adobe.utils.CustomActions extends Object
{

  native public function CustomActions():*;
  static native public final function installActions(name:String,data:String):void;
  static native public final function uninstallActions(name:String):void;
  static native public final function get actionsList():Array;
  static native public final function getActions(name:String):String;
}


public final class flash.desktop.Updater extends Object
{

  native public function Updater():void;
  native private function get _isADL():Boolean;
  native public function update(airFile:flash.filesystem.File,version:String):void;
  native private function _launch(arguments:String):void;
  native private function get _thisApplication():String;
}


public class flash.geom.Point extends Object
{

  native public function Point(x:Number = 0,y:Number = 0):*;
  native public function add(v:Point):Point;
  native public function get length():Number;
  native public function toString():String;
  native public function normalize(thickness:Number):void;

  native public function subtract(v:Point):Point;
  native public var x:Number;
  native public var y:Number;
  native public function offset(dx:Number,dy:Number):void;
  native public function clone():Point;

  native public function equals(toCompare:Point):Boolean;
  static native public final function interpolate(pt1:Point,pt2:Point,f:Number):Point;
  static native public final function distance(pt1:Point,pt2:Point):Number;
  static native public final function polar(len:Number,angle:Number):Point;
}


public final class flash.ui.Mouse extends Object
{
  native public function Mouse():*;

  static native public final function hide():void;
  [Version("10")]
  static native public final function set cursor(value:String):void;
  static native public final function show():void;
  [Version("10")]
  static native public final function get cursor():String;
}


public final class flash.xml.XMLParser extends Object
{
  native public function XMLParser():*;

  native public function getNext(tag:flash.xml.XMLTag):int;
  native public function startParse(source:String,ignoreWhite:Boolean):void;
}


public class flash.events.HTMLUncaughtScriptExceptionEvent extends flash.events.Event
{
  native public function HTMLUncaughtScriptExceptionEvent(exceptionValue:*):*;
  native public var exceptionValue:*;
  native private var m_stackTrace:Array;

  native public function set stackTrace(newValue:Array):void;
  native public function get stackTrace():Array;
  native public override function clone():flash.events.Event;
  native private var m_stackTraceToCopy:Array;
  static native public const UNCAUGHT_SCRIPT_EXCEPTION:* = "uncaughtScriptException";
}


public final class flash.text.FontStyle extends Object
{

  native public function FontStyle():*;
  static native public const ITALIC:String = "italic";
  static native public const BOLD_ITALIC:String = "boldItalic";
  static native public const BOLD:String = "bold";
  static native public const REGULAR:String = "regular";
}


[Version("10")]
[Event(name="complete",type="flash.events.ShaderEvent")]
public class flash.display.ShaderJob extends flash.events.EventDispatcher
{

  native public function ShaderJob(shader:flash.display.Shader = null,target:Object = null,width:int = 0,height:int = 0):*;
  native public function start(waitForCompletion:Boolean = false):void;
  native public function get shader():flash.display.Shader;
  native public function get width():int;
  native public function get height():int;

  native public function set target(s:Object):void;
  native public function set shader(s:flash.display.Shader):void;
  native public function set width(v:int):void;
  native public function get progress():Number;
  native public function set height(v:int):void;

  native public function get target():Object;
  native public function cancel():void;
}


[Version("10")]
public final class flash.display.GraphicsShaderFill extends Object
  implements flash.display.IGraphicsFill,flash.display.IGraphicsData
{
  native public function GraphicsShaderFill(shader:flash.display.Shader = null,matrix:flash.geom.Matrix = null):*;
  native public var matrix:flash.geom.Matrix;
  native public var shader:flash.display.Shader;
}


public class flash.printing.PrintJobOptions extends Object
{

  native public function PrintJobOptions(printAsBitmap:Boolean = false):*;
  native public var printAsBitmap:Boolean = false;
}


[Event(name="drmStatus",type="flash.events.DRMStatusEvent")]
[Event(name="drmError",type="flash.events.DRMErrorEvent")]
[Event(name="drmAuthenticate",type="flash.events.DRMAuthenticateEvent")]
[Event(name="onDRMContentData")]
[Event(name="onPlayStatus")]
[Event(name="onCuePoint")]
[Event(name="onTextData")]
[Event(name="onImageData")]
[Event(name="onMetaData")]
[Event(name="onXMPData")]
[Event(name="netStatus",type="flash.events.NetStatusEvent")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="asyncError",type="flash.events.AsyncErrorEvent")]
[Event(name="status",type="flash.events.StatusEvent")]
public class flash.net.NetStream extends flash.events.EventDispatcher
{
  native public function NetStream(connection:flash.net.NetConnection,peerID:String = "connectToFMS"):*;
  native private function onStatus(info:*):void;
  native public function set soundTransform(sndTransform:flash.media.SoundTransform):void;

  native public function togglePause():void;
  [Version("10")]
  native public function set maxPauseBufferTime(pauseBufferTime:Number):void;
  native public function get bufferLength():Number;
  native public function setDRMAuthenticationCredentials(userName:String,password:String,type:String):void;
  native public function send(handlerName:String,... rest):void;

  [Version("10")]
  native public function get peerStreams():Array;
  native public function attachCamera(theCamera:flash.media.Camera,snapshotMilliseconds:int = -1):void;
  native public function get client():Object;
  native private function invokeWithArgsArray(index:uint,p_arguments:Array):*;
  native public function get checkPolicyFile():Boolean;

  native public function publish(name:String = null,type:String = null):void;
  native public function close():void;
  native public function attachAudio(microphone:flash.media.Microphone):void;
  native public function get time():Number;
  [Version("10")]
  native public function get farNonce():String;

  native public function set client(object:Object):void;
  native private function construct(connection:flash.net.NetConnection,peerID:String):void;
  native public function receiveVideo(flag:Boolean):void;
  native public function get bytesTotal():uint;
  native public function set bufferTime(bufferTime:Number):void;

  [Inspectable(environment="none")]
  native public function get videoCodec():uint;
  native private function onResult(streamId:int):void;
  native public function get soundTransform():flash.media.SoundTransform;
  native private function call(stream:NetStream,command:String,responder:flash.net.Responder,... rest):void;
  native public function get bytesLoaded():uint;

  [Inspectable(environment="none")]
  native public function get audioCodec():uint;
  [Version("10")]
  native public function onPeerConnect(subscriber:NetStream):Boolean;
  native private function invoke(index:uint,... rest):*;
  [Version("10")]
  native public function get nearNonce():String;
  native public function set checkPolicyFile(state:Boolean):void;

  native public function get bufferTime():Number;
  [Version("10")]
  native public function get info():flash.net.NetStreamInfo;
  native public function get currentFPS():Number;
  native public function receiveVideoFPS(FPS:Number):void;
  native public function get objectEncoding():uint;

  native public function receiveAudio(flag:Boolean):void;
  native public function resume():void;
  native public function pause():void;
  native public function get liveDelay():Number;
  native public function seek(offset:Number):void;

  [Version("10")]
  native public function get farID():String;
  native public function play(... rest):void;
  [Inspectable(environment="none")]
  native public function get decodedFrames():uint;
  [Version("air1.5")]
  native public function preloadEmbeddedData(param:flash.net.NetStreamPlayOptions):void;
  [Version("10")]
  native public function play2(param:flash.net.NetStreamPlayOptions):void;

  [Version("10")]
  native public function get maxPauseBufferTime():Number;
  static native private const kSetBufferTime:uint = 4;
  static native private const kGetAudioCodecID:uint = 313;
  static native private const kGetMaxPauseBufferTime:* = 400;
  static native private const kSetAudioCodecID:uint = 314;

  static native private const kSend:uint = 3;
  static native private const kSetMaxPauseBufferTime:* = 401;
  static native private const kGetTotalFrames:uint = 307;
  static native private const kGetFarNonce:uint = 342;
  static native private const kAttachAudio:uint = 1;

  static native private const kSetTotalFrames:uint = 308;
  static native private const kGetInfo:uint = 343;
  static native public const CONNECT_TO_FMS:String = "connectToFMS";
  static native private const kGetVideoCodecID:uint = 311;
  static native private const kGetFarID:uint = 340;

  static native private const kAttachVideo:uint = 2;
  static native private const kClose:uint = 0;
  static native private const kGetBufferLength:uint = 303;
  static native private const kGetLiveDelay:uint = 304;
  static native private const kSetVideoCodecID:uint = 312;

  static native private const kGetTime:uint = 300;
  static native private final function createOnPlayStatusCompleteObject():Object;
  static native public const DIRECT_CONNECTIONS:String = "directConnections";
  static native private const kGetBytesTotal:uint = 306;
  static native private const kGetBytesLoaded:uint = 305;

  static native private const kCall:uint = 202;
  static native public final function resetDRMVouchers():void;
  static native private const kGetBufferTime:uint = 302;
  static native private const kGetCurrentFps:uint = 301;
  static native private const kGetNearNonce:uint = 341;
}


[Event(name="uploadCompleteData",type="flash.events.DataEvent")]
[Event(name="httpResponseStatus",type="flash.events.HTTPStatusEvent")]
[Event(name="httpStatus",type="flash.events.HTTPStatusEvent")]
[Event(name="select",type="flash.events.Event")]
[Event(name="securityError",type="flash.events.SecurityErrorEvent")]
[Event(name="progress",type="flash.events.ProgressEvent")]
[Event(name="open",type="flash.events.Event")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="complete",type="flash.events.Event")]
[Event(name="cancel",type="flash.events.Event")]
public class flash.net.FileReference extends flash.events.EventDispatcher
{

  native public function FileReference():*;
  native public function upload(request:flash.net.URLRequest,uploadDataFieldName:String = "Filedata",testUpload:Boolean = false):void;
  native private function _load(dest:flash.utils.ByteArray):void;
  [Version("10")]
  native public function load():void;
  native public function get size():Number;

  native public function get type():String;
  native public function browse(typeFilter:Array = null):Boolean;
  native public function get name():String;
  native public function get creator():String;
  native public function get creationDate():Date;

  native public function download(request:flash.net.URLRequest,defaultFileName:String = null):void;
  native public function get modificationDate():Date;
  native public function uploadUnencoded(request:flash.net.URLRequest):void;
  [Version("10")]
  native public function get data():flash.utils.ByteArray;
  native public function cancel():void;

  native private function _save(data:flash.utils.ByteArray,defaultFileName:String):void;
  [Version("10")]
  native public function save(data:*,defaultFileName:String = null):void;
  native public function get extension():String;
  static native private const kInvalidParamError:uint = 2004;
  static native private const kLocalSecurityError:uint = 2028;

  static native private const kNullPointerError:uint = 2007;
  static native private const kInvalidCallError:uint = 2037;
}


public final class flash.display.StageQuality extends Object
{
  native public function StageQuality():*;
  static native public const BEST:String = "best";
  static native public const LOW:String = "low";

  static native public const MEDIUM:String = "medium";
  static native public const HIGH:String = "high";
}


public class flash.geom.Transform extends Object
{
  native public function Transform(displayObject:flash.display.DisplayObject):*;
  native public function get matrix():flash.geom.Matrix;
  native public function set matrix(value:flash.geom.Matrix):void;

  [Version("10")]
  native public function set matrix3D(m:flash.geom.Matrix3D):*;
  native public function get colorTransform():flash.geom.ColorTransform;
  [Version("10")]
  native public function get perspectiveProjection():flash.geom.PerspectiveProjection;
  native public function get concatenatedMatrix():flash.geom.Matrix;
  [Version("10")]
  native public function get matrix3D():flash.geom.Matrix3D;

  [Version("10")]
  native public function getRelativeMatrix3D(relativeTo:flash.display.DisplayObject):flash.geom.Matrix3D;
  [Version("10")]
  native public function set perspectiveProjection(pm:flash.geom.PerspectiveProjection):void;
  native public function get concatenatedColorTransform():flash.geom.ColorTransform;
  native public function set colorTransform(value:flash.geom.ColorTransform):void;
  native public function get pixelBounds():flash.geom.Rectangle;
}


public class flash.accessibility.AccessibilityProperties extends Object
{

  native public function AccessibilityProperties():*;
  native public var shortcut:String;
  native public var name:String;
  native public var silent:Boolean;
  native public var description:String;

  native public var forceSimple:Boolean;
  native public var noAutoLabeling:Boolean;
}


public class flash.filters.BitmapFilter extends Object
{
  native public function BitmapFilter():*;
  native public function clone():BitmapFilter;
}


public final class flash.filters.DropShadowFilter extends flash.filters.BitmapFilter
{
  native public function DropShadowFilter(distance:Number = 4.0,angle:Number = 45,color:uint = 0,alpha:Number = 1.0,blurX:Number = 4.0,blurY:Number = 4.0,strength:Number = 1.0,quality:int = 1,inner:Boolean = false,knockout:Boolean = false,hideObject:Boolean = false):*;

  native public function get hideObject():Boolean;
  native public function set blurX(value:Number):void;
  native public function get color():uint;
  native public function set blurY(value:Number):void;
  native public function set quality(value:int):void;

  native public function set angle(value:Number):void;
  native public function get strength():Number;
  native public function set hideObject(value:Boolean):void;
  native public function set distance(value:Number):void;
  native public function set inner(value:Boolean):void;

  native public function set color(value:uint):void;
  native public function set strength(value:Number):void;
  native public function get blurX():Number;
  native public function get blurY():Number;
  native public function get angle():Number;

  native public function set knockout(value:Boolean):void;
  native public function get distance():Number;
  native public function get inner():Boolean;
  native public function get knockout():Boolean;
  native public function set alpha(value:Number):void;

  native public override function clone():flash.filters.BitmapFilter;
  native public function get alpha():Number;
  native public function get quality():int;
}


[Version("10")]
public final class flash.display.GraphicsSolidFill extends Object
  implements flash.display.IGraphicsFill,flash.display.IGraphicsData
{
  native public function GraphicsSolidFill(color:uint = 0,alpha:Number = 1.0):*;
  native public var color:uint = 0;

  native public var alpha:Number = 1.0;
}


[Version("10")]
public final class flash.display.ShaderParameterType extends Object
{
  native public function ShaderParameterType():*;
  static native public const INT2:String = "int2";
  static native public const INT3:String = "int3";
  static native public const INT4:String = "int4";

  static native public const BOOL2:String = "bool2";
  static native public const BOOL3:String = "bool3";
  static native public const BOOL4:String = "bool4";
  static native public const INT:String = "int";
  static native public const BOOL:String = "bool";

  static native public const MATRIX2X2:String = "matrix2x2";
  static native public const MATRIX3X3:String = "matrix3x3";
  static native public const MATRIX4X4:String = "matrix4x4";
  static native public const FLOAT2:String = "float2";
  static native public const FLOAT3:String = "float3";

  static native public const FLOAT:String = "float";
  static native public const FLOAT4:String = "float4";
}


public final class flash.filters.GradientGlowFilter extends flash.filters.BitmapFilter
{
  native public function GradientGlowFilter(distance:Number = 4.0,angle:Number = 45,colors:Array = null,alphas:Array = null,ratios:Array = null,blurX:Number = 4.0,blurY:Number = 4.0,strength:Number = 1,quality:int = 1,type:String = "inner",knockout:Boolean = false):*;
  native public function set colors(value:Array):void;
  native public function get strength():Number;

  native public function set blurX(value:Number):void;
  native public function set blurY(value:Number):void;
  native public function set angle(value:Number):void;
  native public function get type():String;
  native public function get ratios():Array;

  native public function set strength(value:Number):void;
  native public function set alphas(value:Array):void;
  native public function get colors():Array;
  native public function get blurX():Number;
  native public function get blurY():Number;

  native public function get angle():Number;
  native public function set knockout(value:Boolean):void;
  native public function get alphas():Array;
  native public function set ratios(value:Array):void;
  native public function set distance(value:Number):void;

  native public function get knockout():Boolean;
  native public function set type(value:String):void;
  native public function get distance():Number;
  native public override function clone():flash.filters.BitmapFilter;
  native public function set quality(value:int):void;

  native public function get quality():int;
}


public class flash.html.HTMLWindowCreateOptions extends Object
{
  native public function HTMLWindowCreateOptions():*;
  native public var scrollBarsVisible:Boolean = true;
  native public var width:Number = NaN;
  native public var height:Number = NaN;

  native public var resizable:Boolean = false;
  native public var statusBarVisible:Boolean = false;
  native public var locationBarVisible:Boolean = false;
  native public var toolBarVisible:Boolean = false;
  native public var x:Number = NaN;

  native public var y:Number = NaN;
  native public var fullscreen:Boolean = false;
  native public var menuBarVisible:Boolean = false;
}


public class flash.system.SecurityDomain extends Object
{
  native public function SecurityDomain():*;
  static native public final function get currentDomain():SecurityDomain;
}


public class flash.events.MouseEvent extends flash.events.Event
{

  native public function MouseEvent(type:String,bubbles:Boolean = true,cancelable:Boolean = false,localX:Number = 0,localY:Number = 0,relatedObject:flash.display.InteractiveObject = null,ctrlKey:Boolean = false,altKey:Boolean = false,shiftKey:Boolean = false,buttonDown:Boolean = false,delta:int = 0,commandKey:Boolean = false,controlKey:Boolean = false,clickCount:int = 0):*;
  native public function get ctrlKey():Boolean;
  native public function set controlKey(value:Boolean):void;
  native private var m_buttonDown:Boolean;
  native private var m_altKey:Boolean;

  native private var m_shiftKey:Boolean;
  native private function getStageY():Number;
  native public function get commandKey():Boolean;
  native public function get shiftKey():Boolean;
  native private function getStageX():Number;

  native public function set localX(value:Number):void;
  native public function set relatedObject(value:flash.display.InteractiveObject):void;
  native public function set localY(value:Number):void;
  native public function get stageX():Number;
  native private var m_ctrlKey:Boolean;

  native private var m_commandKey:Boolean;
  native public function set commandKey(value:Boolean):void;
  [Version("10")]
  native private var m_isRelatedObjectInaccessible:Boolean;
  native public function get stageY():Number;
  native public function get delta():int;

  native public function get controlKey():Boolean;
  native public function updateAfterEvent():void;
  native public function get relatedObject():flash.display.InteractiveObject;
  native public function get localX():Number;
  native public function get localY():Number;

  native private var m_controlKey:Boolean;
  native public override function clone():flash.events.Event;
  native private var m_delta:int;
  native public function get clickCount():int;
  native public function set ctrlKey(value:Boolean):void;

  native public override function toString():String;
  native public function set buttonDown(value:Boolean):void;
  native public function set delta(value:int):void;
  native public function set altKey(value:Boolean):void;
  native public function get buttonDown():Boolean;

  [Version("10")]
  native public function set isRelatedObjectInaccessible(value:Boolean):void;
  native private var m_relatedObject:flash.display.InteractiveObject;
  native private var m_clickCount:int;
  native public function set shiftKey(value:Boolean):void;
  [Version("10")]
  native public function get isRelatedObjectInaccessible():Boolean;

  native public function get altKey():Boolean;
  static native public const MOUSE_WHEEL:String = "mouseWheel";
  static native public const MIDDLE_MOUSE_DOWN:String = "middleMouseDown";
  static native public const RIGHT_MOUSE_UP:String = "rightMouseUp";
  static native public const MOUSE_MOVE:String = "mouseMove";

  static native public const MOUSE_OVER:String = "mouseOver";
  static native public const CONTEXT_MENU:String = "contextMenu";
  static native public const MOUSE_UP:String = "mouseUp";
  static native public const RIGHT_MOUSE_DOWN:String = "rightMouseDown";
  static native public const ROLL_OVER:String = "rollOver";

  static native public const MOUSE_DOWN:String = "mouseDown";
  static native public const RIGHT_CLICK:String = "rightClick";
  static native public const ROLL_OUT:String = "rollOut";
  static native public const CLICK:String = "click";
  static native public const MOUSE_OUT:String = "mouseOut";

  static native public const DOUBLE_CLICK:String = "doubleClick";
  static native public const MIDDLE_CLICK:String = "middleClick";
  static native public const MIDDLE_MOUSE_UP:String = "middleMouseUp";
}


public class flash.events.NativeDragEvent extends flash.events.MouseEvent
{
  native public function NativeDragEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = true,localX:Number = 0,localY:Number = 0,relatedObject:flash.display.InteractiveObject = null,clipboard:flash.desktop.Clipboard = null,allowedActions:flash.desktop.NativeDragOptions = null,dropAction:String = null,controlKey:Boolean = false,altKey:Boolean = false,shiftKey:Boolean = false,commandKey:Boolean = false):*;
  native public var dropAction:String;

  native public var allowedActions:flash.desktop.NativeDragOptions;
  native public var clipboard:flash.desktop.Clipboard;
  native public override function toString():String;
  native public override function clone():flash.events.Event;
  static native public const NATIVE_DRAG_EXIT:String = "nativeDragExit";

  static native public const NATIVE_DRAG_UPDATE:String = "nativeDragUpdate";
  static native public const NATIVE_DRAG_DROP:String = "nativeDragDrop";
  static native public const NATIVE_DRAG_ENTER:String = "nativeDragEnter";
  static native public const NATIVE_DRAG_OVER:String = "nativeDragOver";
  static native public const NATIVE_DRAG_COMPLETE:String = "nativeDragComplete";

  static native public const NATIVE_DRAG_START:String = "nativeDragStart";
}


public interface flash.net.IDynamicPropertyOutput
{
  native function writeDynamicProperty(name:String,value:*):void;
}


public class flash.net.DynamicPropertyOutput extends Object
  implements flash.net.IDynamicPropertyOutput
{
  native public function DynamicPropertyOutput():*;
  native public function writeDynamicProperty(name:String,value:*):void;
}


[Event(name="directoryListing",type="flash.events.FileListEvent")]
[Event(name="selectMultiple",type="flash.events.FileListEvent")]
[Event(name="select",type="flash.events.Event")]
[Event(name="securityError",type="flash.events.SecurityErrorEvent")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="complete",type="flash.events.Event")]
[Event(name="cancel",type="flash.events.Event")]
public class flash.filesystem.File extends flash.net.FileReference
{
  native public function File(path:String = null):*;

  native public function get icon():flash.desktop.Icon;
  native public function deleteDirectory(deleteDirectoryContents:Boolean = false):void;
  native public function browseForSave(title:String):void;
  native public function deleteFileAsync():void;
  native public function get spaceAvailable():Number;

  native public function getRelativePath(ref:flash.net.FileReference,useDotDot:Boolean = false):String;
  native public function browseForOpen(title:String,typeFilter:Array = null):void;
  native public function copyToAsync(newLocation:flash.net.FileReference,overwrite:Boolean = false):void;
  native private function _setFileInfo(path:String,flags:uint,redLine:uint):void;
  native public function browseForDirectory(title:String):void;

  native public function copyTo(newLocation:flash.net.FileReference,overwrite:Boolean = false):void;
  native public function createDirectory():void;
  native private function _isHidden():Boolean;
  [ArrayElementType("flash.filesystem.File")]
  native public function getDirectoryListing():Array;
  native public function get isSymbolicLink():Boolean;

  native private function _cancel():void;
  native public function deleteDirectoryAsync(deleteDirectoryContents:Boolean = false):void;
  native private function setFileInfo(normalizedPath:String,type:uint = 0,redLine:uint = 0):void;
  native public function get exists():Boolean;
  native public function clone():File;

  native public function set url(value:String):void;
  native public function deleteFile():void;
  native public function canonicalize():void;
  native private function resolveComponents(components:Array,target:File = null,protectBase:Boolean = false):File;
  native public function get isDirectory():Boolean;

  native private function _isDirectory():Boolean;
  native public function moveTo(newLocation:flash.net.FileReference,overwrite:Boolean = false):void;
  native private function _getCanonicalPath():String;
  native public function get parent():File;
  native public function get nativePath():String;

  native public override function toString():String;
  native public function get url():String;
  native public function moveToAsync(newLocation:flash.net.FileReference,overwrite:Boolean = false):void;
  native public function resolvePath(path:String):File;
  native public function moveToTrash():void;

  native public function get isHidden():Boolean;
  native private function _isSymbolicLink():Boolean;
  native public function getDirectoryListingAsync():void;
  native public function moveToTrashAsync():void;
  native public function set nativePath(value:String):void;

  native public function browseForOpenMultiple(title:String,typeFilter:Array = null):void;
  native public override function cancel():void;
  native private function _exists():Boolean;
  native public function get isPackage():Boolean;
  native private function _isPackage():Boolean;

  static native private final function initDesktopDir():String;
  static native private const kNullPointerError:uint = 2007;
  static native private final function get desktopDirectoryPath():String;
  static native private final function get appDataDirectoryPath():String;
  static native private var m_desktopDirectoryPath:String = null;

  static native private const m_allBackSlashes:RegExp;
  static native private final function getFile(normalizedPath:String,type:uint = 0,redLine:uint = 0):File;
  static native private const kFilePermissionLocalStore:uint = 16;
  static native private final function pathFromUrl(url:String):String;
  static native private final function initUserDir():String;

  static native public final function createTempFile():File;
  static native public final function get documentsDirectory():File;
  static native private final function _checkPathAccessFor(ref:flash.net.FileReference):*;
  static native private var m_appDataDirectoryPath:String = null;
  static native private final function pathIsRelative(path:String):Boolean;

  static native private var ensureappStorageDir:Boolean = true;
  static native public final function get systemCharset():String;
  static native private const _systemCharset:String;
  static native private final function _getPubId():String;
  static native private final function get appResourceDirectoryPath():String;

  static native private const kInvalidCallError:uint = 2037;
  static native private final function get userDirectoryPath():String;
  static native public final function get applicationStorageDirectory():File;
  static native private const kFilePermissionTemp:uint = 32;
  static native private final function _createTempFile():String;

  static native private final function _createTempDirectory():String;
  static native private const kInvalidParamError:uint = 2004;
  static native private final function pathHasPrefix(path:String,prefix:String):*;
  static native private final function _checkUpdateFor(ref:flash.net.FileReference):*;
  static native public final function get desktopDirectory():File;

  static native private const kFilePermissionAppResource:uint = 64;
  static native private const parentComps:Array;
  static native public final function get lineEnding():String;
  static native private const m_allSlashes:RegExp;
  static native private final function get appStorageDirectoryPath():String;

  static native private const pathIsURL:RegExp;
  static native private const fileUrlLocalhostPrefix:RegExp;
  static native private final function _checkAccessFor(ref:flash.net.FileReference):*;
  static native private final function initSeparator():String;
  static native private final function _getAppId():String;

  static native private var m_appResourceDirectoryPath:String = null;
  static native private const m_allColons:RegExp;
  static native public final function get applicationDirectory():File;
  static native private final function normalizePath(inPath:String,newComps:Array = null,protectBase:Boolean = false):String;
  static native private const kFilePermissionProgrammatic:uint = 8;

  static native private var m_userDirectoryPath:String = null;
  static native private const kFilePermissionUpload:uint = 1;
  static native private const _lineEnding:String;
  static native private final function initAppDataDirRoot():String;
  static native public final function createTempDirectory():File;

  static native private final function get documentsDirectoryPath():String;
  static native public final function get userDirectory():File;
  static native private const uriParts:RegExp;
  static native public final function get separator():String;
  static native private const _separator:String;

  [ArrayElementType("flash.filesystem.File")]
  static native public final function getRootDirectories():Array;
  static native private var m_documentsDirectoryPath:String = null;
  static native private final function initSystemCharset():String;
  static native private final function initAppResourceDir():String;
  static native private var m_appStorageDirectoryPath:String = null;

  static native private final function _getNativePathFor(ref:flash.net.FileReference):String;
  static native private final function _getFlagsFor(ref:flash.net.FileReference):uint;
  static native private final function _getRedlineFor(ref:flash.net.FileReference):uint;
  static native private final function initDocumentsDir():String;
  static native private final function urlFromPath(path:String):String;
}


public final class flash.media.SoundTransform extends Object
{

  native public function SoundTransform(vol:Number = 1,panning:Number = 0):*;
  native public function set pan(panning:Number):void;
  native public function get rightToRight():Number;
  native public function get volume():Number;
  native public function get leftToLeft():Number;

  native public function set rightToRight(rightToRight:Number):void;
  native public function set leftToLeft(leftToLeft:Number):void;
  native public function set leftToRight(leftToRight:Number):void;
  native public function get leftToRight():Number;
  native public function set volume(volume:Number):void;

  native public function set rightToLeft(rightToLeft:Number):void;
  native public function get pan():Number;
  native public function get rightToLeft():Number;
}


[Version("10")]
public final class flash.text.engine.FontLookup extends Object
{
  native public function FontLookup():*;
  static native public const EMBEDDED_CFF:String = "embeddedCFF";

  static native public const DEVICE:String = "device";
}


public final class flash.display.MorphShape extends flash.display.DisplayObject
{
  native public function MorphShape():*;
}


[Event(name="status",type="flash.events.StatusEvent")]
[Event(name="securityError",type="flash.events.SecurityErrorEvent")]
[Event(name="asyncError",type="flash.events.AsyncErrorEvent")]
public class flash.net.LocalConnection extends flash.events.EventDispatcher
{
  native public function LocalConnection():*;
  native public function get domain():String;
  native public function set client(client:Object):void;

  native public function close():void;
  native public function allowInsecureDomain(... rest):void;
  native public function connect(connectionName:String):void;
  native public function get client():Object;
  native public function allowDomain(... rest):void;

  native public function send(connectionName:String,methodName:String,... rest):void;
}


[Version("10")]
public final class flash.ui.MouseCursor extends Object
{
  native public function MouseCursor():*;
  static native public const BUTTON:String = "button";
  static native public const HAND:String = "hand";
  static native public const IBEAM:String = "ibeam";

  static native public const ARROW:String = "arrow";
  static native public const AUTO:String = "auto";
}


public class flash.events.TextEvent extends flash.events.Event
{
  native public function TextEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,text:String = ""):*;
  native public function get text():String;
  native private function copyNativeData(other:TextEvent):void;

  native public function set text(value:String):void;
  native public override function toString():String;
  native public override function clone():flash.events.Event;
  native private var m_text:String;
  static native public const TEXT_INPUT:String = "textInput";

  static native public const LINK:String = "link";
}


public final class flash.net.URLRequestHeader extends Object
{
  native public function URLRequestHeader(name:String = "",value:String = ""):*;
  native public var value:String;
  native public var name:String;
}


[Version("10")]
public final class flash.display.TriangleCulling extends Object
{
  native public function TriangleCulling():*;

  static native public const NEGATIVE:String = "negative";
  static native public const NONE:String = "none";
  static native public const POSITIVE:String = "positive";
}


[Event(name="httpResponseStatus",type="flash.events.HTTPStatusEvent")]
[Event(name="httpStatus",type="flash.events.HTTPStatusEvent")]
[Event(name="securityError",type="flash.events.SecurityErrorEvent")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="progress",type="flash.events.ProgressEvent")]
[Event(name="complete",type="flash.events.Event")]
[Event(name="open",type="flash.events.Event")]
public class flash.net.URLLoader extends flash.events.EventDispatcher
{
  native public function URLLoader(request:flash.net.URLRequest = null):*;
  native private var stream:flash.net.URLStream;

  native public var dataFormat:String = "text";
  native public function load(request:flash.net.URLRequest):void;
  native public var data:*;
  native private function onProgress(event:flash.events.ProgressEvent):void;
  native public override function addEventListener(type:String,listener:Function,useCapture:Boolean = false,priority:int = 0,useWeakReference:Boolean = false):void;

  native public var bytesLoaded:uint = 0;
  native public function close():void;
  native public var bytesTotal:uint = 0;
  native private function redirectEvent(event:flash.events.Event):void;
  native private function onComplete(event:flash.events.Event):void;
}


[Version("10")]
public final class flash.text.engine.TypographicCase extends Object
{

  native public function TypographicCase():*;
  static native public const LOWERCASE:String = "lowercase";
  static native public const CAPS:String = "caps";
  static native public const DEFAULT:String = "default";
  static native public const UPPERCASE:String = "uppercase";

  static native public const TITLE:String = "title";
  static native public const SMALL_CAPS:String = "smallCaps";
  static native public const CAPS_AND_SMALL_CAPS:String = "capsAndSmallCaps";
}


[Version("10")]
public interface flash.display.IGraphicsPath
{
}


[Version("10")]
public final class flash.display.GraphicsTrianglePath extends Object
  implements flash.display.IGraphicsPath,flash.display.IGraphicsData
{
  native public function GraphicsTrianglePath(vertices:Vector.<Number> = null,indices:Vector.<int> = null,uvtData:Vector.<Number> = null,culling:String = "none"):*;
  native public function get culling():String;

  native private var _culling:String;
  native public var indices:Vector.<int>;
  native public var vertices:Vector.<Number>;
  native public var uvtData:Vector.<Number>;
  native public function set culling(value:String):void;
}


public final class flash.display.PixelSnapping extends Object
{

  native public function PixelSnapping():*;
  static native public const ALWAYS:String = "always";
  static native public const NEVER:String = "never";
  static native public const AUTO:String = "auto";
}


public class flash.display.Shape extends flash.display.DisplayObject
{
  native public function Shape():*;

  native public function get graphics():flash.display.Graphics;
}


public class flash.data.SQLColumnSchema extends Object
{
  native public function SQLColumnSchema(name:String,primaryKey:Boolean,allowNull:Boolean,autoIncrement:Boolean,dataType:String,defaultCollationType:String):*;
  native public function get autoIncrement():Boolean;
  native public function get defaultCollationType():String;
  native private var _dataType:String;

  native public function get dataType():String;
  native private var _name:String;
  native public function get name():String;
  native public function get allowNull():Boolean;
  native private var _allowNull:Boolean;

  native private var _autoInc:Boolean;
  native private var _collSeq:String;
  native private var _primaryKey:Boolean;
  native public function get primaryKey():Boolean;
}


public final class flash.media.SoundMixer extends Object
{
  native public function SoundMixer():*;

  static native public final function set soundTransform(sndTransform:flash.media.SoundTransform):void;
  static native public final function areSoundsInaccessible():Boolean;
  static native public final function get bufferTime():int;
  static native public final function computeSpectrum(outputArray:flash.utils.ByteArray,FFTMode:Boolean = false,stretchFactor:int = 0):void;
  static native public final function set bufferTime(bufferTime:int):void;

  static native public final function get soundTransform():flash.media.SoundTransform;
  static native public final function stopAll():void;
}


public class flash.filesystem.FileMode extends Object
{
  native public function FileMode():*;
  static native public const READ:String = "read";
  static native public const UPDATE:String = "update";

  static native public const APPEND:String = "append";
  static native public const WRITE:String = "write";
}


public class flash.filters.ConvolutionFilter extends flash.filters.BitmapFilter
{
  native public function ConvolutionFilter(matrixX:Number = 0,matrixY:Number = 0,matrix:Array = null,divisor:Number = 1.0,bias:Number = 0.0,preserveAlpha:Boolean = true,clamp:Boolean = true,color:uint = 0,alpha:Number = 0.0):*;
  native public function get matrix():Array;
  native public function set matrix(value:Array):void;

  native public function get color():uint;
  native public function set preserveAlpha(value:Boolean):void;
  native public function get alpha():Number;
  native public function set color(value:uint):void;
  native public function set bias(value:Number):void;

  native public function set alpha(value:Number):void;
  native public function set matrixX(value:Number):void;
  native public function set matrixY(value:Number):void;
  native public function get preserveAlpha():Boolean;
  native public function set clamp(value:Boolean):void;

  native public function get matrixX():Number;
  native public function get matrixY():Number;
  native public function get bias():Number;
  native public function get clamp():Boolean;
  native public function set divisor(value:Number):void;

  native public override function clone():flash.filters.BitmapFilter;
  native public function get divisor():Number;
}


[Version("10")]
public final class flash.text.engine.TextLineCreationResult extends Object
{
  native public function TextLineCreationResult():*;
  static native public const EMERGENCY:String = "emergency";
  static native public const SUCCESS:String = "success";

  static native public const COMPLETE:String = "complete";
  static native public const INSUFFICIENT_WIDTH:String = "insufficientWidth";
}


public class flash.events.StatusEvent extends flash.events.Event
{
  native public function StatusEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,code:String = "",level:String = ""):*;
  native private var m_level:String;
  native public function get code():String;

  native public function set level(value:String):void;
  native public function set code(value:String):void;
  native public function get level():String;
  native public override function toString():String;
  native public override function clone():flash.events.Event;

  native private var m_code:String;
  static native public const STATUS:String = "status";
}


public class flash.events.SQLEvent extends flash.events.Event
{
  native public function SQLEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false):*;
  native public override function clone():flash.events.Event;
  static native public const COMPACT:String = "compact";

  static native public const ATTACH:String = "attach";
  static native public const BEGIN:String = "begin";
  static native public const DEANALYZE:String = "deanalyze";
  static native public const OPEN:String = "open";
  static native public const DETACH:String = "detach";

  static native public const RESULT:String = "result";
  static native public const CLOSE:String = "close";
  static native public const SCHEMA:String = "schema";
  static native public const ROLLBACK:String = "rollback";
  static native public const ANALYZE:String = "analyze";

  static native public const REENCRYPT:String = "reencrypt";
  static native public const COMMIT:String = "commit";
  static native public const CANCEL:String = "cancel";
}


[Version("10")]
public final dynamic class flash.display.ShaderData extends Object
{
  native public function ShaderData(byteCode:flash.utils.ByteArray):*;
  native private function _setByteCode(code:flash.utils.ByteArray):void;
}


public class flash.system.LoaderContext extends Object
{

  native public function LoaderContext(checkPolicyFile:Boolean = false,applicationDomain:flash.system.ApplicationDomain = null,securityDomain:flash.system.SecurityDomain = null):*;
  native public var applicationDomain:flash.system.ApplicationDomain = null;
  native public var checkPolicyFile:Boolean = false;
  native public var securityDomain:flash.system.SecurityDomain = null;
  native public var allowLoadBytesCodeExecution:Boolean = false;
}


public class flash.system.JPEGLoaderContext extends flash.system.LoaderContext
{

  native public function JPEGLoaderContext(deblockingFilter:Number = 0.0,checkPolicyFile:Boolean = false,applicationDomain:flash.system.ApplicationDomain = null,securityDomain:flash.system.SecurityDomain = null):*;
  native public var deblockingFilter:Number = 0.0;
}

native public function flash.debugger.enterDebugger():void;


public class flash.utils.Proxy extends Object
{
  native public function Proxy():*;
  native flash_proxy function deleteProperty(name:*):Boolean;

  native flash_proxy function isAttribute(name:*):Boolean;
  native flash_proxy function callProperty(name:*,... rest):*;
  native flash_proxy function nextNameIndex(index:int):int;
  native flash_proxy function nextName(index:int):String;
  native flash_proxy function getDescendants(name:*):*;

  native flash_proxy function getProperty(name:*):*;
  native flash_proxy function nextValue(index:int):*;
  native flash_proxy function setProperty(name:*,value:*):void;
  native flash_proxy function hasProperty(name:*):Boolean;
  static native private const flash_proxy:* = "http://www.adobe.com/2006/actionscript/flash/proxy";
}

native public const flash.utils.flash_proxy:* = "http://www.adobe.com/2006/actionscript/flash/proxy";


public final class flash.html.script.Package extends flash.utils.Proxy
{
  native public function Package(parent:Package,packageName:String,appDomain:flash.system.ApplicationDomain):*;
  native private function doLookup(nameAsString:String):*;
  native private function getFullyQualifiedPackageName():String;
  native flash_proxy final override function getProperty(name:*):*;

  native flash_proxy final override function hasProperty(name:*):Boolean;
  native private function throwNonFunctionException(fullyQualifiedNameAsString:String):void;
  native flash_proxy final override function callProperty(name:*,... rest):*;
  native flash_proxy final override function nextNameIndex(index:int):int;
  native private var m_appDomain:flash.system.ApplicationDomain;

  native private var m_fullyQualifiedName:String;
  native private function getFullyQualifiedName(nameAsString:String):String;
  native private var m_parent:Package;
  native private var m_packageName:String;
  static native private final function construct(parent:Package,packageName:String,appDomain:flash.system.ApplicationDomain):Package;

  static native private const flash_proxy:* = "http://www.adobe.com/2006/actionscript/flash/proxy";
}

public class flash.html.script.PropertyEnumHelper extends Object
{
  native public function PropertyEnumHelper(enumPropertiesClosure:Function,getPropertyClosure:Function):*;
  native private var m_propertyNames:Array;
  native public function nextNameIndex(lastIndex:int):int;
  native public function nextName(index:int):String;

  native private var m_getPropertyClosure:Function;
  native private var m_enumPropertiesClosure:Function;
  native public function nextValue(index:int):*;
}


public final dynamic class Date extends Object
{
  native public function Date(year:* = null,month:* = null,date:* = null,hours:* = null,minutes:* = null,seconds:* = null,ms:* = null):*;
  native public function get month():Number;

  native public function get monthUTC():Number;
  native public function set month(value:Number):*;
  native AS3 function getMilliseconds():Number;
  native public function set minutesUTC(value:Number):*;
  native public function get hours():Number;

  native private function _setTime(value:Number):Number;
  native AS3 function getUTCMinutes():Number;
  native public function get milliseconds():Number;
  native AS3 function setMilliseconds(ms:* = null):Number;
  native public function get hoursUTC():Number;

  native public function get dateUTC():Number;
  native private function _get(index:int):Number;
  native public function get fullYearUTC():Number;
  native AS3 function toTimeString():String;
  native AS3 function toUTCString():String;

  native AS3 function setUTCMilliseconds(ms:* = null):Number;
  native public function get day():Number;
  native AS3 function setMinutes(min:* = null,sec:* = null,ms:* = null):Number;
  native public function set hours(value:Number):*;
  native AS3 function getUTCMilliseconds():Number;

  native public function set time(value:Number):*;
  native AS3 function getDate():Number;
  native public function get secondsUTC():Number;
  native AS3 function toLocaleString():String;
  native AS3 function valueOf():Number;

  native AS3 function getMinutes():Number;
  native public function set monthUTC(value:Number):*;
  native public function set milliseconds(value:Number):*;
  native AS3 function setUTCMinutes(min:* = null,sec:* = null,ms:* = null):Number;
  native public function get date():Number;

  native AS3 function setDate(date:* = null):Number;
  native AS3 function getUTCSeconds():Number;
  native AS3 function getUTCMonth():Number;
  native public function set dateUTC(value:Number):*;
  native AS3 function setUTCDate(date:* = null):Number;

  native public function set hoursUTC(value:Number):*;
  native AS3 function toDateString():String;
  native AS3 function getUTCDate():Number;
  native AS3 function setUTCSeconds(sec:* = null,ms:* = null):Number;
  native AS3 function setUTCMonth(month:* = null,date:* = null):Number;

  native public function set fullYearUTC(value:Number):*;
  native AS3 function getUTCHours():Number;
  native AS3 function getTime():Number;
  native AS3 function setSeconds(sec:* = null,ms:* = null):Number;
  native AS3 function setMonth(month:* = null,date:* = null):Number;

  native AS3 function getSeconds():Number;
  native AS3 function getMonth():Number;
  native private function _toString(index:int):String;
  native public function get minutesUTC():Number;
  native AS3 function setHours(hour:* = null,min:* = null,sec:* = null,ms:* = null):Number;

  native AS3 function getUTCDay():Number;
  native AS3 function setTime(t:* = null):Number;
  native public function set secondsUTC(value:Number):*;
  native AS3 function toLocaleTimeString():String;
  native AS3 function setUTCHours(hour:* = null,min:* = null,sec:* = null,ms:* = null):Number;

  native public function set minutes(value:Number):*;
  native public function set fullYear(value:Number):*;
  native AS3 function getHours():Number;
  native public function set date(value:Number):*;
  native public function get minutes():Number;

  native AS3 function getTimezoneOffset():Number;
  native public function set millisecondsUTC(value:Number):*;
  native public function get time():Number;
  native AS3 function getDay():Number;
  native public function get dayUTC():Number;

  native AS3 function getFullYear():Number;
  native public function get millisecondsUTC():Number;
  native AS3 function toString():String;
  native AS3 function setFullYear(year:* = null,month:* = null,date:* = null):Number;
  native public function get fullYear():Number;

  native AS3 function toLocaleDateString():String;
  native AS3 function setUTCFullYear(year:* = null,month:* = null,date:* = null):Number;
  native AS3 function getUTCFullYear():Number;
  native public function get timezoneOffset():Number;
  native public function set seconds(value:Number):*;

  native public function get seconds():Number;
  static native public final function UTC(year:*,month:*,date:* = 1,hours:* = 0,minutes:* = 0,seconds:* = 0,ms:* = 0,... rest):Number;
  static native public final function parse(s:*):Number;
  static native public const length:int = 7;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}


public interface flash.utils.IDataOutput
{

  native function writeMultiByte(value:String,charSet:String):void;
  native function writeUTFBytes(value:String):void;
  native function writeShort(value:int):void;
  native function writeByte(value:int):void;
  native function writeUTF(value:String):void;

  native function writeBoolean(value:Boolean):void;
  native function get endian():String;
  native function set objectEncoding(version:uint):void;
  native function writeBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;
  native function writeInt(value:int):void;

  native function get objectEncoding():uint;
  native function set endian(type:String):void;
  native function writeDouble(value:Number):void;
  native function writeUnsignedInt(value:uint):void;
  native function writeFloat(value:Number):void;

  native function writeObject(object:*):void;
}


[Event(name="securityError",type="flash.events.SecurityErrorEvent")]
[Event(name="socketData",type="flash.events.ProgressEvent")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="connect",type="flash.events.Event")]
[Event(name="close",type="flash.events.Event")]
public class flash.net.Socket extends flash.events.EventDispatcher
  implements flash.utils.IDataInput,flash.utils.IDataOutput
{
  native public function Socket(host:String = null,port:int = 0):*;
  native private function onTimeout(event:flash.events.TimerEvent):void;
  native public function writeUTFBytes(value:String):void;
  native public function flush():void;

  native public function writeObject(object:*):void;
  native public function writeByte(value:int):void;
  native public function get connected():Boolean;
  native public function readShort():int;
  native public function readUnsignedShort():uint;

  native public function readDouble():Number;
  native public function writeInt(value:int):void;
  native private var _timeoutEvent:flash.events.SecurityErrorEvent;
  native public function get endian():String;
  native public function set objectEncoding(version:uint):void;

  native public function get bytesAvailable():uint;
  native private function didFailureOccur():Boolean;
  native private var _timeout:uint;
  native public function writeDouble(value:Number):void;
  native public function readObject():*;

  native public function readUTF():String;
  native public function set endian(type:String):void;
  native private function internalGetSecurityErrorMessage(host:String,port:int):String;
  native public function readBoolean():Boolean;
  native public function readUTFBytes(length:uint):String;

  native private function internalClose():void;
  native public function writeFloat(value:Number):void;
  [Version("10")]
  native public function set timeout(value:uint):void;
  native private var _timeoutTimer:flash.utils.Timer;
  native public function readByte():int;

  native public function writeUTF(value:String):void;
  native public function writeBoolean(value:Boolean):void;
  native public function get objectEncoding():uint;
  native public function readUnsignedInt():uint;
  native public function writeBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;

  native public function writeMultiByte(value:String,charSet:String):void;
  native public function readUnsignedByte():uint;
  [Version("10")]
  native public function get timeout():uint;
  native public function writeUnsignedInt(value:uint):void;
  native public function writeShort(value:int):void;

  native public function readFloat():Number;
  native public function connect(host:String,port:int):void;
  native public function readMultiByte(length:uint,charSet:String):String;
  native private function internalConnect(host:String,port:int):void;
  native private function _init():void;

  native public function readBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;
  native public function close():void;
  native public function readInt():int;
  static native private const MIN_TIMEOUT:* = 250;
}


public final class flash.display.SWFVersion extends Object
{
  native public function SWFVersion():*;

  static native public const FLASH1:uint = 1;
  static native public const FLASH3:uint = 3;
  static native public const FLASH5:uint = 5;
  static native public const FLASH7:uint = 7;
  static native public const FLASH4:uint = 4;

  static native public const FLASH6:uint = 6;
  static native public const FLASH8:uint = 8;
  static native public const FLASH2:uint = 2;
  static native public const FLASH10:uint = 10;
  static native public const FLASH9:uint = 9;
}


public class flash.events.ProgressEvent extends flash.events.Event
{

  native public function ProgressEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,bytesLoaded:Number = 0,bytesTotal:Number = 0):*;
  native public function get bytesLoaded():Number;
  native public function set bytesTotal(value:Number):void;
  native public override function toString():String;
  native public function set bytesLoaded(value:Number):void;

  native public function get bytesTotal():Number;
  native private var m_bytesTotal:Number;
  native public override function clone():flash.events.Event;
  native private var m_bytesLoaded:Number;
  static native public const PROGRESS:String = "progress";

  static native public const SOCKET_DATA:String = "socketData";
}


public class flash.display.NativeWindowInitOptions extends Object
{
  native public function NativeWindowInitOptions():*;
  native public function get minimizable():Boolean;
  native public function set minimizable(value:Boolean):void;
  native public function set transparent(value:Boolean):void;

  native public function set maximizable(value:Boolean):void;
  native public function get systemChrome():String;
  native public function get resizable():Boolean;
  native public function get transparent():Boolean;
  native public function set type(value:String):void;

  native public function set resizable(value:Boolean):void;
  native public function set systemChrome(value:String):void;
  native public function get maximizable():Boolean;
  native public function get type():String;
}

native public function flash.media.scanHardware():void;

[Event(name="status",type="flash.events.StatusEvent")]
[Event(name="activity",type="flash.events.ActivityEvent")]
public final class flash.media.Camera extends flash.events.EventDispatcher
{

  native public function Camera():*;
  native public function get loopback():Boolean;
  native public function setMode(width:int,height:int,fps:Number,favorArea:Boolean = true):void;
  native public function get width():int;
  native public function get height():int;

  native public function get fps():Number;
  native public function get name():String;
  native public function setMotionLevel(motionLevel:int,timeout:int = 2000):void;
  native public function get muted():Boolean;
  native public function get motionLevel():int;

  native public function get currentFPS():Number;
  native public function get bandwidth():int;
  native public function get index():int;
  native public function get keyFrameInterval():int;
  native public function setLoopback(compress:Boolean = false):void;

  native public function get activityLevel():Number;
  [Inspectable(environment="none")]
  native public function setCursor(value:Boolean):void;
  native public function get motionTimeout():int;
  native public function setKeyFrameInterval(keyFrameInterval:int):void;
  native public function setQuality(bandwidth:int,quality:int):void;

  native public function get quality():int;
  static native public final function get names():Array;
  static native public final function getCamera(name:String = null):Camera;
}


[Version("10")]
public final class flash.text.engine.TextBaseline extends Object
{
  native public function TextBaseline():*;
  static native public const DESCENT:String = "descent";

  static native public const IDEOGRAPHIC_BOTTOM:String = "ideographicBottom";
  static native public const USE_DOMINANT_BASELINE:String = "useDominantBaseline";
  static native public const IDEOGRAPHIC_CENTER:String = "ideographicCenter";
  static native public const IDEOGRAPHIC_TOP:String = "ideographicTop";
  static native public const ASCENT:String = "ascent";

  static native public const ROMAN:String = "roman";
}


public final class flash.text.AntiAliasType extends Object
{
  native public function AntiAliasType():*;
  static native public const ADVANCED:String = "advanced";
  static native public const NORMAL:String = "normal";
}


public class flash.events.NativeWindowDisplayStateEvent extends flash.events.Event
{
  native public function NativeWindowDisplayStateEvent(type:String,bubbles:Boolean = true,cancelable:Boolean = false,beforeDisplayState:String = "",afterDisplayState:String = ""):*;

  native private var m_beforeDisplayState:String;
  native private var m_afterDisplayState:String;
  native public function get afterDisplayState():String;
  native public override function toString():String;
  native public override function clone():flash.events.Event;

  native public function get beforeDisplayState():String;
  static native public const DISPLAY_STATE_CHANGING:String = "displayStateChanging";
  static native public const DISPLAY_STATE_CHANGE:String = "displayStateChange";
}


public class flash.events.ErrorEvent extends flash.events.TextEvent
{
  native public function ErrorEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,text:String = "",id:int = 0):*;
  native private var m_errorID:int;

  native public function get errorID():int;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  static native public const ERROR:String = "error";
}


public class flash.events.IOErrorEvent extends flash.events.ErrorEvent
{
  native public function IOErrorEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,text:String = "",id:int = 0):*;

  native public override function toString():String;
  native public override function clone():flash.events.Event;
  [Inspectable(environment="none")]
  static native public const DISK_ERROR:String = "diskError";
  [Inspectable(environment="none")]
  static native public const NETWORK_ERROR:String = "networkError";
  [Inspectable(environment="none")]
  static native public const VERIFY_ERROR:String = "verifyError";

  static native public const IO_ERROR:String = "ioError";
}

native public function flash.utils.getQualifiedSuperclassName(value:*):String;
native public function flash.utils.getTimer():int;
native public function flash.utils.describeType(value:*):XML;
native public function flash.utils.unescapeMultiByte(value:String):String;

native public function flash.utils.getDefinitionByName(name:String):Object;
native public function trace(... rest):void;
native public function flash.utils.getQualifiedClassName(value:*):String;
native public function flash.utils.escapeMultiByte(value:String):String;


[Version("10")]
public final class flash.display.ColorCorrectionSupport extends Object
{
  native public function ColorCorrectionSupport():*;

  static native public const DEFAULT_OFF:String = "defaultOff";
  static native public const UNSUPPORTED:String = "unsupported";
  static native public const DEFAULT_ON:String = "defaultOn";
}


public final class flash.display.Screen extends flash.events.EventDispatcher
{
  native public function Screen():*;
  native public function get colorDepth():int;

  native public function get bounds():flash.geom.Rectangle;
  native public function get visibleBounds():flash.geom.Rectangle;
  static native public final function get mainScreen():Screen;
  static native public final function getScreensForRectangle(rect:flash.geom.Rectangle):Array;
  static native public final function get screens():Array;
}


public final class flash.text.TextFormatAlign extends Object
{

  native public function TextFormatAlign():*;
  static native public const JUSTIFY:String = "justify";
  static native public const CENTER:String = "center";
  static native public const LEFT:String = "left";
  static native public const RIGHT:String = "right";
}


[Version("10")]
public final class flash.text.engine.Kerning extends Object
{

  native public function Kerning():*;
  static native public const AUTO:String = "auto";
  static native public const ON:String = "on";
  static native public const OFF:String = "off";
}


[Version("10")]
public interface flash.display.IGraphicsStroke
{
}


public final class flash.display.LineScaleMode extends Object
{
  native public function LineScaleMode():*;

  static native public const HORIZONTAL:String = "horizontal";
  static native public const VERTICAL:String = "vertical";
  static native public const NORMAL:String = "normal";
  static native public const NONE:String = "none";
}


public class flash.events.AsyncErrorEvent extends flash.events.ErrorEvent
{
  native public function AsyncErrorEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,text:String = "",error:Error = null):*;

  native public var error:Error;
  native public override function toString():String;
  native public override function clone():flash.events.Event;
  static native public const ASYNC_ERROR:String = "asyncError";
}


public final class flash.display.StageScaleMode extends Object
{
  native public function StageScaleMode():*;

  static native public const EXACT_FIT:String = "exactFit";
  static native public const NO_BORDER:String = "noBorder";
  static native public const NO_SCALE:String = "noScale";
  static native public const SHOW_ALL:String = "showAll";
}


public final class flash.filters.BitmapFilterQuality extends Object
{
  native public function BitmapFilterQuality():*;

  static native public const LOW:int = 1;
  static native public const MEDIUM:int = 2;
  static native public const HIGH:int = 3;
}

native public function flash.profiler.showRedrawRegions(on:Boolean,color:uint = 16711680):void;
[Inspectable(environment="none")]
native public function flash.profiler.profile(on:Boolean):void;


public class flash.display.BitmapData extends Object
  implements flash.display.IBitmapDrawable
{

  native public function BitmapData(width:int,height:int,transparent:Boolean = true,fillColor:uint = NaN):*;
  native public function copyPixels(sourceBitmapData:BitmapData,sourceRect:flash.geom.Rectangle,destPoint:flash.geom.Point,alphaBitmapData:BitmapData = null,alphaPoint:flash.geom.Point = null,mergeAlpha:Boolean = false):void;
  native public function setPixel(x:int,y:int,color:uint):void;
  native public function hitTest(firstPoint:flash.geom.Point,firstAlphaThreshold:uint,secondObject:Object,secondBitmapDataPoint:flash.geom.Point = null,secondAlphaThreshold:uint = 1):Boolean;
  native public function applyFilter(sourceBitmapData:BitmapData,sourceRect:flash.geom.Rectangle,destPoint:flash.geom.Point,filter:flash.filters.BitmapFilter):void;

  native public function fillRect(rect:flash.geom.Rectangle,color:uint):void;
  native public function colorTransform(rect:flash.geom.Rectangle,colorTransform:flash.geom.ColorTransform):void;
  native public function draw(source:flash.display.IBitmapDrawable,matrix:flash.geom.Matrix = null,colorTransform:flash.geom.ColorTransform = null,blendMode:String = null,clipRect:flash.geom.Rectangle = null,smoothing:Boolean = false):void;
  [Version("10")]
  native public function setVector(rect:flash.geom.Rectangle,inputVector:Vector.<uint>):void;
  native public function get width():int;

  native public function copyChannel(sourceBitmapData:BitmapData,sourceRect:flash.geom.Rectangle,destPoint:flash.geom.Point,sourceChannel:uint,destChannel:uint):void;
  native public function getPixel(x:int,y:int):uint;
  native public function generateFilterRect(sourceRect:flash.geom.Rectangle,filter:flash.filters.BitmapFilter):flash.geom.Rectangle;
  native public function get transparent():Boolean;
  native public function unlock(changeRect:flash.geom.Rectangle = null):void;

  native public function scroll(x:int,y:int):void;
  native public function getColorBoundsRect(mask:uint,color:uint,findColor:Boolean = true):flash.geom.Rectangle;
  native public function pixelDissolve(sourceBitmapData:BitmapData,sourceRect:flash.geom.Rectangle,destPoint:flash.geom.Point,randomSeed:int = 0,numPixels:int = 0,fillColor:uint = 0):int;
  native public function noise(randomSeed:int,low:uint = 0,high:uint = 255,channelOptions:uint = 7,grayScale:Boolean = false):void;
  native public function clone():BitmapData;

  native private function _setVector(inputVector:Vector.<uint>,x:int,y:int,width:int,height:int):void;
  native public function dispose():void;
  native public function floodFill(x:int,y:int,color:uint):void;
  native public function setPixel32(x:int,y:int,color:uint):void;
  native public function get rect():flash.geom.Rectangle;

  native public function compare(otherBitmapData:BitmapData):Object;
  native public function perlinNoise(baseX:Number,baseY:Number,numOctaves:uint,randomSeed:int,stitch:Boolean,fractalNoise:Boolean,channelOptions:uint = 7,grayScale:Boolean = false,offsets:Array = null):void;
  native public function get height():int;
  native public function paletteMap(sourceBitmapData:BitmapData,sourceRect:flash.geom.Rectangle,destPoint:flash.geom.Point,redArray:Array = null,greenArray:Array = null,blueArray:Array = null,alphaArray:Array = null):void;
  native public function getPixels(rect:flash.geom.Rectangle):flash.utils.ByteArray;

  native public function threshold(sourceBitmapData:BitmapData,sourceRect:flash.geom.Rectangle,destPoint:flash.geom.Point,operation:String,threshold:uint,color:uint = 0,mask:uint = NaN,copySource:Boolean = false):uint;
  native public function getPixel32(x:int,y:int):uint;
  native public function lock():void;
  native public function setPixels(rect:flash.geom.Rectangle,inputByteArray:flash.utils.ByteArray):void;
  native public function merge(sourceBitmapData:BitmapData,sourceRect:flash.geom.Rectangle,destPoint:flash.geom.Point,redMultiplier:uint,greenMultiplier:uint,blueMultiplier:uint,alphaMultiplier:uint):void;

  [Version("10")]
  native public function getVector(rect:flash.geom.Rectangle):Vector.<uint>;
  native private function _getVector(v:Vector.<uint>,x:int,y:int,width:int,height:int):*;
  [Version("10")]
  native public function histogram(hRect:flash.geom.Rectangle = null):Vector.<Vector.<Number> >;
}


public class flash.desktop.InteractiveIcon extends flash.desktop.Icon
{
  native public function InteractiveIcon():*;
  native public override function set bitmaps(value:Array):void;

  native public override function get bitmaps():Array;
  native public function get width():int;
  native public function get height():int;
}


public class flash.desktop.DockIcon extends flash.desktop.InteractiveIcon
{
  native public function DockIcon():*;
  native public function bounce(priority:String = "informational"):void;

  native public override function get bitmaps():Array;
  native public override function get width():int;
  native public override function get height():int;
  native public override function set bitmaps(value:Array):void;
  native public function set menu(menu:flash.display.NativeMenu):void;

  native public function get menu():flash.display.NativeMenu;
}


[Version("10")]
public class flash.events.ShaderEvent extends flash.events.Event
{
  native public function ShaderEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,bitmap:flash.display.BitmapData = null,array:flash.utils.ByteArray = null,vector:Vector.<Number> = null):*;
  native public function set byteArray(bArray:flash.utils.ByteArray):*;
  native public function get vector():Vector.<Number>;
  native public function set vector(v:Vector.<Number>):*;

  native private var m_bitmapData:flash.display.BitmapData;
  native public override function toString():String;
  native public function get byteArray():flash.utils.ByteArray;
  native public function set bitmapData(bmpData:flash.display.BitmapData):*;
  native private var m_vector:Vector.<Number>;

  native public function get bitmapData():flash.display.BitmapData;
  native public override function clone():flash.events.Event;
  native private var m_byteArray:flash.utils.ByteArray;
  static native public const COMPLETE:String = "complete";
}


public class flash.events.TimerEvent extends flash.events.Event
{
  native public function TimerEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false):*;

  native public override function toString():String;
  native public override function clone():flash.events.Event;
  native public function updateAfterEvent():void;
  static native public const TIMER_COMPLETE:String = "timerComplete";
  static native public const TIMER:String = "timer";
}


public final dynamic class XMLList extends Object
{

  native public function XMLList(value:* = null):*;
  native AS3 override function hasOwnProperty(P:* = null):Boolean;
  native AS3 function insertChildBefore(child1:*,child2:*):*;
  native AS3 function namespaceDeclarations():Array;
  native AS3 override function propertyIsEnumerable(P:* = null):Boolean;

  native AS3 function setChildren(value:*):XML;
  native AS3 function name():Object;
  native AS3 function replace(propertyName:*,value:*):XML;
  native AS3 function normalize():XMLList;
  native AS3 function inScopeNamespaces():Array;

  native AS3 function toXMLString():String;
  native AS3 function descendants(name:* = "*"):XMLList;
  native AS3 function attributes():XMLList;
  native AS3 function processingInstructions(name:* = "*"):XMLList;
  native AS3 function setNamespace(ns:*):void;

  native AS3 function setLocalName(name:*):void;
  native AS3 function namespace(prefix:* = null):*;
  native AS3 function attribute(arg:*):XMLList;
  native AS3 function childIndex():int;
  native AS3 function contains(value:*):Boolean;

  native AS3 function appendChild(child:*):XML;
  native AS3 function hasComplexContent():Boolean;
  native AS3 function localName():Object;
  native AS3 function length():int;
  native AS3 function valueOf():XMLList;

  native AS3 function parent():*;
  native AS3 function child(propertyName:*):XMLList;
  native AS3 function toString():String;
  native AS3 function hasSimpleContent():Boolean;
  native AS3 function prependChild(value:*):XML;

  native AS3 function setName(name:*):void;
  native AS3 function text():XMLList;
  native AS3 function copy():XMLList;
  native AS3 function nodeKind():String;
  native AS3 function elements(name:* = "*"):XMLList;

  native AS3 function insertChildAfter(child1:*,child2:*):*;
  native AS3 function addNamespace(ns:*):XML;
  native AS3 function comments():XMLList;
  native AS3 function removeNamespace(ns:*):XML;
  native AS3 function children():XMLList;

  static native public const length:* = 1;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}
native public function isXMLName(str:* = null):Boolean;

public final dynamic class XML extends Object
{
  native public function XML(value:* = null):*;
  native AS3 override function hasOwnProperty(P:* = null):Boolean;

  native AS3 function insertChildBefore(child1:*,child2:*):*;
  native AS3 function replace(propertyName:*,value:*):XML;
  native AS3 function setNotification(f:Function):*;
  native AS3 function toXMLString():String;
  native AS3 override function propertyIsEnumerable(P:* = null):Boolean;

  native AS3 function setChildren(value:*):XML;
  native AS3 function name():Object;
  native AS3 function normalize():XML;
  native AS3 function inScopeNamespaces():Array;
  native AS3 function setLocalName(name:*):void;

  native AS3 function localName():Object;
  native AS3 function attributes():XMLList;
  native AS3 function processingInstructions(name:* = "*"):XMLList;
  native AS3 function setNamespace(ns:*):void;
  native AS3 function namespace(prefix:* = null):*;

  native AS3 function child(propertyName:*):XMLList;
  native AS3 function childIndex():int;
  native AS3 function contains(value:*):Boolean;
  native AS3 function appendChild(child:*):XML;
  native AS3 function hasComplexContent():Boolean;

  native AS3 function descendants(name:* = "*"):XMLList;
  native AS3 function length():int;
  native AS3 function valueOf():XML;
  native AS3 function parent():*;
  native AS3 function attribute(arg:*):XMLList;

  native AS3 function toString():String;
  native AS3 function hasSimpleContent():Boolean;
  native AS3 function prependChild(value:*):XML;
  native AS3 function setName(name:*):void;
  native AS3 function notification():Function;

  native AS3 function comments():XMLList;
  native AS3 function copy():XML;
  native AS3 function nodeKind():String;
  native AS3 function elements(name:* = "*"):XMLList;
  native AS3 function insertChildAfter(child1:*,child2:*):*;

  native AS3 function addNamespace(ns:*):XML;
  native AS3 function namespaceDeclarations():Array;
  native AS3 function text():XMLList;
  native AS3 function removeNamespace(ns:*):XML;
  native AS3 function children():XMLList;

  static native AS3 final function settings():Object;
  static native public final function set prettyIndent(newIndent:int):*;
  static native AS3 final function setSettings(o:Object = null):void;
  static native public final function get ignoreComments():Boolean;
  static native public final function get prettyIndent():int;

  static native public final function get ignoreProcessingInstructions():Boolean;
  static native public final function get prettyPrinting():Boolean;
  static native public const length:* = 1;
  static native public final function get ignoreWhitespace():Boolean;
  static native public final function set ignoreComments(newIgnore:Boolean):*;

  static native public final function set ignoreProcessingInstructions(newIgnore:Boolean):*;
  static native public final function set prettyPrinting(newPretty:Boolean):*;
  static native AS3 final function defaultSettings():Object;
  static native public final function set ignoreWhitespace(newIgnore:Boolean):*;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

public final class QName extends Object
{

  native public function QName(namespace:* = null,name:* = null):*;
  native AS3 function valueOf():QName;
  native AS3 function toString():String;
  native public function get uri():*;
  native public function get localName():String;

  static native public const length:* = 2;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}


public final class Math extends Object
{
  native public function Math():*;
  static native public final function abs(x:Number):Number;
  static native public final function random():Number;

  static native public const E:Number = NaN;
  static native public final function acos(x:Number):Number;
  static native public final function cos(x:Number):Number;
  static native public const SQRT1_2:Number = 0.7071067811865476;
  static native public final function ceil(x:Number):Number;

  static native public final function round(x:Number):Number;
  static native public const SQRT2:Number = 1.4142135623730951;
  static native private final function _min(x:Number,y:Number):Number;
  static native public final function asin(x:Number):Number;
  static native public final function sin(x:Number):Number;

  static native public final function atan2(x:Number,y:Number):Number;
  static native public final function floor(x:Number):Number;
  static native public final function log(x:Number):Number;
  static native public final function exp(x:Number):Number;
  static native public final function pow(x:Number,y:Number):Number;

  static native public const LN10:Number = NaN;
  static native private final function _max(x:Number,y:Number):Number;
  static native public final function atan(x:Number):Number;
  static native public final function tan(x:Number):Number;
  static native public const LOG10E:Number = 0.4342944819032518;

  static native public final function min(x:Number = 0,y:Number = 0,... rest):Number;
  static native public final function max(x:Number = 0,y:Number = 0,... rest):Number;
  static native public final function sqrt(x:Number):Number;
  static native public const LN2:Number = NaN;
  static native public const LOG2E:Number = 1.4426950408889634;

  static native public const PI:Number = 3.141592653589793;
}


public class flash.events.DRMAuthenticateEvent extends flash.events.Event
{
  native public function DRMAuthenticateEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,header:String = "",userPrompt:String = "",passPrompt:String = "",urlPrompt:String = "",authenticationType:String = "",netstream:flash.net.NetStream = null):*;
  native private var m_userPrompt:String;
  native private var m_authenticationType:String;
  native public function get passwordPrompt():String;

  native private var m_passPrompt:String;
  native public function get netstream():flash.net.NetStream;
  native private var m_netstream:flash.net.NetStream;
  native public override function toString():String;
  native public function get header():String;

  native private var m_urlPrompt:String;
  native public function get authenticationType():String;
  native public function get urlPrompt():String;
  native public function get usernamePrompt():String;
  native public override function clone():flash.events.Event;

  native private var m_header:String;
  static native public const AUTHENTICATION_TYPE_PROXY:String = "proxy";
  static native public const AUTHENTICATION_TYPE_DRM:String = "drm";
  static native public const DRM_AUTHENTICATE:String = "drmAuthenticate";
}


public final class flash.text.FontType extends Object
{
  native public function FontType():*;

  static native public const DEVICE:String = "device";
  static native public const EMBEDDED:String = "embedded";
  static native public const EMBEDDED_CFF:String = "embeddedCFF";
}


[Event(name="displaying",type="flash.events.Event")]
[Event(name="select",type="flash.events.Event")]
public class flash.display.NativeMenuItem extends flash.events.EventDispatcher
{
  native public function NativeMenuItem(label:String = "",isSeparator:Boolean = false):*;
  native private function set _submenu(submenu:flash.display.NativeMenu):void;

  native public function get enabled():Boolean;
  native public function set enabled(isSeparator:Boolean):void;
  native private function formatToString(className:String,... rest):String;
  native private function performKeyEquivalent(event:flash.events.KeyboardEvent):Boolean;
  native public function get name():String;

  native public function set checked(isChecked:Boolean):void;
  native public function set keyEquivalent(keyEquivalent:String):void;
  native public function get keyEquivalentModifiers():Array;
  native public function set data(data:Object):void;
  native public function set name(name:String):void;

  native public function get isSeparator():Boolean;
  native public function clone():NativeMenuItem;
  native public function get submenu():flash.display.NativeMenu;
  native public function set mnemonicIndex(index:int):void;
  native private function set _mnemonicIndex(index:int):void;

  native public function set keyEquivalentModifiers(modifiers:Array):void;
  native public function get checked():Boolean;
  native public function set label(label:String):void;
  native public function get keyEquivalent():String;
  native public function get data():Object;

  native public override function toString():String;
  native private function _menuPerformKeyEquivalent(menu:flash.display.NativeMenu,event:flash.events.KeyboardEvent):Boolean;
  native public function get menu():flash.display.NativeMenu;
  native public function get mnemonicIndex():int;
  native public function get label():String;

  native private function get keyEquivalentChar():int;
  native private function select():void;
  native public function set submenu(submenu:flash.display.NativeMenu):void;
  static native private const kInvalidCallError:uint = 2037;
}


public final class flash.net.FileFilter extends Object
{
  native public function FileFilter(description:String,extension:String,macType:String = null):*;

  native public function set macType(value:String):void;
  native public function set description(value:String):void;
  native public function get macType():String;
  native public function get description():String;
  native public function set extension(value:String):void;

  native public function get extension():String;
}


public class flash.text.Font extends Object
{
  native public function Font():*;
  native public function get fontType():String;
  native public function get fontStyle():String;
  native public function get fontName():String;

  native public function hasGlyphs(str:String):Boolean;
  static native public final function enumerateFonts(enumerateDeviceFonts:Boolean = false):Array;
  static native public final function registerFont(font:Class):void;
}


public final class flash.desktop.NotificationType extends Object
{
  native public function NotificationType():*;
  static native public const CRITICAL:String = "critical";

  static native public const INFORMATIONAL:String = "informational";
}


[Version("10")]
public class flash.events.SampleDataEvent extends flash.events.Event
{
  native public function SampleDataEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,theposition:Number = 0,thedata:flash.utils.ByteArray = null):*;
  native public function set position(theposition:Number):*;
  native public function set data(thedata:flash.utils.ByteArray):*;
  native public function get position():Number;

  native public function get data():flash.utils.ByteArray;
  native private var m_position:Number;
  native public override function toString():String;
  native public override function clone():flash.events.Event;
  native private var m_data:flash.utils.ByteArray;

  static native public const SAMPLE_DATA:String = "sampleData";
}


public final class flash.utils.Endian extends Object
{
  native public function Endian():*;
  static native public const BIG_ENDIAN:String = "bigEndian";
  static native public const LITTLE_ENDIAN:String = "littleEndian";
}


public final class flash.filters.BevelFilter extends flash.filters.BitmapFilter
{
  native public function BevelFilter(distance:Number = 4.0,angle:Number = 45,highlightColor:uint = 16777215,highlightAlpha:Number = 1.0,shadowColor:uint = 0,shadowAlpha:Number = 1.0,blurX:Number = 4.0,blurY:Number = 4.0,strength:Number = 1,quality:int = 1,type:String = "inner",knockout:Boolean = false):*;

  native public function get strength():Number;
  native public function set strength(value:Number):void;
  native public function set shadowColor(value:uint):void;
  native public function get knockout():Boolean;
  native public function get highlightAlpha():Number;

  native public function get highlightColor():uint;
  native public function get blurX():Number;
  native public function get blurY():Number;
  native public function get angle():Number;
  native public function set highlightAlpha(value:Number):void;

  native public override function clone():flash.filters.BitmapFilter;
  native public function set highlightColor(value:uint):void;
  native public function set blurX(value:Number):void;
  native public function get shadowColor():uint;
  native public function set blurY(value:Number):void;

  native public function get shadowAlpha():Number;
  native public function set angle(value:Number):void;
  native public function set distance(value:Number):void;
  native public function set type(value:String):void;
  native public function get distance():Number;

  native public function get type():String;
  native public function set knockout(value:Boolean):void;
  native public function set shadowAlpha(value:Number):void;
  native public function set quality(value:int):void;
  native public function get quality():int;
}


[Event(name="complete",type="flash.events.Event")]
[Event(name="outputProgress",type="flash.events.OutputProgressEvent")]
[Event(name="progress",type="flash.events.ProgressEvent")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="close",type="flash.events.Event")]
public class flash.filesystem.FileStream extends flash.events.EventDispatcher
  implements flash.utils.IDataInput,flash.utils.IDataOutput
{

  native public function FileStream():*;
  native public function writeObject(object:*):void;
  native public function readShort():int;
  native public function readDouble():Number;
  native public function writeUTFBytes(value:String):void;

  native public function writeDouble(value:Number):void;
  native public function readUnsignedShort():uint;
  native public function set readAhead(value:Number):void;
  native public function readBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;
  native public function get bytesAvailable():uint;

  native public function writeByte(value:int):void;
  native public function get endian():String;
  native public function get position():Number;
  native public function readUTF():String;
  native public function readBoolean():Boolean;

  native public function writeMultiByte(value:String,charSet:String):void;
  native public function readUnsignedInt():uint;
  native public function set endian(value:String):void;
  native public function writeUTF(value:String):void;
  native public function readUTFBytes(length:uint):String;

  native public function open(file:flash.filesystem.File,fileMode:String):void;
  native public function get readAhead():Number;
  native public function writeBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;
  native public function readByte():int;
  native public function writeBoolean(value:Boolean):void;

  native public function set position(value:Number):void;
  native public function readUnsignedByte():uint;
  native public function get objectEncoding():uint;
  native public function writeFloat(value:Number):void;
  native public function writeInt(value:int):void;

  native public function openAsync(file:flash.filesystem.File,fileMode:String):void;
  native public function writeShort(value:int):void;
  native public function writeUnsignedInt(value:uint):void;
  native public function set objectEncoding(value:uint):void;
  native public function truncate():void;

  native public function readMultiByte(length:uint,charSet:String):String;
  native public function close():void;
  native public function readInt():int;
  native public function readObject():*;
  native public function readFloat():Number;
}


[Event(name="sync",type="flash.events.SyncEvent")]
[Event(name="netStatus",type="flash.events.NetStatusEvent")]
[Event(name="asyncError",type="flash.events.AsyncErrorEvent")]
public class flash.net.SharedObject extends flash.events.EventDispatcher
{

  native public function SharedObject():*;
  native public function get size():uint;
  native public function flush(minDiskSpace:int = 0):String;
  native public function send(... rest):void;
  native public function get data():Object;

  native public function get client():Object;
  native public function clear():void;
  native public function setDirty(propertyName:String):void;
  native public function connect(myConnection:flash.net.NetConnection,params:String = null):void;
  native public function set fps(updatesPerSecond:Number):void;

  native public function set objectEncoding(version:uint):void;
  native public function set client(object:Object):void;
  native public function setProperty(propertyName:String,value:Object = null):void;
  native public function close():void;
  native public function get objectEncoding():uint;

  native private function invokeWithArgsArray(index:uint,args:Array):*;
  native private function invoke(index:uint,... rest):*;
  static native private const kClear:uint = 6;
  static native private const kSetFps:uint = 5;
  static native private const kGetSize:uint = 4;

  static native public final function set defaultObjectEncoding(version:uint):void;
  [Inspectable(environment="none")]
  static native public final function getDiskUsage(url:String):int;
  static native public final function get defaultObjectEncoding():uint;
  static native private const kClose:uint = 3;
  static native public final function getLocal(name:String,localPath:String = null,secure:Boolean = false):SharedObject;

  [Inspectable(environment="none")]
  static native public final function deleteAll(url:String):int;
  static native private const kFlush:uint = 2;
  static native private const kSend:uint = 1;
  static native public final function getRemote(name:String,remotePath:String = null,persistence:Object = false,secure:Boolean = false):SharedObject;
  static native private const kConnect:uint = 0;
}


public class flash.media.SoundLoaderContext extends Object
{

  native public function SoundLoaderContext(bufferTime:Number = 1000,checkPolicyFile:Boolean = false):*;
  native public var bufferTime:Number = 1000;
  native public var checkPolicyFile:Boolean = false;
}


public class flash.data.SQLResult extends Object
{
  native public function SQLResult(data:Array = null,rowsAffected:Number = 0,complete:Boolean = true,rowID:Number = 0):*;
  native public function get lastInsertRowID():Number;

  native private var _data:Array;
  native public function get data():Array;
  native private var _rowsAffected:uint;
  native public function get rowsAffected():Number;
  native private var _rowID:Number;

  native public function get complete():Boolean;
  native private var _complete:Boolean;
}


[Version("10")]
public final dynamic class flash.display.ShaderParameter extends Object
{
  native public function ShaderParameter():*;
  native public function get value():Array;
  native public function set value(v:Array):void;

  native public function get type():String;
  native public function get index():int;
}


[Version("10")]
public final class flash.ui.ContextMenuClipboardItems extends Object
{
  native public function ContextMenuClipboardItems():*;
  native public var cut:Boolean = false;
  native public var paste:Boolean = false;

  native public var copy:Boolean = false;
  native public var selectAll:Boolean = true;
  native public var clear:Boolean = false;
  [Inspectable(environment="none")]
  native public function clone():ContextMenuClipboardItems;
}


[Version("10")]
public final class flash.media.SoundCodec extends Object
{
  native public function SoundCodec():*;

  static native public const SPEEX:String = "Speex";
  static native public const NELLYMOSER:String = "NellyMoser";
}


public class flash.events.DRMCustomProperties extends Object
{
  native public function DRMCustomProperties():*;
  static native private final function createObj():Object;
  static native private final function setCustomProp(obj:Object,key:String,value:String):void;
}

public class flash.events.DRMStatusEvent extends flash.events.Event
{

  native public function DRMStatusEvent(type:String = "drmStatus",bubbles:Boolean = false,cancelable:Boolean = false,inPolicies:Object = null,inDetail:String = "",inAvailableOffline:Boolean = false,inAnonymous:Boolean = false,inVoucherEndDate:int = 0,inOfflineLeasePeriod:int = 0,inMetadata:flash.net.drm.DRMContentData = null,inVoucher:flash.net.drm.DRMVoucher = null,inLocal:Boolean = false):*;
  native private var m_metadata:flash.net.drm.DRMContentData;
  [Version("air1.5")]
  native public function set isLocal(value:Boolean):void;
  [Version("air1.5")]
  native public function get contentData():flash.net.drm.DRMContentData;
  native public function set isAnonymous(value:Boolean):void;

  native public function set isAvailableOffline(value:Boolean):void;
  [Version("air1.5")]
  native public function set contentData(value:flash.net.drm.DRMContentData):void;
  native private var m_isLocal:Boolean;
  native public function get policies():Object;
  native public function get detail():String;

  native public function get offlineLeasePeriod():uint;
  native public function get voucherEndDate():Date;
  [Version("air1.5")]
  native public function set voucher(value:flash.net.drm.DRMVoucher):void;
  native public override function clone():flash.events.Event;
  native public function set policies(value:Object):void;

  [Version("air1.5")]
  native public function get isLocal():Boolean;
  native public function set detail(value:String):void;
  native public function get isAnonymous():Boolean;
  native public function get isAvailableOffline():Boolean;
  native private var m_policies:Object;

  native private var m_detail:String;
  native private var m_voucher:flash.net.drm.DRMVoucher;
  native public override function toString():String;
  native private var m_voucherEndDate:Date;
  [Version("air1.5")]
  native public function get voucher():flash.net.drm.DRMVoucher;

  native public function set offlineLeasePeriod(value:uint):void;
  native private var m_offlineLeasePeriod:uint;
  native public function set voucherEndDate(value:Date):void;
  native private var m_availableOffline:Boolean;
  native private var m_anonymous:Boolean;

  static native public const DRM_STATUS:String = "drmStatus";
}


[Event(name="deactivate",type="flash.events.Event")]
[Event(name="activate",type="flash.events.Event")]
[Event(name="close",type="flash.events.Event")]
[Event(name="closing",type="flash.events.Event")]
[Event(name="displayStateChange",type="flash.events.NativeWindowDisplayStateEvent")]
[Event(name="displayStateChanging",type="flash.events.NativeWindowDisplayStateEvent")]
[Event(name="resize",type="flash.events.NativeWindowBoundsEvent")]
[Event(name="resizing",type="flash.events.NativeWindowBoundsEvent")]
[Event(name="move",type="flash.events.NativeWindowBoundsEvent")]
[Event(name="moving",type="flash.events.NativeWindowBoundsEvent")]
public class flash.display.NativeWindow extends flash.events.EventDispatcher
{
  native public function NativeWindow(initOptions:flash.display.NativeWindowInitOptions):*;
  native public function get y():Number;
  native public function get minimizable():Boolean;
  native public function get maxSize():flash.geom.Point;

  native public function get active():Boolean;
  native public function get systemChrome():String;
  native public function set maxSize(size:flash.geom.Point):void;
  native public function set width(value:Number):void;
  native public function restore():void;

  native private function _startResize(edgeOrCorner:String = "BR"):Boolean;
  native public function orderInBackOf(window:NativeWindow):Boolean;
  native public function get maximizable():Boolean;
  native private function get _systemChrome():String;
  native public function globalToScreen(globalPoint:flash.geom.Point):flash.geom.Point;

  native private function get _transparent():Boolean;
  native private function set _maxSize(size:flash.geom.Point):void;
  native public function minimize():void;
  native private function get _type():String;
  native private function get _active():Boolean;

  native public function get height():Number;
  native private function set _bounds(rect:flash.geom.Rectangle):void;
  native public function get resizable():Boolean;
  native private function get _resizable():Boolean;
  native public function set title(value:String):void;

  native private function set _title(value:String):void;
  native public function notifyUser(type:String):void;
  native public function get bounds():flash.geom.Rectangle;
  native public function startResize(edgeOrCorner:String = "BR"):Boolean;
  native public function get type():String;

  native private function get _minSize():flash.geom.Point;
  native public function set menu(value:flash.display.NativeMenu):void;
  native public function orderToFront():Boolean;
  native private function get _visible():Boolean;
  native private function _maximize():void;

  native public function get width():Number;
  native private function get _minimizable():Boolean;
  native public function maximize():void;
  native public function orderInFrontOf(window:NativeWindow):Boolean;
  native public function set height(value:Number):void;

  native private function _restore():void;
  native public function get transparent():Boolean;
  native public function startMove():Boolean;
  native private function get _bounds():flash.geom.Rectangle;
  native private function get _maxSize():flash.geom.Point;

  native public function get title():String;
  native private function get _title():String;
  native private function get _maximizable():Boolean;
  native private function get _displayState():String;
  native public function get menu():flash.display.NativeMenu;

  native private function _activate():void;
  native private function _startMove():Boolean;
  native public function set visible(value:Boolean):void;
  native public function set minSize(size:flash.geom.Point):void;
  native private function set _minSize(size:flash.geom.Point):void;

  native public function set bounds(rect:flash.geom.Rectangle):void;
  native public function get closed():Boolean;
  native private function set _visible(value:Boolean):void;
  native public function get displayState():String;
  native public function set x(value:Number):void;

  native public function set alwaysInFront(value:Boolean):void;
  native public function set y(value:Number):void;
  native public function activate():void;
  native public function get alwaysInFront():Boolean;
  native private function _init(initOptions:flash.display.NativeWindowInitOptions):void;

  native public function orderToBack():Boolean;
  native public function close():void;
  native public function get visible():Boolean;
  native public function get minSize():flash.geom.Point;
  native private function set _menu(value:flash.display.NativeMenu):void;

  native private function _minimize():void;
  native public function get stage():flash.display.Stage;
  native public function get x():Number;
  static native private const _supportsMenu:Boolean;
  static native public final function get supportsMenu():Boolean;

  static native private const _systemMinSize:flash.geom.Point;
  static native private final function initSystemMaxSize():flash.geom.Point;
  static native private final function initSupportsNotifyUser():Boolean;
  static native public final function get systemMinSize():flash.geom.Point;
  static native private final function _checkAccess():void;

  static native public final function get supportsNotification():Boolean;
  static native private final function initSupportsMenu():Boolean;
  static native private final function initSystemMinSize():flash.geom.Point;
  static native public final function get systemMaxSize():flash.geom.Point;
  static native private const _supportsNotifyUser:Boolean;

  static native private final function get _supportsTransparency():Boolean;
  static native public final function get supportsTransparency():Boolean;
  static native private const _systemMaxSize:flash.geom.Point;
}


public class flash.text.TextFormat extends Object
{
  native public function TextFormat(font:String = null,size:Object = null,color:Object = null,bold:Object = null,italic:Object = null,underline:Object = null,url:String = null,target:String = null,align:String = null,leftMargin:Object = null,rightMargin:Object = null,indent:Object = null,leading:Object = null):*;
  native public function get size():Object;

  native public function get bullet():Object;
  native public function set bullet(value:Object):void;
  native public function get align():String;
  native public function set color(value:Object):void;
  [Inspectable(environment="none")]
  native public function get display():String;

  native public function set bold(value:Object):void;
  native public function set display(value:String):void;
  native public function get bold():Object;
  native public function get leading():Object;
  native public function get font():String;

  native public function set align(value:String):void;
  native public function set leading(value:Object):void;
  native public function set rightMargin(value:Object):void;
  native public function get leftMargin():Object;
  native public function set indent(value:Object):void;

  native public function get blockIndent():Object;
  native public function set size(value:Object):void;
  native public function get kerning():Object;
  native public function get tabStops():Array;
  native public function set font(value:String):void;

  native public function set kerning(value:Object):void;
  native public function set italic(value:Object):void;
  native public function set target(value:String):void;
  native public function get color():Object;
  native public function get underline():Object;

  native public function set url(value:String):void;
  native public function set underline(value:Object):void;
  native public function get target():String;
  native public function set leftMargin(value:Object):void;
  native public function get indent():Object;

  native public function get url():String;
  native public function get italic():Object;
  native public function get rightMargin():Object;
  native public function set blockIndent(value:Object):void;
  native public function set tabStops(value:Array):void;

  native public function set letterSpacing(value:Object):void;
  native public function get letterSpacing():Object;
}


public class flash.events.NetStatusEvent extends flash.events.Event
{
  native public function NetStatusEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,info:Object = null):*;
  native private var m_info:Object;
  native public function set info(value:Object):void;

  native public override function toString():String;
  native public override function clone():flash.events.Event;
  native public function get info():Object;
  static native public const NET_STATUS:String = "netStatus";
}


[Version("10")]
public final class flash.display.GraphicsBitmapFill extends Object
  implements flash.display.IGraphicsFill,flash.display.IGraphicsData
{
  native public function GraphicsBitmapFill(bitmapData:flash.display.BitmapData = null,matrix:flash.geom.Matrix = null,repeat:Boolean = true,smooth:Boolean = false):*;

  native public var matrix:flash.geom.Matrix;
  native public var bitmapData:flash.display.BitmapData;
  native public var repeat:Boolean;
  native public var smooth:Boolean;
}


public class flash.data.SQLSchema extends Object
{
  native public function SQLSchema(database:String,name:String,sql:String):*;

  native private var _name:String;
  native public function get name():String;
  native public function get database():String;
  native private var _db:String;
  native public function get sql():String;

  native private var _sql:String;
}


public class flash.data.SQLIndexSchema extends flash.data.SQLSchema
{
  native public function SQLIndexSchema(database:String,name:String,sql:String,table:String):*;
  native public function get table():String;
  native private var _table:String;
}


public dynamic class RegExp extends Object
{
  native public function RegExp(pattern:* = null,options:* = null):*;

  native AS3 function exec(s:String = ""):*;
  native public function get ignoreCase():Boolean;
  native public function get global():Boolean;
  native public function set lastIndex(i:int):*;
  native public function get extended():Boolean;

  native AS3 function test(s:String = ""):Boolean;
  native public function get source():String;
  native public function get lastIndex():int;
  native public function get multiline():Boolean;
  native public function get dotall():Boolean;

  static native public const length:int = 1;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}


public class flash.html.HTMLHost extends Object
{
  native public function HTMLHost(defaultBehaviors:Boolean = true):*;
  native public function windowFocus():void;
  native public function get htmlLoader():flash.html.HTMLLoader;

  native private var _defaultBehaviors:Boolean;
  native public function set windowRect(value:flash.geom.Rectangle):void;
  native public function windowClose():void;
  native private var _titlePrefix:String;
  native public function createWindow(windowCreateOptions:flash.html.HTMLWindowCreateOptions):flash.html.HTMLLoader;

  native public function updateTitle(title:String):void;
  native internal function setHTMLControl(htmlLoader:flash.html.HTMLLoader):void;
  native public function get windowRect():flash.geom.Rectangle;
  native public function windowBlur():void;
  native public function updateStatus(status:String):void;

  native private var _htmlLoader:flash.html.HTMLLoader;
  native public function updateLocation(locationURL:String):void;
  native private function get window():flash.display.NativeWindow;
  static native private final function samePageGroup(parentLoader:flash.html.HTMLLoader,newLoader:flash.html.HTMLLoader):*;
  static native private const kInvalidParamError:uint = 2004;
}


[Exclude(name="dispatchEvent",kind="method")]
[Event(name="httpStatus",type="flash.events.HTTPStatusEvent")]
[Event(name="unload",type="flash.events.Event")]
[Event(name="progress",type="flash.events.ProgressEvent")]
[Event(name="open",type="flash.events.Event")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="init",type="flash.events.Event")]
[Event(name="complete",type="flash.events.Event")]
public class flash.display.LoaderInfo extends flash.events.EventDispatcher
{

  native public function LoaderInfo():*;
  [Inspectable(environment="none")]
  native public override function dispatchEvent(event:flash.events.Event):Boolean;
  native public function get width():int;
  native public function get sameDomain():Boolean;
  native public function set parentSandboxBridge(door:Object):void;

  native public function get bytesLoaded():uint;
  native public function get contentType():String;
  native private function _getArgs():Object;
  native public function get childAllowsParent():Boolean;
  native public function get bytesTotal():uint;

  native public function get loader():flash.display.Loader;
  native public function get loaderURL():String;
  native public function get sharedEvents():flash.events.EventDispatcher;
  native public function get parentSandboxBridge():Object;
  native public function get height():int;

  native public function get parentAllowsChild():Boolean;
  native public function get parameters():Object;
  native public function get bytes():flash.utils.ByteArray;
  native public function get frameRate():Number;
  native public function set childSandboxBridge(door:Object):void;

  native public function get applicationDomain():flash.system.ApplicationDomain;
  native public function get url():String;
  native public function get actionScriptVersion():uint;
  native public function get content():flash.display.DisplayObject;
  native public function get childSandboxBridge():Object;

  native public function get swfVersion():uint;
  static native public final function getLoaderInfoByDefinition(object:Object):LoaderInfo;
}


public final class flash.text.TextDisplayMode extends Object
{
  native public function TextDisplayMode():*;
  static native public const DEFAULT:String = "default";
  static native public const CRT:String = "crt";

  static native public const LCD:String = "lcd";
}


[Version("10")]
public class flash.display.Shader extends Object
{
  native public function Shader(code:flash.utils.ByteArray = null):*;
  native public function set byteCode(code:flash.utils.ByteArray):void;
  native public function set data(p:flash.display.ShaderData):void;
  native public function get precisionHint():String;

  native public function get data():flash.display.ShaderData;
  native public function set precisionHint(p:String):void;
}


public final class flash.net.URLRequestMethod extends Object
{
  native public function URLRequestMethod():*;
  static native public const POST:String = "POST";
  static native public const DELETE:String = "DELETE";

  static native public const HEAD:String = "HEAD";
  static native public const PUT:String = "PUT";
  static native public const GET:String = "GET";
  static native public const OPTIONS:String = "OPTIONS";
}


[Version("10")]
public final class flash.text.engine.TextLineMirrorRegion extends Object
{
  native public function TextLineMirrorRegion():*;

  native public function get textLine():flash.text.engine.TextLine;
  native public function get bounds():flash.geom.Rectangle;
  native public function get nextRegion():TextLineMirrorRegion;
  native public function get previousRegion():TextLineMirrorRegion;
  native public function get element():flash.text.engine.ContentElement;

  native public function get mirror():flash.events.EventDispatcher;
}


[Version("10")]
public final class flash.display.GraphicsGradientFill extends Object
  implements flash.display.IGraphicsFill,flash.display.IGraphicsData
{
  native public function GraphicsGradientFill(type:String = "linear",colors:Array = null,alphas:Array = null,ratios:Array = null,matrix:* = null,spreadMethod:* = "pad",interpolationMethod:String = "rgb",focalPointRatio:Number = 0.0):*;
  native public var matrix:flash.geom.Matrix;
  native public function get interpolationMethod():String;
  native public var focalPointRatio:Number;

  native public var ratios:Array;
  native private var _spreadMethod:String;
  native private var _interpolationMethod:String;
  native public function set spreadMethod(value:String):*;
  native public var colors:Array;

  native public function set interpolationMethod(value:String):*;
  native public function set type(value:String):*;
  native public var alphas:Array;
  native private var _type:String;
  native public function get type():String;

  native public function get spreadMethod():String;
}


public class flash.events.IMEEvent extends flash.events.TextEvent
{
  native public function IMEEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,text:String = ""):*;
  native public override function toString():String;
  native public override function clone():flash.events.Event;
  static native public const IME_COMPOSITION:String = "imeComposition";
}


[Event(name="userPresent",type="flash.events.Event")]
[Event(name="userIdle",type="flash.events.Event")]
[Event(name="networkChange",type="flash.events.Event")]
[Event(name="exiting",type="flash.events.Event")]
[Event(name="deactivate",type="flash.events.Event")]
[Event(name="activate",type="flash.events.Event")]
[Event(name="invoke",type="flash.events.InvokeEvent")]
public final class flash.desktop.NativeApplication extends flash.events.EventDispatcher
{

  native public function NativeApplication():*;
  native private function onNetworkChange():void;
  native private function _onKeyDownCapture(ev:flash.events.KeyboardEvent):void;
  native public function selectAll():Boolean;
  native private function getKnownExtensionIcons(extension:String):Array;

  native public function paste():Boolean;
  native public function get runtimePatchLevel():uint;
  native private function verifyKnownExtension(extension:String):void;
  native public function get activeWindow():flash.display.NativeWindow;
  native public function get publisherID():String;

  native public function isSetAsDefaultApplication(extension:String):Boolean;
  native private function _isSetAsDefaultApplication(appName:String,extension:String,name:String):Boolean;
  native public function exit(errorCode:int = 0):void;
  native public function setAsDefaultApplication(extension:String):void;
  native private function _menuPerformKeyEquivalent(menu:flash.display.NativeMenu,ev:flash.events.KeyboardEvent):Boolean;

  native private var bPresenceUserIsIdle:Boolean = false;
  native private function _onKeyDownBubble(ev:flash.events.KeyboardEvent):void;
  native public function get startAtLogin():Boolean;
  native private function _timeSinceLastMouseOrKeyboardEvent():int;
  native private var nPresenceListeners:int = 0;

  native public function set menu(menu:flash.display.NativeMenu):void;
  native public override function dispatchEvent(event:flash.events.Event):Boolean;
  native private function getKnownExtensionContentType(extension:String):String;
  native public function cut():Boolean;
  native public function getDefaultApplication(extension:String):String;

  native private function _getDefaultApplication(extension:String):String;
  native private function performKeyEquivalent(ev:flash.events.KeyboardEvent):Boolean;
  native public override function removeEventListener(type:String,listener:Function,useCapture:Boolean = false):void;
  native private function onCheckForPresenceChange(event:flash.events.TimerEvent):void;
  native public function removeAsDefaultApplication(extension:String):void;

  native public function clear():Boolean;
  native private var timers:Object;
  native private function _activate(window:flash.display.NativeWindow):void;
  native public override function addEventListener(type:String,listener:Function,useCapture:Boolean = false,priority:int = 0,useWeakReference:Boolean = false):void;
  native public function get openedWindows():Array;

  native private function registerClosures(networkChangeClosure:Function):void;
  native public function get timeSinceLastUserInput():int;
  native private function getKnownExtensionName(extension:String):String;
  native public function get applicationDescriptor():XML;
  native public function get runtimeVersion():String;

  native public function set autoExit(value:Boolean):void;
  native private function _removeAsDefaultApplication(extension:String,name:String,contentType:String,icons:Array):void;
  native public function get menu():flash.display.NativeMenu;
  native private var networkChangeTimer:flash.utils.Timer = null;
  native public function set startAtLogin(startAtLogin:Boolean):void;

  native public function undo():Boolean;
  native private var queuedEvents:Array;
  native public function get autoExit():Boolean;
  native public function set idleThreshold(value:int):void;
  native public function get applicationID():String;

  native public function activate(window:flash.display.NativeWindow = null):void;
  native public function copy():Boolean;
  native public function get idleThreshold():int;
  native public function get icon():flash.desktop.InteractiveIcon;
  native private var presenceChangeTimer:flash.utils.Timer = null;

  native private function _setAsDefaultApplication(extension:String,name:String,contentType:String,icons:Array):void;
  native private var nPresenceIdleThreshold:int = 300;
  native public function redo():Boolean;
  static native private final function initSupportsDockIcon():Boolean;
  static native private const _supportsSystemTrayIcon:Boolean;

  static native private const _supportsMenu:Boolean;
  static native public final function get supportsMenu():Boolean;
  static native private final function _hasBundleIdentifier():Boolean;
  static native private const kInvalidParamError:uint = 2004;
  static native private final function _getInstance():NativeApplication;

  static native private const _supportsDockIcon:Boolean;
  static native public final function get supportsDockIcon():Boolean;
  static native public final function get supportsSystemTrayIcon():Boolean;
  static native private final function initSupportsSystemTrayIcon():Boolean;
  static native private final function initSupportsMenu():Boolean;

  static native private final function initThisApplicationPath():String;
  static native private const _thisApplicationPath:String;
  static native public final function get nativeApplication():NativeApplication;
}


[Version("10")]
public final class flash.text.engine.TextLine extends flash.display.DisplayObjectContainer
{
  native public function TextLine():*;
  native public function get mirrorRegions():Vector.<flash.text.engine.TextLineMirrorRegion>;

  native public function get descent():Number;
  native public function getAtomGraphic(atomIndex:int):flash.display.DisplayObject;
  native public function getBaselinePosition(baseline:String):Number;
  native public function get nextLine():TextLine;
  native public function getMirrorRegion(mirror:flash.events.EventDispatcher):flash.text.engine.TextLineMirrorRegion;

  native public function get previousLine():TextLine;
  native public function dump():String;
  native private function doGetAtomIndexAtPoint(x:Number,y:Number):int;
  native public function getAtomBidiLevel(atomIndex:int):int;
  native public function getAtomIndexAtPoint(stageX:Number,stageY:Number):int;

  native public function get unjustifiedTextWidth():Number;
  native public var userData:*;
  native public override function set tabEnabled(enabled:Boolean):void;
  native public function get textWidth():Number;
  native public function get ascent():Number;

  [Exclude(name="tabIndex",kind="property")]
  [Exclude(name="tabEnabled",kind="property")]
  [Exclude(name="tabChildren",kind="property")]
  [Exclude(name="focusRect",kind="property")]
  [Exclude(name="contextMenu",kind="property")]
  native public override function set contextMenu(cm:flash.display.NativeMenu):void;
  native public function getAtomIndexAtCharIndex(charIndex:int):int;
  native public function get textBlock():flash.text.engine.TextBlock;
  native public function getAtomWordBoundaryOnLeft(atomIndex:int):Boolean;
  native public function getAtomTextBlockBeginIndex(atomIndex:int):int;

  native public function getAtomBounds(atomIndex:int):flash.geom.Rectangle;
  native public function set validity(value:String):void;
  native public override function set tabChildren(enable:Boolean):void;
  native public function get textBlockBeginIndex():int;
  native public function get hasGraphicElement():Boolean;

  native public function getAtomTextBlockEndIndex(atomIndex:int):int;
  native public function get validity():String;
  native public function get textHeight():Number;
  native public function get specifiedWidth():Number;
  native public override function set focusRect(focusRect:Object):void;

  native public function getAtomTextRotation(atomIndex:int):String;
  native public override function set tabIndex(index:int):void;
  native public function get rawTextLength():int;
  native public function getAtomCenter(atomIndex:int):Number;
  native public function get atomCount():int;

  native public function flushAtomData():void;
  static native public const MAX_LINE_WIDTH:int = 1000000;
}


public class flash.data.SQLTableSchema extends flash.data.SQLSchema
{
  native public function SQLTableSchema(database:String,name:String,sql:String,columns:Array):*;
  native public function get columns():Array;
  native private var _columns:Array;
}


public final class flash.display.FrameLabel extends Object
{

  native public function FrameLabel(name:String,frame:int):*;
  native private var _name:String;
  native public function get name():String;
  native public function get frame():int;
  native private var _frame:int;
}


[ExcludeClass]
[Event(name="error",type="flash.events.ErrorEvent")]
[Event(name="verifyError",type="flash.events.IOErrorEvent")]
[Event(name="diskError",type="flash.events.IOErrorEvent")]
[Event(name="networkError",type="flash.events.IOErrorEvent")]
[Event(name="complete",type="flash.events.Event")]
[Event(name="cancel",type="flash.events.Event")]
public final class adobe.utils.ProductManager extends flash.events.EventDispatcher
{

  native public function ProductManager(name:String):*;
  native public function launch(parameters:String = null):Boolean;
  native private function validate(str:String):String;
  native public function download(caption:String = null,fileName:String = null,pathElements:Array = null):Boolean;
  native public function get installed():Boolean;

  native private function doDownload(caption:String,fileName:String):Boolean;
  native public function get installedVersion():String;
  native public function get running():Boolean;
}


public final class flash.net.ObjectEncoding extends Object
{
  native public function ObjectEncoding():*;
  static native public const DEFAULT:uint = 3;

  static native public const AMF0:uint = 0;
  static native public final function get dynamicPropertyWriter():flash.net.IDynamicPropertyWriter;
  static native public const AMF3:uint = 3;
  static native public final function set dynamicPropertyWriter(object:flash.net.IDynamicPropertyWriter):void;
}


public class flash.events.BrowserInvokeEvent extends flash.events.Event
{
  native public function BrowserInvokeEvent(type:String,bubbles:Boolean,cancelable:Boolean,arguments:Array,sandboxType:String,securityDomain:String,isHTTPS:Boolean,isUserEvent:Boolean):*;

  native public function get isHTTPS():Boolean;
  native public function get securityDomain():String;
  native public function get isUserEvent():Boolean;
  native private var m_isHTTPS:Boolean;
  native public function get sandboxType():String;

  native private var m_arguments:Array;
  native public override function clone():flash.events.Event;
  native private var m_sandboxType:String;
  native public function get arguments():Array;
  native private var m_isUserEvent:Boolean;

  native private var m_securityDomain:String;
  static native public const BROWSER_INVOKE:String = "browserInvoke";
}


[Version("10")]
public class flash.geom.Matrix3D extends Object
{
  native public function Matrix3D(v:Vector.<Number> = null):*;
  native public function transpose():void;
  native public function prependTranslation(x:Number,y:Number,z:Number):void;

  native public function set rawData(v:Vector.<Number>):void;
  native public function deltaTransformVector(v:flash.geom.Vector3D):flash.geom.Vector3D;
  native public function get position():flash.geom.Vector3D;
  native public function pointAt(pos:flash.geom.Vector3D,at:flash.geom.Vector3D = null,up:flash.geom.Vector3D = null):void;
  native public function transformVectors(vin:Vector.<Number>,vout:Vector.<Number>):void;

  native public function prependRotation(degrees:Number,axis:flash.geom.Vector3D,pivotPoint:flash.geom.Vector3D = null):void;
  native public function prepend(rhs:Matrix3D):void;
  native public function transformVector(v:flash.geom.Vector3D):flash.geom.Vector3D;
  native public function appendScale(xScale:Number,yScale:Number,zScale:Number):void;
  native public function decompose(orientationStyle:String = "eulerAngles"):Vector.<flash.geom.Vector3D>;

  native public function get rawData():Vector.<Number>;
  native public function interpolateTo(toMat:Matrix3D,percent:Number):void;
  native public function get determinant():Number;
  native public function invert():Boolean;
  native public function appendTranslation(x:Number,y:Number,z:Number):void;

  native public function appendRotation(degrees:Number,axis:flash.geom.Vector3D,pivotPoint:flash.geom.Vector3D = null):void;
  native public function set position(pos:flash.geom.Vector3D):void;
  native public function append(lhs:Matrix3D):void;
  native public function prependScale(xScale:Number,yScale:Number,zScale:Number):void;
  native public function clone():Matrix3D;

  native public function identity():void;
  native public function recompose(components:Vector.<flash.geom.Vector3D>,orientationStyle:String = "eulerAngles"):Boolean;
  static native public final function interpolate(thisMat:Matrix3D,toMat:Matrix3D,percent:Number):Matrix3D;
}


public final class flash.display.Scene extends Object
{
  native public function Scene(name:String,labels:Array,numFrames:int):*;
  native private var _name:String;

  native public function get numFrames():int;
  native public function get name():String;
  native private var _numFrames:int;
  native private var _labels:Array;
  native public function get labels():Array;
}


public class flash.events.ActivityEvent extends flash.events.Event
{

  native public function ActivityEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,activating:Boolean = false):*;
  native public function get activating():Boolean;
  native private var m_activating:Boolean;
  native public function set activating(value:Boolean):void;
  native public override function toString():String;

  native public override function clone():flash.events.Event;
  static native public const ACTIVITY:String = "activity";
}


[Event(name="netStatus",type="flash.events.NetStatusEvent")]
[Event(name="securityError",type="flash.events.SecurityErrorEvent")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="asyncError",type="flash.events.AsyncErrorEvent")]
public class flash.net.NetConnection extends flash.events.EventDispatcher
{
  native public function NetConnection():*;
  [Version("10")]
  native public function get unconnectedPeerStreams():Array;
  [Version("10")]
  native public function get nearID():String;

  native public function set objectEncoding(version:uint):void;
  [Version("10")]
  native public function set maxPeerConnections(maxPeers:uint):void;
  [Version("10")]
  native public function get protocol():String;
  native public function get proxyType():String;
  native public function get connected():Boolean;

  native public function connect(command:String,... rest):void;
  native public function get client():Object;
  native public function get uri():String;
  native private function invokeWithArgsArray(index:uint,args:Array):*;
  [Inspectable(environment="none")]
  native public function addHeader(operation:String,mustUnderstand:Boolean = false,param:Object = null):void;

  [Version("10")]
  native public function get maxPeerConnections():uint;
  native public function set proxyType(ptype:String):void;
  native private function invoke(index:uint,... rest):*;
  native public function get objectEncoding():uint;
  [Version("10")]
  native public function get nearNonce():String;

  native public function set client(object:Object):void;
  native public function get usingTLS():Boolean;
  native public function close():void;
  [Version("10")]
  native public function get farID():String;
  [Version("10")]
  native public function get farNonce():String;

  native public function call(command:String,responder:flash.net.Responder,... rest):void;
  native public function get connectedProxyType():String;
  static native private const kAddHeader:uint = 3;
  static native private const kGetProtocol:uint = 6;
  static native private const kGetFarID:uint = 8;

  static native private const kCall:uint = 2;
  static native private const kGetConnectedProxyType:uint = 4;
  static native private const kGetNearNonce:uint = 9;
  static native public final function set defaultObjectEncoding(version:uint):void;
  static native private const kGetNearID:uint = 7;

  static native private const kGetFarNonce:uint = 10;
  static native private const kGetUsingTLS:uint = 5;
  static native public final function get defaultObjectEncoding():uint;
  static native private const kClose:uint = 1;
  static native private const kConnect:uint = 0;
}


public final class flash.html.HTMLPopupWindow extends Object
{

  native public function HTMLPopupWindow(owner:flash.html.HTMLLoader,closePopupWindowIfNeededClosure:Function,computedFontSize:Number):*;
  native private var m_activePopupWindow:flash.display.NativeWindow;
  native private function popupCompleteHandler(evt:flash.events.Event):void;
  native private var m_popupContent:XML;
  native private var m_popupHtmlControl:flash.html.HTMLLoader;

  native private function nativeOnPopupClosed():*;
  native private function escapeStringIfNeeded(str:String):String;
  native private function show(windowX:int,windowY:int):void;
  native private var m_allowSelectedItemUpdate:Boolean;
  native public function isActive():Boolean;

  native private var m_ownerHtmlControl:flash.html.HTMLLoader;
  native private var m_closePopupWindowIfNeededClosure:Function;
  native private function get nativeHasXMLSerializationBug():Boolean;
  native private function nativeOnItemClicked(itemIndex:int):*;
  native private function getCSSPropertyAsFloat(element:*,propertyName:String):Number;

  native private function popupClickHandler(itemIndex:int):void;
  native private function addSeparator(itemIndex:int):void;
  native private function beginPopulate(computedFontSize:Number):void;
  native private function addGroupLabel(optionText:String,itemIndex:int,isDisabled:Boolean):void;
  native private function updateSelectedItem(itemIndex:int):void;

  native public function close():void;
  native private function onDeactivate(evt:flash.events.Event):void;
  native private function addOption(optionText:String,itemIndex:int,isSelected:Boolean,isDisabled:Boolean,isChildOfGroup:Boolean):void;
  native private function doDismiss():void;
  static native private const MAX_POPUP_HEIGHT:uint = 400;

  static native private const MIN_POPUP_HEIGHT:uint = 20;
}


public final class flash.display.SpreadMethod extends Object
{
  native public function SpreadMethod():*;
  static native public const PAD:String = "pad";
  static native public const REPEAT:String = "repeat";
  static native public const REFLECT:String = "reflect";
}


public final class flash.filters.BitmapFilterType extends Object
{

  native public function BitmapFilterType():*;
  static native public const OUTER:String = "outer";
  static native public const INNER:String = "inner";
  static native public const FULL:String = "full";
}


[Event(name="textInput",type="flash.events.TextEvent")]
[Event(name="scroll",type="flash.events.Event")]
[Event(name="link",type="flash.events.TextEvent")]
[Event(name="change",type="flash.events.Event")]
public class flash.text.TextField extends flash.display.InteractiveObject
{
  native public function TextField():*;

  native public function replaceText(beginIndex:int,endIndex:int,newText:String):void;
  native public function get caretIndex():int;
  native public function get maxScrollH():int;
  native public function get numLines():int;
  native public function get scrollH():int;

  native public function get maxScrollV():int;
  native public function getImageReference(id:String):flash.display.DisplayObject;
  native public function get scrollV():int;
  native public function get border():Boolean;
  native private var _dragAlwaysShowSelection:Boolean;

  native public function get background():Boolean;
  native public function getCharBoundaries(charIndex:int):flash.geom.Rectangle;
  native public function set borderColor(value:uint):void;
  native public function set scrollH(value:int):void;
  native public function getFirstCharInParagraph(charIndex:int):int;

  native public function get type():String;
  native public function replaceSelectedText(value:String):void;
  native public function get styleSheet():flash.text.StyleSheet;
  [Inspectable(environment="none")]
  native public function getRawText():String;
  native public function get alwaysShowSelection():Boolean;

  native public function get sharpness():Number;
  native public function get textColor():uint;
  native public function set defaultTextFormat(format:flash.text.TextFormat):void;
  native public function get condenseWhite():Boolean;
  native public function get displayAsPassword():Boolean;

  native public function get autoSize():String;
  native public function setSelection(beginIndex:int,endIndex:int):void;
  native public function set scrollV(value:int):void;
  native public function set useRichTextClipboard(value:Boolean):void;
  native public function get selectionBeginIndex():int;

  native public function get selectable():Boolean;
  native public function set border(value:Boolean):void;
  native public function set multiline(value:Boolean):void;
  native public function set background(value:Boolean):void;
  native public function set embedFonts(value:Boolean):void;

  native private function getCharIndexNearestPoint(x:Number,y:Number):int;
  native public function set text(value:String):void;
  native public function get selectionEndIndex():int;
  native public function set mouseWheelEnabled(value:Boolean):void;
  native public function get text():String;

  native public function appendText(newText:String):void;
  native public function get antiAliasType():String;
  native private function get dragCaretIndex():int;
  native public function set styleSheet(value:flash.text.StyleSheet):void;
  native public function set textColor(value:uint):void;

  [Inspectable(environment="none")]
  native public function get selectedText():String;
  native public function get wordWrap():Boolean;
  native public function getLineIndexAtPoint(x:Number,y:Number):int;
  native public function get htmlText():String;
  native public function getTextFormat(beginIndex:int = -1,endIndex:int = -1):flash.text.TextFormat;

  native public function get thickness():Number;
  native public function getLineIndexOfChar(charIndex:int):int;
  native internal function _doDrag():void;
  native public function set restrict(value:String):void;
  native public function set alwaysShowSelection(value:Boolean):void;

  native public function set sharpness(value:Number):void;
  native public function set type(value:String):void;
  native private function _dragEnter(event:flash.events.NativeDragEvent):void;
  native public function setTextFormat(format:flash.text.TextFormat,beginIndex:int = -1,endIndex:int = -1):void;
  native private function _dragOver(event:flash.events.NativeDragEvent):void;

  native public function set gridFitType(gridFitType:String):void;
  [Inspectable(environment="none")]
  native public function getTextRuns(beginIndex:int = 0,endIndex:int = 2147483647):Array;
  native private function set dragCaretVisible(visible:Boolean):void;
  native public function get bottomScrollV():int;
  native public function get borderColor():uint;

  native public function set condenseWhite(value:Boolean):void;
  native public function get textWidth():Number;
  native public function getLineOffset(lineIndex:int):int;
  native public function set displayAsPassword(value:Boolean):void;
  native public function set autoSize(value:String):void;

  native private function _dragDrop(event:flash.events.NativeDragEvent):void;
  native public function get defaultTextFormat():flash.text.TextFormat;
  native public function get useRichTextClipboard():Boolean;
  native public function set backgroundColor(value:uint):void;
  native public function get embedFonts():Boolean;

  native public function set selectable(value:Boolean):void;
  native public function get multiline():Boolean;
  [Inspectable(environment="none")]
  native public function getXMLText(beginIndex:int = 0,endIndex:int = 2147483647):String;
  native public function set maxChars(value:int):void;
  native public function get textHeight():Number;

  native public function getLineText(lineIndex:int):String;
  native public function get mouseWheelEnabled():Boolean;
  native public function get restrict():String;
  native internal function copyRichText():String;
  native private function get dragCaretVisible():Boolean;

  native public function get gridFitType():String;
  native private function set dragCaretIndex(dragCaretIndex:int):void;
  native private function setSelectionToDragCaret():void;
  native public function getParagraphLength(charIndex:int):int;
  native public function set antiAliasType(antiAliasType:String):void;

  native private function _dragExit(event:flash.events.NativeDragEvent):void;
  native public function get backgroundColor():uint;
  native public function getCharIndexAtPoint(x:Number,y:Number):int;
  native public function get maxChars():int;
  native internal function pasteRichText(richText:String):Boolean;

  native public function get length():int;
  native public function set wordWrap(value:Boolean):void;
  [Inspectable(environment="none")]
  native public function insertXMLText(beginIndex:int,endIndex:int,richText:String,pasting:Boolean = false):void;
  native public function set thickness(value:Number):void;
  native public function getLineLength(lineIndex:int):int;

  native public function set htmlText(value:String):void;
  native public function getLineMetrics(lineIndex:int):flash.text.TextLineMetrics;
  static native private var richTextFields:Array;
  [Version("10")]
  static native public final function isFontCompatible(fontName:String,fontStyle:String):Boolean;
}


[Event(name="soundComplete",type="flash.events.Event")]
public final class flash.media.SoundChannel extends flash.events.EventDispatcher
{
  native public function SoundChannel():*;

  native public function stop():void;
  native public function get leftPeak():Number;
  native public function get position():Number;
  native public function set soundTransform(sndTransform:flash.media.SoundTransform):void;
  native public function get rightPeak():Number;

  native public function get soundTransform():flash.media.SoundTransform;
}


[Version("10")]
public final class flash.text.engine.EastAsianJustifier extends flash.text.engine.TextJustifier
{
  native public function EastAsianJustifier(locale:String = "ja",lineJustification:String = "allButLast",justificationStyle:String = "pushInKinsoku"):*;
  native public override function clone():flash.text.engine.TextJustifier;
  native public function set justificationStyle(value:String):void;
  native public function get justificationStyle():String;
}


[ExcludeClass]
public class flash.accessibility.AccessibilityImplementation extends Object
{

  native public function AccessibilityImplementation():*;
  native public function isLabeledBy(labelBounds:flash.geom.Rectangle):Boolean;
  native public function get_accName(childID:uint):String;
  native public var errno:uint;
  native public function get_accFocus():uint;

  native public function get_accValue(childID:uint):String;
  native public function accDoDefaultAction(childID:uint):void;
  native public var stub:Boolean;
  native public function get_accSelection():Array;
  native public function get_accRole(childID:uint):uint;

  native public function accLocation(childID:uint):*;
  native public function getChildIDArray():Array;
  native public function get_accState(childID:uint):uint;
  native public function accSelect(operation:uint,childID:uint):void;
  native public function get_accDefaultAction(childID:uint):String;
}


public class flash.data.SQLCollationType extends Object
{

  native public function SQLCollationType():*;
  static native public const BINARY:String = "binary";
  static native public const NO_CASE:String = "noCase";
}


public final class flash.text.CSMSettings extends Object
{
  native public function CSMSettings(fontSize:Number,insideCutoff:Number,outsideCutoff:Number):*;
  native public var fontSize:Number;

  native public var outsideCutoff:Number;
  native public var insideCutoff:Number;
}


public class flash.data.SQLTransactionLockType extends Object
{
  native public function SQLTransactionLockType():*;
  static native public const IMMEDIATE:String = "immediate";
  static native public const EXCLUSIVE:String = "exclusive";

  static native public const DEFERRED:String = "deferred";
}


[ExcludeClass]
public class flash.text.TextRun extends Object
{
  native public function TextRun(beginIndex:int,endIndex:int,textFormat:flash.text.TextFormat):*;
  native public var textFormat:flash.text.TextFormat;
  native public var endIndex:int;
  native public var beginIndex:int;
}


[Event(name="securityError",type="flash.events.SecurityErrorEvent")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="data",type="flash.events.DataEvent")]
[Event(name="connect",type="flash.events.Event")]
[Event(name="close",type="flash.events.Event")]
public class flash.net.XMLSocket extends flash.events.EventDispatcher
{

  native public function XMLSocket(host:String = null,port:int = 0):void;
  [Version("10")]
  native public function get timeout():int;
  [Version("10")]
  native public function set timeout(value:int):void;
  native private var _rcvBuffer:flash.utils.ByteArray;
  native public function send(object:*):void;

  native public function get connected():Boolean;
  native public function connect(host:String,port:int):void;
  native private var _internalSocket:flash.net.Socket;
  native private function scanAndSendEvent(e:flash.events.ProgressEvent):void;
  native private var _bytesInPacket:uint;

  native private function reflectEvent(e:flash.events.Event):void;
  native public function close():void;
}


public dynamic class flash.utils.Dictionary extends Object
{
  native public function Dictionary(weakKeys:Boolean = false):*;
}


public final class flash.text.TextFieldAutoSize extends Object
{
  native public function TextFieldAutoSize():*;
  static native public const CENTER:String = "center";

  static native public const LEFT:String = "left";
  static native public const NONE:String = "none";
  static native public const RIGHT:String = "right";
}


[Version("10")]
public final class flash.text.engine.GroupElement extends flash.text.engine.ContentElement
{
  native public function GroupElement(elements:Vector.<flash.text.engine.ContentElement> = null,elementFormat:flash.text.engine.ElementFormat = null,eventMirror:flash.events.EventDispatcher = null,textRotation:String = "rotate0"):*;
  native public function getElementAt(index:int):flash.text.engine.ContentElement;

  native public function getElementAtCharIndex(charIndex:int):flash.text.engine.ContentElement;
  native public function get elementCount():int;
  native public function getElementIndex(element:flash.text.engine.ContentElement):int;
  native public function splitTextElement(elementIndex:int,splitIndex:int):flash.text.engine.TextElement;
  native public function groupElements(beginIndex:int,endIndex:int):GroupElement;

  native public function setElements(value:Vector.<flash.text.engine.ContentElement>):void;
  native public function replaceElements(beginIndex:int,endIndex:int,newElements:Vector.<flash.text.engine.ContentElement>):Vector.<flash.text.engine.ContentElement>;
  native public function mergeTextElements(beginIndex:int,endIndex:int):flash.text.engine.TextElement;
  native public function ungroupElements(groupIndex:int):void;
}


[Version("10")]
public dynamic class flash.net.NetStreamPlayOptions extends flash.events.EventDispatcher
{
  native public function NetStreamPlayOptions():*;

  native public var oldStreamName:String;
  native public var len:Number;
  native public var start:Number;
  native public var streamName:String;
  native public var transition:String;
}


[Version("10")]
public final class flash.text.engine.ElementFormat extends Object
{

  native public function ElementFormat(fontDescription:flash.text.engine.FontDescription = null,fontSize:Number = 12.0,color:uint = 0,alpha:Number = 1.0,textRotation:String = "auto",dominantBaseline:String = "roman",alignmentBaseline:String = "useDominantBaseline",baselineShift:Number = 0.0,kerning:String = "on",trackingRight:Number = 0.0,trackingLeft:Number = 0.0,locale:String = "en",breakOpportunity:String = "auto",digitCase:String = "default",digitWidth:String = "default",ligatureLevel:String = "common",typographicCase:String = "default"):*;
  native public function set baselineShift(value:Number):void;
  native public function set trackingLeft(value:Number):void;
  native public function get baselineShift():Number;
  native public function get dominantBaseline():String;

  native public function set color(value:uint):void;
  native public function get alignmentBaseline():String;
  native public function set dominantBaseline(dominantBaseline:String):void;
  native public function get textRotation():String;
  native public function get kerning():String;

  native public function set alignmentBaseline(alignmentBaseline:String):void;
  native public function set trackingRight(value:Number):void;
  native public function get breakOpportunity():String;
  native public function set textRotation(value:String):void;
  native public function set kerning(value:String):void;

  native public function get digitWidth():String;
  native public function set fontDescription(value:flash.text.engine.FontDescription):void;
  native public function set locked(value:Boolean):void;
  native public function clone():ElementFormat;
  native public function get alpha():Number;

  native public function set ligatureLevel(ligatureLevelType:String):void;
  native public function set fontSize(value:Number):void;
  native public function get locale():String;
  native public function get locked():Boolean;
  native public function get color():uint;

  native public function get trackingRight():Number;
  native public function set breakOpportunity(opportunityType:String):void;
  native public function get fontDescription():flash.text.engine.FontDescription;
  native public function set typographicCase(typographicCaseType:String):void;
  native public function get fontSize():Number;

  native public function set digitWidth(digitWidthType:String):void;
  native public function set locale(value:String):void;
  native public function get trackingLeft():Number;
  native public function get ligatureLevel():String;
  native public function set digitCase(digitCaseType:String):void;

  native public function get typographicCase():String;
  native public function set alpha(value:Number):void;
  native public function get digitCase():String;
  native public function getFontMetrics():flash.text.engine.FontMetrics;
}


public final class flash.filters.DisplacementMapFilter extends flash.filters.BitmapFilter
{
  native public function DisplacementMapFilter(mapBitmap:flash.display.BitmapData = null,mapPoint:flash.geom.Point = null,componentX:uint = 0,componentY:uint = 0,scaleX:Number = 0.0,scaleY:Number = 0.0,mode:String = "wrap",color:uint = 0,alpha:Number = 0.0):*;

  native public function get componentY():uint;
  native public override function clone():flash.filters.BitmapFilter;
  native public function get alpha():Number;
  native public function set mode(value:String):void;
  native public function set mapPoint(value:flash.geom.Point):void;

  native public function set alpha(value:Number):void;
  native public function get mode():String;
  native public function get mapBitmap():flash.display.BitmapData;
  native public function set color(value:uint):void;
  native public function get scaleX():Number;

  native public function get scaleY():Number;
  native public function get color():uint;
  native public function get mapPoint():flash.geom.Point;
  native public function set componentX(value:uint):void;
  native public function set componentY(value:uint):void;

  native public function get componentX():uint;
  native public function set scaleX(value:Number):void;
  native public function set mapBitmap(value:flash.display.BitmapData):void;
  native public function set scaleY(value:Number):void;
}


public class flash.printing.PrintJob extends flash.events.EventDispatcher
{
  native public function PrintJob():*;

  native public function get orientation():String;
  native public function get paperHeight():int;
  native private function toClassicRectangle(printArea:flash.geom.Rectangle):*;
  native public function get pageHeight():int;
  native public function get pageWidth():int;

  native private function invoke(index:uint,... rest):*;
  native public function start():Boolean;
  native public function get paperWidth():int;
  native public function addPage(sprite:flash.display.Sprite,printArea:flash.geom.Rectangle = null,options:flash.printing.PrintJobOptions = null,frameNum:int = 0):void;
  native private function _invoke(index:*,... rest):*;

  native public function send():void;
  static native private const kGetPageHeight:uint = 5;
  static native private const kGetOrientation:uint = 9;
  static native private const kGetPaperHeight:uint = 1;
  static native private const kGetPaperWidth:uint = 3;

  static native private const kGetPageWidth:uint = 7;
  static native private const kAddPage:uint = 101;
  static native private const kStart:uint = 100;
  static native private const kSend:uint = 102;
}


public final class flash.xml.XMLNodeType extends Object
{
  native public function XMLNodeType():*;

  [Inspectable(environment="none")]
  static native public const DOCUMENT_TYPE_NODE:uint = 10;
  static native public const ELEMENT_NODE:uint = 1;
  [Inspectable(environment="none")]
  static native public const COMMENT_NODE:uint = 8;
  [Inspectable(environment="none")]
  static native public const XML_DECLARATION:uint = 13;
  [Inspectable(environment="none")]
  static native public const CDATA_NODE:uint = 4;

  static native public const TEXT_NODE:uint = 3;
  [Inspectable(environment="none")]
  static native public const PROCESSING_INSTRUCTION_NODE:uint = 7;
}


public final class flash.system.SecurityPanel extends Object
{
  native public function SecurityPanel():*;
  static native public const DEFAULT:String = "default";
  static native public const CAMERA:String = "camera";

  static native public const LOCAL_STORAGE:String = "localStorage";
  static native public const PRIVACY:String = "privacy";
  static native public const MICROPHONE:String = "microphone";
  static native public const SETTINGS_MANAGER:String = "settingsManager";
  static native public const DISPLAY:String = "display";
}


public final class flash.display.Graphics extends Object
{

  native public function Graphics():*;
  [Version("10")]
  native public function drawTriangles(vertices:Vector.<Number>,indices:Vector.<int> = null,uvtData:Vector.<Number> = null,culling:String = "none"):void;
  native public function drawRect(x:Number,y:Number,width:Number,height:Number):void;
  [Version("10")]
  native public function drawPath(commands:Vector.<int>,data:Vector.<Number>,winding:String = "evenOdd"):void;
  native public function curveTo(controlX:Number,controlY:Number,anchorX:Number,anchorY:Number):void;

  native public function beginFill(color:uint,alpha:Number = 1.0):void;
  native public function clear():void;
  native public function lineTo(x:Number,y:Number):void;
  [Version("10")]
  native public function beginShaderFill(shader:flash.display.Shader,matrix:flash.geom.Matrix = null):void;
  native public function lineGradientStyle(type:String,colors:Array,alphas:Array,ratios:Array,matrix:flash.geom.Matrix = null,spreadMethod:String = "pad",interpolationMethod:String = "rgb",focalPointRatio:Number = 0):void;

  native public function beginBitmapFill(bitmap:flash.display.BitmapData,matrix:flash.geom.Matrix = null,repeat:Boolean = true,smooth:Boolean = false):void;
  native public function beginGradientFill(type:String,colors:Array,alphas:Array,ratios:Array,matrix:flash.geom.Matrix = null,spreadMethod:String = "pad",interpolationMethod:String = "rgb",focalPointRatio:Number = 0):void;
  native public function lineStyle(thickness:Number = 0,color:uint = 0,alpha:Number = 1.0,pixelHinting:Boolean = false,scaleMode:String = "normal",caps:String = null,joints:String = null,miterLimit:Number = 3):void;
  [Version("10")]
  native private function beginStrokeObject(istroke:flash.display.IGraphicsStroke):void;
  [Inspectable(environment="none")]
  native public function drawRoundRectComplex(x:Number,y:Number,width:Number,height:Number,topLeftRadius:Number,topRightRadius:Number,bottomLeftRadius:Number,bottomRightRadius:Number):void;

  [Version("10")]
  native private function drawPathObject(path:flash.display.IGraphicsPath):void;
  [Version("10")]
  native private function beginFillObject(fill:flash.display.IGraphicsFill):void;
  native public function moveTo(x:Number,y:Number):void;
  native public function drawRoundRect(x:Number,y:Number,width:Number,height:Number,ellipseWidth:Number,ellipseHeight:Number = 0):void;
  native public function drawCircle(x:Number,y:Number,radius:Number):void;

  [Version("10")]
  native public function lineBitmapStyle(bitmap:flash.display.BitmapData,matrix:flash.geom.Matrix = null,repeat:Boolean = true,smooth:Boolean = false):void;
  [Version("10")]
  native public function lineShaderStyle(shader:flash.display.Shader,matrix:flash.geom.Matrix = null):void;
  [Version("10")]
  native public function drawGraphicsData(graphicsData:Vector.<flash.display.IGraphicsData>):void;
  native public function drawEllipse(x:Number,y:Number,width:Number,height:Number):void;
  native public function endFill():void;

  [Version("10")]
  native public function copyFrom(sourceGraphics:Graphics):void;
}


[Event(name="menuItemSelect",type="flash.events.ContextMenuEvent")]
public final class flash.ui.ContextMenuItem extends flash.display.NativeMenuItem
{
  native public function ContextMenuItem(caption:String,separatorBefore:Boolean = false,enabled:Boolean = true,visible:Boolean = true):*;
  native public function get visible():Boolean;
  native public function get separatorBefore():Boolean;
  native public function get caption():String;

  native public function set separatorBefore(value:Boolean):void;
  native public function set visible(value:Boolean):void;
  native public function set caption(value:String):void;
  native public override function clone():flash.display.NativeMenuItem;
  static native private final function _cut(ev:flash.events.ContextMenuEvent):void;

  static native internal final function systemCutMenuItem():ContextMenuItem;
  static native private final function _selectAll(ev:flash.events.ContextMenuEvent):void;
  static native private final function _getMenuString(label:String):String;
  static native internal final function systemSelectAllMenuItem():ContextMenuItem;
  static native private final function _openLink(ev:flash.events.ContextMenuEvent):void;

  static native internal final function systemOpenLinkMenuItem():ContextMenuItem;
  static native private final function _clear(ev:flash.events.ContextMenuEvent):void;
  static native internal final function systemClearMenuItem():ContextMenuItem;
  static native private final function _setUserRequestingPaste(requesting:Boolean):void;
  static native private final function _copy(ev:flash.events.ContextMenuEvent):void;

  static native private final function _copyLink(ev:flash.events.ContextMenuEvent):void;
  static native internal final function systemCopyMenuItem():ContextMenuItem;
  static native internal final function systemCopyLinkMenuItem():ContextMenuItem;
  static native private final function _paste(ev:flash.events.ContextMenuEvent):void;
  static native private final function _isTextEditor(obj:flash.display.InteractiveObject):Boolean;

  static native internal final function systemPasteMenuItem():ContextMenuItem;
}


public class flash.errors.SQLError extends Error
{
  native public function SQLError(operation:String,details:String = "",message:String = "",id:int = 0,detailID:int = -1,detailArgs:Array = null):*;
  native public function get details():String;
  native private var _details:String;
  native public function get detailArguments():Array;

  native public function get operation():String;
  native private var _operation:String;
  native private var _detailID:int;
  native public function toString():String;
  native private var _detailArgs:Array;

  native public function get detailID():int;
}


[Event(name="select",type="flash.events.Event")]
[Event(name="cancel",type="flash.events.Event")]
public class flash.net.FileReferenceList extends flash.events.EventDispatcher
{
  native public function FileReferenceList():*;
  native public function browse(typeFilter:Array = null):Boolean;
  native public function get fileList():Array;
}


public class flash.events.DataEvent extends flash.events.TextEvent
{
  native public function DataEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,data:String = ""):*;

  native public function get data():String;
  native public override function toString():String;
  native public override function clone():flash.events.Event;
  native public function set data(value:String):void;
  static native public const DATA:String = "data";

  static native public const UPLOAD_COMPLETE_DATA:String = "uploadCompleteData";
}


[Version("10")]
public class flash.geom.Utils3D extends Object
{
  native public function Utils3D():*;
  static native public final function pointTowards(percent:Number,mat:flash.geom.Matrix3D,pos:flash.geom.Vector3D,at:flash.geom.Vector3D = null,up:flash.geom.Vector3D = null):flash.geom.Matrix3D;
  static native public final function projectVector(m:flash.geom.Matrix3D,v:flash.geom.Vector3D):flash.geom.Vector3D;
  static native public final function projectVectors(m:flash.geom.Matrix3D,verts:Vector.<Number>,projectedVerts:Vector.<Number>,uvts:Vector.<Number>):void;
}


public final class flash.text.TextColorType extends Object
{

  native public function TextColorType():*;
  static native public const DARK_COLOR:String = "dark";
  static native public const LIGHT_COLOR:String = "light";
}


public final class flash.ui.KeyLocation extends Object
{
  native public function KeyLocation():*;
  static native public const NUM_PAD:uint = 3;

  static native public const LEFT:uint = 1;
  static native public const RIGHT:uint = 2;
  static native public const STANDARD:uint = 0;
}


public class flash.data.SQLTriggerSchema extends flash.data.SQLSchema
{
  native public function SQLTriggerSchema(database:String,name:String,sql:String,table:String):*;
  native public function get table():String;

  native private var _table:String;
}


[Event(name="error",type="flash.events.SQLErrorEvent")]
[Event(name="result",type="flash.events.SQLEvent")]
public class flash.data.SQLStatement extends flash.events.EventDispatcher
{
  native public function SQLStatement():*;
  native private function checkAllowed():void;
  native public function cancel():void;
  native private var _finalize:Boolean = false;

  native public function set itemClass(value:Class):void;
  native public function get sqlConnection():flash.data.SQLConnection;
  native private var _sql:String = "";
  native private function internalNext(prefecth:int,responder:flash.net.Responder):void;
  native public function getResult():flash.data.SQLResult;

  native public function clearParameters():void;
  native public function set sqlConnection(value:flash.data.SQLConnection):void;
  native public function set text(value:String):void;
  native private function isSQLComplete(sql:String):Boolean;
  native private function checkComplete():void;

  native public function get itemClass():Class;
  native private function internalCancel():void;
  native private function isExecuting():Boolean;
  native public function get parameters():Object;
  native private var _params:Object;

  native public function get text():String;
  native public function get executing():Boolean;
  native public function next(prefetch:int = -1,responder:flash.net.Responder = null):void;
  native public function execute(prefetch:int = -1,responder:flash.net.Responder = null):void;
  native private function internalExecute(sql:String,params:Object,mustFinalize:Boolean,prefetch:int,responder:flash.net.Responder):void;

  native private function checkReady():void;
  native private function get prepared():Boolean;
}


public final class flash.display.BitmapDataChannel extends Object
{
  native public function BitmapDataChannel():*;
  static native public const RED:uint = 1;
  static native public const GREEN:uint = 2;

  static native public const BLUE:uint = 4;
  static native public const ALPHA:uint = 8;
}


public final class flash.text.StaticText extends flash.display.DisplayObject
{
  native public function StaticText():*;
  native public function get text():String;
}


public class flash.events.FocusEvent extends flash.events.Event
{
  native public function FocusEvent(type:String,bubbles:Boolean = true,cancelable:Boolean = false,relatedObject:flash.display.InteractiveObject = null,shiftKey:Boolean = false,keyCode:uint = 0,direction:String = "none"):*;

  native private var m_keyCode:uint;
  [Version("10")]
  native public function get isRelatedObjectInaccessible():Boolean;
  native public function get shiftKey():Boolean;
  native public function set direction(value:String):void;
  native public function get direction():String;

  [Version("10")]
  native private var m_isRelatedObjectInaccessible:Boolean;
  native public function get relatedObject():flash.display.InteractiveObject;
  native public override function toString():String;
  native private var m_direction:String;
  native public function get keyCode():uint;

  native private var m_shiftKey:Boolean;
  [Version("10")]
  native public function set isRelatedObjectInaccessible(value:Boolean):void;
  native private var m_relatedObject:flash.display.InteractiveObject;
  native public function set relatedObject(value:flash.display.InteractiveObject):void;
  native public function set shiftKey(value:Boolean):void;

  native public override function clone():flash.events.Event;
  native public function set keyCode(value:uint):void;
  static native public const MOUSE_FOCUS_CHANGE:String = "mouseFocusChange";
  static native public const FOCUS_OUT:String = "focusOut";
  static native public const KEY_FOCUS_CHANGE:String = "keyFocusChange";

  static native public const FOCUS_IN:String = "focusIn";
}


public final class flash.net.SharedObjectFlushStatus extends Object
{
  native public function SharedObjectFlushStatus():*;
  static native public const FLUSHED:String = "flushed";
  static native public const PENDING:String = "pending";
}


public final class flash.display.BlendMode extends Object
{
  native public function BlendMode():*;

  static native public const ADD:String = "add";
  static native public const ERASE:String = "erase";
  static native public const ALPHA:String = "alpha";
  static native public const SUBTRACT:String = "subtract";
  static native public const INVERT:String = "invert";

  static native public const LIGHTEN:String = "lighten";
  static native public const MULTIPLY:String = "multiply";
  static native public const SHADER:String = "shader";
  static native public const DARKEN:String = "darken";
  static native public const NORMAL:String = "normal";

  static native public const HARDLIGHT:String = "hardlight";
  static native public const SCREEN:String = "screen";
  static native public const OVERLAY:String = "overlay";
  static native public const LAYER:String = "layer";
  static native public const DIFFERENCE:String = "difference";
}


public class flash.events.HTTPStatusEvent extends flash.events.Event
{

  native public function HTTPStatusEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,status:int = 0):*;
  native private var m_responseUrl:String;
  native private var m_status:int;
  native public function get responseHeaders():Array;
  native public function set responseHeaders(value:Array):void;

  native public override function toString():String;
  native public function get responseURL():String;
  native public function get status():int;
  native private var m_responseHeaders:Array;
  native public function set responseURL(value:String):void;

  native public override function clone():flash.events.Event;
  static native public const HTTP_RESPONSE_STATUS:String = "httpResponseStatus";
  static native public const HTTP_STATUS:String = "httpStatus";
}


[Version("10")]
public final class flash.display.GraphicsPath extends Object
  implements flash.display.IGraphicsPath,flash.display.IGraphicsData
{
  native public function GraphicsPath(commands:Vector.<int> = null,data:Vector.<Number> = null,winding:String = "evenOdd"):*;
  native public function wideLineTo(x:Number,y:Number):void;

  native public function set winding(value:String):*;
  native public var commands:Vector.<int>;
  native public var data:Vector.<Number>;
  native public function moveTo(x:Number,y:Number):void;
  native public function lineTo(x:Number,y:Number):void;

  native public function curveTo(controlX:Number,controlY:Number,anchorX:Number,anchorY:Number):void;
  native public function get winding():String;
  native private var _winding:String;
  native public function wideMoveTo(x:Number,y:Number):void;
}


[Version("10")]
public final class flash.text.engine.TextBlock extends Object
{
  native public function TextBlock(content:flash.text.engine.ContentElement = null,tabStops:Vector.<flash.text.engine.TabStop> = null,textJustifier:flash.text.engine.TextJustifier = null,lineRotation:String = "rotate0",baselineZero:String = "roman",bidiLevel:int = 0,applyNonLinearFontScaling:Boolean = true,baselineFontDescription:flash.text.engine.FontDescription = null,baselineFontSize:Number = 12.0):*;

  native public function get textJustifier():flash.text.engine.TextJustifier;
  native public function getTextLineAtCharIndex(charIndex:int):flash.text.engine.TextLine;
  native public function get firstLine():flash.text.engine.TextLine;
  native public function set textJustifier(value:flash.text.engine.TextJustifier):void;
  native public function get content():flash.text.engine.ContentElement;

  native private function getTextJustifier():flash.text.engine.TextJustifier;
  native public function findPreviousAtomBoundary(beforeCharIndex:int):int;
  native public function get baselineZero():String;
  native public function findNextAtomBoundary(afterCharIndex:int):int;
  native public function findNextWordBoundary(afterCharIndex:int):int;

  native public function set baselineFontDescription(value:flash.text.engine.FontDescription):void;
  native public function get lineRotation():String;
  native public function findPreviousWordBoundary(beforeCharIndex:int):int;
  native public function get applyNonLinearFontScaling():Boolean;
  native public var userData:*;

  native public function get bidiLevel():int;
  native private function getTabStops():Vector.<flash.text.engine.TabStop>;
  native public function set baselineZero(value:String):void;
  native public function get baselineFontSize():Number;
  native public function createTextLine(previousLine:flash.text.engine.TextLine = null,width:Number = 1000000,lineOffset:Number = 0.0,fitSomething:Boolean = false):flash.text.engine.TextLine;

  native private function setTabStops(value:Vector.<flash.text.engine.TabStop>):void;
  native public function get tabStops():Vector.<flash.text.engine.TabStop>;
  native public function set lineRotation(value:String):void;
  native public function set applyNonLinearFontScaling(value:Boolean):void;
  native public function get lastLine():flash.text.engine.TextLine;

  native public function get baselineFontDescription():flash.text.engine.FontDescription;
  native public function set bidiLevel(value:int):void;
  native public function set baselineFontSize(value:Number):void;
  native public function set content(value:flash.text.engine.ContentElement):void;
  native public function dump():String;

  native private function DoCreateTextLine(previousLine:flash.text.engine.TextLine,width:Number,lineOffset:Number = 0.0,fitSomething:Boolean = false):flash.text.engine.TextLine;
  native public function set tabStops(value:Vector.<flash.text.engine.TabStop>):void;
  native public function get firstInvalidLine():flash.text.engine.TextLine;
  native public function get textLineCreationResult():String;
  native private function setTextJustifier(value:flash.text.engine.TextJustifier):void;

  native public function releaseLines(firstLine:flash.text.engine.TextLine,lastLine:flash.text.engine.TextLine):void;
}


[Version("10")]
public final class flash.geom.Orientation3D extends Object
{
  native public function Orientation3D():*;
  static native public const AXIS_ANGLE:String = "axisAngle";
  static native public const EULER_ANGLES:String = "eulerAngles";
  static native public const QUATERNION:String = "quaternion";
}


public final class flash.system.System extends Object
{

  native public function System():*;
  static native public final function get ime():flash.system.IME;
  static native public final function get useCodePage():Boolean;
  static native public final function get totalMemory():uint;
  static native public final function set useCodePage(value:Boolean):void;

  [Inspectable(environment="none")]
  static native public final function get vmVersion():String;
  static native public final function resume():void;
  static native private var theIME:flash.system.IME = null;
  static native public final function setClipboard(string:String):void;
  static native public final function pause():void;

  static native public final function nativeConstructionOnly(object:Object):void;
  static native public final function gc():void;
  static native public final function exit(code:uint):void;
}


public final class flash.filters.BlurFilter extends flash.filters.BitmapFilter
{
  native public function BlurFilter(blurX:Number = 4.0,blurY:Number = 4.0,quality:int = 1):*;
  native public function get blurX():Number;

  native public function set blurX(value:Number):void;
  native public function set blurY(value:Number):void;
  native public function get blurY():Number;
  native public override function clone():flash.filters.BitmapFilter;
  native public function set quality(value:int):void;

  native public function get quality():int;
}


[Version("air1.5")]
public final class flash.security.ReferencesValidationSetting extends Object
{
  native public function ReferencesValidationSetting():*;
  static native public const VALID_IDENTITY:String = "validIdentity";
  static native public const NEVER:String = "never";
  static native public const VALID_OR_UNKNOWN_IDENTITY:String = "validOrUnknownIdentity";
}


public class flash.utils.ByteArray extends Object
  implements flash.utils.IDataInput,flash.utils.IDataOutput
{

  native public function ByteArray():*;
  native public function writeUTFBytes(value:String):void;
  native public function readShort():int;
  native public function writeByte(value:int):void;
  native public function writeDouble(value:Number):void;

  native public function readUnsignedShort():uint;
  native public function readDouble():Number;
  native public function writeInt(value:int):void;
  native private function _uncompress(algorithm:String):void;
  native public function get endian():String;

  native public function get bytesAvailable():uint;
  native public function readObject():*;
  [Version("10")]
  native public function deflate():void;
  native public function get position():uint;
  native public function readBoolean():Boolean;

  [Version("10")]
  native public function inflate():void;
  native public function set endian(type:String):void;
  native public function readUTF():String;
  native public function readUTFBytes(length:uint):String;
  native public function writeFloat(value:Number):void;

  native public function writeMultiByte(value:String,charSet:String):void;
  native public function readUnsignedInt():uint;
  native public function readByte():int;
  native public function get objectEncoding():uint;
  native public function writeBytes(bytes:ByteArray,offset:uint = 0,length:uint = 0):void;

  [Version("10")]
  native public function clear():void;
  native public function writeUTF(value:String):void;
  native public function writeBoolean(value:Boolean):void;
  native public function set position(offset:uint):void;
  native private function _compress(algorithm:String):void;

  native public function readUnsignedByte():uint;
  native public function writeUnsignedInt(value:uint):void;
  native public function writeShort(value:int):void;
  native public function get length():uint;
  native public function compress(algorithm:String = "zlib"):void;

  native public function toString():String;
  native public function set length(value:uint):void;
  native public function set objectEncoding(version:uint):void;
  native public function readFloat():Number;
  native public function readInt():int;

  native public function readMultiByte(length:uint,charSet:String):String;
  native public function uncompress(algorithm:String = "zlib"):void;
  native public function readBytes(bytes:ByteArray,offset:uint = 0,length:uint = 0):void;
  native public function writeObject(object:*):void;
  static native public final function get defaultObjectEncoding():uint;

  static native public final function set defaultObjectEncoding(version:uint):void;
}

public final class flash.utils.CompressionAlgorithm extends Object
{
  native public function CompressionAlgorithm():*;
  static native public const ZLIB:String = "zlib";
  static native public const DEFLATE:String = "deflate";
}


public final class flash.system.Capabilities extends Object
{
  native public function Capabilities():*;

  static native public final function get hasTLS():Boolean;
  static native public final function get playerType():String;
  static native public final function get hasIME():Boolean;
  [Version("10")]
  static native public final function get maxLevelIDC():String;
  static native public final function get hasStreamingAudio():Boolean;

  static native public final function get hasPrinting():Boolean;
  static native public final function get manufacturer():String;
  static native public final function get hasAccessibility():Boolean;
  static native public final function get hasMP3():Boolean;
  static native public final function get screenColor():String;

  static native public final function get language():String;
  static native public final function get languages():Array;
  static native public final function get hasAudio():Boolean;
  static native public final function get hasEmbeddedVideo():Boolean;
  static native public final function get version():String;

  static native public final function get hasAudioEncoder():Boolean;
  static native public final function get hasScreenPlayback():Boolean;
  static native public final function get _internal():uint;
  static native public final function get os():String;
  static native public final function get screenResolutionX():Number;

  static native public final function get screenResolutionY():Number;
  static native public final function get screenDPI():Number;
  static native public final function get hasVideoEncoder():Boolean;
  static native public final function get avHardwareDisable():Boolean;
  static native public final function get pixelAspectRatio():Number;

  static native public final function get isDebugger():Boolean;
  static native public final function get hasStreamingVideo():Boolean;
  static native public final function get serverString():String;
  static native public final function get localFileReadDisable():Boolean;
  static native public final function get hasScreenBroadcast():Boolean;

  static native public final function get isEmbeddedInAcrobat():Boolean;
}


public final class flash.system.ApplicationDomain extends Object
{
  native public function ApplicationDomain(parentDomain:ApplicationDomain = null):*;
  [Version("air1")]
  [Version("10")]
  native public function get domainMemory():flash.utils.ByteArray;
  native public function getDefinition(name:String):Object;
  [Version("air1")]
  [Version("10")]
  native public function set domainMemory(mem:flash.utils.ByteArray):*;

  native public function hasDefinition(name:String):Boolean;
  native public function get parentDomain():ApplicationDomain;
  static native public final function get currentDomain():ApplicationDomain;
  [Version("air1")]
  [Version("10")]
  static native public final function get MIN_DOMAIN_MEMORY_LENGTH():uint;
}


public final class flash.display.StageAlign extends Object
{
  native public function StageAlign():*;

  static native public const LEFT:String = "L";
  static native public const BOTTOM_RIGHT:String = "BR";
  static native public const BOTTOM:String = "B";
  static native public const TOP_LEFT:String = "TL";
  static native public const TOP_RIGHT:String = "TR";

  static native public const TOP:String = "T";
  static native public const BOTTOM_LEFT:String = "BL";
  static native public const RIGHT:String = "R";
}


public final class flash.text.TextFieldType extends Object
{
  native public function TextFieldType():*;
  static native public const INPUT:String = "input";

  static native public const DYNAMIC:String = "dynamic";
}


[Version("10")]
public final class flash.display.GraphicsStroke extends Object
  implements flash.display.IGraphicsStroke,flash.display.IGraphicsData
{
  native public function GraphicsStroke(thickness:Number = NaN,pixelHinting:Boolean = false,scaleMode:String = "normal",caps:String = "none",joints:String = "round",miterLimit:Number = 3.0,fill:flash.display.IGraphicsFill = null):*;
  native private var _caps:String;
  native public function get caps():String;
  native public function set caps(value:String):void;

  native public var fill:flash.display.IGraphicsFill;
  native public function get joints():String;
  native public function get scaleMode():String;
  native private var _scaleMode:String;
  native private var _joints:String;

  native public function set joints(value:String):*;
  native public var thickness:Number;
  native public var pixelHinting:Boolean;
  native public var miterLimit:Number;
  native public function set scaleMode(value:String):void;
}


public class flash.events.DRMAuthenticationErrorEvent extends flash.events.ErrorEvent
{

  native public function DRMAuthenticationErrorEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,inDetail:String = "",inErrorID:int = 0,inSubErrorID:int = 0,inServerURL:String = null,inDomain:String = null):*;
  native public function get subErrorID():int;
  native public function get domain():String;
  native public function set subErrorID(value:int):void;
  native public function set domain(value:String):void;

  native public function get serverURL():String;
  native private var m_subErrorID:int;
  native private var m_domain:String;
  native public function set serverURL(value:String):void;
  native private var m_serverURL:String;

  native public override function clone():flash.events.Event;
  static native public const AUTHENTICATION_ERROR:String = "AuthenticationError";
}

public class flash.events.DRMAuthenticationCompleteEvent extends flash.events.Event
{
  native public function DRMAuthenticationCompleteEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,inServerURL:String = null,inDomain:String = null,inToken:flash.utils.ByteArray = null):*;
  native public function get domain():String;
  native private var m_token:flash.utils.ByteArray;

  native public function set domain(value:String):void;
  native public function get serverURL():String;
  native public function set token(value:flash.utils.ByteArray):void;
  native private var m_domain:String;
  native public function set serverURL(value:String):void;

  native public function get token():flash.utils.ByteArray;
  native private var m_serverURL:String;
  native public override function clone():flash.events.Event;
  static native public const AUTHENTICATION_COMPLETE:String = "authenticationComplete";
}


public class flash.data.SQLSchemaResult extends Object
{
  native public function SQLSchemaResult(tables:Array,views:Array,indices:Array,triggers:Array):*;

  native private var _tables:Array;
  native public function get tables():Array;
  native public function get indices():Array;
  native private var _indices:Array;
  native public function get views():Array;

  native private var _views:Array;
  native private var _triggers:Array;
  native public function get triggers():Array;
}


[ExcludeClass]
public class flash.events.NetFilterEvent extends flash.events.Event
{
  native public function NetFilterEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,header:flash.utils.ByteArray = null,data:flash.utils.ByteArray = null):*;
  native public var data:flash.utils.ByteArray;

  native public override function toString():String;
  native public override function clone():flash.events.Event;
  native public var header:flash.utils.ByteArray;
}


[Version("10")]
public class flash.geom.Vector3D extends Object
{
  native public function Vector3D(x:Number = 0.0,y:Number = 0.0,z:Number = 0.0,w:Number = 0.0):*;
  native public function project():void;

  native public function get lengthSquared():Number;
  native public function negate():void;
  native public function add(a:Vector3D):Vector3D;
  native public function dotProduct(a:Vector3D):Number;
  native public function nearEquals(toCompare:Vector3D,tolerance:Number,allFour:Boolean = false):Boolean;

  native public function scaleBy(s:Number):void;
  native public function decrementBy(a:Vector3D):void;
  native public function toString():String;
  native public function get length():Number;
  native public function crossProduct(a:Vector3D):Vector3D;

  native public function incrementBy(a:Vector3D):void;
  native public var w:Number;
  native public var x:Number;
  native public var y:Number;
  native public var z:Number;

  native public function subtract(a:Vector3D):Vector3D;
  native public function normalize():Number;
  native public function clone():Vector3D;
  native public function equals(toCompare:Vector3D,allFour:Boolean = false):Boolean;
  static native public final function distance(pt1:Vector3D,pt2:Vector3D):Number;

  static native public final function angleBetween(a:Vector3D,b:Vector3D):Number;
  static native public const Z_AXIS:Vector3D;
  static native public const Y_AXIS:Vector3D;
  static native public const X_AXIS:Vector3D;
}


public class flash.events.InvokeEvent extends flash.events.Event
{
  native public function InvokeEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,dir:flash.filesystem.File = null,argv:Array = null):*;

  native private var m_argv:Array;
  native public function get currentDirectory():flash.filesystem.File;
  native public function get arguments():Array;
  native private var m_dir:flash.filesystem.File;
  native public override function clone():flash.events.Event;

  static native public const INVOKE:String = "invoke";
}


public final class flash.display.StageDisplayState extends Object
{
  native public function StageDisplayState():*;
  static native public const NORMAL:String = "normal";
  static native public const FULL_SCREEN:String = "fullScreen";
  static native public const FULL_SCREEN_INTERACTIVE:String = "fullScreenInteractive";
}


public class flash.data.SQLViewSchema extends flash.data.SQLTableSchema
{

  native public function SQLViewSchema(database:String,name:String,sql:String,columns:Array):*;
}


public class flash.events.SyncEvent extends flash.events.Event
{
  native public function SyncEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,changeList:Array = null):*;
  native private var m_changeList:Array;
  native public function set changeList(value:Array):void;
  native public override function toString():String;

  native public override function clone():flash.events.Event;
  native public function get changeList():Array;
  static native public const SYNC:String = "sync";
}


public class flash.trace.Trace extends Object
{
  native public function Trace():*;
  static native public const METHODS_AND_LINES_WITH_ARGS:int = 4;

  static native public const METHODS_AND_LINES:int = 3;
  static native public final function getListener():Function;
  static native public final function getLevel(target:int = 2):int;
  static native public const OFF:int = 0;
  static native public const METHODS_WITH_ARGS:int = 2;

  static native public final function setLevel(l:int,target:int = 2):*;
  static native public const METHODS:int = 1;
  static native public final function setListener(f:Function):*;
  static native public const LISTENER:* = 2;
  static native public const FILE:* = 1;
}


public class flash.xml.XMLNode extends Object
{

  native public function XMLNode(type:uint,value:String):*;
  native private function escapeXML(value:String):String;
  native public var previousSibling:XMLNode;
  native public var parentNode:XMLNode;
  native public var nextSibling:XMLNode;

  native private function init(type:uint,value:String):void;
  native public function get namespaceURI():String;
  native public function get prefix():String;
  native public var firstChild:XMLNode;
  native private var _childNodes:Array;

  native public var nodeValue:String;
  native public function get attributes():Object;
  native public var nodeType:uint;
  native public function appendChild(node:XMLNode):void;
  native public var lastChild:XMLNode;

  native public function insertBefore(node:XMLNode,before:XMLNode):void;
  native public function getNamespaceForPrefix(prefix:String):String;
  native public var nodeName:String;
  native public function set attributes(value:Object):void;
  native public function hasChildNodes():Boolean;

  native public function get childNodes():Array;
  native private var _attributes:Object;
  native public function get localName():String;
  native public function getPrefixForNamespace(ns:String):String;
  native public function toString():String;

  native public function removeNode():void;
  native public function cloneNode(deep:Boolean):XMLNode;
}


public final class flash.system.IMEConversionMode extends Object
{
  native public function IMEConversionMode():*;
  static native public const ALPHANUMERIC_HALF:String = "ALPHANUMERIC_HALF";
  static native public const KOREAN:String = "KOREAN";

  static native public const UNKNOWN:String = "UNKNOWN";
  static native public const JAPANESE_HIRAGANA:String = "JAPANESE_HIRAGANA";
  static native public const CHINESE:String = "CHINESE";
  static native public const JAPANESE_KATAKANA_FULL:String = "JAPANESE_KATAKANA_FULL";
  static native public const JAPANESE_KATAKANA_HALF:String = "JAPANESE_KATAKANA_HALF";

  static native public const ALPHANUMERIC_FULL:String = "ALPHANUMERIC_FULL";
}


[ExcludeClass]
public final class flash.text.TextFormatDisplay extends Object
{
  native public function TextFormatDisplay():*;
  static native public const INLINE:String = "inline";
  static native public const BLOCK:String = "block";
}


public class flash.events.DRMErrorEvent extends flash.events.ErrorEvent
{
  native public function DRMErrorEvent(type:String = "drmError",bubbles:Boolean = false,cancelable:Boolean = false,inErrorDetail:String = "",inErrorCode:int = 0,insubErrorID:int = 0,inMetadata:flash.net.drm.DRMContentData = null):*;

  native private var m_metadata:flash.net.drm.DRMContentData;
  [Version("air1.5")]
  native public function get contentData():flash.net.drm.DRMContentData;
  native private var m_subErrorID:int;
  [Version("air1.5")]
  native public function set contentData(value:flash.net.drm.DRMContentData):void;
  native public function get subErrorID():int;

  native public override function toString():String;
  native public override function clone():flash.events.Event;
  static native public const DRM_ERROR:String = "drmError";
}


public final class flash.filters.ColorMatrixFilter extends flash.filters.BitmapFilter
{
  native public function ColorMatrixFilter(matrix:Array = null):*;
  native public function get matrix():Array;

  native public function set matrix(value:Array):void;
  native public override function clone():flash.filters.BitmapFilter;
}


public final class flash.display.ActionScriptVersion extends Object
{
  native public function ActionScriptVersion():*;
  static native public const ACTIONSCRIPT2:uint = 2;
  static native public const ACTIONSCRIPT3:uint = 3;
}


public class flash.media.Video extends flash.display.DisplayObject
{

  native public function Video(width:int = 320,height:int = 240):*;
  native public function get videoHeight():int;
  native public function get smoothing():Boolean;
  native public function get deblocking():int;
  native public function set smoothing(value:Boolean):void;

  native public function attachCamera(camera:flash.media.Camera):void;
  native public function get videoWidth():int;
  native public function set deblocking(value:int):void;
  native public function clear():void;
  native public function attachNetStream(netStream:flash.net.NetStream):void;
}


public class flash.desktop.NativeWindowIcon extends flash.desktop.InteractiveIcon
{

  native public function NativeWindowIcon():*;
  native public override function set bitmaps(value:Array):void;
  native public override function get bitmaps():Array;
  native public override function get width():int;
  native public override function get height():int;
}


[Version("air1")]
[Version("10")]
public class flash.desktop.Clipboard extends Object
{

  native public function Clipboard():*;
  native private function get canReadContents():Boolean;
  native private function getHTML():String;
  native private function get swfVersion():int;
  native private function getOriginal(format:String):Object;

  native private function convertNativeFormat(format:String):Object;
  native private function checkAccess(requestRead:Boolean,requestWrite:Boolean):void;
  native private function get alive():Boolean;
  native private function getString():String;
  native private function putString(s:String):void;

  native private function nativePutFileList(paths:Array):*;
  native public function clear():void;
  native private function putRTF(rtf:flash.utils.ByteArray):void;
  native private function getObjectReference(format:String):Object;
  native public function clearData(format:String):void;

  native private function getDeserialization(format:String):Object;
  native private function convertFlashFormat(flashFormat:String,data:Object,serializable:Boolean):Boolean;
  native public function get formats():Array;
  native public function getData(format:String,transferMode:String = "originalPreferred"):Object;
  native private function putSerialization(format:String,data:Object):void;

  native private function putByteArray(format:String,bytes:flash.utils.ByteArray):void;
  native private function getClone(format:String):Object;
  native private function putBitmapData(bitmapData:flash.display.BitmapData):void;
  native private function get canWriteContents():Boolean;
  native public function setData(format:String,data:Object,serializable:Boolean = true):Boolean;

  native private function getRTF():flash.utils.ByteArray;
  native private function putURL(url:String):void;
  native private function getFileList():Array;
  native public function hasFormat(format:String):Boolean;
  native private function getBitmapData():flash.display.BitmapData;

  native private function putFileList(files:Array):void;
  native private function getURL():String;
  native private function putHTML(html:String):void;
  native private function getByteArray(format:String):flash.utils.ByteArray;
  native private function putObjectReference(format:String,data:Object):void;

  native public function setDataHandler(format:String,handler:Function,serializable:Boolean = true):Boolean;
  native private function nativeSetHandler(format:String,handler:Function):void;
  static native private var _toFlash:flash.utils.Dictionary;
  static native private var _fromFlash:flash.utils.Dictionary;
  static native private const WRITE_ACCESS_ERROR:String = "Writing to clipboard not permitted in this context";

  static native public final function get generalClipboard():Clipboard;
  static native private final function isSystemFormat(format:String):Boolean;
  static native private const LIFETIME_ERROR:String = "Attempt to access a dead clipboard";
  static native private final function initFormatMap():void;
  static native private const READ_ACCESS_ERROR:String = "Reading from clipboard not permitted in this context";

  static native private var _wasFormatMapInitialized:Boolean = false;
  static native private final function addFormatMapping(flashFormat:String,exportFromFlash:Function,importToFlash:Function):*;
}

[Version("air1")]
[Version("10")]
public class flash.desktop.ClipboardFormats extends Object
{
  native public function ClipboardFormats():*;
  static native internal const FLASH_PREFIX:String = "flash:";
  static native internal const REFERENCE_PREFIX:String = "air:reference:";

  static native internal const AIR_PREFIX:String = "air:";
  static native internal const SERIALIZATION_PREFIX:String = "air:serialization:";
  static native public const TEXT_FORMAT:String = "air:text";
  static native public const HTML_FORMAT:String = "air:html";
  static native public const RICH_TEXT_FORMAT:String = "air:rtf";

  static native public const BITMAP_FORMAT:String = "air:bitmap";
  static native public const FILE_LIST_FORMAT:String = "air:file list";
  static native public const URL_FORMAT:String = "air:url";
}

[Version("air1")]
[Version("10")]
public class flash.desktop.ClipboardTransferMode extends Object
{
  native public function ClipboardTransferMode():*;
  static native public const ORIGINAL_PREFERRED:String = "originalPreferred";

  static native public const CLONE_ONLY:String = "cloneOnly";
  static native public const ORIGINAL_ONLY:String = "originalOnly";
  static native public const CLONE_PREFERRED:String = "clonePreferred";
}


public class flash.display.AVM1Movie extends flash.display.DisplayObject
{
  native public function AVM1Movie():*;
  native private function _setCallAS3(closure:Function):void;

  native private function _callAS3(functionName:String,data:flash.utils.ByteArray):void;
  [Inspectable(environment="none")]
  native public function addCallback(functionName:String,closure:Function):void;
  native private var callbackTable:Object;
  native private function _callAS2(functionName:String,arguments:flash.utils.ByteArray):flash.utils.ByteArray;
  native private function get _interopAvailable():Boolean;

  [Inspectable(environment="none")]
  native public function call(functionName:String,... rest):*;
}


public final class flash.filters.GradientBevelFilter extends flash.filters.BitmapFilter
{
  native public function GradientBevelFilter(distance:Number = 4.0,angle:Number = 45,colors:Array = null,alphas:Array = null,ratios:Array = null,blurX:Number = 4.0,blurY:Number = 4.0,strength:Number = 1,quality:int = 1,type:String = "inner",knockout:Boolean = false):*;
  native public function set colors(value:Array):void;
  native public function get strength():Number;
  native public function set blurX(value:Number):void;

  native public function set blurY(value:Number):void;
  native public function set angle(value:Number):void;
  native public function get type():String;
  native public function get ratios():Array;
  native public function set strength(value:Number):void;

  native public function set alphas(value:Array):void;
  native public function get colors():Array;
  native public function get blurX():Number;
  native public function get blurY():Number;
  native public function get angle():Number;

  native public function set knockout(value:Boolean):void;
  native public function get distance():Number;
  native public function set ratios(value:Array):void;
  native public function set distance(value:Number):void;
  native public function get knockout():Boolean;

  native public function set type(value:String):void;
  native public function get alphas():Array;
  native public override function clone():flash.filters.BitmapFilter;
  native public function set quality(value:int):void;
  native public function get quality():int;
}


public final class flash.ui.ContextMenuBuiltInItems extends Object
{

  native public function ContextMenuBuiltInItems():*;
  native public var loop:Boolean = true;
  [Inspectable(environment="none")]
  native public function clone():ContextMenuBuiltInItems;
  native public var print:Boolean = true;
  native public var zoom:Boolean = true;

  native public var play:Boolean = true;
  native public var forwardAndBack:Boolean = true;
  native public var rewind:Boolean = true;
  native public var save:Boolean = true;
  native public var quality:Boolean = true;
}


public class flash.html.ResourceLoader extends Object
{

  native public function ResourceLoader(urlReq:flash.net.URLRequest,htmlControl:flash.html.HTMLLoader):*;
  native private function nativeReceivedResponse(httpStatusCode:int,responseHeaders:Array,responseURL:String):void;
  native public function cancel():void;
  native private function receivedResponse(httpStatus:int,responseHeaders:Array,responseURL:String,traceStrNotSent:String,traceStrSent:String = null):void;
  native private var m_CurrStateFunction:Function;

  native private function nativeInit(cancelMethod:Function,startMethod:Function):void;
  native private function onFileProgress(ev:flash.events.Event):void;
  native private function onSecurityError(event:flash.events.SecurityErrorEvent):void;
  native private function receivedAllData(traceStrNotSent:String,traceStrSent:String = null):void;
  native private function nativeReceivedAllData():void;

  native private function onFileError(event:flash.events.Event):void;
  native private var m_clientReleased:Boolean;
  native private var m_receivedAllData:Boolean;
  native private function doTrace(traceStr:String):void;
  native private function startMailTo():void;

  native private function onFileHTTPStatus(ev:flash.events.Event):void;
  native private var m_URLRequest:flash.net.URLRequest;
  native private var m_receivedResponse:Boolean;
  native private function onFileComplete(ev:flash.events.Event):void;
  native private var m_URLStream:flash.net.URLStream;

  native private var m_htmlControl:flash.html.HTMLLoader;
  native private function start():void;
  native private function nativeReceivedRedirect(newRequest:flash.net.URLRequest,httpStatusCode:int,responseHeaders:Array,responseURL:String):flash.net.URLRequest;
  native private var m_loader:flash.display.Loader;
  native private function findHeader(header:String,headersArray:Array):flash.net.URLRequestHeader;

  native private function getRedirectLocation(currentURL:String,responseHeadersArray:Array):String;
  native private function onError(event:flash.events.IOErrorEvent):void;
  native private function nativeReleaseClient(closeStream:Boolean):void;
  native private function onLoadSWFError(event:flash.events.Event):void;
  native private function onProgress(event:flash.events.ProgressEvent):void;

  native private function nativeDidFail(failedURL:String):void;
  native private function nativeReceivedData(bytes:flash.utils.ByteArray):void;
  native private function releaseClient(closeStream:Boolean):void;
  native private function onLoadSWFComplete(ev:flash.events.Event):void;
  native private function makeURLAbsolute(baseURL:String,url:String):String;

  native private function onHTTPStatus(event:flash.events.HTTPStatusEvent):void;
  native private function startLoadSWF():void;
  native private function detachURLStream():void;
  native private function didFail(traceStrNotSent:String,traceStrSent:* = null):void;
  native private function startFile():void;

  native private function onComplete(event:flash.events.Event):void;
  static native private final function makeRequestForRedirect(request:flash.net.URLRequest,newURL:String):flash.net.URLRequest;
  static native internal const s_AppStorageURLScheme:String = "app-storage:";
  static native internal const s_AboutURLScheme:String = "about:";
  static native private final function isLocalURL(urlStr:String):Boolean;

  static native internal const s_MailToURLScheme:String = "mailto:";
  static native private const s_HTTP_STATUS_OK:int = 200;
  static native internal const s_HttpURLScheme:String = "http:";
  static native private const s_HTTP_STATUS_FILE_NOT_FOUND:int = 404;
  static native internal const s_FtpURLScheme:String = "ftp:";

  static native private const s_LoadSwfHeaderName:String;
  static native private const s_HTTP_CONTENT_LENGTH_HEADER_NAME:String = "Content-Length";
  static native private final function isScheme(urlStr:String,scheme:String):Boolean;
  static native internal const s_FileURLScheme:String = "file:";
  static native internal const s_HttpsURLScheme:String = "https:";

  static native private const s_LocationHeaderName:String;
  static native internal const s_AppURLScheme:String = "app:";
}


[Version("10")]
public final class flash.text.engine.BreakOpportunity extends Object
{
  native public function BreakOpportunity():*;
  static native public const ALL:String = "all";
  static native public const AUTO:String = "auto";

  static native public const ANY:String = "any";
  static native public const NONE:String = "none";
}


public final class flash.display.NativeWindowResize extends Object
{
  native public function NativeWindowResize():*;
  static native public const LEFT:String = "L";
  static native public const BOTTOM_RIGHT:String = "BR";

  static native public const BOTTOM:String = "B";
  static native public const TOP_LEFT:String = "TL";
  static native public const TOP_RIGHT:String = "TR";
  static native public const TOP:String = "T";
  static native public const BOTTOM_LEFT:String = "BL";

  static native public const RIGHT:String = "R";
  static native public const NONE:String = "";
}


public class flash.text.TextExtent extends Object
{
  native public function TextExtent(width:Number,height:Number,textFieldWidth:Number,textFieldHeight:Number,ascent:Number,descent:Number):*;
  native public var ascent:Number;
  native public var width:Number;

  native public var height:Number;
  native public var textFieldWidth:Number;
  native public var descent:Number;
  native public var textFieldHeight:Number;
}


public class flash.display.Sprite extends flash.display.DisplayObjectContainer
{
  native public function Sprite():*;

  native public function get dropTarget():flash.display.DisplayObject;
  native public function get soundTransform():flash.media.SoundTransform;
  native private function constructChildren():void;
  native public function get hitArea():Sprite;
  native public function set buttonMode(value:Boolean):void;

  native public function get graphics():flash.display.Graphics;
  native public function get useHandCursor():Boolean;
  native public function set hitArea(value:Sprite):void;
  native public function get buttonMode():Boolean;
  native public function stopDrag():void;

  native public function set useHandCursor(value:Boolean):void;
  native public function set soundTransform(sndTransform:flash.media.SoundTransform):void;
  native public function startDrag(lockCenter:Boolean = false,bounds:flash.geom.Rectangle = null):void;
}


[Version("10")]
public final class flash.text.engine.GraphicElement extends flash.text.engine.ContentElement
{
  native public function GraphicElement(graphic:flash.display.DisplayObject = null,elementWidth:Number = 15.0,elementHeight:Number = 15.0,elementFormat:flash.text.engine.ElementFormat = null,eventMirror:flash.events.EventDispatcher = null,textRotation:String = "rotate0"):*;
  native public function set graphic(value:flash.display.DisplayObject):void;

  native public function get elementHeight():Number;
  native public function set elementWidth(value:Number):void;
  native public function set elementHeight(value:Number):void;
  native public function get graphic():flash.display.DisplayObject;
  native public function get elementWidth():Number;
}


[Event(name="imeComposition",type="flash.events.IMEEvent")]
public final class flash.system.IME extends flash.events.EventDispatcher
{

  native public function IME():*;
  static native public final function setCompositionString(composition:String):void;
  static native public final function get enabled():Boolean;
  static native public final function set conversionMode(mode:String):void;
  [Inspectable(environment="none")]
  static native public final function set constructOK(construct:Boolean):void;

  static native public final function doConversion():void;
  static native public final function get conversionMode():String;
  static native public final function set enabled(enabled:Boolean):void;
  static native public final function compositionAbandoned():void;
  static native public final function compositionSelectionChanged(start:int,end:int):void;
}


[Version("10")]
public final class flash.text.engine.FontMetrics extends Object
{

  native public function FontMetrics(emBox:flash.geom.Rectangle,strikethroughOffset:Number,strikethroughThickness:Number,underlineOffset:Number,underlineThickness:Number,subscriptOffset:Number,subscriptScale:Number,superscriptOffset:Number,superscriptScale:Number):*;
  native public var strikethroughThickness:Number;
  native public var emBox:flash.geom.Rectangle;
  native public var superscriptScale:Number;
  native public var strikethroughOffset:Number;

  native public var underlineThickness:Number;
  native public var subscriptScale:Number;
  native public var superscriptOffset:Number;
  native public var subscriptOffset:Number;
  native public var underlineOffset:Number;
}


[Version("10")]
public final class flash.text.engine.TextRotation extends Object
{

  native public function TextRotation():*;
  static native public const ROTATE_180:String = "rotate180";
  static native public const ROTATE_270:String = "rotate270";
  static native public const ROTATE_90:String = "rotate90";
  static native public const ROTATE_0:String = "rotate0";

  static native public const AUTO:String = "auto";
}


public class flash.html.HTMLHistoryItem extends Object
{
  native public function HTMLHistoryItem(url:String,originalUrl:String,isPost:Boolean,title:String):*;
  native public function get originalUrl():String;
  native private var _isPost:Boolean;
  native public function get isPost():Boolean;

  native public function get url():String;
  native private var _url:String;
  native public function get title():String;
  native private var _title:String;
  native private var _originalUrl:String;
}


public class flash.xml.XMLDocument extends flash.xml.XMLNode
{

  native public function XMLDocument(source:String = null):*;
  native public function createElement(name:String):flash.xml.XMLNode;
  native public var idMap:Object;
  native public function parseXML(source:String):void;
  native public var xmlDecl:Object = null;

  native public function createTextNode(text:String):flash.xml.XMLNode;
  native public override function toString():String;
  native public var ignoreWhite:Boolean = false;
  native public var docTypeDecl:Object = null;
  static native private const kEndOfDocument:int = -1;

  static native private const kUnterminatedAttributeValue:int = -8;
  static native private const kUnterminatedCdata:int = -2;
  static native private const kElementNeverBegun:int = -10;
  static native private const kUnterminatedXmlDeclaration:int = -3;
  static native private const kUnterminatedDoctypeDeclaration:int = -4;

  static native private const kMalformedElement:int = -6;
  static native private const kUnterminatedElement:int = -9;
  static native private const kUnterminatedComment:int = -5;
  static native private const kOutOfMemory:int = -7;
  static native private const kNoError:int = 0;
}


[Version("10")]
public final class flash.text.engine.RenderingMode extends Object
{

  native public function RenderingMode():*;
  static native public const CFF:String = "cff";
  static native public const NORMAL:String = "normal";
}


public final class flash.net.URLRequest extends Object
{
  native public function URLRequest(url:String = null):*;
  native private function shouldFilterHTTPHeader(header:String):Boolean;

  native public function set method(value:String):void;
  native public function get digest():String;
  native public function set cacheResponse(value:Boolean):void;
  native public function set digest(value:String):void;
  native public function set followRedirects(value:Boolean):void;

  native private function filterRequestHeaders(item:*,index:int,array:Array):Boolean;
  native public function get contentType():String;
  native public function set manageCookies(value:Boolean):void;
  native public function get authenticate():Boolean;
  native public function set authenticate(value:Boolean):void;

  native public function set data(value:Object):void;
  native public function set url(value:String):void;
  native public function get method():String;
  native private function setMethod(value:String):void;
  native public function set contentType(value:String):void;

  native public function get data():Object;
  native public function get followRedirects():Boolean;
  native public function set requestHeaders(value:Array):void;
  native public function get url():String;
  native public function get manageCookies():Boolean;

  native public function get cacheResponse():Boolean;
  native public function set userAgent(value:String):void;
  native public function set useCache(value:Boolean):void;
  native public function get requestHeaders():Array;
  native private function setRequestHeaders(value:Array):void;

  native public function get userAgent():String;
  native public function get useCache():Boolean;
  static native private const kInvalidParamError:uint = 2004;
}


public class flash.events.SQLErrorEvent extends flash.events.ErrorEvent
{
  native public function SQLErrorEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,error:flash.errors.SQLError = null):*;
  native public function get error():flash.errors.SQLError;

  native private var _error:flash.errors.SQLError;
  native public override function toString():String;
  native public override function clone():flash.events.Event;
  static native public const ERROR:String = "error";
}


[Version("10")]
public final class flash.text.engine.FontPosture extends Object
{
  native public function FontPosture():*;

  static native public const ITALIC:String = "italic";
  static native public const NORMAL:String = "normal";
}


public final class flash.display.JointStyle extends Object
{
  native public function JointStyle():*;
  static native public const MITER:String = "miter";
  static native public const BEVEL:String = "bevel";

  static native public const ROUND:String = "round";
}


[Version("air1.5")]
public class flash.errors.DRMManagerError extends Error
{
  native public function DRMManagerError(message:String,id:int,subErrorID:int):*;
  native private var _subErrorID:int;
  native public function get subErrorID():int;
  native public function toString():String;
}


[Version("10")]
public final class flash.display.ShaderPrecision extends Object
{

  native public function ShaderPrecision():*;
  static native public const FAST:String = "fast";
  static native public const FULL:String = "full";
}


[Version("10")]
public final class flash.text.engine.LineJustification extends Object
{
  native public function LineJustification():*;
  static native public const ALL_BUT_LAST:String = "allButLast";

  static native public const UNJUSTIFIED:String = "unjustified";
  static native public const ALL_INCLUDING_LAST:String = "allIncludingLast";
}


public class flash.events.NativeWindowBoundsEvent extends flash.events.Event
{
  native public function NativeWindowBoundsEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,beforeBounds:flash.geom.Rectangle = null,afterBounds:flash.geom.Rectangle = null):*;
  native public function get afterBounds():flash.geom.Rectangle;
  native public function get beforeBounds():flash.geom.Rectangle;

  native private var m_beforeBounds:flash.geom.Rectangle;
  native public override function toString():String;
  native public override function clone():flash.events.Event;
  native private var m_afterBounds:flash.geom.Rectangle;
  static native public const RESIZING:String = "resizing";

  static native public const RESIZE:String = "resize";
  static native public const MOVE:String = "move";
  static native public const MOVING:String = "moving";
}


public dynamic class flash.text.StyleSheet extends flash.events.EventDispatcher
{
  native public function StyleSheet():*;
  native private function _update():void;

  native private function get _styles():Object;
  native private function set _styles(styles:Object):void;
  native private var _css:Object;
  native private function _parseCSSFontFamily(fontFamily:String):String;
  native public function transform(formatObject:Object):flash.text.TextFormat;

  native public function clear():void;
  native private function _parseCSSInternal(cssText:String):Object;
  native public function setStyle(styleName:String,styleObject:Object):void;
  native public function parseCSS(CSSText:String):void;
  native private function _copy(o:Object):Object;

  native private function _parseColor(color:String):uint;
  native public function get styleNames():Array;
  native private function doTransform(n:String):void;
  native public function getStyle(styleName:String):Object;
}


[Version("10")]
public final dynamic class flash.display.ShaderInput extends Object
{
  native public function ShaderInput():*;

  native public function get channels():int;
  native public function get index():int;
  native public function set input(input:Object):void;
  native public function get width():int;
  native public function get height():int;

  native public function get input():Object;
  native public function set width(value:int):void;
  native public function set height(value:int):void;
}


[Version("10")]
public class flash.net.NetStreamPlayTransitions extends Object
{
  native public function NetStreamPlayTransitions():*;
  static native public const SWAP:* = "swap";

  static native public const SWITCH:* = "switch";
  static native public const STOP:* = "stop";
  static native public const APPEND:* = "append";
  static native public const RESET:* = "reset";
}


public class flash.data.SQLColumnNameStyle extends Object
{
  native public function SQLColumnNameStyle():*;

  static native public const DEFAULT:String = "default";
  static native public const SHORT:String = "short";
  static native public const LONG:String = "long";
}


public final class flash.display.InterpolationMethod extends Object
{
  native public function InterpolationMethod():*;
  static native public const LINEAR_RGB:String = "linearRGB";

  static native public const RGB:String = "rgb";
}


public final dynamic class flash.media.ID3Info extends Object
{
  native public function ID3Info():*;
  native public var songName:String;
  native public var genre:String;
  native public var artist:String;

  native public var track:String;
  native public var album:String;
  native public var year:String;
  native public var comment:String;
}


public class flash.events.SecurityErrorEvent extends flash.events.ErrorEvent
{
  native public function SecurityErrorEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,text:String = "",id:int = 0):*;

  native public override function toString():String;
  native public override function clone():flash.events.Event;
  static native public const SECURITY_ERROR:String = "securityError";
}


[Event(name="progress",type="flash.events.ProgressEvent")]
[Event(name="open",type="flash.events.Event")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="id3",type="flash.events.Event")]
[Event(name="complete",type="flash.events.Event")]
[Event(name="sampleData",type="flash.events.SampleDataEvent")]
public class flash.media.Sound extends flash.events.EventDispatcher
{
  native public function Sound(stream:flash.net.URLRequest = null,context:flash.media.SoundLoaderContext = null):*;
  [Version("10")]
  native public function extract(target:flash.utils.ByteArray,length:Number,startPosition:Number = -1):Number;

  native private function _load(stream:flash.net.URLRequest,checkPolicyFile:Boolean,bufferTime:Number):void;
  native public function load(stream:flash.net.URLRequest,context:flash.media.SoundLoaderContext = null):void;
  native public function close():void;
  native private function _buildLoaderContext(context:flash.media.SoundLoaderContext):flash.media.SoundLoaderContext;
  native public function get url():String;

  native public function get bytesLoaded():uint;
  native public function play(startTime:Number = 0,loops:int = 0,sndTransform:flash.media.SoundTransform = null):flash.media.SoundChannel;
  native public function get length():Number;
  native public function get id3():flash.media.ID3Info;
  native public function get bytesTotal():int;

  native public function get isBuffering():Boolean;
}


[Event(name="rightClick",type="flash.events.ScreenMouseEvent")]
[Event(name="rightMouseUp",type="flash.events.ScreenMouseEvent")]
[Event(name="rightMouseDown",type="flash.events.ScreenMouseEvent")]
[Event(name="click",type="flash.events.ScreenMouseEvent")]
[Event(name="mouseUp",type="flash.events.ScreenMouseEvent")]
[Event(name="mouseDown",type="flash.events.ScreenMouseEvent")]
public class flash.desktop.SystemTrayIcon extends flash.desktop.InteractiveIcon
{
  native public function SystemTrayIcon():*;
  native public function get tooltip():String;
  native public override function get bitmaps():Array;
  native public function set tooltip(value:String):void;

  native public override function get height():int;
  native public override function set bitmaps(value:Array):void;
  native public override function get width():int;
  native public function set menu(value:flash.display.NativeMenu):void;
  native public function get menu():flash.display.NativeMenu;

  static native public const MAX_TIP_LENGTH:Number = 63;
}


public class flash.events.OutputProgressEvent extends flash.events.Event
{
  native public function OutputProgressEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,bytesPending:Number = 0,bytesTotal:Number = 0):*;
  native public function get bytesTotal():Number;
  native public function set bytesTotal(value:Number):void;
  native public override function toString():String;

  native public function set bytesPending(value:Number):void;
  native public function get bytesPending():Number;
  native private var m_bytesTotal:Number;
  native public override function clone():flash.events.Event;
  native private var m_bytesPending:Number;

  static native public const OUTPUT_PROGRESS:String = "outputProgress";
}


[Event(name="progress",type="flash.events.ProgressEvent")]
[Event(name="open",type="flash.events.Event")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="httpResponseStatus",type="flash.events.HTTPStatusEvent")]
[Event(name="httpStatus",type="flash.events.HTTPStatusEvent")]
[Event(name="securityError",type="flash.events.SecurityErrorEvent")]
[Event(name="complete",type="flash.events.Event")]
public class flash.net.URLStream extends flash.events.EventDispatcher
  implements flash.utils.IDataInput
{
  native public function URLStream():*;
  native public function readUnsignedInt():uint;
  native public function readDouble():Number;
  native public function readFloat():Number;

  native public function readBoolean():Boolean;
  native public function readShort():int;
  native public function get connected():Boolean;
  native public function readUnsignedShort():uint;
  native public function readUnsignedByte():uint;

  native public function get objectEncoding():uint;
  native public function readObject():*;
  native public function get endian():String;
  native public function get bytesAvailable():uint;
  native public function set objectEncoding(version:uint):void;

  native public function load(request:flash.net.URLRequest):void;
  native public function readMultiByte(length:uint,charSet:String):String;
  native public function readUTF():String;
  native public function set endian(type:String):void;
  native public function readInt():int;

  native public function readUTFBytes(length:uint):String;
  native public function readBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;
  native public function readByte():int;
  native public function close():void;
}


public class flash.display.SimpleButton extends flash.display.InteractiveObject
{
  native public function SimpleButton(upState:flash.display.DisplayObject = null,overState:flash.display.DisplayObject = null,downState:flash.display.DisplayObject = null,hitTestState:flash.display.DisplayObject = null):*;

  native public function get enabled():Boolean;
  native public function set enabled(value:Boolean):void;
  native public function get hitTestState():flash.display.DisplayObject;
  native public function set hitTestState(value:flash.display.DisplayObject):void;
  native private function _updateButton():void;

  native public function set upState(value:flash.display.DisplayObject):void;
  native public function get downState():flash.display.DisplayObject;
  native public function set soundTransform(sndTransform:flash.media.SoundTransform):void;
  native public function get soundTransform():flash.media.SoundTransform;
  native public function get upState():flash.display.DisplayObject;

  native public function set useHandCursor(value:Boolean):void;
  native public function set overState(value:flash.display.DisplayObject):void;
  native public function get useHandCursor():Boolean;
  native public function get trackAsMenu():Boolean;
  native public function get overState():flash.display.DisplayObject;

  native public function set downState(value:flash.display.DisplayObject):void;
  native public function set trackAsMenu(value:Boolean):void;
}


public final class flash.display.GradientType extends Object
{
  native public function GradientType():*;
  static native public const LINEAR:String = "linear";
  static native public const RADIAL:String = "radial";
}


public dynamic class flash.net.URLVariables extends Object
{

  native public function URLVariables(source:String = null):*;
  native private function _unescape(value:String):String;
  native public function toString():String;
  native public function decode(source:String):void;
}


public final class flash.printing.PrintJobOrientation extends Object
{
  native public function PrintJobOrientation():*;

  static native public const LANDSCAPE:String = "landscape";
  static native public const PORTRAIT:String = "portrait";
}


[Version("10")]
public final class flash.text.engine.TextLineValidity extends Object
{
  native public function TextLineValidity():*;
  static native public const STATIC:String = "static";
  static native public const INVALID:String = "invalid";

  static native public const VALID:String = "valid";
  static native public const POSSIBLY_INVALID:String = "possiblyInvalid";
}


public class flash.text.TextSnapshot extends Object
{
  native public function TextSnapshot():*;
  native public function getSelected(beginIndex:int,endIndex:int):Boolean;
  native public function getText(beginIndex:int,endIndex:int,includeLineEndings:Boolean = false):String;

  native public function setSelected(beginIndex:int,endIndex:int,select:Boolean):void;
  native public function setSelectColor(hexColor:uint = 16776960):void;
  native public function findText(beginIndex:int,textToFind:String,caseSensitive:Boolean):int;
  native public function get charCount():int;
  native public function hitTestTextNearPos(x:Number,y:Number,maxDistance:Number = 0):Number;

  native public function getTextRunInfo(beginIndex:int,endIndex:int):Array;
  native public function getSelectedText(includeLineEndings:Boolean = false):String;
}


public class flash.display.Loader extends flash.display.DisplayObjectContainer
{
  native public function Loader():*;
  native public function get contentLoaderInfo():flash.display.LoaderInfo;
  native private function _load(request:flash.net.URLRequest,checkPolicyFile:Boolean,applicationDomain:flash.system.ApplicationDomain,securityDomain:flash.system.SecurityDomain,deblockingFilter:Number):void;

  native public function load(request:flash.net.URLRequest,context:flash.system.LoaderContext = null):void;
  [Inspectable(environment="none")]
  native public override function removeChild(child:flash.display.DisplayObject):flash.display.DisplayObject;
  native private function _getJPEGLoaderContextdeblockingfilter(context:Object):Number;
  native public function loadBytes(bytes:flash.utils.ByteArray,context:flash.system.LoaderContext = null):void;
  native private function _buildLoaderContext(context:flash.system.LoaderContext):flash.system.LoaderContext;

  [Inspectable(environment="none")]
  native public override function addChildAt(child:flash.display.DisplayObject,index:int):flash.display.DisplayObject;
  [Inspectable(environment="none")]
  native public override function setChildIndex(child:flash.display.DisplayObject,index:int):void;
  [Inspectable(environment="none")]
  native public override function removeChildAt(index:int):flash.display.DisplayObject;
  native private function _loadBytes(bytes:flash.utils.ByteArray,checkPolicyFile:Boolean,applicationDomain:flash.system.ApplicationDomain,securityDomain:flash.system.SecurityDomain,deblockingFilter:Number,allowLoadBytesCodeExecution:Boolean):void;
  native public function close():void;

  native public function get content():flash.display.DisplayObject;
  [Version("10")]
  native public function unloadAndStop(gc:Boolean = true):void;
  [Inspectable(environment="none")]
  native public override function addChild(child:flash.display.DisplayObject):flash.display.DisplayObject;
  native private function _unload(halt:Boolean,gc:Boolean):void;
  native public function unload():void;
}


public class flash.events.FullScreenEvent extends flash.events.ActivityEvent
{

  native public function FullScreenEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,fullScreen:Boolean = false):*;
  native private var m_fullScreen:Boolean;
  native public function get fullScreen():Boolean;
  native public override function toString():String;
  native public override function clone():flash.events.Event;

  static native public const FULL_SCREEN:String = "fullScreen";
}


public class flash.utils.ObjectOutput extends Object
  implements flash.utils.IDataOutput
{
  native public function ObjectOutput():*;
  native public function writeMultiByte(value:String,charSet:String):void;
  native public function writeUTFBytes(value:String):void;
  native public function writeObject(object:*):void;

  native public function writeBoolean(value:Boolean):void;
  native public function writeBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;
  native public function writeByte(value:int):void;
  native public function writeUTF(value:String):void;
  native public function writeDouble(value:Number):void;

  native public function writeUnsignedInt(value:uint):void;
  native public function writeShort(value:int):void;
  native public function writeInt(value:int):void;
  native public function get endian():String;
  native public function set objectEncoding(version:uint):void;

  native public function get objectEncoding():uint;
  native public function set endian(type:String):void;
  native public function writeFloat(value:Number):void;
}


public interface flash.utils.IExternalizable
{
  native function readExternal(input:flash.utils.IDataInput):void;
  native function writeExternal(output:flash.utils.IDataOutput):void;
}


[Version("10")]
public final class flash.text.engine.FontDescription extends Object
{

  native public function FontDescription(fontName:String = "_serif",fontWeight:String = "normal",fontPosture:String = "normal",fontLookup:String = "device",renderingMode:String = "cff",cffHinting:String = "horizontalStem"):*;
  native public function set fontLookup(value:String):void;
  native public function get fontWeight():String;
  native public function get fontLookup():String;
  native public function get locked():Boolean;

  native public function set fontWeight(value:String):void;
  native public function get renderingMode():String;
  native public function set cffHinting(value:String):void;
  native public function set fontPosture(value:String):void;
  native public function set fontName(value:String):void;

  native public function get cffHinting():String;
  native public function get fontPosture():String;
  native public function get fontName():String;
  native public function set locked(value:Boolean):void;
  native public function clone():FontDescription;

  native public function set renderingMode(value:String):void;
  static native public final function isFontCompatible(fontName:String,fontWeight:String,fontPosture:String):Boolean;
}


public class flash.events.SQLUpdateEvent extends flash.events.Event
{
  native public function SQLUpdateEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,table:String = null,rowID:Number = 0):*;
  native private var _kind:String;
  native public function get rowID():Number;

  native private var _rowID:Number;
  native public override function clone():flash.events.Event;
  native public function get table():String;
  native private var _table:String;
  static native public const UPDATE:String = "update";

  static native public const INSERT:String = "insert";
  static native public const DELETE:String = "delete";
}


[Event(name="update",type="flash.events.SQLUpdateEvent")]
[Event(name="schema",type="flash.events.SQLEvent")]
[Event(name="rollback",type="flash.events.SQLEvent")]
[Event(name="reencrypt",type="flash.events.SQLEvent")]
[Event(name="open",type="flash.events.SQLEvent")]
[Event(name="insert",type="flash.events.SQLUpdateEvent")]
[Event(name="error",type="flash.events.SQLErrorEvent")]
[Event(name="detach",type="flash.events.SQLEvent")]
[Event(name="delete",type="flash.events.SQLUpdateEvent")]
[Event(name="deanalyze",type="flash.events.SQLEvent")]
[Event(name="commit",type="flash.events.SQLEvent")]
[Event(name="close",type="flash.events.SQLEvent")]
[Event(name="compact",type="flash.events.SQLEvent")]
[Event(name="cancel",type="flash.events.SQLEvent")]
[Event(name="begin",type="flash.events.SQLEvent")]
[Event(name="attach",type="flash.events.SQLEvent")]
[Event(name="analyze",type="flash.events.SQLEvent")]
public class flash.data.SQLConnection extends flash.events.EventDispatcher
{
  native public function SQLConnection():*;
  native public function get connected():Boolean;
  native private function internalSetColumnNameStyle(value:String):void;

  native private function internalClean(responder:flash.net.Responder):void;
  native private function checkNotInTransaction():void;
  native private function internalRekey(newKey:flash.utils.ByteArray,responder:flash.net.Responder):void;
  native public function detach(name:String,responder:flash.net.Responder = null):void;
  native public function getSchemaResult():flash.data.SQLSchemaResult;

  native private function internalOpenAsync(reference:Object,openMode:String,responder:flash.net.Responder,autoCompact:Boolean,pageSize:int,key:flash.utils.ByteArray):void;
  native private function internalCancel(responder:flash.net.Responder):void;
  native private function internalGetColumnNameStyle():String;
  native public function get cacheSize():uint;
  native private var _allowCommitRollback:Boolean = false;

  native private function internalOpen(reference:Object,openMode:String,autoCompact:Boolean,pageSize:int,key:flash.utils.ByteArray):void;
  native public function begin(option:String = null,responder:flash.net.Responder = null):void;
  native public function compact(responder:flash.net.Responder = null):void;
  native public function deanalyze(responder:flash.net.Responder = null):void;
  native private function internalGetLastInsertRowID():Number;

  native public function loadSchema(type:Class = null,name:String = null,database:String = "main",includeColumnSchema:Boolean = true,responder:flash.net.Responder = null):void;
  native public function get columnNameStyle():String;
  native private function checkKey(key:flash.utils.ByteArray,reference:Object):void;
  native private function internalClose(responder:flash.net.Responder):void;
  native private function internalSetCacheSize(value:uint):void;

  native public function get pageSize():uint;
  native private function internalRollback(responder:flash.net.Responder):void;
  native private function internalLoadSchema(type:String,name:String,database:String,includeColumnSchema:Boolean,responder:flash.net.Responder):void;
  native public function attach(name:String,reference:Object = null,responder:flash.net.Responder = null,encryptionKey:flash.utils.ByteArray = null):void;
  native public function set cacheSize(value:uint):void;

  native private function internalDetach(name:String,responder:flash.net.Responder):void;
  native public function open(reference:Object = null,openMode:String = "create",autoCompact:Boolean = false,pageSize:int = 1024,encryptionKey:flash.utils.ByteArray = null):void;
  native public function analyze(resourceName:String = null,responder:flash.net.Responder = null):void;
  native public override function addEventListener(type:String,listener:Function,useCapture:Boolean = false,priority:int = 0.0,useWeakReference:Boolean = false):void;
  native private function internalAnalyze(value:String,responder:flash.net.Responder):void;

  native public override function removeEventListener(type:String,listener:Function,useCapture:Boolean = false):void;
  native public function openAsync(reference:Object = null,openMode:String = "create",responder:flash.net.Responder = null,autoCompact:Boolean = false,pageSize:int = 1024,encryptionKey:flash.utils.ByteArray = null):void;
  native public function get lastInsertRowID():Number;
  native private function registerUpdateNotification():void;
  [Version("air1.5")]
  native public function reencrypt(newEncryptionKey:flash.utils.ByteArray,responder:flash.net.Responder = null):void;

  native private function internalCommit(responder:flash.net.Responder):void;
  native private function unregisterUpdateNotification():void;
  native public function get totalChanges():Number;
  native public function set columnNameStyle(value:String):void;
  native private function checkConnected():void;

  native public function rollback(responder:flash.net.Responder = null):void;
  native private function internalAttach(name:String,reference:Object,responder:flash.net.Responder,key:flash.utils.ByteArray):void;
  native private function internalBegin(value:String,responder:flash.net.Responder):void;
  native private function internalDeanalyze(responder:flash.net.Responder):void;
  native public function commit(responder:flash.net.Responder = null):void;

  native public function get autoCompact():Boolean;
  native public function close(responder:flash.net.Responder = null):void;
  native public function get inTransaction():Boolean;
  native public function cancel(responder:flash.net.Responder = null):void;
}


public class flash.system.SecurityPrivilege extends Object
{
  native public function SecurityPrivilege():*;

  static native public const FILE_APPSTORE:* = "fileAppstore";
  static native public const HTTP_ALL:* = "httpAll";
  static native public const FILE_WRITE:* = "fileWrite";
  static native public const FILE_PATHACCESS:* = "filePathAccess";
  static native public const WINDOW:* = "window";

  static native public const FILE_WRITE_RESOURCE:* = "fileWriteResource";
  static native public const SCREEN:* = "screen";
  static native public const FILE_TEMP:* = "fileTemp";
  static native public const FILE_READ:* = "fileRead";
  static native public const HTML:* = "html";

  static native public const FILE:* = "file";
}


public final class adobe.utils.XMLUI extends Object
{
  native public function XMLUI():*;
  static native public final function accept():void;
  static native public final function cancel():void;
  static native public final function getProperty(name:String):String;

  static native public final function setProperty(name:String,value:String):void;
}


[Version("10")]
public final class flash.display.ColorCorrection extends Object
{
  native public function ColorCorrection():*;
  static native public const DEFAULT:String = "default";
  static native public const ON:String = "on";
  static native public const OFF:String = "off";
}


[Version("10")]
public final class flash.text.engine.LigatureLevel extends Object
{

  native public function LigatureLevel():*;
  static native public const UNCOMMON:String = "uncommon";
  static native public const NONE:String = "none";
  static native public const EXOTIC:String = "exotic";
  static native public const COMMON:String = "common";

  static native public const MINIMUM:String = "minimum";
}


public class flash.errors.SQLErrorOperation extends Object
{
  native public function SQLErrorOperation():*;
  static native public const COMPACT:String = "compact";
  static native public const ATTACH:String = "attach";
  static native public const BEGIN:String = "begin";

  static native public const DEANALYZE:String = "deanalyze";
  static native public const OPEN:String = "open";
  static native public const DETACH:String = "detach";
  static native public const EXECUTE:String = "execute";
  static native public const CLOSE:String = "close";

  static native public const SCHEMA:String = "schema";
  static native public const ROLLBACK:String = "rollback";
  static native public const ANALYZE:String = "analyze";
  static native public const REENCRYPT:String = "reencrypt";
  static native public const COMMIT:String = "commit";
}


[Version("10")]
public final class flash.text.engine.JustificationStyle extends Object
{

  native public function JustificationStyle():*;
  static native public const PUSH_IN_KINSOKU:String = "pushInKinsoku";
  static native public const PRIORITIZE_LEAST_ADJUSTMENT:String = "prioritizeLeastAdjustment";
  static native public const PUSH_OUT_ONLY:String = "pushOutOnly";
}


public class flash.net.URLRequestDefaults extends Object
{
  native public function URLRequestDefaults():*;

  static native private var _userAgent:String = null;
  static native private var _authenticate:Boolean = true;
  static native public final function set cacheResponse(value:Boolean):void;
  static native private final function initLoginCredentials():Object;
  static native public final function set followRedirects(value:Boolean):void;

  static native public final function set manageCookies(value:Boolean):void;
  static native public final function get authenticate():Boolean;
  static native private const kApplicationFeatureSecurityError:uint = 3205;
  static native private var _defaultUserAgent:String;
  static native private var _useCache:Boolean = true;

  static native private final function initUA():String;
  static native public final function set userAgent(value:String):void;
  static native public final function get cacheResponse():Boolean;
  static native private var _cacheResponse:Boolean = true;
  static native public final function get followRedirects():Boolean;

  static native private var _followRedirects:Boolean = true;
  static native public final function set authenticate(value:Boolean):void;
  static native private var _manageCookies:Boolean = true;
  static native public final function get manageCookies():Boolean;
  static native private var _loginCredentials:*;

  static native public final function get userAgent():String;
  static native public final function get useCache():Boolean;
  static native public final function setLoginCredentialsForHost(hostname:String,user:String,password:String):*;
  static native public final function set useCache(value:Boolean):void;
}


public final class flash.display.CapsStyle extends Object
{
  native public function CapsStyle():*;

  static native public const NONE:String = "none";
  static native public const SQUARE:String = "square";
  static native public const ROUND:String = "round";
}


public final dynamic class flash.html.__HTMLScriptObject extends Object
{
  native public function __HTMLScriptObject():*;
  native private function operationComplete():void;

  native private function throwJSObjectDead():void;
  native private function throwJSOperationFailed():void;
  native private function nativeInit(throwJSErrorClosure:Function,throwJSOperationFailedClosure:Function,throwJSObjectDeadClosure:Function,handleNSSetPropertyClosure:Function,operationCompleteFunction:Function):void;
  native private function throwJSError(jsErrorObj:*):void;
  native private function handleNSSetProperty():void;

  native private function getProperty(propertyName:String):*;
  native private function nativeEnumProperties(enumProc:Function):void;
  static native private var s_UpdateDirtyDocumentsTimer:flash.utils.Timer = null;
  static native private final function onUpdateDirtyDocumentsTimer(ev:flash.events.TimerEvent):void;
  static native private final function updateDirtyDocuments():void;
}

public final dynamic class flash.html.__HTMLScriptFunction extends Function
{

  native public function __HTMLScriptFunction():*;
  native private function operationComplete():void;
  native public override function get prototype():*;
  native public override function set prototype(p:*):*;
  native public override function get length():int;

  native private function nativeInit(throwJSErrorClosure:Function,throwJSOperationFailedClosure:Function,throwJSObjectDeadClosure:Function,handleNSSetPropertyClosure:Function,operationCompleteFunction:Function):void;
  native private function handleNSSetProperty():void;
  native private function nativeEnumProperties(enumProc:Function):void;
  native AS3 override function apply(thisArg:* = null,argArray:* = null):*;
  native private function throwJSObjectDead():void;

  native private function throwJSOperationFailed():void;
  native private function nativeApply(jsApply:__HTMLScriptFunction,thisArg:* = null,argArray:* = null):*;
  native private function throwJSError(jsErrorObj:*):void;
  native private function nativeGetJSProperty(propertyName:String):*;
  native AS3 override function call(thisArg:* = null,... rest):*;

  static native private var s_UpdateDirtyDocumentsTimer:flash.utils.Timer = null;
  static native private final function onUpdateDirtyDocumentsTimer(ev:flash.events.TimerEvent):void;
  static native private final function updateDirtyDocuments():void;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

[Event(name="htmlDOMInitialize",type="flash.events.Event")]
[Event(name="uncaughtScriptException",type="flash.events.HTMLUncaughtScriptExceptionEvent")]
[Event(name="scroll",type="flash.events.Event")]
[Event(name="htmlBoundsChange",type="flash.events.Event")]
[Event(name="locationChange",type="flash.events.Event")]
[Event(name="htmlRender",type="flash.events.Event")]
[Event(name="complete",type="flash.events.Event")]
public class flash.html.HTMLLoader extends flash.display.Sprite
{
  native public function HTMLLoader():*;

  native private var m_currentRepeatKeyboardEvent:flash.events.KeyboardEvent;
  native private function nativeOnNativeDragStart(localX:int,localY:int,screenX:int,screenY:int,shiftKey:Boolean,controlKey:Boolean,altKey:Boolean,metaKey:Boolean):void;
  native private function onPaste(e:flash.events.Event):void;
  native public function get loaded():Boolean;
  native private function nativeFocusIn(direction:String):void;

  native private function nativeOnCut():Boolean;
  native private function invokeMouseDownImpl(evt:flash.events.MouseEvent,mouseButton:uint,clickCount:uint):Boolean;
  native private function createNewWindow(windowCreateOptions:flash.html.HTMLWindowCreateOptions):HTMLLoader;
  native private function onSetTitle(title:String):void;
  native private function validateAndConvertDimension(dimensionValue:Number,dimensionName:String):uint;

  native public override function contains(child:flash.display.DisplayObject):Boolean;
  native private function nativeLayout():void;
  native private function handleOnDocumentCreated():void;
  native private function onLocationChangeTimer(ev:flash.events.TimerEvent):void;
  native public function set paintsDefaultBackground(newValue:Boolean):void;

  native private function nativeUpdateWindowedPlugins(showWindowedPlugsin:Boolean):void;
  native private var m_rootPackage:flash.html.script.Package;
  native public function set scrollH(newScrollH:Number):void;
  native private var m_Loaded:Boolean;
  native private function onFocus():void;

  native public function get useCache():Boolean;
  native private function createURLRequest(targetURL:String,method:String,userAgent:String):flash.net.URLRequest;
  native private var m_PDFErrorTimer:flash.utils.Timer;
  native public override function getChildAt(index:int):flash.display.DisplayObject;
  native private var m_clipboard:flash.desktop.JSClipboard;

  native public function set navigateInSystemBrowser(value:Boolean):void;
  native private function get m_jsGlobalObj():flash.html.__HTMLScriptObject;
  native private function onGetWindowRect(rect:flash.geom.Rectangle):void;
  native public override function set height(heightInPixels:Number):void;
  native private function onContextMenu(event:flash.events.MouseEvent):void;

  native public function set scrollV(newScrollV:Number):void;
  native private function onFocusOut(evt:flash.events.FocusEvent):void;
  native private function onSetWindowRect(rect:flash.geom.Rectangle):void;
  native private function nativeLoadHTMLFromURLRequest(urlRequest:flash.net.URLRequest):void;
  native private function paint(dirtyRect:flash.geom.Rectangle):void;

  native private function doDrag(clipboard:flash.desktop.JSClipboard,dragImage:flash.display.BitmapData,xOffset:Number,yOffset:Number):void;
  native private function nativeOnMouseMove(localX:int,localY:int,screenX:int,screenY:int,shiftKey:Boolean,ctrlKey:Boolean,altKey:Boolean,metaKey:Boolean,buttonDown:Boolean):Boolean;
  native private function nativeOnKeyDown(winCharCode:uint,winKeyCode:uint,isShiftKey:Boolean,isCtrlKey:Boolean,isAltKey:Boolean,isMetaKey:Boolean,isAutoRepeat:Boolean):Boolean;
  native private var m_currDirtyRect:flash.geom.Rectangle;
  native private function getFocusIfNeeded():void;

  native public function set useCache(value:Boolean):void;
  native private function nativeOnNativeDragEnter(localX:int,localY:int,screenX:int,screenY:int,shiftKey:Boolean,controlKey:Boolean,altKey:Boolean,metaKey:Boolean,clipboard:flash.desktop.JSClipboard):void;
  native public function set runtimeApplicationDomain(value:flash.system.ApplicationDomain):void;
  native private function _isSimpleMatrix():Boolean;
  native public override function areInaccessibleObjectsUnderPoint(point:flash.geom.Point):Boolean;

  native private var m_PDFErrorNum:int;
  native private var m_activePopupWindowDismissTimer:flash.utils.Timer;
  native public function cancelLoad():void;
  native private function addSubMenuItems(contextMenu:flash.display.NativeMenu,contextMenuItems:*):void;
  native private function onNativeDragComplete(event:flash.events.NativeDragEvent):void;

  native public override function swapChildrenAt(index1:int,index2:int):void;
  native private function nativePaint(dirtyRect:flash.geom.Rectangle,bitmapDirtyRect:flash.geom.Rectangle):void;
  native private function onKeyFocusChange(evt:flash.events.FocusEvent):*;
  native private function onWindowDeactivate():void;
  native private function nativeFocusOut():void;

  native public override function addChildAt(child:flash.display.DisplayObject,index:int):flash.display.DisplayObject;
  native public override function getChildByName(name:String):flash.display.DisplayObject;
  native private function onNativeDragUpdate(event:flash.events.NativeDragEvent):void;
  native private function onHTMLBoundsChangeTimer(ev:flash.events.TimerEvent):void;
  native public function loadString(htmlContent:String):void;

  native private function onWindowActivateOrDeactivate(e:flash.events.Event):void;
  native private function dispatchContentBoundsChangedEvent():*;
  native public function historyGo(steps:int):void;
  native private var m_paintTimer:flash.utils.Timer;
  native public function get hasFocusableContent():Boolean;

  native public function get textEncodingFallback():String;
  native private function nativeOnKeyUp(winCharCode:uint,winKeyCode:uint,isShiftKey:Boolean,isCtrlKey:Boolean,isAltKey:Boolean,isMetaKey:Boolean):Boolean;
  native private function set m_Width(widthInPixels:uint):void;
  native private function onCloseWindow():void;
  native private function get m_BitmapData():flash.display.BitmapData;

  native private function nativeOnMouseWheel(localX:int,localY:int,screenX:int,screenY:int,deltaX:int,deltaY:int,shiftKey:Boolean,ctrlKey:Boolean,altKey:Boolean,metaKey:Boolean):Boolean;
  native private function get m_contentHeight():uint;
  native private function set language(value:String):void;
  native private function throwIllegalMethod():void;
  native private function set m_Height(heightInPixels:uint):void;

  native private function onEnterFrame(ev:flash.events.Event):void;
  native private function throwIllegalLoad():void;
  native private function addHeaderToURLRequest(urlRequest:flash.net.URLRequest,headerName:String,headerValue:String):void;
  native private function set m_scrollX(newScrollX:int):void;
  native private function onLeftMouseUp(evt:flash.events.MouseEvent):void;

  native private function onKeyUp(evt:flash.events.KeyboardEvent):*;
  native private function menuItemSelectHandler(event:flash.events.Event):void;
  native private function nativeOnKeyFocusChange(evt:flash.events.Event):void;
  native public override function swapChildren(child1:flash.display.DisplayObject,child2:flash.display.DisplayObject):void;
  native private function onKeyDown(evt:flash.events.KeyboardEvent):void;

  native private function set m_scrollY(newScrollY:int):void;
  native private function onPaintTimer(ev:flash.events.TimerEvent):void;
  native public function get historyLength():uint;
  native private function invokeMouseUpImpl(evt:flash.events.MouseEvent,mouseButton:uint):Boolean;
  native private function onWindowActivate():void;

  native private var m_htmlBoundsChangeTimer:flash.utils.Timer;
  native public function get contentWidth():Number;
  native public function set manageCookies(value:Boolean):void;
  native public function get authenticate():Boolean;
  native private var m_contextMenu:flash.display.NativeMenu;

  native private function initBareHTMLWindow(useScrollbars:Boolean):void;
  native private var m_closing:Boolean = false;
  native public function load(urlRequestToLoad:flash.net.URLRequest):void;
  native private function nativeOnMouseUp(localX:int,localY:int,screenX:int,screenY:int,mouseButton:uint,clickCount:uint,shiftKey:Boolean,ctrlKey:Boolean,altKey:Boolean,metaKey:Boolean):Boolean;
  native private function nativeOnCopy():Boolean;

  native private function initHTMLEngine(eventSprite:flash.display.Sprite):void;
  native private var m_language:String;
  native private function onRemovedFromStage(e:flash.events.Event):void;
  native private function onMouseWheel(evt:flash.events.MouseEvent):void;
  native private function onMouseMove(evt:flash.events.MouseEvent):void;

  native public override function removeChild(child:flash.display.DisplayObject):flash.display.DisplayObject;
  native public function get paintsDefaultBackground():Boolean;
  native public override function addChild(child:flash.display.DisplayObject):flash.display.DisplayObject;
  native public function get contentHeight():Number;
  native private function onLeftMouseDown(evt:flash.events.MouseEvent):void;

  native private function onMiddleMouseDown(evt:flash.events.MouseEvent):void;
  native private var m_canLoad:Boolean;
  native private function onUnfocus():void;
  native private function onCreatePopupWindow(computedFontSize:Number):flash.html.HTMLPopupWindow;
  native private function nativeOnNativeDragUpdate(localX:int,localY:int,screenX:int,screenY:int,shiftKey:Boolean,controlKey:Boolean,altKey:Boolean,metaKey:Boolean):void;

  native public override function getChildIndex(child:flash.display.DisplayObject):int;
  native private function ensureBitmap():void;
  native private var m_wkMethods:Object;
  native private function get m_htmlContextMenuItems():Array;
  native private function onPDFErrorTimer(ev:flash.events.TimerEvent):void;

  native private function covertNumberArgumentToInt(numberArg:Number,argumentName:String):int;
  native public override function getObjectsUnderPoint(point:flash.geom.Point):Array;
  native public function set textEncodingOverride(newValue:String):void;
  native public function get scrollH():Number;
  native private function onNativeDragOver(event:flash.events.NativeDragEvent):void;

  native public override function setChildIndex(child:flash.display.DisplayObject,index:int):void;
  native public function get navigateInSystemBrowser():Boolean;
  native private function handleOnLoadEvents():void;
  native public override function get height():Number;
  native public function get scrollV():Number;

  native private function onMiddleMouseUp(evt:flash.events.MouseEvent):void;
  native private const m_eventSprite:flash.display.Sprite;
  [Version("air1.5")]
  native public function set placeLoadStringContentInApplicationSandbox(value:Boolean):void;
  native private function nativeOnMouseDown(localX:int,localY:int,screenX:int,screenY:int,mouseButton:uint,clickCount:uint,shiftKey:Boolean,ctrlKey:Boolean,altKey:Boolean,metaKey:Boolean):Boolean;
  native private function navigateToStringURL(url:String):void;

  native private function onPDFError(pdfErrorNum:int):void;
  native private var m_invertBitmap:Boolean;
  native private function onNativeDragDrop(event:flash.events.NativeDragEvent):void;
  native private function nativeOnNativeDragComplete(localX:int,localY:int,screenX:int,screenY:int,shiftKey:Boolean,controlKey:Boolean,altKey:Boolean,metaKey:Boolean,dropAction:String):void;
  native private function invalidate():void;

  native public function get runtimeApplicationDomain():flash.system.ApplicationDomain;
  native private function loadHTMLString_impl(htmlContent:String):void;
  native private function onFocusIn(evt:flash.events.FocusEvent):void;
  native public function getHistoryAt(position:uint):flash.html.HTMLHistoryItem;
  native private function onActivePopupWindowDismissTimer(ev:flash.events.TimerEvent):*;

  native public function set textEncodingFallback(newValue:String):void;
  native private const m_bitmap:flash.display.Bitmap;
  native private var m_completeTimer:flash.utils.Timer;
  native public override function removeChildAt(index:int):flash.display.DisplayObject;
  native private function nativeOnSelectAll():Boolean;

  native private function rootContentWindowOnClose(ev:flash.events.Event):void;
  native private function get m_Width():uint;
  native private function nativeOnNativeDragOver(localX:int,localY:int,screenX:int,screenY:int,shiftKey:Boolean,ctrlKey:Boolean,altKey:Boolean,metaKey:Boolean,clipboard:flash.desktop.JSClipboard):void;
  native private function set m_BitmapData(bitmapData:flash.display.BitmapData):*;
  native private function get language():String;

  native private function get m_Height():uint;
  native private function get m_scrollY():int;
  native private function get m_contentWidth():uint;
  native private function get m_scrollX():int;
  native private function rootContentSetWindowRectCallback(rect:flash.geom.Rectangle):void;

  native internal function get pageApplicationDomain():flash.system.ApplicationDomain;
  native private function onNativeDragStart(event:flash.events.NativeDragEvent):void;
  native private function onNativeDragExit(event:flash.events.NativeDragEvent):void;
  native public function get manageCookies():Boolean;
  native private function constructPopupWindow(closePopupWindowIfNeededClosure:Function,computedFontSize:Number):flash.html.HTMLPopupWindow;

  native private function nativeSetIsRootContentHtml(isRootContent:Boolean):void;
  native private function dispatchContentScrolledEvent():*;
  native private function nativeOnNativeDragDrop(localX:int,localY:int,screenX:int,screenY:int,shiftKey:Boolean,controlKey:Boolean,altKey:Boolean,metaKey:Boolean,clipboard:flash.desktop.JSClipboard):void;
  native private function nativeOnContextMenu(localX:int,localY:int,screenX:int,screenY:int,shiftKey:Boolean,ctrlKey:Boolean,altKey:Boolean,metaKey:Boolean):Boolean;
  native private function rootContentGetWindowRectCallback(rect:flash.geom.Rectangle):void;

  native private function onTextInput(e:flash.events.TextEvent):void;
  native private function onLocationChange():void;
  native private var m_htmlHost:flash.html.HTMLHost = null;
  native private function nativeOnContextMenuItemSelect(actionID:int,title:String):*;
  native private var m_activePopupWindow:flash.html.HTMLPopupWindow;

  native public override function set width(widthInPixels:Number):void;
  native private var m_LocationChangeTimer:flash.utils.Timer;
  native private function uncaughtJSException(exceptionValue:*):void;
  native public function get textEncodingOverride():String;
  [Version("air1.5")]
  native public function get placeLoadStringContentInApplicationSandbox():Boolean;

  native public function historyForward():void;
  native public function reload():void;
  native public function historyBack():void;
  native private const adobeAppProtocolPrefix:String = "app:/";
  native private var m_shouldNavigateInSystemBrowser:Boolean;

  native private function nativeOnNativeDragExit(localX:int,localY:int,screenX:int,screenY:int,shiftKey:Boolean,controlKey:Boolean,altKey:Boolean,metaKey:Boolean,clipboard:flash.desktop.JSClipboard):void;
  native public override function get numChildren():int;
  native public function set authenticate(value:Boolean):void;
  native private function onDeactivate(evt:flash.events.Event):void;
  native public function get location():String;

  native private function set pageGroupName(groupName:String):void;
  native private function showExceptionDialog(stackTraceString:String):void;
  native private function invalidateRect(dirtyRect:flash.geom.Rectangle):void;
  native public function set historyPosition(value:uint):void;
  native private function onResizeRootContent(event:flash.events.Event):void;

  native public override function get width():Number;
  native public function set cacheResponse(value:Boolean):void;
  native private function onNativeDragEnter(event:flash.events.NativeDragEvent):void;
  native private function onSetStatus(status:String):void;
  native private function get pageGroupName():String;

  native private function nativeOnPaste():Boolean;
  native private function onCut(e:flash.events.Event):void;
  native public function get historyPosition():uint;
  native private function onSelectAll(e:flash.events.Event):void;
  native public function get cacheResponse():Boolean;

  native private function onCompleteTimer(ev:flash.events.TimerEvent):void;
  native public function get window():Object;
  native private function onRightMouseDown(evt:flash.events.MouseEvent):void;
  native private function onRightMouseUp(evt:flash.events.MouseEvent):void;
  native public function get htmlHost():flash.html.HTMLHost;

  native public function set userAgent(value:String):void;
  native public function set htmlHost(value:flash.html.HTMLHost):void;
  native private function closePopupWindowIfNeeded():void;
  native private function close():void;
  native public function get userAgent():String;

  native private function onCopy(e:flash.events.Event):void;
  static native private final function createClipboard(writable:Boolean,forDragging:Boolean,clipboard:flash.desktop.Clipboard,dragOptions:flash.desktop.NativeDragOptions):flash.desktop.JSClipboard;
  static native private const s_heightName:String = "height";
  static native private const RightButton:uint = 2;
  static native private const MiddleButton:uint = 1;

  static native private final function dragImageForLink(url:String,title:String):flash.display.BitmapData;
  static native private const s_widthName:String = "width";
  static native public final function createRootWindow(visible:Boolean = true,windowInitOptions:flash.display.NativeWindowInitOptions = null,scrollBarsVisible:Boolean = true,bounds:flash.geom.Rectangle = null):HTMLLoader;
  static native private var pageGroupSeq:uint = 0;
  static native private final function transformRect(theRect:flash.geom.Rectangle,theMatrix:flash.geom.Matrix):flash.geom.Rectangle;

  static native public final function get pdfCapability():int;
  static native private const LeftButton:uint = 0;
  static native private const kNullPointerError:uint = 2007;
  static native private const s_maxBitmapDimension:uint = 2880;
}

public class flash.html.HTMLBitmap extends Object
{
  native public function HTMLBitmap(bitmap:flash.display.BitmapData):*;

  native private function nativeInit(bitmap:flash.display.BitmapData):void;
}

public final class flash.html.HTMLPDFCapability extends Object
{
  native public function HTMLPDFCapability():*;
  static native public const ERROR_INSTALLED_READER_TOO_OLD:int = 3202;
  static native public const ERROR_PREFERRED_READER_TOO_OLD:int = 3203;
  static native public const ERROR_INSTALLED_READER_NOT_FOUND:int = 3201;

  static native public const ERROR_CANNOT_LOAD_READER:int = 3204;
  static native public const STATUS_OK:int = 0;
}

public final dynamic class flash.html.__HTMLScriptArray extends Array
{
  native public function __HTMLScriptArray():*;
  native private function operationComplete():void;
  native AS3 override function shift():*;

  native private function nativeInit(throwJSErrorClosure:Function,throwJSOperationFailedClosure:Function,throwJSObjectDeadClosure:Function,handleNSSetPropertyClosure:Function,operationCompleteFunction:Function):void;
  native private function nativeSetJSProperty(propertyName:String,value:*):void;
  native private function getProperty(propertyName:String):*;
  native public override function set length(newLength:uint):*;
  native private function callJSV(name:String,... rest):*;

  native AS3 override function unshift(... rest):uint;
  native AS3 override function pop():*;
  native private function throwJSObjectDead():void;
  native AS3 override function lastIndexOf(searchElement:*,fromIndex:* = 2147483647):int;
  native AS3 override function concat(... rest):Array;

  native private function throwJSOperationFailed():void;
  native AS3 override function indexOf(searchElement:*,fromIndex:* = 0):int;
  native private function throwJSError(jsErrorObj:*):void;
  native AS3 override function push(... rest):uint;
  native AS3 override function every(callback:Function,thisObject:* = null):Boolean;

  native private function nativeCall(jsFunction:flash.html.__HTMLScriptFunction,thisArg:Object,argArray:Array):*;
  native AS3 override function sortOn(names:*,options:* = 0,... rest):*;
  native AS3 override function sort(... rest):*;
  native AS3 override function slice(A:* = 0,B:* = NaN):Array;
  native AS3 override function reverse():Array;

  native private function nativeEnumProperties(enumProc:Function):void;
  native public override function get length():uint;
  native private function callJS(name:String,args:Array):*;
  native private function handleNSSetProperty():void;
  native AS3 override function map(callback:Function,thisObject:* = null):Array;

  native AS3 override function join(sep:* = null):String;
  native AS3 override function some(callback:Function,thisObject:* = null):Boolean;
  native AS3 override function filter(callback:Function,thisObject:* = null):Array;
  native AS3 override function forEach(callback:Function,thisObject:* = null):void;
  native AS3 override function splice(... rest):*;

  native private function nativeGetJSProperty(propertyName:String):*;
  static native private var s_UpdateDirtyDocumentsTimer:flash.utils.Timer = null;
  static native private final function onUpdateDirtyDocumentsTimer(ev:flash.events.TimerEvent):void;
  static native private final function updateDirtyDocuments():void;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

public class flash.html.ControlInitializationError extends Error
{

  native public function ControlInitializationError():*;
}


[Version("10")]
public final class flash.text.engine.TabStop extends Object
{
  native public function TabStop(alignment:String = "start",position:Number = 0.0,decimalAlignmentToken:String = ""):*;
  native public function set position(value:Number):void;
  native public function get alignment():String;
  native public function set alignment(value:String):void;

  native public function get decimalAlignmentToken():String;
  native public function get position():Number;
  native public function set decimalAlignmentToken(value:String):void;
}


[Version("10")]
public final class flash.text.engine.FontWeight extends Object
{
  native public function FontWeight():*;
  static native public const BOLD:String = "bold";

  static native public const NORMAL:String = "normal";
}


public final class flash.text.TextRenderer extends Object
{
  native public function TextRenderer():*;
  static native public final function set maxLevel(value:int):void;
  static native public final function get displayMode():String;
  static native public final function setAdvancedAntiAliasingTable(fontName:String,fontStyle:String,colorType:String,advancedAntiAliasingTable:Array):void;

  static native public final function get maxLevel():int;
  [Inspectable(environment="none")]
  static native public final function get antiAliasType():String;
  static native public final function set displayMode(value:String):void;
  static native public final function set antiAliasType(value:String):void;
}


[Version("10")]
public final class flash.text.engine.DigitWidth extends Object
{
  native public function DigitWidth():*;

  static native public const DEFAULT:String = "default";
  static native public const PROPORTIONAL:String = "proportional";
  static native public const TABULAR:String = "tabular";
}


public class flash.geom.ColorTransform extends Object
{
  native public function ColorTransform(redMultiplier:Number = 1.0,greenMultiplier:Number = 1.0,blueMultiplier:Number = 1.0,alphaMultiplier:Number = 1.0,redOffset:Number = 0,greenOffset:Number = 0,blueOffset:Number = 0,alphaOffset:Number = 0):*;
  native public function get color():uint;

  native public var redOffset:Number;
  native public function set color(newColor:uint):void;
  native public var greenMultiplier:Number;
  native public var blueOffset:Number;
  native public function toString():String;

  native public var alphaOffset:Number;
  native public var redMultiplier:Number;
  native public function concat(second:ColorTransform):void;
  native public var blueMultiplier:Number;
  native public var greenOffset:Number;

  native public var alphaMultiplier:Number;
}


public class flash.events.ScreenMouseEvent extends flash.events.MouseEvent
{
  native public function ScreenMouseEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,screenX:Number = 0,screenY:Number = 0,ctrlKey:Boolean = false,altKey:Boolean = false,shiftKey:Boolean = false,buttonDown:Boolean = false,commandKey:Boolean = false,controlKey:Boolean = false):*;
  native public function get screenY():Number;
  native private var m_screenX:Number;
  native private var m_screenY:Number;

  native public override function toString():String;
  native public override function clone():flash.events.Event;
  native public function get screenX():Number;
  static native public const RIGHT_CLICK:String = "rightClick";
  static native public const CLICK:String = "click";

  static native public const MOUSE_UP:String = "mouseUp";
  static native public const RIGHT_MOUSE_UP:String = "rightMouseUp";
  static native public const MOUSE_DOWN:String = "mouseDown";
  static native public const RIGHT_MOUSE_DOWN:String = "rightMouseDown";
}


[Version("10")]
public final class flash.display.GraphicsPathWinding extends Object
{
  native public function GraphicsPathWinding():*;

  static native public const EVEN_ODD:String = "evenOdd";
  static native public const NON_ZERO:String = "nonZero";
}


[Version("10")]
public final class flash.display.GraphicsPathCommand extends Object
{
  native public function GraphicsPathCommand():*;
  static native public const LINE_TO:int = 2;
  static native public const MOVE_TO:int = 1;

  static native public const CURVE_TO:int = 3;
  static native public const WIDE_LINE_TO:int = 5;
  static native public const WIDE_MOVE_TO:int = 4;
  static native public const NO_OP:int = 0;
}


[Version("10")]
public final class flash.text.engine.TabAlignment extends Object
{
  native public function TabAlignment():*;

  static native public const DECIMAL:String = "decimal";
  static native public const START:String = "start";
  static native public const CENTER:String = "center";
  static native public const END:String = "end";
}


[Version("10")]
public final class flash.text.engine.DigitCase extends Object
{
  native public function DigitCase():*;

  static native public const LINING:String = "lining";
  static native public const DEFAULT:String = "default";
  static native public const OLD_STYLE:String = "oldStyle";
}


[Version("10")]
public class flash.filters.ShaderFilter extends flash.filters.BitmapFilter
{
  native public function ShaderFilter(shader:flash.display.Shader = null):*;
  native private function set _extendBy(extend:flash.geom.Rectangle):void;

  native public function get rightExtension():int;
  native public function get shader():flash.display.Shader;
  native public function set rightExtension(v:int):void;
  native public function set bottomExtension(v:int):void;
  native public function set shader(shader:flash.display.Shader):void;

  native public function set leftExtension(v:int):void;
  native public function get topExtension():int;
  native public function set topExtension(v:int):void;
  native private function get _extendBy():flash.geom.Rectangle;
  native public function get leftExtension():int;

  native public function get bottomExtension():int;
}


public final class flash.ui.Keyboard extends Object
{
  native public function Keyboard():*;
  static native public const STRING_UPARROW:String = "";
  static native public const KEYNAME_PREV:String = "Prev";
  static native public const LEFT:uint = 37;

  static native public const STRING_PAGEDOWN:String = "";
  static native public const STRING_PAUSE:String = "";
  static native public const KEYNAME_UPARROW:String = "Up";
  static native public const NUMPAD_DECIMAL:uint = 110;
  static native public const A:uint = 65;

  static native public const KEYNAME_INSERTLINE:String = "InsLn";
  static native public const C:uint = 67;
  static native public const D:uint = 68;
  static native public const E:uint = 69;
  static native public const KEYNAME_END:String = "End";

  static native public const G:uint = 71;
  static native public const H:uint = 72;
  static native public const B:uint = 66;
  static native public const J:uint = 74;
  static native public const K:uint = 75;

  static native public const L:uint = 76;
  static native public const STRING_HOME:String = "";
  static native public const N:uint = 78;
  static native public const O:uint = 79;
  static native public const Q:uint = 81;

  static native public const STRING_UNDO:String = "";
  static native public const S:uint = 83;
  static native public const M:uint = 77;
  static native public const U:uint = 85;
  static native public const V:uint = 86;

  static native public const P:uint = 80;
  static native public const I:uint = 73;
  static native public const R:uint = 82;
  static native public const Z:uint = 90;
  static native public const STRING_RIGHTARROW:String = "";

  static native public const F:uint = 70;
  static native public const X:uint = 88;
  static native public const Y:uint = 89;
  static native public const ALTERNATE:uint = 18;
  static native public const SHIFT:uint = 16;

  static native public const T:uint = 84;
  static native public const BACKSPACE:uint = 8;
  static native public const PAGE_DOWN:uint = 34;
  static native public const STRING_DELETECHAR:String = "";
  static native public const KEYNAME_F10:String = "F10";

  static native public const KEYNAME_F11:String = "F11";
  static native public const KEYNAME_F13:String = "F13";
  static native public const KEYNAME_F14:String = "F14";
  static native public const KEYNAME_F15:String = "F15";
  static native public const KEYNAME_F16:String = "F16";

  static native public const KEYNAME_F17:String = "F17";
  static native public const KEYNAME_F18:String = "F18";
  static native public const KEYNAME_F12:String = "F12";
  static native public const MINUS:uint = 189;
  static native public const ESCAPE:uint = 27;

  static native public final function isAccessible():Boolean;
  static native public const KEYNAME_F19:String = "F19";
  static native public const KEYNAME_F20:String = "F20";
  static native public const KEYNAME_F21:String = "F21";
  static native public const KEYNAME_F22:String = "F22";

  static native public const KEYNAME_F23:String = "F23";
  static native public const KEYNAME_F24:String = "F24";
  static native public const KEYNAME_F25:String = "F25";
  static native public const KEYNAME_F26:String = "F26";
  static native public const KEYNAME_F27:String = "F27";

  static native public const KEYNAME_F28:String = "F28";
  static native public const KEYNAME_F29:String = "F29";
  static native public const DOWN:uint = 40;
  static native public const KEYNAME_MODESWITCH:String = "ModeSw";
  static native public const F3:uint = 114;

  static native public const KEYNAME_F30:String = "F30";
  static native public const KEYNAME_F31:String = "F31";
  static native public const KEYNAME_F32:String = "F32";
  static native public const KEYNAME_F33:String = "F33";
  static native public const KEYNAME_F34:String = "F34";

  static native public const KEYNAME_F35:String = "F35";
  static native public const NUMBER_0:uint = 48;
  static native public const NUMBER_1:uint = 49;
  static native public const NUMBER_2:uint = 50;
  static native public const NUMBER_3:uint = 51;

  static native public const NUMBER_4:uint = 52;
  static native public const NUMBER_5:uint = 53;
  static native public const NUMBER_6:uint = 54;
  static native public const NUMBER_7:uint = 55;
  static native public const NUMBER_9:uint = 57;

  static native public const F4:uint = 115;
  static native public const F5:uint = 116;
  static native public const KEYNAME_NEXT:String = "Next";
  static native public const NUMBER_8:uint = 56;
  static native public const END:uint = 35;

  static native public const F9:uint = 120;
  static native public const STRING_MENU:String = "";
  static native public const F2:uint = 113;
  static native public const F6:uint = 117;
  static native public const F7:uint = 118;

  static native public const NUMPAD_ADD:uint = 107;
  static native public const SEMICOLON:uint = 186;
  static native public const F1:uint = 112;
  static native public const W:uint = 87;
  static native public const BACKSLASH:uint = 220;

  static native public const STRING_PRINT:String = "";
  static native public const F10:uint = 121;
  static native public const F12:uint = 123;
  static native public const F14:uint = 125;
  static native public const F8:uint = 119;

  static native public const F11:uint = 122;
  static native public const F13:uint = 124;
  static native public const STRING_SELECT:String = "";
  static native public const STRING_CLEARLINE:String = "";
  static native public const SPACE:uint = 32;

  static native public const HOME:uint = 36;
  static native public const F15:uint = 126;
  static native public const STRING_DELETELINE:String = "";
  static native public const KEYNAME_HELP:String = "Help";
  static native public const STRING_EXECUTE:String = "";

  static native public const STRING_FIND:String = "";
  static native public const CONTROL:uint = 17;
  static native public const KEYNAME_BEGIN:String = "Begin";
  static native public const SLASH:uint = 191;
  static native public const KEYNAME_EXECUTE:String = "Exec";

  static native public const STRING_REDO:String = "";
  static native public const STRING_PAGEUP:String = "";
  static native public const KEYNAME_RIGHTARROW:String = "Right";
  static native public const KEYNAME_SELECT:String = "Select";
  static native public const STRING_LEFTARROW:String = "";

  static native public const KEYNAME_DELETECHAR:String = "DelChr";
  static native public const STRING_DELETE:String = "";
  static native public const KEYNAME_USER:String = "User";
  static native public const STRING_PREV:String = "";
  static native public const KEYNAME_BREAK:String = "Break";

  static native public const DELETE:uint = 46;
  static native public const NUMPAD_DIVIDE:uint = 111;
  static native public const PERIOD:uint = 190;
  static native public const KEYNAME_PRINTSCREEN:String = "PrntScrn";
  static native public final function get numLock():Boolean;

  static native public const BACKQUOTE:uint = 192;
  static native public const KEYNAME_STOP:String = "Stop";
  static native public const STRING_DOWNARROW:String = "";
  static native public const KEYNAME_RESET:String = "Reset";
  static native public const RIGHT:uint = 39;

  static native public const KEYNAME_PAGEUP:String = "PgUp";
  static native public const STRING_PRINTSCREEN:String = "";
  static native public const STRING_SYSTEM:String = "";
  static native public const KEYNAME_DELETELINE:String = "DelLn";
  static native public const KEYNAME_DELETE:String = "Delete";

  static native public const PAGE_UP:uint = 33;
  static native public const QUOTE:uint = 222;
  static native public const STRING_NEXT:String = "";
  static native public const STRING_SCROLLLOCK:String = "";
  static native public const STRING_INSERTCHAR:String = "";

  static native public const CharCodeStrings:Array;
  static native public const UP:uint = 38;
  static native public const STRING_SYSREQ:String = "";
  static native public const KEYNAME_PAUSE:String = "Pause";
  static native public const STRING_INSERT:String = "";

  static native public const KEYNAME_CLEARDISPLAY:String = "ClrDsp";
  static native public const STRING_HELP:String = "";
  static native public const KEYNAME_HOME:String = "Home";
  static native public const COMMA:uint = 188;
  static native public const ENTER:uint = 13;

  static native public const KEYNAME_UNDO:String = "Undo";
  static native public const LEFTBRACKET:uint = 219;
  static native public const KEYNAME_SYSTEM:String = "Sys";
  static native public const INSERT:uint = 45;
  static native public const NUMPAD_MULTIPLY:uint = 106;

  static native public const STRING_BEGIN:String = "";
  static native public const KEYNAME_CLEARLINE:String = "ClrLn";
  static native public const KEYNAME_PAGEDOWN:String = "PgDn";
  static native public const RIGHTBRACKET:uint = 221;
  static native public const EQUAL:uint = 187;

  static native public const STRING_INSERTLINE:String = "";
  static native public const COMMAND:uint = 15;
  static native public const STRING_BREAK:String = "";
  static native public const KEYNAME_MENU:String = "Menu";
  static native public const STRING_CLEARDISPLAY:String = "";

  static native public const KEYNAME_SYSREQ:String = "SysReq";
  static native public const NUMPAD:uint = 21;
  static native public const KEYNAME_INSERT:String = "Insert";
  static native public const STRING_USER:String = "";
  static native public const NUMPAD_ENTER:uint = 108;

  static native public const KEYNAME_PRINT:String = "Print";
  static native public const TAB:uint = 9;
  static native public const STRING_STOP:String = "";
  static native public const STRING_RESET:String = "";
  static native public const STRING_MODESWITCH:String = "";

  static native public const KEYNAME_LEFTARROW:String = "Left";
  static native public const KEYNAME_SCROLLLOCK:String = "ScrlLck";
  static native public const KEYNAME_FIND:String = "Find";
  static native public const STRING_F1:String = "";
  static native public const STRING_F2:String = "";

  static native public const STRING_F3:String = "";
  static native public const STRING_F4:String = "";
  static native public const STRING_F5:String = "";
  static native public const STRING_F6:String = "";
  static native public const STRING_F7:String = "";

  static native public const STRING_F8:String = "";
  static native public const STRING_F9:String = "";
  static native public const STRING_END:String = "";
  static native public const KEYNAME_INSERTCHAR:String = "InsChr";
  static native public final function get capsLock():Boolean;

  static native public const STRING_F10:String = "";
  static native public const STRING_F11:String = "";
  static native public const STRING_F12:String = "";
  static native public const STRING_F13:String = "";
  static native public const STRING_F14:String = "";

  static native public const STRING_F15:String = "";
  static native public const STRING_F16:String = "";
  static native public const STRING_F17:String = "";
  static native public const STRING_F18:String = "";
  static native public const KEYNAME_F1:String = "F1";

  static native public const KEYNAME_F2:String = "F2";
  static native public const KEYNAME_F3:String = "F3";
  static native public const KEYNAME_F4:String = "F4";
  static native public const KEYNAME_F5:String = "F5";
  static native public const KEYNAME_F6:String = "F6";

  static native public const KEYNAME_F7:String = "F7";
  static native public const KEYNAME_F8:String = "F8";
  static native public const KEYNAME_F9:String = "F9";
  static native public const CAPS_LOCK:uint = 20;
  static native public const NUMPAD_7:uint = 103;

  static native public const NUMPAD_1:uint = 97;
  static native public const STRING_F19:String = "";
  static native public const NUMPAD_4:uint = 100;
  static native public const KEYNAME_REDO:String = "Redo";
  static native public const NUMPAD_8:uint = 104;

  static native public const STRING_F20:String = "";
  static native public const STRING_F21:String = "";
  static native public const STRING_F22:String = "";
  static native public const KEYNAME_DOWNARROW:String = "Down";
  static native public const STRING_F24:String = "";

  static native public const STRING_F25:String = "";
  static native public const STRING_F26:String = "";
  static native public const STRING_F27:String = "";
  static native public const STRING_F28:String = "";
  static native public const STRING_F29:String = "";

  static native public const STRING_F23:String = "";
  static native public const NUMPAD_2:uint = 98;
  static native public const NUMPAD_3:uint = 99;
  static native public const NUMPAD_5:uint = 101;
  static native public const NUMPAD_6:uint = 102;

  static native public const NUMPAD_SUBTRACT:uint = 109;
  static native public const NUMPAD_9:uint = 105;
  static native public const NUMPAD_0:uint = 96;
  static native public const STRING_F30:String = "";
  static native public const STRING_F31:String = "";

  static native public const STRING_F32:String = "";
  static native public const STRING_F33:String = "";
  static native public const STRING_F34:String = "";
  static native public const STRING_F35:String = "";
}


public final class flash.filters.GlowFilter extends flash.filters.BitmapFilter
{
  native public function GlowFilter(color:uint = 16711680,alpha:Number = 1.0,blurX:Number = 6.0,blurY:Number = 6.0,strength:Number = 2,quality:int = 1,inner:Boolean = false,knockout:Boolean = false):*;

  native public function get strength():Number;
  native public function set blurX(value:Number):void;
  native public function get color():uint;
  native public function set blurY(value:Number):void;
  native public function set quality(value:int):void;

  native public function set color(value:uint):void;
  native public function set strength(value:Number):void;
  native public function set inner(value:Boolean):void;
  native public function get blurX():Number;
  native public function get blurY():Number;

  native public function set knockout(value:Boolean):void;
  native public function get inner():Boolean;
  native public function get knockout():Boolean;
  native public function set alpha(value:Number):void;
  native public override function clone():flash.filters.BitmapFilter;

  native public function get alpha():Number;
  native public function get quality():int;
}


public dynamic class flash.display.MovieClip extends flash.display.Sprite
{
  native public function MovieClip():*;
  [Version("10")]
  native public function get currentFrameLabel():String;
  native public function prevFrame():void;

  native public function stop():void;
  native public function get scenes():Array;
  native public function gotoAndPlay(frame:Object,scene:String = null):void;
  native public function set enabled(value:Boolean):void;
  native public function get totalFrames():int;

  native public function get framesLoaded():int;
  native public function get enabled():Boolean;
  native public function nextScene():void;
  native public function get currentFrame():int;
  native public function get currentScene():flash.display.Scene;

  native public function gotoAndStop(frame:Object,scene:String = null):void;
  [Inspectable(environment="none")]
  native public function addFrameScript(... rest):void;
  native public function set trackAsMenu(value:Boolean):void;
  native public function prevScene():void;
  native public function nextFrame():void;

  native public function play():void;
  native public function get trackAsMenu():Boolean;
  native public function get currentLabel():String;
  native public function get currentLabels():Array;
}


[Version("10")]
public final class flash.text.engine.SpaceJustifier extends flash.text.engine.TextJustifier
{
  native public function SpaceJustifier(locale:String = "en",lineJustification:String = "unjustified",letterSpacing:Boolean = false):*;

  native public function set letterSpacing(value:Boolean):void;
  native public override function clone():flash.text.engine.TextJustifier;
  native public function get letterSpacing():Boolean;
}


public class flash.events.ContextMenuEvent extends flash.events.Event
{
  native public function ContextMenuEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,mouseTarget:flash.display.InteractiveObject = null,contextMenuOwner:flash.display.InteractiveObject = null):*;
  native private var m_mouseTarget:flash.display.InteractiveObject;

  native public function get contextMenuOwner():flash.display.InteractiveObject;
  [Version("10")]
  native public function set isMouseTargetInaccessible(value:Boolean):void;
  [Version("10")]
  native public function get isMouseTargetInaccessible():Boolean;
  native public function set mouseTarget(value:flash.display.InteractiveObject):void;
  native public function set contextMenuOwner(value:flash.display.InteractiveObject):void;

  [Version("10")]
  native private var m_isMouseTargetInaccessible:Boolean;
  native public function get mouseTarget():flash.display.InteractiveObject;
  native private var m_contextMenuOwner:flash.display.InteractiveObject;
  native public override function toString():String;
  native public override function clone():flash.events.Event;

  static native public const MENU_ITEM_SELECT:String = "menuItemSelect";
  static native public const MENU_SELECT:String = "menuSelect";
}


public class flash.data.EncryptedLocalStore extends Object
{
  native public function EncryptedLocalStore():*;
  static native private final function getItemNative(name:String,outData:flash.utils.ByteArray):uint;
  static native private final function resetNative():uint;

  static native public final function getItem(name:String):flash.utils.ByteArray;
  static native private const ENCRYPTEDLOCALSTORE_INTERNAL_ERROR:* = 606;
  static native private const ENCRYPTEDLOCALSTORE_DATABASE_ACCESS_ERROR:* = 605;
  static native public final function reset():void;
  static native private final function setItemNative(name:String,data:flash.utils.ByteArray,stronglyBound:Boolean):uint;

  static native public final function setItem(name:String,data:flash.utils.ByteArray,stronglyBound:Boolean = false):void;
  static native private const ENCRYPTEDLOCALSTORE_VERSION_MISMATCH:* = 305;
  static native private const ENCRYPTEDLOCALSTORE_APPHASH_COMPUTATION_ERROR:* = 603;
  static native private const ENCRYPTEDLOCALSTORE_APPHASH_CHECK_ERROR:* = 604;
  static native private final function processErrorCode(errorCode:uint):void;

  static native private const ENCRYPTEDLOCALSTORE_OUTOFMEMORY_ERROR:* = 101;
  static native private final function removeItemNative(name:String):uint;
  static native private const ENCRYPTEDLOCALSTORE_PUBLISHERIDERROR_SIGINVALID:* = 601;
  static native private final function checkName(name:String):void;
  static native public final function removeItem(name:String):void;

  static native private const ENCRYPTEDLOCALSTORE_PUBLISHERIDERROR_PASSEDIN_PUBID:* = 602;
}


public final class flash.display.NativeWindowType extends Object
{
  native public function NativeWindowType():*;
  static native public const NORMAL:String = "normal";
  static native public const UTILITY:String = "utility";
  static native public const LIGHTWEIGHT:String = "lightweight";
}


public class flash.text.TextLineMetrics extends Object
{

  native public function TextLineMetrics(x:Number,width:Number,height:Number,ascent:Number,descent:Number,leading:Number):*;
  native public var ascent:Number;
  native public var width:Number;
  native public var height:Number;
  native public var leading:Number;

  native public var x:Number;
  native public var descent:Number;
}


public final class flash.display.NativeWindowDisplayState extends Object
{
  native public function NativeWindowDisplayState():*;
  static native public const MINIMIZED:String = "minimized";
  static native public const NORMAL:String = "normal";

  static native public const MAXIMIZED:String = "maximized";
}

