import org.jetbrains.jps.Jps
import org.jetbrains.jps.LayoutInfo
import org.jetbrains.jps.Module

import static org.jetbrains.jps.idea.IdeaProjectLoader.guessHome

includeTargets << new File("${guessHome(this as Script)}/community/build/scripts/utils.gant")
includeTargets << new File("${guessHome(this)}/build/scripts/ultimate_utils.gant")
includeTargets << new File("${guessHome(this)}/build/scripts/libLicenses.gant")
includeTool << Jps

def product = "Astella"
def productCode = "AS"

requireProperty("buildNumber", requireProperty("build.number", snapshot))
setProperty("product", "${product}")
setProperty("buildPrefix", "${product}-EAP-")
setProperty("buildName", "${buildPrefix}${buildNumber}")
setProperty("productCode", "$productCode")
requireProperty("launchProperties", "")


// load ApplicationInfo.xml properties
ant.xmlproperty(file: "$home/flex/ideResources/idea/FlexApplicationInfo.xml", collapseAttributes: "true")

setProperty("system_selector", "Astella${p("component.version.major")}0")
setProperty("ch", "$home/community")
setProperty("dryRun", false)
setProperty("jdk16", guessJdk())
setProperty("dontClean", false)

setProperty("pluginFilter", [
            "htmltools",
            "JavaScriptLanguage",
            "cvsIntegration", "cvs-core", "cvs-plugin", "javacvs-src", "smartcvs-src",
            "PerforceIntegration", "Perforce", "perforce_util",
            "svn4idea",
            "git4idea",
            "github",
            "hg4idea",
            "CSS", "css-api",
            "JSInspections",
            "JSIntentionPowerPack",
            "less", "sass",
            "tasks", "tasks-core", "tasks-api", "jira-connector",
            "JavaScriptDebugger", "FirefoxConnector", "ChromeConnector",
            "flex-plugin", "flex-ui-designer", "flex-profiler", "properties",
            "ant"/*, "maven", "maven-server-api", "maven2-server-impl", "maven3-server-impl"*/
            ])

private List platformImplementationModules() {
  return [
          "core-impl",
          "RegExpSupport",
          "license_common",
          "platform-ultimate",
          "platform-impl",
          "vcs-impl",
          "lang-impl",
          "testRunner",
          "smRunner",
          "xdebugger-impl",
          "testFramework",
          "tests_bootstrap",
          "xml",
          "relaxng",
          "lvcs-impl",
          "images",
          "spellchecker",
          "graph",
          "duplicates",
          //"coverage-impl",
          "dom-impl",
          "instrumentation-util",
          "java-impl",
          "compiler-impl",
          "debugger-impl",
          "execution-impl",
          "dom-impl",
          "idea-ui",
          "jsp-spi",
          "java-psi-impl"
  ]
}

private List<String> platformApiModules() {
  return ["core-api", "platform-api", "lvcs-api", "lang-api", "vcs-api", "usageView", "xdebugger-api", "xml-openapi", "dom-openapi", "webide-api",
          "openapi", "testFramework-java", "debugger-openapi", "compiler-openapi", "execution-openapi", "jsp-openapi", "jsp-base-openapi",
          "java-psi-api"]
}

class Paths {
  final sandbox
  final distAll
  final distWin
  final distMac
  final distUnix
  final artifacts
  final ideaSystem
  final ideaConfig

  def Paths(String home) {
    sandbox = "$home/out/flex-ide"
    distAll = "$sandbox/layout"
    distWin = "$sandbox/win"
    distMac = "$sandbox/mac"
    distUnix = "$sandbox/linux"
    artifacts = "$sandbox/artifacts"

    ideaSystem = "$sandbox/system"
    ideaConfig = "$sandbox/config"
  }
}

setProperty("paths", new Paths(home))

target('default': "Build artifacts") {
  def modules = [
          "flex-ide", "resources", "colorSchemes", platformApiModules(), platformImplementationModules(), pluginFilter
  ].flatten()

  loadProject()

  processLaunchProperties() { k, v -> project.info("launch property: ${k}=${v}") }

  project.targetFolder = "$paths.sandbox/classes"
  project.dryRun = dryRun

  if (!dryRun && !dontClean) {
    project.stage("cleanup")
    forceDelete(paths.sandbox)
    ant.mkdir(dir: paths.sandbox)
  }

  ant.tstamp() {
    format(property: "todayYear", pattern: "yyyy")
  }

  ant.patternset(id: "resources.included") {
    include(name: "**/*.properties")
    include(name: "fileTemplates/**/*")
    include(name: "inspectionDescriptions/**/*")
    include(name: "intentionDescriptions/**/*")
    include(name: "tips/**/*")
    include(name: "search/**/*")
  }

  ant.patternset(id: "resources.excluded") {
    exclude(name: "**/*.properties")
    exclude(name: "fileTemplates/**/*")
    exclude(name: "fileTemplates")
    exclude(name: "inspectionDescriptions/**/*")
    exclude(name: "inspectionDescriptions")
    exclude(name: "intentionDescriptions/**/*")
    exclude(name: "intentionDescriptions")
    exclude(name: "tips/**/*")
    exclude(name: "tips")
  }

  if (!dryRun) {
    zipSources(home, paths.artifacts)
  }

  def usedJars = new HashSet();

  // TODO I'm not sure yFiles jars matter
  def forbiddenJars = ["client-api", "ideaLicenseDecoder", "eawtstub.jar", "/ui.jar", "exe4jlib.jar", "/y.jar", "ysvg.jar"]

  if (!dontClean) {
    project.clean()
  }

  modules.each {
    Module module = project.modules[it] as Module
    if (module != null) {
      project.info("Building $module.name")
      module.runtimeClasspath().each {
        File file = new File(it)
        if (file.exists()) {
          String path = file.canonicalPath.replace('\\', '/')
          String normalizedHome = home.replace('\\', '/')
          if (path.endsWith(".jar") && (path.startsWith("$normalizedHome/lib/") ||
                                        path.startsWith("$normalizedHome/community/lib/"))
              && !path.contains("/dev/") && !path.contains("/rt/") && !path.contains("/ant/")
              && !forbiddenJars.any { path.contains(it) }) {
            usedJars.add(path);
          }
        }
      }
      module.make()
    }
    else {
      project.warning("$it is not a module")
    }
  }

  // script will do nothing if 'flex-ui-designer' plugin is not part of pluginFilter
  def flex_ui_designer_build_script = includeFile("$home/flex/tools/flex-ui-designer/build-gant/flex_ui_designer_build.gant")
  flex_ui_designer_build_script.execute("$home", "$paths.sandbox", "$home/out/flex-ide/classes/production/flex-ui-designer")

  // script will do nothing if 'flex-profiler' plugin is not part of pluginFilter
  def flex_profiler_build_script = includeFile("$home/flex/tools/profiler/build-gant/flex_profiler_build.gant")
  flex_profiler_build_script.execute("$home", "$paths.sandbox", "$home/out/flex-ide/classes/production/flex-profiler")

  usedJars.add("$home/community/lib/jgoodies-common-1.2.1.jar")
  usedJars.add("$home/community/lib/jgoodies-looks-2.4.2.jar")

  buildSearchableOptions("$paths.sandbox/searchableoptions", ["$home/build/idea.license"], {
    pathelement(location: "$ch/lib/junit.jar")
    project["flex-ide"].runtimeClasspath().each {
      pathelement(location: it)
    }
  }, "-Didea.platform.prefix=Flex -Didea.no.jre.check=true")

  String vmOptions = common_vmoptions
  processLaunchProperties() { k, v -> vmOptions += " -D${k}=${v}" }
  binding.setVariable("common_vmoptions", "$vmOptions".trim())

  Map args = [
          fullName: "Astella",
          buildNumber: buildName,
          system_selector: system_selector,
          ide_jvm_args: "-Didea.platform.prefix=Flex -Didea.no.jre.check=true"]

  wireBuildDate("${productCode}-${buildNumber}", appInfoFile())
  LayoutInfo layoutInfo = layoutFull(args, paths.distAll, usedJars)
  generateLicensesTable("$paths.artifacts/third-party-libraries.txt", layoutInfo.usedModules);

  // TODO let's turn scrambling off for now
  //scramble()

  ant.echo(message: "${productCode}-${buildNumber}", file: "$paths.distAll/build.txt")

  layoutWin(args, paths.distWin)
  layoutMac(args, paths.distMac)
  layoutUnix(args, paths.distUnix)

  String macAppRoot = isEap() ? "${buildName}.app" : "${product}-${p("component.version.major")}.${p("component.version.minor")}.app"
  buildMacZip(macAppRoot, "${paths.artifacts}/${buildName}.sit", [paths.distAll, paths.distMac])
  buildDmg("${product}", "$home/flex/ideResources/artwork/fiDmgBg.png", ["build.code": buildName])

  String tarRoot = isEap() ? "${buildName}" : "${product}-${p("component.version.major")}.${p("component.version.minor")}"
  buildTarGz(tarRoot, "$paths.artifacts/${buildName}.tar", [paths.distAll, paths.distUnix])

  buildExe("$home/flex/build/flex-ide.exe4j", system_selector)
  buildWinZip("$paths.artifacts/${buildName}.zip", [paths.distAll, paths.distWin])
  buildNSIS([paths.distAll, paths.distWin],
            "$home/flex/build/strings.nsi", "$home/flex/build/paths.nsi",
            "${buildPrefix}", false, true, system_selector, true)
}

private processLaunchProperties(Closure processor) {
  if (launchProperties != "") {
    launchProperties.tokenize(";").each {
      tokens = it.tokenize("=");
      processor(key: tokens[0], value: tokens[1]);
    }
  }
}

private scramble() {
  copyAndPatchFile("$home/build/conf/script.zkm.stub", "${paths.sandbox}/script.zkm",
                   ["CLASSES": "\"${paths.distAll}/lib/flexide.jar\"", "SCRAMBLED_CLASSES": paths.distAll, "INCREMENTAL": ""])
  ant.mkdir(dir: "$paths.artifacts/flexide.unscrambled")
  ant.copy(file: "$paths.distAll/lib/flexide.jar", todir: "$paths.artifacts/flexide.unscrambled")

  zkmScramble("$paths.sandbox/script.zkm", "$paths.distAll/lib", "flexide.jar")

  ant.move(file: "$paths.distAll/flexide.jar", todir: "$paths.distAll/lib")
  ant.zip(destfile: "$paths.artifacts/logs.zip") {
    fileset(file: "ChangeLog.txt")
    fileset(file: "ZKM_log.txt")
    fileset(file: "$paths.sandbox/script.zkm")
  }
  ant.delete(file: "ChangeLog.txt")
  ant.delete(file: "ZKM_log.txt")
}

private String appInfoFile() {
  return "$home/out/flex-ide/classes/production/flex-ide/idea/FlexApplicationInfo.xml"
}

private layoutFull(Map args, String target, Set usedJars) {
  def implementationModules = [platformImplementationModules(), "flex-ide"].flatten()

  def result = layout(target) {
    dir("bin") {
      fileset(dir: "$home/community/bin") {
        exclude(name: "appletviewer.policy")
        include(name: "*.*")
      }
    }

    dir("lib") {
      jar("util.jar") { module("util") }

      jar("openapi.jar") {
        platformApiModules().each { module it}
      }

      jar("annotations.jar") { module("annotations")}
      jar("extensions.jar") { module("extensions")}

      jar("flexide.jar") {
        implementationModules.each {
          module(it) {
            exclude(name: "**/common/**.rb")
            exclude(name: "**/tips/**")
            exclude(name: "/search/**")
            exclude(name: "**/FileTypeManager.xml")
          }
        }
        zipfileset(src: "${home}/lib/client-api.jar")
        zipfileset(src: "${home}/lib/ideaLicenseDecoder.jar")
      }

      jar("bootstrap.jar") { module("bootstrap")}
      jar("resources.jar") {
        module("platform-resources") {
          exclude(name: "**/FileTypeManager.xml")
        }
        module("resources") {
          exclude(name: "**/preview/**")
          exclude(name: "**/JavaActions.xml")
          exclude(name: "**/JBuilderKeymap.xml")
          exclude(name: "**/Palette2.xml")
          exclude(name: "**/PropertiesComponent.xml")
          exclude(name: "**/IdeaPlugin.xml")
          exclude(name: "**/javadoc/**")
          exclude(name: "**/liveTemplates/**")
          exclude(name: "**/ClassTemplateManager.xml")
          exclude(name: "**/DebuggerSettings.xml")
        }
        module("colorSchemes")
        module("flex-ide") {
          include(name: "**/FileTypeManager.xml")
        }
      }

      jar("forms_rt.jar") {
        module("forms_rt")
      }

      jar([name: "resources_en.jar", duplicate: "preserve"]) {
        // Flex IDE resources come first to override platform resources (using duplicate=preserve)
        fileset(dir: "$home/flex/ideResources") {
          include(name: "**/tips/**")
        }
        fileset(dir: "$paths.sandbox/searchableoptions")
        module("platform-resources-en")
        module("resources-en") {
          ant.patternset() {
            include(name: "**/AntBundle.properties")
            include(name: "**/CompilerBundle.properties")
            include(name: "**/DebuggerBundle.properties")
            include(name: "**/JavaErrorMessages.properties")
            include(name: "**/EvaluationFeedbackRequest.html")
          }
        }
      }

      jar("icons.jar") { module("icons") }
      jar("boot.jar") { module("boot") }

      jar("jps-server.jar") {
        module("jps-builders")
        module("jps-model")
      }

      usedJars.each {
        fileset(file: it)
      }

      fileset(dir: "$home/community/xml/relaxng/lib", includes: "*.jar")

      fileset(dir: "$home/community/lib/src") {
        include(name: "trove4j_changes.txt")
        include(name: "trove4j_src.jar")
      }
    }

    dir("license") {
      renamedFile("$home/flex/license/FlexIDE_license.txt", "Astella_license.txt")
    }

    def layouts = includeFile("$home/build/scripts/layouts.gant")
    println("layout plugins\n\n")

    setProperty("buildFlexToolPlugins", true)
    layouts.layoutPlugins()
  }
  patchPropertiesFile(target, args + [appendices: ["$home/build/conf/ideaJNC.properties"]])

  return result
}

private def noResources(String moduleName) {
  module(moduleName) {
    patternset(refid: "resources.excluded")
  }
}

private def resources(List<String> modules) {
  jar("resources_en.jar") {
    modules.each {
      module(it) {
        patternset(refid: "resources.included")
      }
    }
  }
}

private layoutMac(Map _args, String target) {
  layout(target) {
    dir("bin") {
      fileset(dir: "$home/bin", includes: "*.jnilib")
    }

    dir("help") {
      fileset(file: "$home/flex/keymap/ReferenceCardForMac.pdf")
    }
  }

  Map args = new HashMap(_args)
  args.icns = "$home/flex/ideResources/artwork/flexide.icns"
  args.bundleIdentifier = "com.jetbrains.flexide"
  args.platform_prefix = "Flex"
  args."idea.properties.path" = "${paths.distAll}/bin/idea.properties"

  Map launchProps = ["idea.no.jre.check": true]
  processLaunchProperties() { k, v -> launchProps[k] = v }
  if (!launchProps.empty) {
    args["idea.properties"] = launchProps
  }

  layoutMacApp(target, "$home/community", args)

  ant.copy(file: "${home}/out/help/help_mac.jar", tofile: "$target/help/help.jar", failonerror: "false")
}

private layoutWin(Map args, String target) {
  layout(target) {
    dir("bin") {
      fileset(dir: "$home/community/bin/win") {
        exclude(name: "breakgen*")
      }
      fileset(file: "$home/bin/yjpagent.dll")
    }

    dir("help") {
      fileset(file: "$home/flex/keymap/ReferenceCard.pdf")
    }
  }

  winScripts(target, "$home/community", "astella.bat", args)
  winVMOptions(target, system_selector, "astella.exe")

  ant.copy(file: "${home}/out/help/help.jar", todir: "$target/help", failonerror: "false")
}

private layoutUnix(Map args, String target) {
  layout(target) {
    dir("bin") {
      fileset(dir: "$home/community/bin/linux") {
        exclude(name: "libbreakgen*")
      }
      fileset(dir: "$home/bin") {
        include(name: "*.so")
      }
      renamedFile("$home/flex/ideResources/artwork/flexide.png", "astella.png")
    }

    dir("help") {
      fileset(file: "$home/flex/keymap/ReferenceCard.pdf")
    }
  }

  unixScripts(target, "$home/community", "astella.sh", args)
  unixVMOptions(target, "astella")

  ant.copy(file: "${home}/out/help/help.jar", todir: "$target/help", failonerror: "false")
}
