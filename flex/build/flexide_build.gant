import org.jetbrains.jps.Jps
import org.jetbrains.jps.LayoutInfo
import org.jetbrains.jps.Module
import static org.jetbrains.jps.idea.IdeaProjectLoader.guessHome

includeTargets << new File("${guessHome(this)}/community/build/scripts/utils.gant")
includeTargets << new File("${guessHome(this)}/build/scripts/libLicenses.gant")
includeTool << Jps

def product = "FlexIDE"

requireProperty("buildNumber", requireProperty("build.number", "108.SNAPSHOT"))
setProperty("buildName", "${product}-${buildNumber}")
setProperty("product", "${product}")


// load ApplicationInfo.xml properties
ant.xmlproperty(file: "$home/flex/ideResources/idea/FlexApplicationInfo.xml", collapseAttributes: "true")

setProperty("system_selector", "FlexIde${p("component.version.major")}0")

setProperty("ch", "$home/community")
setProperty("dryRun", false)
setProperty("jdk16", guessJdk())
setProperty("dontClean", false)

setProperty("pluginFilter", [
            "htmltools",
            "JavaScriptLanguage",
            "cvsIntegration", "cvs-core", "cvs-plugin", "javacvs-src", "smartcvs-src",
            "PerforceIntegration", "Perforce", "perforce_util",
            "svn4idea",
            "git4idea",
            "github",
            "hg4idea",
            "CSS", "css-api",
            "JSInspections",
            "JSIntentionPowerPack",
            "less", "sass",
            "tasks", "tasks-core", "tasks-api", "jira-connector",
            "JavaScriptDebugger", "FirefoxConnector", "ChromeConnector",
            "flex-plugin", "flex-ui-designer", "flex-profiler"
            ])

private List platformImplementationModules() {
  return [
          "RegExpSupport",
          "license_common",
          "platform-ultimate",
          "platform-impl",
          "vcs-impl",
          "lang-impl",
          "testRunner",
          "smRunner",
          "xdebugger-impl",
          "testFramework",
          "tests_bootstrap",
          "xml",
          "lvcs-impl",
          "images",
          "yaml",
          "haml",
          "graph",
          "duplicates",
          "spellchecker",
          //"coverage-impl",
          "dom-impl",
          "notNull",
          "java-impl",
          "compiler-impl",
          "debugger-impl",
          "execution-impl",
          "dom-impl",
          "idea-ui",
          "jsp-spi"
  ]
}

private List<String> platformApiModules() {
  return ["platform-api", "lvcs-api", "lang-api", "vcs-api", "usageView", "xdebugger-api", "xml-openapi", "dom-openapi", "webide-api",
          "openapi", "testFramework-java", "debugger-openapi", "compiler-openapi", "execution-openapi", "jsp-openapi", "jsp-base-openapi"]
}

class Paths {
  final sandbox
  final distAll
  final distWin
  final distMac
  final distLinux
  final artifacts
  final ideaSystem
  final ideaConfig

  def Paths(String home) {
    sandbox = "$home/out/flex-ide"
    distAll = "$sandbox/layout"
    distWin = "$sandbox/win"
    distMac = "$sandbox/mac"
    distLinux = "$sandbox/linux"

    ideaSystem = "$sandbox/system"
    ideaConfig = "$sandbox/config"

    artifacts = "$sandbox/artifacts"
  }
}

setProperty("paths", new Paths(home))

target('default': "Build artifacts") {

  def modules = [
          "flex-ide", "resources", "colorSchemes", platformApiModules(), platformImplementationModules(), pluginFilter
  ].flatten()

  loadProject()

  project.targetFolder = "$paths.sandbox/classes"
  project.dryRun = dryRun

  if (!dryRun && !dontClean) {
    project.stage("cleanup")

    def sandbox = paths.sandbox
    ant.delete(dir: sandbox)
    ant.mkdir(dir: sandbox)
  }

  ant.tstamp() {
    format(property: "todayYear", pattern: "yyyy")
  }

  ant.patternset(id: "resources.included") {
    include(name: "**/*.properties")
    include(name: "fileTemplates/**/*")
    include(name: "inspectionDescriptions/**/*")
    include(name: "intentionDescriptions/**/*")
    include(name: "tips/**/*")
    include(name: "search/**/*")
  }

  ant.patternset(id: "resources.excluded") {
    exclude(name: "**/*.properties")
    exclude(name: "fileTemplates/**/*")
    exclude(name: "fileTemplates")
    exclude(name: "inspectionDescriptions/**/*")
    exclude(name: "inspectionDescriptions")
    exclude(name: "intentionDescriptions/**/*")
    exclude(name: "intentionDescriptions")
    exclude(name: "tips/**/*")
    exclude(name: "tips")
  }

  if (!dryRun) {
    zipSources(home, paths.artifacts)
    reportArtifact("sources.zip")
  }

  def usedJars = new HashSet();

  // TODO I'm not sure yFiles jars matter
  def forbiddenJars = ["client-api", "ideaLicenseDecoder", "eawtstub.jar", "/ui.jar", "exe4jlib.jar", "/y.jar", "ysvg.jar"]

  if (!dontClean) {
    project.clean()
  }

  modules.each {
    Module module = project[it] as Module
    if (module != null) {
      project.info("Building $module.name")
      module.runtimeClasspath().each {
        File file = new File(it)
        if (file.exists()) {
          String path = file.canonicalPath.replace('\\', '/')
          String normalizedHome = home.replace('\\', '/')
          if (path.endsWith(".jar") && (path.startsWith("$normalizedHome/lib/") ||
                                        path.startsWith("$normalizedHome/community/lib/"))
              && !path.contains("/dev/") && !path.contains("/rt/") && !path.contains("/ant/")
              && !forbiddenJars.any { path.contains(it) }) {
            usedJars.add(path);
          }
        }
      }
      module.make()
    }
    else {
      project.warning("$it is not a module")
    }
  }

  // script will do nothing if 'flex-ui-designer' plugin is not part of pluginFilter
  def flex_ui_designer_build_script = includeFile("$home/flex/tools/flex-ui-designer/build-gant/flex_ui_designer_build.gant")
  flex_ui_designer_build_script.execute("$home", "$paths.sandbox", "$home/out/flex-ide/classes/production/flex-ui-designer")

  // script will do nothing if 'flex-profiler' plugin is not part of pluginFilter
  def flex_profiler_build_script = includeFile("$home/flex/tools/profiler/build-gant/flex_profiler_build.gant")
  flex_profiler_build_script.execute("$home", "$paths.sandbox", "$home/out/flex-ide/classes/production/flex-profiler")

  usedJars.add("$home/community/lib/looks-2.2.2.jar")

  // TODO searchable options should be built with all-modules classpath
  //buildSearchableOptions()

  wireBuildDate(buildNumber)
  LayoutInfo layoutInfo = layoutFull(paths.distAll, usedJars)
  generateLicensesTable("$paths.artifacts/third-party-libraries.txt", layoutInfo.usedModules);

  // TODO let's turn scrambling off for now
  //scramble()

  layoutWin(paths.distWin)
  layoutMac(buildName: buildName,
            version: "1.0",
            system_selector: system_selector,
            paths.distMac)

  ant.echo(message: buildName, file: "$paths.sandbox/layout/build.txt")

  buildSit()
  buildDmg()

  layoutLinux(paths.distLinux)
  buildTarGz()

  buildExe()
  buildWinZip()

  buildNsis()
}

private def buildWinZip() {
  ant.zip(zipfile: "$paths.artifacts/${buildName}.zip") {
    fileset(dir: paths.distAll)
    fileset(dir: paths.distWin)
  }
  reportArtifact("${buildName}.zip")
}

private def buildSit() {
  project.stage("sit")
  def root = isEap() ? "${buildName}.app" : "${product}-${p("component.version.major")}.${p("component.version.minor")}.app"

  ant.zip(zipfile: "${paths.artifacts}/${buildName}.sit") {
    tarfileset(dir: paths.distAll, prefix: root)
    tarfileset(dir: paths.distMac, prefix: root) {
      exclude(name: "bin/*.sh")
      exclude(name: "Contents/MacOS/idea")
    }
    tarfileset(dir: paths.distMac, filemode: "755", prefix: root) {
      include(name: "bin/*.sh")
      include(name: "Contents/MacOS/idea")
    }
  }
  reportArtifact("${buildName}.sit")
}

private def buildDmg() {
  project.stage("dmg")
  ant.move(file: "${paths.artifacts}/${buildName}.sit", tofile: "${paths.artifacts}/${product}${buildNumber}.sit") // to comply with buildDmg.xml naming
  executeExternalAnt("file.name": "${product}", "dmg.image.name": "$home/flex/ideResources/artwork/fiDmgBg.png", "$home/build/buildDmg.xml")

  ant.move(file: "${paths.artifacts}/${product}${buildNumber}.sit", tofile: "${paths.artifacts}/${buildName}.sit")
  ant.move(file: "${paths.artifacts}/${product}${buildNumber}.dmg", tofile: "${paths.artifacts}/${buildName}.dmg")
  reportArtifact("${buildName}.dmg")
}


private def buildNsis() {
  if (!isMac()) {
    project.stage("nsis")
    def installer = includeFile("$home/build/scripts/nsis_installer.gant")
    installer.nsis_installer([paths.distAll, paths.distWin],
                             "$home/flex/build/strings.nsi",
                             "$home/flex/build/paths.nsi",
                             "${product}-", false)
    ant.available(file: "${paths.artifacts}/${buildName}.exe", property: "nsis.exists");
    ant.fail(unless: "nsis.exists", message: "${buildName} NSIS EXE was not built. File ${paths.artifacts}/${buildName}.exe wasn't found.")
    reportArtifact("${buildName}.exe")
  }
  else {
    project.warning("Building nsis .exe distribution skipped")
  }
}

def buildSearchableOptions() {
  def dest_dir = "${project["platform-resources"].output}/search"
  project.stage("searchable options")
  ant.mkdir(dir: "${dest_dir}/search")
  ant.copy(file: "$home/build/idea.license", todir: paths.ideaSystem)
  //ant.copy(file: "$home/build/rubymine.license", todir: paths.ideaSystem)
  ant.java(classname: "com.intellij.idea.Main", fork: "true") {
    jvmarg(line: "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9887 -ea -Xmx250m -Didea.home.path=$home -Didea.system.path=${paths.ideaSystem} -Didea.config.path=${paths.ideaConfig} -Didea.platform.prefix=Flex -Didea.no.jre.check=true")
    jvmarg(value: "-Xbootclasspath/a:${boot.output}")
    arg(line: "traverseUI ${dest_dir}/searchableOptions.xml")

    classpath() {
      pathelement(location: "$ch/lib/junit.jar")
      project["main"].runtimeClasspath().each {
        pathelement(location: it)
      }
      pathelement(location: "${jdkHome}/lib/tools.jar")
    }
  }
  ant.available(file: "${dest_dir}/searchableOptions.xml", property: "searchableoptions.exists");
  ant.fail(unless: "searchableoptions.exists", message: "${product} searchable options were not built.")
}

def zkmScramble(String script, String dir, String jarName) {
  ant.java(classname: "ZKM", fork: "true", failonerror: "true") {
    jvmarg(value: "-Xmx1100m")
    arg(value: "-v")
    arg(value: script)
    classpath {
      fileset(dir: dir) {
        include(name: "*.jar")
        exclude(name: jarName)
      }

      fileset(dir: "$home/lib") {
        include(name: "*.jar")
      }

      pathelement(location: "$home/build/lib/ZKM.jar")
    }
  }

  ant.delete(file: "$dir/${jarName}.BACKUP", failonerror: "false")
}

def scramble() {
  ant.copy(file: "$home/build/conf/script.zkm.stub", tofile: "$paths.sandbox/script.zkm", overwrite: "true") {
    filterset(begintoken: "__", endtoken: "__") {
      filter(token: "CLASSES", value: "\"${paths.distAll}/lib/flexide.jar\"")
      filter(token: "SCRAMBLED_CLASSES", value: "${paths.distAll}/")
      filter(token: "INCREMENTAL", value: "")
    }
  }
  ant.mkdir(dir: "$paths.artifacts/flexide.unscrambled")
  ant.copy(file: "$paths.distAll/lib/flexide.jar", todir: "$paths.artifacts/flexide.unscrambled")
  zkmScramble("$paths.sandbox/script.zkm", "$paths.distAll/lib", "flexide.jar")
  ant.move(file: "$paths.distAll/flexide.jar", todir: "$paths.distAll/lib")
  ant.zip(destfile: "$paths.artifacts/logs.zip") {
    fileset(file: "ChangeLog.txt")
    fileset(file: "ZKM_log.txt")
    fileset(file: "$paths.sandbox/script.zkm")
  }
  ant.delete(file: "ChangeLog.txt")
  ant.delete(file: "ZKM_log.txt")
}

String appInfoFile() {
  return "$home/out/flex-ide/classes/production/flex-ide/idea/FlexApplicationInfo.xml"
}

void wireBuildDate(String buildName) {
  if (!dryRun) {
    ant.replace(token: "__BUILD_NUMBER__", value: buildName, file: appInfoFile())
    ant.replace(token: "__BUILD_DATE__", value: DSTAMP, file: appInfoFile())
  }
}

def buildExe() {
  if (!isMac()) {
    ant.mkdir(dir: paths.distWin)
    executeExternalAnt(
            "config.file": "$home/flex/build/flex-ide.exe4j",
            "output.file": "flexide.exe",
            "$home/build/buildLauncher.xml")
  }
  else {
    project.warning("Building .exe executable skipped")
  }
}

def layoutLinux(String target) {
  ant.copy(file: "$home/flex/build/flexide.sh", tofile: "$target/bin/flexide.sh", overwrite: true)
  ant.replace(file: "$target/bin/flexide.sh") {
    replacefilter(token: "@@isEap@@", value: isEap())
    replacefilter(token: "@@system_selector@@", value: system_selector)
  }
  ant.copy(file: "$home/flex/build/flexide.exe.vmoptions", tofile: "$target/bin/flexide.vmoptions", overwrite: true)
  ant.fixcrlf(srcDir: "$target/bin", eol: "unix")
}

def buildTarGz() {
  project.stage("tar.gz")
  def tarRoot = isEap() ? "${buildName}" : "${product}-${p("component.version.major")}.${p("component.version.minor")}"
  def tarPath = "$paths.artifacts/${buildName}.tar"
  ant.tar(tarfile: tarPath) {
    tarfileset(dir: paths.distAll, prefix: tarRoot) {
      exclude(name: "**/*.dll")
      exclude(name: "bin/*.sh")
    }
    tarfileset(dir: "$home/bin", prefix: "$tarRoot/bin") {
      include(name: "libyjpagent*.so")
    }
    tarfileset(dir: "$home/community/bin/linux", prefix: "$tarRoot/bin") {
      exclude(name: "libbreakgen*")
    }
    tarfileset(dir: "$home/community/bin/nix", filemode: "755", prefix: "$tarRoot/bin") {
      include(name: "inspect*.sh")
    }
    tarfileset(dir: "$paths.distLinux/bin", filemode: "755", prefix: "$tarRoot/bin") {
      include(name: "flexide.sh")
    }
    // TODO fsnotifier

    tarfileset(dir: "$paths.distLinux/bin", fullpath: "$tarRoot/bin/flexide.vmoptions") {
      include(name: "flexide.vmoptions")
    }
    //tarfileset(dir: "$home/ruby/help", includes: "rubyhelp.jar", prefix: "$tarRoot/help")
    tarfileset(dir: "$home/flex/ideResources/artwork", prefix: "$tarRoot/bin") {
      include(name: "flexide.png")
    }
  }

  ant.gzip(src: tarPath, zipfile: "${tarPath}.gz")
  ant.delete(file: tarPath)
  reportArtifact("${buildName}.tar.gz")
}

def layoutFull(String target, Set usedJars) {
  def implementationModules = [platformImplementationModules(), "flex-ide", "resources", "platform-resources"].flatten()

  def result = layout(target) {
    dir("lib") {
      jar("util.jar") { module("util") }

      jar("openapi.jar") {
        platformApiModules().each { module it}
      }

      jar("annotations.jar") { module("annotations")}
      jar("extensions.jar") { module("extensions")}

      jar("flexide.jar") {
        implementationModules.each {
          module(it) {
            exclude(name: "**/common/**.rb")
            exclude(name: "**/tips/**")
          }
        }
        zipfileset(src: "${home}/lib/client-api.jar")
        zipfileset(src: "${home}/lib/ideaLicenseDecoder.jar")
      }

      jar("bootstrap.jar") { module("bootstrap")}
      jar("resources.jar") {
        //module("platform-resources")
        module("colorSchemes")
      }

      jar("forms_rt.jar") {
        module("forms_rt")
      }

      jar("resources_en.jar") {
        module("platform-resources-en")
        module("resources-en")
        fileset(dir: "$home/flex/ideResources") {
          include(name: "**/tips/**")
          include(name: "**/search/**")
        }
      }

      jar("icons.jar") { module("icons") }
      jar("boot.jar") { module("boot") }

      usedJars.each {
        fileset(file: it)
      }

      fileset(dir: "$home/community/lib/src") {
        include(name: "trove4j_changes.txt")
        include(name: "trove4j_src.jar")
      }
    }

    //dir("help") {
    //  fileset(dir: "$home/ruby/help") {
    //    include(name: "*.pdf")
    //  }
    //}

    //dir("license") {
    //  fileset(dir: "$home/ruby/license")
    //}
    //
    def layouts = includeFile("$home/build/scripts/layouts.gant")
    println("layout plugins\n\n")

    setProperty("buildFlexToolPlugins", true)
    layouts.layoutPlugins()

    dir("bin") {
      fileset(dir: "$home/community/bin") {
        include(name: "*.*")
        exclude(name: "idea.properties")
        exclude(name: "appletviewer.policy")
      }
      fileset(dir: "$home/flex/build") {
        include(name: "idea.properties")
      }
    }
  }

  patchPropertiesFile(target)

  return result
}

private def noResources(String moduleName) {
  module(moduleName) {
    patternset(refid: "resources.excluded")
  }
}

private def resources(List<String> modules) {
  jar("resources_en.jar") {
    modules.each {
      module(it) {
        patternset(refid: "resources.included")
      }
    }
  }
}

def layoutMac(Map args, String target) {
  layout(target) {
    dir("bin") {
      fileset(dir: "$home/bin", includes: "*.jnilib")
    }
  }

  args["buildNumber"] = buildNumber
  args["executable"] = "flexide"
  args["icns"] = "$home/flex/ideResources/artwork/flexide.icns"
  args["bundle_name"] = "FlexIde"
  args["bundleIdentifier"] = "com.jetbrains.flexide"
  args["platform_prefix"] = "Flex"

  layoutMacApp(target, "$home/community", args)

  //ant.copy(file: "$home/ruby/help/rubyhelp_mac.jar", tofile: "$target/help/rubyhelp.jar", failonerror: "false")
}

def layoutWin(String target) {
  layout(target) {
    dir("bin") {
      fileset(dir: "$home/bin") {
        include(name: "yjpagent.dll")
      }
      fileset(dir: "$home/community/bin/win") {
        exclude(name: "breakgen*")
        exclude(name: "idea.bat")

      }
      fileset(dir: "$home/flex/build") {
        include(name: "flexide.bat")
      }
    }
  }

  ant.replace(file: "$target/bin/flexide.bat") {
    replacefilter(token: "@@system_selector@@", value: system_selector)
  }

  //ant.copy(file: "$home/ruby/help/rubyhelp.jar", todir: "$target/help", failonerror: "false")
  ant.copy(file: "$home/flex/build/flexide.exe.vmoptions", tofile: "$target/bin/flexide.exe.vmoptions", overwrite: true)
}

def set(Map args, String key, Object value) {
  if (!args.containsKey(key)) {
    args[key] = value
  }
}

def executeExternalAnt(Map args, String file) {
  set(args, "build.number", buildNumber)
  set(args, "project.home", home)
  set(args, "artifacts.path", paths.artifacts)
  set(args, "dist.win", paths.distWin)
  //set(args, "dist.all", paths.distAll)

  //set(args, "dist.all.15", paths.distAll15)
  //set(args, "dist.all.16", paths.distAll16)
  set(args, "sandbox.path", "$paths.sandbox/sandbox")
  set(args, "component.version.major", getProperty("component.version.major"))
  set(args, "component.version.minor", "\"" + getProperty("component.version.minor") + "\"")

  ant.java(failonerror: "true", classname: "org.apache.tools.ant.Main", fork: "true") {
    args.each { String key, String value ->
      jvmarg(line: "-D$key=$value")
    }

    jvmarg(line: "-Xmx250m")

    classpath {
      fileset(dir: "$home/build/lib") {
        include(name: "commons-net-1.4.1.jar")
        include(name: "jsch-0.1.43.jar")
      }

      fileset(dir: "$ch/lib/ant/lib") {
        include(name: "*.jar")
      }

      fileset(file: "$jdk16/lib/tools.jar")
      fileset(file: "$ch/lib/oromatcher.jar")
    }

    arg(value: "-f")
    arg(value: file)
  }
}

def reportArtifact(fileMask) {
  // Force TC to show artifact on-the-fly
  ant.echo(message: "##teamcity[publishArtifacts '$paths.artifacts/${fileMask}']")
}
