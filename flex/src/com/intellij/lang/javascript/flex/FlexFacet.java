package com.intellij.lang.javascript.flex;

import com.intellij.ProjectTopics;
import com.intellij.facet.Facet;
import com.intellij.facet.FacetManager;
import com.intellij.facet.FacetTypeId;
import com.intellij.idea.LoggerFactory;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.application.ModalityState;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.module.ModuleType;
import com.intellij.openapi.options.ConfigurationException;
import com.intellij.openapi.projectRoots.Sdk;
import com.intellij.openapi.roots.ModifiableRootModel;
import com.intellij.openapi.roots.ModuleRootEvent;
import com.intellij.openapi.roots.ModuleRootListener;
import com.intellij.openapi.roots.ModuleRootManager;
import com.intellij.openapi.roots.ui.configuration.ModuleEditor;
import com.intellij.openapi.roots.ui.configuration.projectRoot.ModuleStructureConfigurable;
import com.intellij.openapi.ui.Messages;
import com.intellij.openapi.util.Condition;
import com.intellij.openapi.util.Key;

import java.util.Collection;

public class FlexFacet extends Facet<FlexFacetConfiguration> {
  public static final FacetTypeId<FlexFacet> ID = new FacetTypeId<FlexFacet>("flex");

  private static final Key<Boolean> LISTENER_REGISTERED_KEY = Key.create("flex.listener.registered.key");

  private static final Logger LOG = LoggerFactory.getInstance().getLoggerInstance(FlexFacet.class.getName());

  public FlexFacet(final Module module, final String name, final FlexFacetConfiguration configuration) {
    super(FlexFacetType.getInstance(), module, name, configuration, null);
  }

  public void initFacet() {
    final Module module = getModule();
    //AutogeneratedLibraryUtils.registerListenerThatRemovesAutogeneratedLibrary(module);
    // a hacky way to give a link to module for FlexBuildConfiguration.
    ((FlexFacetConfigurationImpl)getConfiguration()).getFlexBuildConfiguration().facetInitialized(this);

    final Boolean listenerRegisteredFlag = module.getUserData(LISTENER_REGISTERED_KEY);
    if (listenerRegisteredFlag == null || !listenerRegisteredFlag) {
      module.putUserData(LISTENER_REGISTERED_KEY, Boolean.TRUE);
      module.getMessageBus().connect(module).subscribe(ProjectTopics.PROJECT_ROOTS, new MyModuleRootListener(module));
    }
  }

  public FlexFacetConfiguration getFlexConfiguration() {
    return getConfiguration();
  }

  private static class MyModuleRootListener implements ModuleRootListener {
    private final Module myModule;
    private Sdk myPreviousSdk;
    private boolean myConfiguringMyself;

    public MyModuleRootListener(final Module module) {
      this.myModule = module;
      myPreviousSdk = ModuleRootManager.getInstance(module).getSdk();
    }

    public void beforeRootsChange(final ModuleRootEvent event) {
      // if module inherits project sdk which is changed then there's no way to get sdk before change because following commented line gives new sdk
      //myPreviousSdk = ModuleRootManager.getInstance(myModule).getSdkEntry();
    }

    public void rootsChanged(final ModuleRootEvent event) {
      final ModuleRootManager moduleRootManager = ModuleRootManager.getInstance(myModule);
      final Sdk newSdk = moduleRootManager.getSdk();

      try {
        if (myConfiguringMyself) {
          return;
        }

        if (newSdk != null && newSdk.getSdkType() instanceof IFlexSdkType && !newSdk.equals(myPreviousSdk)) {
          final Collection<FlexFacet> flexFacets = FacetManager.getInstance(myModule).getFacetsByType(ID);

          if (flexFacets.size() == 0) {
            return;
          }

          boolean allFacetsAlreadyHaveThisSdk = allFacetsHaveThisSdk(flexFacets, newSdk);

          if (allFacetsAlreadyHaveThisSdk) {
            showWarning(newSdk);
          }
          else {
            if (ApplicationManager.getApplication().isDispatchThread()) {
              suggestToSetSdkForFacets(flexFacets, newSdk);
            }
          }
        }
      }
      finally {
        myPreviousSdk = newSdk;
      }
    }

    private static boolean allFacetsHaveThisSdk(final Collection<FlexFacet> flexFacets, final Sdk newSdk) {
      boolean allFacetsAlreadyHaveThisSdk = true;
      for (final FlexFacet flexFacet : flexFacets) {
        if (!newSdk.equals(flexFacet.getConfiguration().getFlexSdk())) {
          allFacetsAlreadyHaveThisSdk = false;
          break;
        }
      }
      return allFacetsAlreadyHaveThisSdk;
    }

    private void showWarning(Sdk newSdk) {
      Messages.showWarningDialog(myModule.getProject(),
                                 FlexBundle.message("flex.sdk.set.for.not.flex.module", newSdk.getSdkType().getPresentableName(),
                                                    newSdk.getName(), ModuleType.get(myModule).getName(), myModule.getName()), "Warning");
    }

    private void suggestToSetSdkForFacets(final Collection<FlexFacet> flexFacets, final Sdk newSdk) {
      final StringBuilder facetsInfo = new StringBuilder(flexFacets.size() == 1 ? "facet" : "facets");
      for (final FlexFacet flexFacet : flexFacets) {
        facetsInfo.append(" '").append(flexFacet.getName()).append("',");
      }
      facetsInfo.deleteCharAt(facetsInfo.length() - 1);

      final String message = FlexBundle
        .message("flex.sdk.set.for.not.flex.module.ask", newSdk.getSdkType().getPresentableName(), newSdk.getName(),
                 ModuleType.get(myModule).getName(), myModule.getName(), facetsInfo);
      int choice = Messages.showYesNoDialog(myModule.getProject(), message, "Flex SDK", Messages.getQuestionIcon());
      if (choice == 0) {

        ApplicationManager.getApplication().invokeLater(new Runnable() {
                                                          public void run() {
                                                            final FlexFacet flexFacet =
                                                              FacetManager.getInstance(myModule).getFacetByType(ID);
                                                            if (flexFacet == null) return;

                                                            ApplicationManager.getApplication().runWriteAction(new Runnable() {
                                                              public void run() {
                                                                myConfiguringMyself = true;
                                                                try {
                                                                  final ModifiableRootModel modifiableRootModel =
                                                                    ModuleRootManager.getInstance(myModule).getModifiableModel();
                                                                  flexFacet.getConfiguration().setFlexSdk(newSdk, modifiableRootModel);
                                                                  modifiableRootModel.commit();

                                                                  final ModuleStructureConfigurable moduleStructureConfigurable =
                                                                    ModuleStructureConfigurable.getInstance(myModule.getProject());
                                                                  final ModuleEditor moduleEditor =
                                                                    FlexUtils.getModuleEditor(myModule, moduleStructureConfigurable);
                                                                  if (moduleEditor != null) {
                                                                    try {
                                                                      moduleEditor.canApply();
                                                                      moduleEditor.apply();
                                                                    }
                                                                    catch (ConfigurationException e) {
                                                                      LOG.warn(e);
                                                                    }
                                                                    // update UI
                                                                    moduleEditor.moduleCountChanged();
                                                                    moduleStructureConfigurable.getFacetConfigurator().resetEditors();
                                                                  }
                                                                }
                                                                finally {
                                                                  myConfiguringMyself = false;
                                                                }
                                                              }
                                                            });
                                                          }
                                                        }, ModalityState.current(), new Condition() {
          public boolean value(final Object o) {
            return myModule.isDisposed();
          }
        }
        );
      }
    }
  }
}
