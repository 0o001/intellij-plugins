package com.intellij.lang.javascript.flex.run;

import com.intellij.compiler.options.CompileStepBeforeRun;
import com.intellij.execution.configurations.RunConfiguration;
import com.intellij.execution.configurations.RuntimeConfigurationException;
import com.intellij.lang.javascript.flex.FlexBundle;
import com.intellij.lang.javascript.flex.FlexUtils;
import com.intellij.lang.javascript.flex.actions.airdescriptor.AirDescriptorParameters;
import com.intellij.lang.javascript.flex.actions.airdescriptor.CreateAirDescriptorAction;
import com.intellij.lang.javascript.flex.build.FlexBuildConfiguration;
import com.intellij.lang.javascript.flex.build.FlexCompilerHandler;
import com.intellij.lang.javascript.flex.flexunit.FlexUnitRunConfiguration;
import com.intellij.lang.javascript.flex.sdk.FlexSdkUtils;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.application.ModalityState;
import com.intellij.openapi.compiler.CompileContext;
import com.intellij.openapi.compiler.CompileTask;
import com.intellij.openapi.compiler.CompilerMessageCategory;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.module.ModuleManager;
import com.intellij.openapi.progress.ProgressIndicator;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.Computable;
import com.intellij.openapi.util.Ref;
import com.intellij.openapi.util.text.StringUtil;

import java.io.IOException;

public class RunMainClassPrecompileTask implements CompileTask {
  private final Project myProject;

  public RunMainClassPrecompileTask(final Project project) {
    myProject = project;
  }

  public boolean execute(final CompileContext context) {
    final RunConfiguration runConfiguration = CompileStepBeforeRun.getRunConfiguration(context.getCompileScope());
    if (runConfiguration == null || !isMainClassBasedFlexRunConfiguration(runConfiguration)) return true;
    final FlexRunnerParameters params = ((FlexRunConfiguration)runConfiguration).getRunnerParameters();


    final RuntimeConfigurationException validationError =
      ApplicationManager.getApplication().runReadAction(new Computable<RuntimeConfigurationException>() {
        public RuntimeConfigurationException compute() {
          try {
            runConfiguration.checkConfiguration();
            return null;
          }
          catch (RuntimeConfigurationException e) {
            return e;
          }
        }
      });

    if (validationError != null) {
      context
        .addMessage(CompilerMessageCategory.ERROR, FlexBundle.message("configuration.not.valid", validationError.getMessage()), null, -1,
                    -1);
      return false;
    }

    final Module module = ApplicationManager.getApplication().runReadAction(new Computable<Module>() {
      public Module compute() {
        return ModuleManager.getInstance(myProject).findModuleByName(params.getModuleName());
      }
    });
    assert module != null;

    final String mainClassShortName = StringUtil.getShortName(params.getMainClassName());
    final FlexBuildConfiguration originalConfig = FlexBuildConfiguration.getConfigForFlexModuleOrItsFlexFacets(module).iterator().next();
    final FlexBuildConfiguration buildConfig = originalConfig.clone();

    buildConfig.setType(FlexBuildConfiguration.Type.OverriddenMainClass);
    buildConfig.MAIN_CLASS = params.getMainClassName();
    buildConfig.DO_BUILD = true;
    buildConfig.OUTPUT_TYPE = FlexBuildConfiguration.APPLICATION;
    // '_' symbol is a sort of a marker that it is autogenerated swf file name
    buildConfig.OUTPUT_FILE_NAME = "_" + mainClassShortName + ".swf";

    context.putUserData(FlexCompilerHandler.OVERRIDE_BUILD_CONFIG, buildConfig);

    if (params instanceof AirRunnerParameters) {
      final String airVersion = FlexSdkUtils.getAirVersion(FlexUtils.getFlexSdkForFlexModuleOrItsFlexFacets(module));
      final String applicationId = buildConfig.MAIN_CLASS;
      final String applicationFileName = mainClassShortName;
      final String applicationName = mainClassShortName;
      final String applicationTitle = mainClassShortName;
      final String descriptorFileName = "_" + mainClassShortName + "-air-app.xml";
      final String descriptorFolderPath = buildConfig.getCompileOutputPath();
      final AirDescriptorParameters descriptorParams =
        new AirDescriptorParameters(descriptorFileName, descriptorFolderPath, airVersion, applicationId, applicationFileName,
                                    applicationName, "0.0", buildConfig.OUTPUT_FILE_NAME, applicationTitle, 400, 300,
                                    params instanceof AirMobileRunnerParameters);
      final Ref<IOException> createDescriptorError = new Ref<IOException>();
      Runnable createDescriptorRunnable = new Runnable() {
        public void run() {
          try {
            CreateAirDescriptorAction.createAirDescriptor(descriptorParams);
          }
          catch (IOException e) {
            createDescriptorError.set(e);
          }
        }
      };

      if (ApplicationManager.getApplication().isDispatchThread()) {
        createDescriptorRunnable.run();
      }
      else {
        ProgressIndicator pi = ProgressManager.getInstance().getProgressIndicator();
        ApplicationManager.getApplication()
          .invokeAndWait(createDescriptorRunnable, pi != null ? pi.getModalityState() : ModalityState.NON_MODAL);
      }
      if (!createDescriptorError.isNull()) {
        context.addMessage(CompilerMessageCategory.ERROR, createDescriptorError.get().getMessage(), null, -1, -1);
        return false;
      }

      // A sort of hack. Following 2 fields are disabled in UI for MainClass-based run configuration. But FlexRunner and FlexDebugRunner will use it.
      ((AirRunnerParameters)params).setAirDescriptorPath(descriptorFolderPath + "/" + descriptorFileName);
      ((AirRunnerParameters)params).setAirRootDirPath(descriptorFolderPath);
    }
    else {
      // A sort of hack. HtmlOrSwfFilePath field is disabled in UI for MainClass-based run configuration. But FlexRunner and FlexDebugRunner will use it.
      params.setHtmlOrSwfFilePath(buildConfig.getOutputFileFullPath());
    }
    return true;
  }

  public static boolean isMainClassBasedFlexRunConfiguration(final RunConfiguration runConfiguration) {
    if (runConfiguration instanceof FlexUnitRunConfiguration) {
      return false;
    }
    else if (runConfiguration instanceof AirMobileRunConfiguration) {
      return ((AirMobileRunConfiguration)runConfiguration).getRunnerParameters().getAirMobileRunMode() ==
             AirMobileRunnerParameters.AirMobileRunMode.MainClass;
    }
    else if (runConfiguration instanceof AirRunConfiguration) {
      return ((AirRunConfiguration)runConfiguration).getRunnerParameters().getAirRunMode() == AirRunnerParameters.AirRunMode.MainClass;
    }
    else if (runConfiguration instanceof FlexRunConfiguration) {
      return ((FlexRunConfiguration)runConfiguration).getRunnerParameters().getRunMode() == FlexRunnerParameters.RunMode.MainClass;
    }
    return false;
  }
}
