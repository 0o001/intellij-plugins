<?xml version="1.0" ?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="creationComplete();" width="500" height="375">

    <mx:Script><![CDATA[
        import mx.utils.StringUtil;
        import mx.controls.Alert;

        private const LOCATION_PROTOCOL : String = "flex_qn://";
        private const WARNING_TEST_CASE : String = "flexunit.framework::WarningTestCase";
        private const NO_TESTS_FOUND_WARNING_PREFIX : String = "Warning: No tests found in ";

        private var socket : Socket = new Socket();

        private var testCasesCount : Number;
        private var count : Number = 0;
        private var currentSuiteName : String = null;
        //private var dateFormatter : DateFormatter = new DateFormatter();
        private var testStartedMs : Number;

        private function creationComplete():void {
            //dateFormatter.formatString = "YYYY-MM-DDTJ:NN:SS";
            messageLabel.htmlText = "Connecting to IDEA...";

            socket.addEventListener(Event.CLOSE, socketClosed);
            socket.addEventListener(Event.CONNECT, socketConnected);
            socket.addEventListener(IOErrorEvent.IO_ERROR, socketError);
            socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, socketSecurityError);
            socket.addEventListener(ProgressEvent.SOCKET_DATA, socketData);

            try {
              Security.loadPolicyFile("xmlsocket://localhost:" + getSocketPolicyPort());
              socket.connect("localhost", getPort());
            } catch (e : Error) {
              connectionFailure(e.message);
            }

            messageLabel.htmlText = "Connecting to IDEA...";
        }

        private function socketClosed(event:Event):void {
        }

        private function socketConnected(event:Event):void {
            messageLabel.htmlText = "Executing tests...";
            runTests();
        }

        private function socketError(event:IOErrorEvent):void {
            connectionFailure(event.text);
        }

        private function socketSecurityError(event:SecurityErrorEvent):void {
            connectionFailure(event.text);
        }

        private function socketData(event:ProgressEvent):void {
            var data: String = socket.readUTFBytes(socket.bytesAvailable);
            if ("Finish" == data) {
                doQuit(null);
            }
        }

        private function connectionFailure(text:String):void {
            Alert.show("Failed to connect to IDEA: " + text, "FlexUnit", Alert.OK, this, function():void {
                doQuit(text);
            });
        }

        private function traceRaw(text:String):void {
            if (socket.connected) {
                socket.writeUTF(text);
                socket.flush();
            }
        }

        private static function escape(text:String):String {
            return text.replace(/\|/g, "||")
                    .replace(/'/g, "|'")
                    .replace(/\n/g, "|n")
                    .replace(/\r/g, "|r")
                    .replace(/\]/g, "|]")
                    .replace(String.fromCharCode(0x2028), "|n")
                    .replace(String.fromCharCode(0x2029), "|n");
        }

        private function traceCommand(command:String, param1Name:String, param1Value:String,
                                      param2Name:String = null, param2Value:String = null,
                                      param3Name:String = null, param3Value:String = null):void {
            var line : String = "##teamcity[" + command + " " + param1Name + "='" + escape(param1Value) + "'";
            if (param2Name != null) {
                line += " " + param2Name + "='" + escape(param2Value) + "'";
            }
            if (param3Name != null) {
                line += " " + param3Name + "='" + escape(param3Value) + "'";
            }

            //var date:Date = new Date();
            //var timestamp:String = dateFormatter.format(date) + "." + date.getMilliseconds();
            //line += " timestamp='" + timestamp + "'";
            line += "]";
            traceRaw(line);
        }

        protected virtual function getPort() : Number {
            return 0;
        }

        protected virtual function getSocketPolicyPort() : Number {
            return 0;
        }

        protected virtual function getModule() : String {
            return "";
        }

        protected virtual function runTests() : void {
        }

        protected function onRunStarted(testsCount : Number) : void {
            testCasesCount = testsCount;
            traceCommand("testCount", "count", testsCount.toString());

            if (testsCount == 0) {
                onRunFinished();
            }
        }

        protected function onTestStarted(testInfo:String):void {
            messageLabel.htmlText = StringUtil.substitute("Executing tests: {0} of {1}", count + 1, testCasesCount);
            changeCurrentSuite(testInfo);

            if (currentSuiteName != null && currentSuiteName.search(WARNING_TEST_CASE) == -1) {
                var className: String = getClassName(testInfo);
                var methodName : String = getMethodName(testInfo);
                traceCommand("testStarted", "name", methodName, "locationHint", LOCATION_PROTOCOL + getModule() + ":" + className + "." + methodName + "()");
            }
            testStartedMs = getTimer();
        }

        protected function onTestFinished(testInfo:String):void {
            if (currentSuiteName != null && currentSuiteName.search(WARNING_TEST_CASE) == -1) {
                traceCommand("testFinished", "name", getMethodName(testInfo), "duration", (getTimer() - testStartedMs).toString());
            }
            if (++count == testCasesCount) {
                changeCurrentSuite(null);
                messageLabel.htmlText = "Terminating...";
                onRunFinished();
            }
        }

        protected function onTestIgnored(testInfo:String):void {
            messageLabel.htmlText = StringUtil.substitute("Executing tests: {0} of {1}", count + 1, testCasesCount);
            changeCurrentSuite(testInfo);

            var className: String = getClassName(testInfo);
            var methodName: String = getMethodName(testInfo);
            traceCommand("testStarted", "name", methodName, "locationHint", LOCATION_PROTOCOL + getModule() + ":" + className + "." + methodName + "()");
            traceCommand("testIgnored", "name", methodName, "message", "");
            traceCommand("testFinished", "name", methodName);
        }

        protected function onTestFailed(testInfo:String, message:String, stackTrace:String):void {
            if (currentSuiteName != null && currentSuiteName.search(WARNING_TEST_CASE) == -1) {
                traceCommand("testFailed", "name", getMethodName(testInfo), "message", message, "details", stackTrace);
            }
        }

        protected function onRunFinished():void {
            changeCurrentSuite(null);
            traceRaw("Finish");
            setTimeout(function () {
              doQuit(null);
            }, 100);
        }

        private function doQuit(error:String):void {
            if (socket.connected) {
                socket.close();
            }
            doClose(error);
        }

        private function doClose(error:String):void {
            try {
              closeApp();
            } catch (e: Error) {
              // quit failed (i.e. SWF is opened in browser), prompt user to close
              if (error == null) {
                mainLabel.htmlText = "FlexUnit test run finished. Please close this window.";
                messageLabel.htmlText = "";
              } else {
                mainLabel.htmlText = "Failed to run FlexUnit tests. Please close this window.";
                messageLabel.htmlText = error;
              }
            }
        }


        protected virtual function closeApp():void {
        }

        protected function onLogMessage(message:String):void {
            traceRaw(message);
        }

        private function changeCurrentSuite(newSuite: String) : void {
            if (newSuite == null || newSuite.search(WARNING_TEST_CASE) == -1) {
                var newSuiteName:String = newSuite != null ? getClassName(newSuite) : null;
                if (newSuiteName == currentSuiteName) {
                    return;
                }

                if (currentSuiteName != null) {
                    traceCommand("testSuiteFinished", "name", currentSuiteName);
                }
                currentSuiteName = newSuiteName;

                if (currentSuiteName != null) {
                    traceCommand("testSuiteStarted", "name", currentSuiteName, "locationHint", LOCATION_PROTOCOL + getModule() + ":" + currentSuiteName);
                }
            } else {
                if (currentSuiteName != null) {
                    traceCommand("testSuiteFinished", "name", currentSuiteName);
                }
                currentSuiteName = null;

                var index: Number = newSuite.search(NO_TESTS_FOUND_WARNING_PREFIX);
                if (index != -1) {
                    var className : String = newSuite.substr(index + NO_TESTS_FOUND_WARNING_PREFIX.length).replace("::", ".");
                    traceCommand("testSuiteStarted", "name", className, "locationHint", LOCATION_PROTOCOL + getModule() + ":" + className);
                    traceCommand("testStarted", "name", "(no test)");
                    traceCommand("testIgnored", "name", "(no test)", "message", "no test found");
                    traceCommand("testFinished", "name", "(no test)");
                    traceCommand("testSuiteFinished", "name", className);
                }
            }
        }

        private static function getClassName(classAndMethod: String):String {
            var index : Number = classAndMethod.lastIndexOf(".");
            return classAndMethod.substr(0, index).replace("::", ".");
        }

        private static function getMethodName(classAndMethod: String):String {
            var index : Number = classAndMethod.lastIndexOf(".");
            return classAndMethod.substr(index + 1, classAndMethod.length);
        }

        ]]></mx:Script>

    <mx:Text id="mainLabel" width="100%" height="100%" textAlign="center"
             htmlText="Please don't close this window while IntelliJ IDEA is running FlexUnit tests."/>
    <mx:Text id="messageLabel" width="100%" height="100%" textAlign="center"/>
</mx:Application>