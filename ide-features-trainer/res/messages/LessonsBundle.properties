### Ths file contains strings from lessons.

###############################################################################
## Common lessons
###############################################################################

## Editor basics module

goto.action.lesson.name=Search for actions
goto.action.mac.workaround=\nIf <strong>Terminal</strong> search opens instead of {0}, refer to <a href="{1}">this article</a>.
goto.action.use.find.action=One of the most useful shortcuts is {0}. It lets you search through all available \
  actions without having to know their individual shortcuts. Try it now with {1}.
goto.action.invoke.about.action=Let''s say you want to learn about {0}, type {1} and press {2}.
goto.action.to.return.to.the.editor=Press {0} to return to the editor.
goto.action.invoke.again= You can also use {0} to change the settings, invoke it again now.
goto.action.show.line.numbers.request=Type {0} to see {1} selector.
goto.action.first.lines.toggle=Switch the line numbers {0, choice, 0#off|1#on}.
goto.action.second.lines.toggle=Now switch the line numbers back {0, choice, 0#on|1#off}.
goto.action.propose.to.go.next=Awesome! Click the button below to start the next lesson, or use {0}.

collapse.lesson.name=Collapse
collapse.try.collapse=Sometimes you need to collapse a piece of code for better readability. Try to collapse a code fragment with {0}.
collapse.hit.expand=To expand a code region, press {0}.
collapse.all.collapse=If you want to collapse all regions in the file, press{0}.
collapse.all.expand=Similarly, press {0} to expand all available regions.

duplicate.and.delete.lines.lesson.name=Duplicate and delete lines
duplicate.and.delete.lines.duplicate.line=Duplicate any line with {0}.
duplicate.and.delete.lines.duplicate.several.lines=You can apply the same action to multiple lines too. \
  Simply select two or more lines and duplicate them with {0}.
duplicate.and.delete.lines.delete.line=To delete the current line you can use action {0}.

move.lesson.name=Move
move.pull.down=Rearranging lines usually involves two actions: cut and paste. \
  With {0}, you can do it with just one. Press {1} to pull down the current line.
move.pull.up=Similarly, to pull a line up, press {0}.
move.whole.method.up=Now try to move the whole method up with {0}.
move.whole.method.down=Now move it down with {0}.

multiple.selections.lesson.name=Multiple selections
multiple.selections.select.symbol=Press {0} to select the symbol at the caret.
multiple.selections.select.next.symbol=Press {0} again to select the next occurrence of this symbol.
multiple.selections.deselect.symbol=Press {0} to deselect the last occurrence.
multiple.selections.select.all=Press {0} to select all occurrences in the file.
multiple.selections.replace=Type {0} to replace all occurrences of {1} with {0}.

selection.lesson.name=Expand and shrink the code selection
selection.select.word=Place the caret before any word. Press {0} to move the caret to the next word and select everything in between.
selection.extend.selection=Press {0} to extend the selection to the next code block.
selection.extend.until.whole.file=Try to increase your selection with {0} until your whole file is selected.
selection.shrink.selection={0} shrinks the selection. Try pressing it.

comment.line.lesson.name=Comment line
comment.line.comment.any.line=Comment out any line with {0}.
comment.line.uncomment.that.line=Uncomment the commented line with the same shortcut, {0}.
comment.line.comment.several.lines=Select several lines and then comment them with {0}.

surround.and.unwrap.lesson.name=Surround and unwrap
surround.and.unwrap.invoke.surround=Press {0} to surround the selected code fragment with some template code.
surround.and.unwrap.choose.surround.item=Choose {0} item.
surround.and.unwrap.invoke.unwrap=Let''s return to the initial file with the unwrapping action by {0}.
surround.and.unwrap.choose.unwrap.item=Choose {0} item.

## Completion module

basic.completion.lesson.name=Basic completion
basic.completion.start.typing=By default, {0} proposes completion for your code instantly. \
  Start typing {1} right where the caret is, and you will see the Lookup Menu with matching suggestions.
basic.completion.continue.typing=Continue typing {0} unless it becomes the first item.
basic.completion.just.press.to.complete=Now just press {0} to complete this statement.
basic.completion.activate.explicitly=To activate Basic Completion explicitly, press {0}.
basic.completion.finish.explicit.completion=Select {0} and press {1}.

completion.with.tab.lesson.name=Completion with tab
completion.with.tab.begin.completion=Press {0} to show completion options.
completion.with.tab.finish.with.tab=Choose {0}, for example, and press {1}. \
  This replaces the word at the caret rather than simply inserts it.

postfix.completion.lesson.name=Postfix completion
postfix.completion.type.template={0} can offer postfix shortcuts. Type {1}.

rename.lesson.name=Rename

refactoring.menu.lesson.name=Refactoring menu
refactoring.menu.show.refactoring.list={0} supports a variety of refactorings. Many of them have own shortcuts. \
  But for rare refactorings you can press {1} and preview a partial list of them.
refactoring.menu.introduce.parameter=Suppose we want to replace this expression with a parameter. So we need to choose {0}. \
  Now simply type <strong>pa</strong> (introduce <strong>pa</strong>rameter) or \
  <strong>ip</strong> (<strong>i</strong>ntroduce <strong>p</strong>arameter) to reduce the proposed list.
refactoring.menu.start.refactoring=Press {0} to start the {1} refactoring. \
  <strong>Note</strong> that you can learn refactoring shortcuts from the Refactoring menu.
refactoring.menu.finish.refactoring=To complete refactoring, you need to choose some name or leave it as default and press {0}.

## Navigation module

declaration.and.usages.lesson.name=Declaration and usages
declaration.and.usages.jump.to.declaration=Press {0} to jump to the declaration of {1, choice, 0#a method|1#an attribute accessor}.
declaration.and.usages.show.usages=Now the caret is at the {0, choice, 0#method|1#attribute accessor} declaration. \
  Use the same shortcut {1} to see all of its usages, then select one of them.
declaration.and.usages.find.usages=Press {0} to see a more detailed view of usages. You can invoke {0} on either a declaration or usage.
declaration.and.usages.pin.motivation=From the {0} view you can navigate to both usages and declarations. \
  The next search will override these results in the {0} view. To prevent it, pin the results:
declaration.and.usages.right.click.tab=Right click the tab title, {0}.
declaration.and.usages.select.pin.item=Select {0}.
declaration.and.usages.hide.view=When you have finished browsing usages, press {0} to hide the view.
declaration.and.usages.open.find.view=Press {0} to open the {1} view again.

file.structure.lesson.name=File structure
file.structure.open.popup=A large source file can be difficult to read and navigate, sometimes you only need to preview it. \
  Press {0} to open the file structure.
file.structure.request.prefixes=Suppose you want to find some method with {0} and {1} words in its name. \
  Type {2} (prefixes of the required words) to filter file structure.
file.structure.navigate=Only one item remains. Now press {0} to jump to the selected item.
file.structure.toolwindow={0} can also show you the file structure as a tool window. Open it with {1}.

extract.method.lesson.name=Extract method
extract.method.invoke.action=Press {0} to extract the selected code block into a method.
extract.method.start.refactoring=Click {0} to start refactoring.
extract.method.confirm.several.replaces=Cocktail Sort has two swap places. The first fragment has just been extracted. \
  Click {0} to extract both of them.
extract.method.second.fragment=Now you can confirm or reject the replacement of the second fragment.

extract.variable.lesson.name=Extract variable
extract.variable.start.refactoring=Press {0} to extract a local variable from the selected expression {1}.
extract.variable.replace.all=This code block contains 3 occurrences of the selected expression. \
  Choose the second item on the list to replace all of them.
extract.variable.choose.name=Choose a name for the new variable or leave it as it is. Press {0} to complete the refactoring.

## Run/Debug module

run.configuration.lesson.name=Run configuration
run.configuration.hide.toolwindow={0} automatically opened the {1} tool window. \
  Tip: at the top of the {1} tool window you can see the full run command. Now let''s hide the tool window with {2}.
run.configuration.temporary.to.permanent=For each new run {0} create temporary run configuration. \
  Temporary configurations are automatically deleted if the default limit of five is reached. \
  Let''s convert the temporary configuration into a permanent one. Open the drop-down menu with run configurations.
run.configuration.select.save.configuration=Select {0}.
run.configuration.edit.configuration=Suppose you want to change a configuration or create another one manually. \
  Then you need to open the drop-down menu again and click {0}. Alternatively you can use {1} action.
run.configuration.settings.description=This is a place for managing run/debug configurations. \
  You can set here program parameters, JVM arguments, environment variables, and so on.
run.configuration.tip.about.save.configuration.into.file=Tip:  Sometimes you may want to save a configuration to its own file. \
  Such configurations will be easy to share between colleagues (usually by the version control system). \
  Now close the settings dialog to finish this lesson.

debug.workflow.lesson.name=Debug workflow
debug.workflow.incorrect.breakpoints=Breakpoints are set incorrectly for this lesson.
debug.workflow.run.program=Before debugging let''s run the program and see what is going wrong {0}.
debug.workflow.toggle.breakpoint=So, there is a problem. Let''s start investigation with placing breakpoint. \
  To toggle a breakpoint you should click left editor gutter or just press {0}.
debug.workflow.start.debug=To start debug selected run configuration, click {0} or press {1}.
debug.workflow.return.to.editor=Many trace actions will focus debug toolwindow. Let''s return to the editor with {0}.
debug.workflow.use.watches={0} has several ways to show variable values. For this step, we selected the call. Let''s add it to {1}. \
  You can copy the expression into the clipboard, click {2} button on the debug panel and paste the copied text. \
  Alternatively, you can just use action {3} {4}.
debug.workflow.consider.to.add.a.shortcut=(consider to assign a shortcut for it later)
debug.workflow.step.into=Lets step into. You can use action {0} or the button {1} at the debug panel.
debug.workflow.choose.method.to.step.in=In most cases you will want to skip argument calculating so Smart Step Into feature suggest by \
  default the wrapping method. However, here we need to choose the second one: {0}. \
  You can choose it by keyboard {1} and press {2}, or you can click the call.
debug.workflow.quick.evaluate=Let''s see what we are going to pass to {0}. Invoke Quick Evaluate Expression {1} for the selected argument.
debug.workflow.fix.error=Oh, we made a mistake in the array index! Let''s fix it right now. Close popup ({0}) and change 0 to 1.
debug.workflow.step.over=Let''s check that the call of {0} will not throw an exception now. Use Step Over action {1} or click the button {2}.
debug.workflow.mute.breakpoints=Ups, the same breakpoint again. Now we don''t need to stop at this breakpoint. \
  So, let''s mute breakpoints by clicking the button {0} or with the  action {1}.
debug.workflow.run.to.cursor=Let''s check the result of {0}. We''ve moved the editor cursor to the {1} statement. \
  Let''s use {2} or click {3}. Note that {4} works even if breakpoints are muted.
debug.workflow.evaluate.expression=It seems the {0} is not an average value we want to find. We forgot to divide by length. \
  Seems we need to return {1}. Let''s check the guess. Press {2} or click button {3}.
debug.workflow.type.result=Type {0} into the {1} field, completion works.
debug.workflow.evaluate.it=Press {0} or click {1}.
debug.workflow.stop.debug=It will be a correct answer! Lets close the dialog and stop debugging by {0} or button {1}.
debug.workflow.resume=Seems there are no exceptions by now. Let''s continue execution with {0} or click the button {1}.

###############################################################################
## Java lessons
###############################################################################

java.basic.completion.choose.first=You can choose the first item from the Lookup menu by pressing {0}.
java.basic.completion.activate=To activate Basic Completion, press {0} and you will see the lookup menu again.
java.basic.completion.choose.item=Select {0} inside the lookup menu and press {1}.
java.basic.completion.complete=Press {0} to complete this statement.
java.basic.completion.deeper.level=Sometimes you need to see suggestions for static constants or methods. \
  Press {0} twice to access extended Code Completion.

java.run.configuration.lets.run=Any code marked with {0} can be run. Let''s run our simple example with {1}. \
  Alternatively, you can click {0} and select the {2} item.

java.postfix.completion.apply=Postfix Completion helps reduce backward caret jumps as you write code. \
  It lets you transform an already typed expression into another one based on the postfix you add, the type of expression, and its context. \
  Type {0} after the parenthesis to see the list of postfix completion suggestions. \
  Select {1} from the list, or type it in the editor, and then press {2} to complete the statement.

java.smart.type.completion.lesson.name=Smart type completion
java.smart.type.completion.apply=Smart Type Completion filters the list of suggestion to include only those types that are applicable \
  within the current context. Press {0} to see the list of matching suggestions. Choose the first one by pressing {1}.
java.smart.type.completion.return=Smart Type Completion can also suggest code for a return statement. \
  Press {0} twice to see the Lookup menu for a return. Choose the first one by pressing {1}

java.statement.completion.lesson.name=Statement completion
java.statement.completion.complete.for=Press {0} to complete the {1} statement.
java.statement.completion.complete.if=Type {0} and press {1} to generate the statement.
java.statement.completion.complete.condition=Add a condition inside parentheses {0} and press {1} to jump inside the {2} statement.
java.statement.completion.complete.finish.body=Type on one line: {0} and then press {1} to complete the entered statement and apply formatting.

java.rename.press.rename=Press {0} to rename field {1}.
java.rename.type.new.name=Type the new name for this field (e.g., {0}) and press {1}.
java.rename.confirm.accessors.rename={0} is detecting corresponding getters/setters and proposes to rename them accordingly.\
  Now just press {1} or click {2}

java.refactoring.menu.inline.variable=Now let''s inline variable {0} into the only use. You can press {1} and filter by <strong>iv</strong> (<strong>i</strong>nline <strong>v</strong>ariable). Or just press {2}.
java.refactoring.menu.introduce.constant=In the end, let''s extract extension from file name. Again, you can press {0} and filter by <strong>ic</strong> (<strong>i</strong>ntroduce <strong>c</strong>onstant). Or just press {1}.
java.refactoring.menu.confirm.constant=In this dialog you can choose the name, the parent and visibility for the new constant. You can leave proposed defaults and press {0} or click {1}.

java.debug.workflow.rebuild=For big programs rerun can take much time. When you find some mistake in pure method you can just rebuild \
  the project and apply <strong>Hot Swap</strong> JVM feature. Let''s build project: {0} or {1}.
java.debug.workflow.confirm.hot.swap=Confirm <strong>Hot Swap</strong> replacement.
java.debug.workflow.drop.frame=We patched our method, but right now we are still executing old obsolete {0} and it will throw the \
  exception again. Let''s drop the frame and return to the state before {1} call. Click {2} at the debug panel or press {3}.

###############################################################################
## Python lessons
###############################################################################

python.f.string.completion.lesson.name=F-string completion
python.f.string.completion.type.prefix={0} supports automatic f-string conversion. Just start to type {1}.
python.f.string.completion.invoke.manually=You can invoke completion manually with {0}.
python.f.string.completion.complete.it=Complete the statement with {0}. Just press {1} to apply the first item.
python.f.string.completion.result.message=You may see that a simple Python string was replaced by f-string after the completion.

python.postfix.completion.select.item=Select {0} item from completion list.

python.smart.completion.lesson.name=Smart completion
python.smart.completion.try.basic.completion=Try to use Basic Completion by pressing {0}.
python.smart.completion.use.smart.completion=Unfortunately {0} has no direct information about {1} type. \
  But sometimes it can guess completion by the context! Use {2} to invoke Smart Completion.
python.smart.completion.finish.completion=Now just choose {0} item to finish this lesson.

python.tab.completion.lesson.name=Tab completion
python.tab.completion.start.completion=Suppose you want to replace {0} with {1}. Invoke completion by pressing {2}.
python.tab.completion.select.item=Select item {0} by keyboard arrows or just start typing it.
python.tab.completion.use.tab.completion=If you press {0} you will insert {1} before {2}. Instead press {3} to replace {2} with {1}.

python.search.everywhere.lesson.name=Search everywhere
python.search.everywhere.invoke.search.everywhere=To open {0} you need to press {1} two times in a row.
python.search.everywhere.type.prefixes=Suppose you are looking for a class with {0} and {1} words in the name. \
  Type {2} (prefixes of required words) to the search field.
python.search.everywhere.preview=We found {0}. Now you can preview the found item. Just select it by keyboard arrows and press {1}.
python.search.everywhere.navigate.to.class=Press {0} to navigate to {1}.
python.search.everywhere.goto.class=Use {0} to find class faster or in special places.
python.search.everywhere.type.node.visitor=Suppose you need some library class responsible for visiting nodes. Type {0}.
python.search.everywhere.use.all.places=Now you see a class inside this demo project. \
  Let''s switch {0} filter to {1} and you will see available libraries.
python.search.everywhere.quick.documentation=Press {0} to preview available documentation.
python.search.everywhere.finish=<strong>Done!</strong> In the same way you can use {0} to look for a method or global variable and use {1} \
  to look for a file.

python.in.place.refactoring.lesson.name=In-place refactoring
python.in.place.refactoring.start.type.new.name=Let''s consider an alternative approach to performing refactorings. \
  Suppose we want to rename local variable {0} to {1}. Just start typing the new name.
python.in.place.refactoring.invoke.intentions={0} is guessing that you are going to rename the variable. \
  You can notice it by the icon {1} in the left editor gutter. Invoke intentions by {2} when you finish typing the new name.
python.in.place.refactoring.finish.rename=Press {0} to finish rename.
python.in.place.refactoring.add.parameter=Let''s add an argument to this method. We place the editor caret just after the first parameter. \
  Now type comma and parameter''s name: {0}.
python.in.place.refactoring.invoke.intention.for.parameter={0} is guessing that you are going to change the method signature. \
  You can notice it by the same icon {1} at the left editor gutter. Invoke intentions by {2} when you finish typing the new parameter.
python.in.place.refactoring.update.callers=Press {0} to update the callers.
python.in.place.refactoring.signature.preview={0} is showing you the short signature preview. Press {1} to continue.
python.in.place.refactoring.set.default.value=Now you need to type the value which will be inserted as an argument into each call. \
  You can choose {0} for this sample. Then press {1} to continue.
python.in.place.refactoring.remark.about.application.scope=Note: In-place refactoring may be applied only in the \
  definition point whiles direct invocation of rename or change-signature refactorings may be called from both definition and usage.

python.quick.fix.refactoring.lesson.name=Quick fix refactoring
python.quick.fix.refactoring.type.new.argument=Several refactorings can be performed as quick fixes. \
  Suppose we want to add a parameter to the method {0} and pass the variable {1} to it. Let''s type {2} after the first argument.
python.quick.fix.refactoring.wait.completion.showed=Wait a little bit for the completion list...
python.quick.fix.refactoring.close.completion.list=For now, we don''t want to apply any completion. Close the list ({0}).
python.quick.fix.refactoring.invoke.intentions=As you may notice, {0} is showing you a warning here. Let''s invoke intentions by {1}.
python.quick.fix.refactoring.choose.change.signature=Choose {0} quick fix.
python.quick.fix.refactoring.select.new.parameter=Let''s set the default value for the new parameter. Click the new parameter line. \
  Alternatively, you can set focus to the parameter without a mouse by {0} and then {1}.
python.quick.fix.refactoring.set.default.value=You may navigate through the fields (and the checkbox) by using {0}. \
  With the checkbox, you can let {1} inline the default value to the other callers or set it as the default value for the new parameter. \
  The Signature Preview will help you understand the difference. Now set the default value as 0.
python.quick.fix.refactoring.finish.refactoring=Press {0} (or click {1}) to finish the refactoring.

python.rename.press.rename=Press {0} to rename field {1} (e.g., to {2}).
python.rename.expand.dynamic.references=In simple cases {0} will just rename without confirmation. \
  But in this sample, {0} detects two calls of {1} method for objects with unknown types. Expand {2} item.
python.rename.exclude.item=It seems {0} should be excluded from rename. Select it and press {1}.
python.rename.finish.refactoring=Now just finish the rename with the {0} button.

python.run.configuration.lets.run=Let''s run our simple example with {0}.

python.debug.workflow.rerun=Let''s rerun our program. Just click again at {0} or use {1}.

###############################################################################
## Ruby lessons
###############################################################################

ruby.hippie.completion.lesson.name=Hippie Completion
ruby.hippie.completion.invoke.hippie.completion=Sometimes you need to complete a word by textual similarity. \
  Press {0} to invoke hippie completion.
ruby.hippie.completion.repeat.one.time=You can repeat {0} until the desired word is found. Try it once more now.
ruby.hippie.completion.return.previous=You can return to the previous variant with {0}. Use it now.

ruby.postfix.completion.apply=Now just press {0} to choose the first postfix template.
ruby.postfix.completion.choose.target=Now choose the second item, {0}.

ruby.class.search.lesson.name=Class Search
ruby.class.search.invoke.goto.class=Try to find a class with {0}.
ruby.class.search.type.word=Type {0} to see classes that contain the word {1}.
ruby.class.search.type.second.prefix=You can search for a class by part of its name. \
  Type {0} (the search string will be {1}) to see classes that contain the words {2} and {3}.
ruby.class.search.preview=To check the selected class before navigating to it, you can use {0} to see its quick definition.
ruby.class.search.navigate.to.target=Suppose you are looking for {0}. Choose it and then press {1} to navigate.

ruby.refactoring.menu.invoke.refactoring.list={0} supports a variety of refactorings. Press {1} to see a partial list of them.
ruby.refactoring.menu.use.push.method.down=Some refactorings are seldom used and have no shortcuts, but you can find them here. \
  Choose {0} now and complete the refactoring on {1}.

ruby.rename.start.refactoring=Press {0} to rename the attribute accessor {1} (for example, to {2}).
ruby.rename.confirm=In order to be confident about the refactoring, {0} lets you preview it before confirming. \
  Click {1} to complete the refactoring.
