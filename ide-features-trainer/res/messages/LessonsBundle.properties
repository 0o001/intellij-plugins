### Ths file contains strings from lessons.

###############################################################################
## Common lessons
###############################################################################

## Essential module
essential.module.name=Essential
essential.module.description=Catch the most essential capabilities of {0}

context.actions.lesson.name=Context Actions
context.actions.invoke.intentions.for.warning=In many cases, <ide/> can guess your <strong>intention</strong> or suggest you a fix for a \
  warning or an error. Let''s invoke one of the most useful actions, {0}. Press {1}.
context.actions.fix.warning=Let''s apply the first quick-fix to this warning: {0}.
context.actions.invoke.general.intentions=<ide/> knows a lot about intentions! Try to invoke {0} every time you think there might be a \
  good solution or intention. You will save a lot of time and make the coding process much more fun! Now let''s look what we can apply to \
  the piece of code where the caret is. Press {1} again.
context.actions.apply.intention=Let''s apply the {0} intention.
context.actions.refactorings.promotion=Note that a lot of useful refactorings are not available with the help of {0}. \
  Go to the {1} module to learn how to invoke and use them.

## Editor basics module
editor.basics.module.name=Editor basics
editor.basics.module.description=Add, delete, select, move, and duplicate your code with smart shortcuts.

goto.action.lesson.name=Search for actions
goto.action.mac.workaround=\nIf <strong>Terminal</strong> search opens instead of {0}, refer to <a href="{1}">this article</a>.
goto.action.use.find.action=One of the most useful shortcuts is {0}. It lets you search through all available \
  actions without having to know their individual shortcuts. Try it now with {1}.\n\
  Alternatively, you can invoke {2} by pressing {3} two times in a row. By using {2}, you can look for your project code entities \
  <strong>and</strong> other IDE objects at the same time. It is up to you what to use.
goto.action.invoke.about.action=Let''s say you want to learn about <ide/>, type {0} and press {1}.
goto.action.to.return.to.the.editor=Press {0} to return to the editor.
goto.action.invoke.again=Also, you can use {0} or double {1} to change the settings. Try to invoke it again.
goto.action.show.line.numbers.request=Type {0} to see {1} selector.
goto.action.first.lines.toggle=Switch the line numbers {0, choice, 0#off|1#on}.
goto.action.second.lines.toggle=Now switch the line numbers back {0, choice, 0#on|1#off}.
goto.action.propose.to.go.next.new.ui=Awesome! Just press {0} or click the button below to start the next lesson.
# This message will be removed soon
goto.action.propose.to.go.next=Awesome! Click the button below to start the next lesson.

collapse.lesson.name=Collapse
collapse.try.collapse=Sometimes you need to collapse a piece of code for better readability. Try to collapse a code fragment with {0}.
collapse.hit.expand=To expand a code region, press {0}.
collapse.all.collapse=If you want to collapse all regions in the file, press{0}.
collapse.all.expand=Similarly, press {0} to expand all available regions.

duplicate.and.delete.lines.lesson.name=Duplicate and delete lines
duplicate.and.delete.lines.duplicate.line=Duplicate any line with {0}.
duplicate.and.delete.lines.duplicate.several.lines=You can apply the same action to multiple lines too. \
  Simply select two or more lines and duplicate them with {0}.
duplicate.and.delete.lines.delete.line=To delete the current line you can use action {0}.

move.lesson.name=Move
move.pull.down=Rearranging lines usually involves two actions: cut and paste. \
  With <ide/>, you can do it with just one. Press {0} to pull down the current line.
move.pull.up=Similarly, to pull a line up, press {0}.
move.whole.method.up=Now try to move the whole method up with {0}.
move.whole.method.down=Now move it down with {0}.

multiple.selections.lesson.name=Multiple selections
multiple.selections.select.symbol=Press {0} to select the symbol at the caret.
multiple.selections.select.next.symbol=Press {0} again to select the next occurrence of this symbol.
multiple.selections.deselect.symbol=Press {0} to deselect the last occurrence.
multiple.selections.select.all=Press {0} to select all occurrences in the file.
multiple.selections.replace=Type {0} to replace all occurrences of {1} with {0}.

selection.lesson.name=Expand and shrink the code selection
selection.select.word=Place the caret before any word. Press {0} to move the caret to the next word and select everything in between.
selection.extend.selection=Press {0} to extend the selection to the next code block.
selection.extend.until.whole.file=Try to increase your selection with {0} until your whole file is selected.
selection.shrink.selection={0} shrinks the selection. Try pressing it.

comment.line.lesson.name=Comment line
comment.line.comment.any.line=Comment out any line with {0}.
comment.line.uncomment.that.line=Uncomment the commented line with the same shortcut, {0}.
comment.line.comment.several.lines=Select several lines and then comment them with {0}.

surround.and.unwrap.lesson.name=Surround and unwrap
surround.and.unwrap.invoke.surround=Press {0} to surround the selected code fragment with some template code.
surround.and.unwrap.choose.surround.item=Choose {0} item.
surround.and.unwrap.invoke.unwrap=Let''s return to the initial file with the unwrapping action by {0}.
surround.and.unwrap.choose.unwrap.item=Choose {0} item.
surround.and.unwrap.help.surround.code.fragments=Surround code fragments
surround.and.unwrap.help.unwrapping.and.removing.statements=Unwrapping and removing statements

## Completion module
code.completion.module.name=Code completion
code.completion.module.description=Let the IDE complete your code. Try basic, smart, and other types of completion.

basic.completion.lesson.name=Basic completion
basic.completion.start.typing=By default, <ide/> proposes completion for your code instantly. \
  Start typing {0} right where the caret is, and you will see the Lookup Menu with matching suggestions.
basic.completion.continue.typing=Continue typing {0} unless it becomes the first item.
basic.completion.just.press.to.complete=Now just press {0} to complete this statement.
basic.completion.activate.explicitly=To activate Basic Completion explicitly, press {0}.
basic.completion.finish.explicit.completion=Select {0} and press {1}.

completion.with.tab.lesson.name=Completion with tab
completion.with.tab.begin.completion=Press {0} to show completion options.
completion.with.tab.finish.with.tab=Choose {0}, for example, and press {1}. \
  This replaces the word at the caret rather than simply inserts it.

postfix.completion.lesson.name=Postfix completion
postfix.completion.type.template=<ide/> can offer postfix shortcuts. Type {0}.

## Refactoring module
refactorings.module.name=Refactorings
refactorings.module.description=Make your code neat with rename, extract, and other types of refactorings.

rename.lesson.name=Rename

refactoring.menu.lesson.name=Refactoring menu
refactoring.menu.show.refactoring.list=<ide/> supports a variety of refactorings. Many of them have own shortcuts. \
  But for rare refactorings you can press {0} and preview a partial list of them.
refactoring.menu.introduce.parameter=Suppose we want to replace this expression with a parameter. So we need to choose {0}. \
  Now simply type <strong>pa</strong> (introduce <strong>pa</strong>rameter) or \
  <strong>ip</strong> (<strong>i</strong>ntroduce <strong>p</strong>arameter) to reduce the proposed list.
refactoring.menu.start.refactoring=Press {0} to start the {1} refactoring. \
  <strong>Note</strong> that you can learn refactoring shortcuts from the Refactoring menu.
refactoring.menu.finish.refactoring=To complete refactoring, you need to choose some name or leave it as default and press {0}.

## Code Assistance module
code.assistance.module.name=Code assistance
code.assistance.module.description=Learn how to format you code, obtain parameter info, and preview quick popups.

code.format.lesson.name=Code Format
code.format.reformat.selection=IDE can help you correct code formatting with just one action. \
 to reformat the selected code fragment with {0}.
code.format.reformat.file=To reformat the whole file when no lines are selected, use {0}.
code.format.show.reformat.file.dialog=Use {0} to show reformat settings.
code.format.optimize.imports=Here you can configure reformat options. For example, switch {0} on and click {1}.

parameter.info.lesson.name=Parameter Info
parameter.info.use.action=Press {0} to see the method signature.
parameter.info.add.parameters=Use a width of {0} and a height of {1}.

quick.popups.lesson.name=Quick Popups
quick.popups.show.documentation=Press {0} to see documentation for the symbol at the caret.
quick.popups.press.escape=Press {0} to close the popup.
quick.popups.show.implementation=Press {0} to see the definition of the symbol at the caret.

editor.coding.assistance.lesson.name=Editor Coding Assistance
editor.coding.assistance.goto.next.error=Press {0} to go to the next highlighted error in the file.
editor.coding.assistance.show.error.description=Also, you can show error description of the item at the caret using {0}.
editor.coding.assistance.show.intention=Lets fix this error! Press {0} and select {1}.
editor.coding.assistance.highlight.usages=Another useful tool is usages highlighting. \
  Press {0} to highlight all usages of the symbol at the caret within the file.

## Navigation module
navigation.module.name=Navigation
navigation.module.description=Jump to source, navigate to declaration, implementation, and file structure.

declaration.and.usages.lesson.name=Declaration and usages
declaration.and.usages.jump.to.declaration=Press {0} to jump to the declaration of a method.
declaration.and.usages.show.usages=Now the caret is at the method declaration. \
  Use the same shortcut {0} to see all of its usages, then select one of them.
declaration.and.usages.find.usages=Press {0} to see a more detailed view of usages. You can invoke {0} on either a declaration or usage.
declaration.and.usages.pin.motivation=From the {0} view you can navigate to both usages and declarations. \
  The next search will override these results in the {0} view. To prevent it, pin the results:
declaration.and.usages.right.click.tab=Right click the tab title, {0}.
declaration.and.usages.select.pin.item=Select {0}.
declaration.and.usages.hide.view=When you have finished browsing usages, press {0} to hide the view.
declaration.and.usages.open.find.view=Press {0} to open the {1} view again.

file.structure.lesson.name=File structure
file.structure.open.popup=A large source file can be difficult to read and navigate, sometimes you only need to preview it. \
  Press {0} to open the file structure.
file.structure.request.prefixes=Suppose you want to find some method with {0} and {1} words in its name. \
  Type {2} (prefixes of the required words) to filter file structure.
file.structure.navigate=Only one item remains. Now press {0} to jump to the selected item.
file.structure.toolwindow=<ide/> can also show you the file structure as a tool window. Open it with {0}.

recent.files.lesson.name=Recent Files and Locations
recent.files.first.transition=Wondering how the {0} method is implemented? Let''s go to its declaration using {1}.
recent.files.dialog.message=We want to simulate a basic workflow: quick navigation between files. \
  Please don't move the mouse until we stop.
recent.files.dialog.title=Workflow Simulation
recent.files.show.recent.files=We dived deeply into the library files. How can we get back to our file? IDE has a feature that can help us \
  to show recently opened files. Use {0}.
recent.files.search.typing=You can search the file by its name. Type {0} (prefixes of the required words).
recent.files.search.jump=Only one file remains. Now press {0} to jump to the selected file.
recent.files.use.recent.files.again=We are back to our file. But let''s show recent files again using {0}.
recent.files.delete=This list contains many source files that we no longer want to visit. Let''s delete them from \
  our recent files history using {0}.
recent.files.close.popup=Now the history of our recent files is more cleaner. Click on the editor to close the popup or use {0}.
recent.files.show.recent.locations=Another useful action can show you code in recently visited locations. Use {0}.
recent.files.locations.search.typing=Here you can search by code fragments that you remember. Type {0}
recent.files.locations.search.jump=Now press {0} to jump to the selected code fragment.

search.everywhere.lesson.name=Search everywhere
search.everywhere.invoke.search.everywhere=To open {0} you need to press {1} two times in a row.
search.everywhere.type.prefixes=Suppose you are looking for a class with {0} and {1} words in the name. \
  Type {2} (prefixes of the required words) to the search field.
search.everywhere.navigate.to.class=Select {0} by keyboard arrows and press {1} to jump to the definition of this class.
search.everywhere.goto.class=Great! But sometimes it can be inconvenient to see files, classes, and variables in the search tool window. \
  Use {0} to find only classes and search only in special places.
search.everywhere.type.class.name=Suppose you need some library class responsible for buffered reading from input stream. \
  Type {0} (prefixes of the required words). But do not navigate to it yet!
search.everywhere.use.all.places=Now you see a class inside this demo project. However, we need to find it''s implementation in libraries. \
  Let''s switch {0} filter to {1} and you will see the content of available libraries.
search.everywhere.quick.documentation=Press {0} to preview available documentation.
search.everywhere.finish=<strong>Done!</strong> In the same way you can use {0} to look for a method or global variable and use {1} \
  to look for a file.
search.everywhere.navigation.promotion=You will find other navigation actions and workflow use cases in the {0} module.

extract.method.lesson.name=Extract method
extract.method.invoke.action=Press {0} to extract the selected code block into a method.
extract.method.start.refactoring=Click {0} to start refactoring.
extract.method.confirm.several.replaces=Cocktail Sort has two swap places. The first fragment has just been extracted. \
  Click {0} to extract both of them.
extract.method.second.fragment=Now you can confirm or reject the replacement of the second fragment.

extract.variable.lesson.name=Extract variable
extract.variable.start.refactoring=Press {0} to extract a local variable from the selected expression {1}.
extract.variable.replace.all=This code block contains 3 occurrences of the selected expression. \
  Choose the second item on the list to replace all of them.
extract.variable.choose.name=Choose a name for the new variable or leave it as it is. Press {0} to complete the refactoring.

## Run/Debug module
run.debug.module.name=Run and debug
run.debug.module.description=Run your code and fix errors with the IDE visual debugger.

run.configuration.lesson.name=Run configuration
run.configuration.hide.toolwindow=<ide/> automatically opened the {0} tool window. \
  Tip: at the top of the {0} tool window you can see the full run command. Now let''s hide the tool window with {1}.
run.configuration.temporary.to.permanent=For each new run <ide/> create temporary run configuration. \
  Temporary configurations are automatically deleted if the default limit of five is reached. \
  Let''s convert the temporary configuration into a permanent one. Open the drop-down menu with run configurations.
run.configuration.select.save.configuration=Select {0}.
run.configuration.edit.configuration=Suppose you want to change a configuration or create another one manually. \
  Then you need to open the drop-down menu again and click {0}. Alternatively you can use {1} action.
run.configuration.settings.description=This is a place for managing run/debug configurations. \
  You can set here program parameters, JVM arguments, environment variables, and so on.
run.configuration.tip.about.save.configuration.into.file=Tip:  Sometimes you may want to save a configuration to its own file. \
  Such configurations will be easy to share between colleagues (usually by the version control system). \
  Now close the settings dialog to finish this lesson.

debug.workflow.lesson.name=Debug workflow
debug.workflow.incorrect.breakpoints=Breakpoints are set incorrectly for this lesson.
debug.workflow.run.program=Before debugging let''s run the program and see what is going wrong {0}.
debug.workflow.toggle.breakpoint=So, there is a problem. Let''s start investigation with placing breakpoint. \
  To toggle a breakpoint you should click left editor gutter or just press {0}.
debug.workflow.start.debug=To start debug selected run configuration, click {0} or press {1}.
debug.workflow.need.restart.lesson=Debug session has been stopped. Need to restart lesson.
debug.workflow.return.to.editor=Many trace actions will focus debug toolwindow. Let''s return to the editor with {0}.
debug.workflow.use.watches=<ide/> has several ways to show variable values. For this step, we selected the call. Let''s add it to {0}. \
  You can copy the expression into the clipboard, click {1} button on the debug panel and paste the copied text. \
  Alternatively, you can just use action {2} {3}.
debug.workflow.consider.to.add.a.shortcut=(consider to assign a shortcut for it later)
debug.workflow.step.into=Lets step into. You can use action {0} or the button {1} at the debug panel.
debug.workflow.choose.method.to.step.in=In most cases you will want to skip argument calculating so Smart Step Into feature suggest by \
  default the wrapping method. However, here we need to choose the second one: {0}. \
  You can choose it by keyboard {1} and press {2}, or you can click the call.
debug.workflow.quick.evaluate=Let''s see what we are going to pass to {0}. Invoke Quick Evaluate Expression {1} for the selected argument.
debug.workflow.fix.error=Oh, we made a mistake in the array index! Let''s fix it right now. Close popup ({0}) and change 0 to 1.
debug.workflow.step.over=Let''s check that the call of {0} will not throw an exception now. Use Step Over action {1} or click the button {2}.
debug.workflow.mute.breakpoints=Ups, the same breakpoint again. Now we don''t need to stop at this breakpoint. \
  So, let''s mute breakpoints by clicking the button {0} or with the  action {1}.
debug.workflow.run.to.cursor=Let''s check the result of {0}. We''ve moved the editor cursor to the {1} statement. \
  Press {2} or click {3}. Alternatively, click the line number. Note that {4} works even if breakpoints are muted.
debug.workflow.evaluate.expression=It seems the {0} is not an average value we want to find. We forgot to divide by length. \
  Seems we need to return {1}. Let''s check the guess. Press {2} or click button {3}.
debug.workflow.type.result=Type {0} into the {1} field, completion works.
debug.workflow.evaluate.it=Press {0} or click {1}.
debug.workflow.stop.debug=It will be a correct answer! Lets close the dialog and stop debugging by {0} or button {1}.
debug.workflow.resume=Seems there are no exceptions by now. Let''s continue execution with {0} or click the button {1}.

###############################################################################
## Java lessons
###############################################################################
java.surround.and.unwrap.help.unwrapping.and.removing.statements=Working with code statements

java.basic.completion.choose.first=You can choose the first item from the Lookup menu by pressing {0}.
java.basic.completion.activate=To activate Basic Completion, press {0} and you will see the lookup menu again.
java.basic.completion.choose.item=Select {0} inside the lookup menu and press {1}.
java.basic.completion.complete=Press {0} to complete this statement.
java.basic.completion.deeper.level=Sometimes you need to see suggestions for static constants or methods. \
  Press {0} twice to access extended Code Completion.
java.basic.completion.module.promotion=You will find more about refactorings in the {0} module.

java.run.configuration.lets.run=Any code marked with {0} can be run. Let''s run our simple example with {1}. \
  Alternatively, you can click {0} and select the {2} item.

java.postfix.completion.apply=Postfix Completion helps reduce backward caret jumps as you write code. \
  It lets you transform an already typed expression into another one based on the postfix you add, the type of expression, and its context. \
  Type {0} after the parenthesis to see the list of postfix completion suggestions. \
  Select {1} from the list, or type it in the editor, and then press {2} to complete the statement.

java.smart.type.completion.lesson.name=Smart type completion
java.smart.type.completion.apply=Smart Type Completion filters the list of suggestion to include only those types that are applicable \
  within the current context. Press {0} to see the list of matching suggestions. Choose the first one by pressing {1}.
java.smart.type.completion.return=Smart Type Completion can also suggest code for a return statement. \
  Press {0} twice to see the Lookup menu for a return. Choose the first one by pressing {1}

java.statement.completion.lesson.name=Statement completion
java.statement.completion.complete.for=Press {0} to complete the {1} statement.
java.statement.completion.complete.if=Type {0} and press {1} to generate the statement.
java.statement.completion.complete.condition=Add a condition inside parentheses {0} and press {1} to jump inside the {2} statement.
java.statement.completion.complete.finish.body=Type on one line: {0} and then press {1} to complete the entered statement and apply formatting.

java.rename.press.rename=Press {0} to rename field {1}.
java.rename.type.new.name=Type the new name for this field (e.g., {0}) and press {1}.
java.rename.confirm.accessors.rename=<ide/> is detecting corresponding getters/setters and proposes to rename them accordingly.\
  Now just press {0} or click {1}

java.refactoring.menu.inline.variable=Now let''s inline variable {0} into the only use. \
  You can press {1} and filter by <strong>iv</strong> (<strong>i</strong>nline <strong>v</strong>ariable). Or just press {2}.
java.refactoring.menu.introduce.constant=In the end, let''s extract extension from file name. \
  Again, you can press {0} and filter by <strong>ic</strong> (<strong>i</strong>ntroduce <strong>c</strong>onstant). Or just press {1}.
java.refactoring.menu.confirm.constant=In this dialog you can choose the name, the parent and visibility for the new constant. \
  You can leave proposed defaults and press {0} or click {1}.

java.inheritance.hierarchy.lesson.name=Inheritance hierarchy
java.inheritance.hierarchy.goto.implementation=Press {0} to look for implementations of {1}.
java.inheritance.hierarchy.choose.any.implementation=Choose any implementation and press {0} (or click it by mouse).
java.inheritance.hierarchy.navigate.to.base=You can navigate to a super method from derived. Press {0} or click icon {1} in the editor gutter.
java.inheritance.hierarchy.invoke.implementations.again=The declaration of the base method has its own gutter icon {0}. \
  Click it or press {1} again.
java.inheritance.hierarchy.open.in.find.tool.window=For big hierarchies you may want to look for implementations in the {0} tool window. \
  Click at {1}.
java.inheritance.hierarchy.hide.find.tool.window=Press {0} to hide the {1} tool window.
java.inheritance.hierarchy.open.method.hierarchy=You may want to explore the whole hierarchy for this method. Press {0}.
java.inheritance.hierarchy.hide.method.hierarchy=Let''s hide {0} also. Press {1} again.
java.inheritance.hierarchy.open.class.hierarchy=To overview the class hierarchy press {0}.
java.inheritance.hierarchy.last.note=<strong>Note:</strong> Actions {0} and {1} can be applied to classes also. \
  Actions {2} and {3} may be used rarely but you always can find them with {4} by the {5} filter.

java.find.occurrences.lesson.name=Next/previous occurrences
java.find.occurrences.invoke.find=For this lesson, we selected {0}. Press {1} to start the textual search through the current file.
java.find.occurrences.find.previous=For previous occurrences, press {0}.
java.find.occurrences.find.next=<ide/> automatically copies the selected text into the search field. Let''s find the next occurrence. \
  Press {0} or {1}.
java.find.occurrences.close.search.tool=With the search panel closed, you can still use these shortcuts to navigate between occurrences \
  of the item being searched for earlier. Let''s close the search panel by pressing {0}.
java.find.occurrences.find.next.in.editor=Try to find the next occurrence with {0}.
java.find.occurrences.find.previous.in.editor=And {0} in a back way.
java.find.occurrences.note.about.cyclic=<strong>Note:</strong> The search is cyclic and pressing twice {0} at the last occurrence will set \
  the selection for the last occurrence. {1} is cyclic also.

java.debug.workflow.rebuild=For big programs rerun can take much time. When you find some mistake in pure method you can just rebuild \
  the project and apply <strong>Hot Swap</strong> JVM feature. Let''s build project: {0} or {1}.
java.debug.workflow.confirm.hot.swap=Confirm <strong>Hot Swap</strong> replacement.
java.debug.workflow.drop.frame=We patched our method, but right now we are still executing old obsolete {0} and it will throw the \
  exception again. Let''s drop the frame and return to the state before {1} call. Click {2} at the debug panel or press {3}.
