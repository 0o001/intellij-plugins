// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

 /* It's an automatically generated code. Do not modify it. */
package com.intellij.plugins.drools.lang.lexer;

import static com.intellij.plugins.drools.lang.lexer.DroolsTokenTypes.*;
import static com.intellij.plugins.drools.lang.lexer.DroolsTokenTypeSets.*;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_DroolsLexer.flex</tt>
 */
public class _DroolsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LHS_STATE = 2;
  public static final int RHS_STATE = 4;
  public static final int QUERY_STATE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14272 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24\1\12"+
    "\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5\12\1"+
    "\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1\42\1"+
    "\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51\1\52"+
    "\1\24\1\53\1\54\1\55\1\56\1\57\1\60\1\52\1\15\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\64\1\65\1\66\1\21\1\55\1\67\1\1\1\70\1\52\1\71\1\72\1\54\1\55\1\67\1\1"+
    "\1\60\1\52\1\40\1\73\1\74\1\75\1\76\1\1\1\70\1\64\1\1\1\77\1\35\1\55\1\50"+
    "\1\1\1\100\1\52\1\1\1\101\1\35\1\55\1\102\1\1\1\57\1\52\1\103\1\77\1\35\1"+
    "\12\1\104\1\57\1\105\1\52\1\106\1\107\1\110\1\12\1\111\1\112\1\1\1\64\1\1"+
    "\1\24\2\12\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2\1\1"+
    "\70\1\1\1\114\1\1\1\123\1\12\1\124\1\1\1\125\7\1\2\12\1\27\1\126\1\114\1\127"+
    "\1\130\1\131\1\132\1\114\2\12\1\133\2\12\1\134\24\12\1\135\1\136\2\12\1\135"+
    "\2\12\1\137\1\140\1\13\3\12\1\140\3\12\1\27\2\1\1\12\1\1\5\12\1\141\1\24\45"+
    "\12\1\142\1\12\1\24\1\27\4\12\1\27\1\143\1\144\1\15\1\12\1\15\1\12\1\15\1"+
    "\144\1\70\3\12\1\145\1\1\1\146\1\114\2\1\1\114\5\12\1\26\1\147\1\12\1\150"+
    "\4\12\1\37\1\12\1\151\2\1\1\64\1\12\1\152\1\153\2\12\1\154\1\12\1\76\1\114"+
    "\2\1\1\12\1\112\3\12\1\153\2\1\2\114\1\155\5\1\1\107\2\12\1\145\1\156\1\114"+
    "\2\1\1\157\1\12\1\160\1\41\2\12\1\37\1\1\2\12\1\145\1\1\1\161\1\41\1\12\1"+
    "\152\1\45\5\1\1\162\1\163\14\12\4\1\21\12\1\141\2\12\1\141\1\164\1\12\1\152"+
    "\3\12\1\165\1\166\1\167\1\124\1\166\7\1\1\170\1\1\1\124\6\1\1\171\1\172\1"+
    "\173\1\174\1\175\3\1\1\176\147\1\2\12\1\151\2\12\1\151\10\12\1\177\1\200\2"+
    "\12\1\133\3\12\1\201\1\1\1\12\1\112\4\202\4\1\1\126\35\1\1\203\2\1\1\204\1"+
    "\24\4\12\1\205\1\24\4\12\1\134\1\107\1\12\1\152\1\24\4\12\1\151\1\1\1\12\1"+
    "\27\3\1\1\12\40\1\133\12\1\37\4\1\135\12\1\37\2\1\10\12\1\124\4\1\2\12\1\152"+
    "\20\12\1\124\1\12\1\206\1\1\2\12\1\151\1\126\1\12\1\152\4\12\1\37\2\1\1\207"+
    "\1\210\5\12\1\211\1\12\1\151\1\26\3\1\1\207\1\212\1\12\1\30\1\1\3\12\1\145"+
    "\1\210\2\12\1\145\1\1\1\114\1\1\1\213\1\41\1\12\1\37\1\12\1\112\1\1\1\12\1"+
    "\124\1\47\2\12\1\30\1\126\1\114\1\214\1\215\2\12\1\45\1\1\1\216\1\114\1\12"+
    "\1\217\3\12\1\220\1\221\1\222\1\27\1\65\1\223\1\224\1\202\2\12\1\134\1\37"+
    "\7\12\1\30\1\114\72\12\1\145\1\12\1\225\2\12\1\154\20\1\26\12\1\152\6\12\1"+
    "\76\2\1\1\112\1\226\1\55\1\227\1\230\6\12\1\15\1\1\1\157\25\12\1\152\1\1\4"+
    "\12\1\210\2\12\1\26\2\1\1\154\7\1\1\214\7\12\1\124\1\1\1\114\1\24\1\27\1\24"+
    "\1\27\1\231\4\12\1\151\1\232\1\233\2\1\1\234\1\12\1\13\1\235\2\152\2\1\7\12"+
    "\1\27\30\1\1\12\1\124\3\12\1\70\2\1\2\12\1\1\1\12\1\236\2\12\1\37\1\12\1\152"+
    "\2\12\1\237\3\1\11\12\1\152\1\114\2\12\1\237\1\12\1\154\2\12\1\26\3\12\1\145"+
    "\11\1\23\12\1\112\1\12\1\37\1\26\11\1\1\240\2\12\1\241\1\12\1\37\1\12\1\112"+
    "\1\12\1\151\4\1\1\12\1\242\1\12\1\37\1\12\1\76\4\1\3\12\1\243\4\1\1\70\1\244"+
    "\1\12\1\145\2\1\1\12\1\124\1\12\1\124\2\1\1\123\1\12\1\153\1\1\3\12\1\37\1"+
    "\12\1\37\1\12\1\30\1\12\1\15\6\1\4\12\1\45\3\1\3\12\1\30\3\12\1\30\60\1\1"+
    "\157\2\12\1\26\2\1\1\64\1\1\1\157\2\12\2\1\1\12\1\45\1\114\1\157\1\12\1\112"+
    "\1\64\1\1\2\12\1\245\1\157\2\12\1\30\1\246\1\247\2\1\1\12\1\21\1\154\5\1\1"+
    "\250\1\251\1\45\2\12\1\151\1\1\1\114\1\72\1\54\1\55\1\67\1\1\1\252\1\15\11"+
    "\1\3\12\1\153\1\253\1\114\2\1\3\12\1\1\1\254\1\114\12\1\2\12\1\151\2\1\1\255"+
    "\2\1\3\12\1\1\1\256\1\114\2\1\2\12\1\27\1\1\1\114\3\1\1\12\1\76\1\1\1\114"+
    "\26\1\4\12\1\114\1\126\34\1\3\12\1\45\20\1\1\55\1\12\1\151\1\1\1\70\1\114"+
    "\1\1\1\210\1\12\67\1\71\12\1\76\16\1\14\12\1\145\53\1\2\12\1\151\75\1\44\12"+
    "\1\112\33\1\43\12\1\45\1\12\1\151\1\114\6\1\1\12\1\152\1\1\3\12\1\1\1\145"+
    "\1\114\1\157\1\257\1\12\67\1\4\12\1\153\1\70\3\1\1\157\4\1\1\70\1\1\76\12"+
    "\1\124\1\1\57\12\1\30\20\1\1\15\77\1\6\12\1\27\1\124\1\45\1\76\66\1\5\12\1"+
    "\214\3\12\1\144\1\260\1\261\1\262\3\12\1\263\1\264\1\12\1\265\1\266\1\35\24"+
    "\12\1\267\1\12\1\35\1\134\1\12\1\134\1\12\1\214\1\12\1\214\1\151\1\12\1\151"+
    "\1\12\1\55\1\12\1\55\1\12\1\270\3\271\14\12\1\153\3\1\4\12\1\145\1\114\112"+
    "\1\1\262\1\12\1\272\1\273\1\274\1\275\1\276\1\277\1\300\1\154\1\301\1\154"+
    "\24\1\55\12\1\112\2\1\103\12\1\153\15\12\1\152\150\12\1\15\25\1\41\12\1\152"+
    "\36\1");

  /* The ZZ_CMAP_A table has 3104 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\1\0\1\1\1\3\22\0\1\1\1\102\1\24\1\4\1\11\1\72\1\75\1\23\1\64"+
    "\1\65\1\5\1\21\1\70\1\52\1\22\1\2\1\15\11\14\1\67\1\66\1\100\1\74\1\101\1"+
    "\71\1\73\1\57\3\13\1\20\1\13\5\6\1\55\2\6\1\56\10\6\1\17\2\6\1\62\1\10\1\63"+
    "\1\77\1\12\1\0\1\36\1\42\1\46\1\37\1\27\1\41\1\47\1\26\1\40\1\6\1\43\1\50"+
    "\1\54\1\30\1\35\1\45\1\31\1\33\1\51\1\44\1\32\1\53\1\25\1\16\1\34\1\6\1\60"+
    "\1\76\1\61\1\103\13\0\1\6\12\0\1\6\4\0\1\6\5\0\27\6\1\0\12\6\4\0\14\6\16\0"+
    "\5\6\7\0\1\6\1\0\1\6\1\0\5\6\1\0\2\6\2\0\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1"+
    "\6\1\0\4\6\1\0\23\6\1\0\13\6\10\0\6\6\1\0\26\6\2\0\1\6\6\0\10\6\10\0\13\6"+
    "\5\0\3\6\15\0\12\7\4\0\6\6\1\0\1\6\17\0\2\6\7\0\2\6\12\7\3\6\2\0\2\6\1\0\16"+
    "\6\15\0\11\6\13\0\1\6\16\0\12\7\6\6\4\0\2\6\4\0\1\6\5\0\6\6\4\0\1\6\11\0\1"+
    "\6\3\0\1\6\7\0\11\6\7\0\5\6\1\0\10\6\6\0\26\6\3\0\1\6\2\0\1\6\7\0\12\6\4\0"+
    "\12\7\1\6\4\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\3\0\1\6\20\0\1"+
    "\6\15\0\2\6\1\0\1\6\5\0\6\6\4\0\2\6\1\0\2\6\1\0\2\6\1\0\2\6\17\0\4\6\1\0\1"+
    "\6\7\0\12\7\2\0\3\6\20\0\11\6\1\0\2\6\1\0\2\6\1\0\5\6\3\0\1\6\2\0\1\6\30\0"+
    "\1\6\13\0\10\6\2\0\1\6\3\0\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0"+
    "\2\6\3\0\2\6\3\0\3\6\3\0\14\6\13\0\10\6\1\0\2\6\10\0\3\6\5\0\1\6\4\0\10\6"+
    "\1\0\6\6\1\0\5\6\3\0\1\6\3\0\2\6\15\0\13\6\2\0\1\6\6\0\3\6\10\0\1\6\12\0\6"+
    "\6\5\0\22\6\3\0\10\6\1\0\11\6\1\0\1\6\2\0\7\6\11\0\1\6\1\0\2\6\14\0\12\7\7"+
    "\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0"+
    "\1\6\2\0\2\6\1\0\4\6\1\0\2\6\11\0\1\6\2\0\5\6\1\0\1\6\11\0\12\7\2\0\14\6\1"+
    "\0\24\6\13\0\5\6\22\0\7\6\4\0\4\6\3\0\1\6\3\0\2\6\7\0\3\6\4\0\15\6\14\0\1"+
    "\6\1\0\6\6\1\0\1\6\5\0\1\6\2\0\13\6\1\0\15\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4"+
    "\6\2\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\16\6\2\0\6\6\2\0\15\6\2\0\1"+
    "\6\1\0\10\6\7\0\15\6\1\0\6\6\23\0\1\6\4\0\1\6\3\0\5\6\2\0\22\6\1\0\1\6\5\0"+
    "\17\6\1\0\16\6\2\0\5\6\13\0\14\6\13\0\1\6\15\0\7\6\7\0\16\6\15\0\2\6\12\7"+
    "\3\0\3\6\11\0\4\6\1\0\4\6\3\0\2\6\11\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\6"+
    "\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\5\0\1\6\15\0\1\6\2\0\1"+
    "\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13"+
    "\6\2\0\4\6\5\0\5\6\4\0\1\6\4\0\2\6\13\0\5\6\6\0\4\6\3\0\2\6\14\0\10\6\7\0"+
    "\10\6\1\0\7\6\6\0\2\6\12\0\5\6\5\0\2\6\3\0\7\6\6\0\3\6\12\7\2\6\13\0\11\6"+
    "\2\0\27\6\2\0\7\6\1\0\3\6\1\0\4\6\1\0\4\6\2\0\6\6\3\0\1\6\1\0\1\6\2\0\5\6"+
    "\1\0\12\6\12\7\5\6\1\0\3\6\1\0\10\6\4\0\7\6\3\0\1\6\3\0\2\6\1\0\1\6\3\0\2"+
    "\6\2\0\5\6\2\0\1\6\1\0\1\6\30\0\3\6\3\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6\4\0\5"+
    "\6\3\0\5\6\5\0\1\6\1\0\10\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\12\6\6\0\12"+
    "\6\2\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0\14\6\1\0\16\6\1\0\2\6\1\0\2\6\1\0\10"+
    "\6\6\0\4\6\4\0\16\6\2\0\1\6\1\0\14\6\1\0\2\6\3\0\1\6\2\0\4\6\1\0\2\6\12\0"+
    "\10\6\6\0\6\6\1\0\3\6\1\0\12\6\3\0\1\6\12\0\4\6\13\0\12\7\1\6\1\0\1\6\3\0"+
    "\7\6\1\0\1\6\1\0\4\6\1\0\17\6\1\0\2\6\14\0\3\6\7\0\4\6\11\0\2\6\1\0\1\6\20"+
    "\0\4\6\10\0\1\6\13\0\10\6\5\0\3\6\2\0\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0\1\6"+
    "\1\0\7\6\1\0\21\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0\14\6\1\0\4\6\1\0\5\6\1\0\1"+
    "\6\3\0\14\6\2\0\13\6\1\0\10\6\2\0\22\7\1\0\2\6\1\0\1\6\2\0\1\6\1\0\12\6\1"+
    "\0\4\6\1\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6\1\0"+
    "\1\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7"+
    "\6\1\0\4\6\1\0\4\6\1\0\1\6\1\0\12\6\1\0\5\6\1\0\3\6\1\0\5\6\1\0\5\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\2\2\10\1\11\1\12\1\13\1\14\22\7"+
    "\1\15\2\7\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\10\7\1\42"+
    "\1\43\1\44\1\45\2\1\1\46\1\1\1\47\1\50"+
    "\2\13\2\14\25\7\1\51\26\7\1\52\1\53\4\7"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\0\1\64\1\0\1\65\1\7\1\66\1\7\1\67"+
    "\1\70\2\7\1\0\1\46\2\0\1\10\5\7\1\71"+
    "\3\7\1\72\1\0\22\7\1\73\1\7\1\74\34\7"+
    "\1\75\1\76\1\0\1\77\1\100\2\7\1\43\1\46"+
    "\1\101\5\7\1\102\1\103\1\0\5\7\1\104\1\105"+
    "\12\7\1\106\3\7\1\107\3\7\1\110\1\7\1\111"+
    "\1\112\1\7\1\113\2\7\1\114\4\7\1\115\4\7"+
    "\1\116\3\7\1\117\1\7\1\120\5\7\1\0\1\121"+
    "\5\7\1\0\10\7\1\0\5\7\1\122\1\123\2\7"+
    "\1\124\5\7\1\0\1\125\5\7\1\126\1\127\1\130"+
    "\2\7\2\0\1\131\1\7\1\132\2\7\1\0\1\7"+
    "\1\133\5\7\1\134\1\0\1\7\1\135\1\136\1\7"+
    "\1\137\6\7\1\140\1\0\3\7\1\141\1\7\1\142"+
    "\1\143\1\0\1\144\1\145\1\146\1\7\1\0\3\7"+
    "\1\0\1\147\1\7\2\0\1\150\2\7\1\151\1\7"+
    "\1\152\1\7\1\153\1\7\1\0\3\7\1\154\1\0"+
    "\1\7\1\0\3\7\1\0\1\155\2\0\1\7\1\156"+
    "\1\157\1\160\1\7\1\0\1\7\1\161\1\162\3\0"+
    "\3\7\3\0\1\7\1\163\1\0\1\7\2\0\1\164"+
    "\1\165\1\7\1\166\3\0\1\7\1\0\1\167\1\170"+
    "\5\0\1\7\3\0\1\171\1\172\1\0\1\7\4\0"+
    "\1\173\1\0\1\174\1\0\1\175\1\176\1\0\1\177";

  private static int [] zzUnpackAction() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c"+
    "\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\u0a18\0\314\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0"+
    "\0\u0bf4\0\314\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c"+
    "\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\314\0\314\0\u0ee0\0\u0f24"+
    "\0\u0f68\0\u0fac\0\314\0\314\0\u0ff0\0\314\0\u1034\0\314"+
    "\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254"+
    "\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474"+
    "\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694"+
    "\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4"+
    "\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4"+
    "\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\314\0\314\0\u1c28\0\u1c6c"+
    "\0\u1cb0\0\u1cf4\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\u1d38\0\314\0\u1d7c\0\314\0\u1dc0\0\u0220"+
    "\0\u1e04\0\u1540\0\u0220\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58"+
    "\0\u1f9c\0\u0fac\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u0220"+
    "\0\u2134\0\u2178\0\u21bc\0\u0220\0\u2200\0\u2244\0\u2288\0\u22cc"+
    "\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec"+
    "\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u0220"+
    "\0\u270c\0\u0220\0\u2750\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4"+
    "\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4"+
    "\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4"+
    "\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\314\0\314"+
    "\0\u2ec0\0\u0220\0\u0220\0\u2f04\0\u2f48\0\314\0\u1f58\0\u0220"+
    "\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u0220\0\u0220\0\u30e0"+
    "\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u0220\0\u32bc"+
    "\0\u3300\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc"+
    "\0\u3520\0\u0220\0\u3564\0\u35a8\0\u35ec\0\u0220\0\u3630\0\u3674"+
    "\0\u36b8\0\u0220\0\u36fc\0\u0220\0\u0220\0\u3740\0\u0220\0\u3784"+
    "\0\u37c8\0\u0220\0\u380c\0\u3850\0\u3894\0\u38d8\0\u0220\0\u391c"+
    "\0\u3960\0\u39a4\0\u39e8\0\u0220\0\u3a2c\0\u3a70\0\u3ab4\0\314"+
    "\0\u3af8\0\u0220\0\u3b3c\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90"+
    "\0\u0220\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c"+
    "\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u408c"+
    "\0\u40d0\0\u4114\0\u4158\0\u419c\0\u41e0\0\u0220\0\u0220\0\u4224"+
    "\0\u4268\0\u0220\0\u42ac\0\u42f0\0\u4334\0\u4378\0\u43bc\0\u4400"+
    "\0\u0220\0\u4444\0\u4488\0\u44cc\0\u4510\0\u4554\0\u0220\0\u0220"+
    "\0\u0220\0\u4598\0\u45dc\0\u4620\0\u4664\0\u0220\0\u46a8\0\u0220"+
    "\0\u46ec\0\u4730\0\u4774\0\u47b8\0\u0220\0\u47fc\0\u4840\0\u4884"+
    "\0\u48c8\0\u490c\0\u0220\0\u4950\0\u4994\0\u49d8\0\u0220\0\u4a1c"+
    "\0\u0220\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c\0\u4b70\0\u4bb4\0\u0220"+
    "\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4\0\u0220\0\u4d08\0\u0220\0\u0220"+
    "\0\u4d4c\0\314\0\u0220\0\u0220\0\u4d90\0\u4dd4\0\u4e18\0\u4e5c"+
    "\0\u4ea0\0\u4ee4\0\u0220\0\u4f28\0\u4f6c\0\u4fb0\0\u0220\0\u4ff4"+
    "\0\u5038\0\u0220\0\u507c\0\u0220\0\u50c0\0\u0220\0\u5104\0\u5148"+
    "\0\u518c\0\u51d0\0\u5214\0\u0220\0\u5258\0\u529c\0\u52e0\0\u5324"+
    "\0\u5368\0\u53ac\0\u53f0\0\u0220\0\u5434\0\u5478\0\u54bc\0\u0220"+
    "\0\u0220\0\u0220\0\u5500\0\u5544\0\u5588\0\u0220\0\u0220\0\u55cc"+
    "\0\u5610\0\u5654\0\u5698\0\u56dc\0\u5720\0\u5764\0\u57a8\0\u57ec"+
    "\0\u5830\0\u0220\0\u5874\0\u58b8\0\u58fc\0\u5940\0\314\0\u0220"+
    "\0\u5984\0\u0220\0\u59c8\0\u5a0c\0\u5a50\0\u5a94\0\u5ad8\0\u0220"+
    "\0\314\0\u5b1c\0\u5b60\0\u5ba4\0\u5be8\0\u5c2c\0\u5c70\0\u5cb4"+
    "\0\u5cf8\0\u5d3c\0\314\0\314\0\u5d80\0\u5dc4\0\u5e08\0\u5e4c"+
    "\0\u5e90\0\u5ed4\0\u0220\0\u5f18\0\314\0\u5f5c\0\314\0\314"+
    "\0\u5fa0\0\314";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\5\1\7\1\10\1\11\1\12"+
    "\1\4\2\13\1\11\1\14\1\15\3\11\1\16\1\17"+
    "\1\20\1\21\1\22\1\11\1\23\1\24\1\25\1\26"+
    "\1\27\1\11\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\11\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\3\11\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\4"+
    "\1\5\1\6\1\5\1\7\1\10\1\11\1\12\1\4"+
    "\2\13\1\11\1\14\1\15\3\11\1\16\1\17\1\20"+
    "\1\21\1\73\1\11\1\74\1\24\1\11\1\26\1\27"+
    "\1\11\1\75\1\76\1\77\1\100\1\34\1\101\1\11"+
    "\1\102\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\3\11\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\104\4\105\0"+
    "\1\5\1\0\1\5\102\0\1\103\2\0\1\104\66\0"+
    "\1\105\7\0\3\7\1\0\100\7\74\0\1\106\15\0"+
    "\2\11\2\0\7\11\4\0\25\11\1\0\5\11\32\0"+
    "\1\107\1\12\3\0\1\107\2\12\2\107\1\110\1\0"+
    "\1\111\2\0\2\107\1\110\22\107\1\0\5\107\32\0"+
    "\1\11\4\0\1\11\2\0\3\11\4\0\25\11\1\0"+
    "\5\11\32\0\1\107\1\12\3\0\1\107\2\14\2\107"+
    "\1\110\1\0\1\111\2\0\2\107\1\110\22\107\1\0"+
    "\5\107\32\0\1\107\1\12\3\0\1\107\2\12\2\112"+
    "\1\110\1\0\1\111\2\0\2\107\1\110\22\107\1\0"+
    "\5\107\45\0\1\113\52\0\1\114\16\0\1\111\4\0"+
    "\2\111\66\0\3\20\1\0\4\20\1\115\12\20\1\116"+
    "\60\20\3\21\1\0\4\21\1\117\13\21\1\120\57\21"+
    "\6\0\2\11\2\0\7\11\4\0\1\11\1\121\11\11"+
    "\1\122\11\11\1\0\5\11\32\0\2\11\2\0\4\11"+
    "\1\123\2\11\4\0\3\11\1\124\21\11\1\0\1\125"+
    "\4\11\32\0\2\11\2\0\7\11\4\0\5\11\1\126"+
    "\2\11\1\127\14\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\5\11\1\130\17\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\20\11\1\131\4\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\2\11\1\132"+
    "\2\11\1\133\17\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\25\11\1\0\1\134\4\11\32\0\2\11"+
    "\2\0\7\11\4\0\5\11\1\135\11\11\1\136\1\11"+
    "\1\137\1\140\2\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\2\11\1\141\2\11\1\142\2\11\1\143"+
    "\1\144\1\11\1\145\11\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\3\11\1\146\20\11\1\147\1\0"+
    "\1\11\1\150\3\11\32\0\2\11\2\0\7\11\4\0"+
    "\5\11\1\151\1\152\1\11\1\153\1\154\11\11\1\155"+
    "\1\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\7\11\1\156\1\157\14\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\1\11\1\160\1\161\3\11\1\162"+
    "\4\11\1\163\11\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\11\11\1\164\13\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\1\11\1\165\6\11\1\166"+
    "\1\167\13\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\23\11\1\170\1\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\10\11\1\171\14\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\1\11\1\172\6\11"+
    "\1\173\1\174\13\11\1\0\5\11\76\0\1\175\21\0"+
    "\1\176\15\0\2\11\2\0\7\11\4\0\10\11\1\177"+
    "\14\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\2\11\1\200\5\11\1\201\1\202\13\11\1\0\5\11"+
    "\120\0\1\203\103\0\1\204\103\0\1\205\1\206\102\0"+
    "\1\207\1\0\1\210\101\0\1\211\103\0\1\212\3\0"+
    "\1\213\77\0\1\214\4\0\1\215\76\0\1\216\15\0"+
    "\2\11\2\0\7\11\4\0\13\11\1\122\11\11\1\0"+
    "\5\11\32\0\2\11\2\0\4\11\1\123\2\11\4\0"+
    "\3\11\1\217\21\11\1\0\1\125\4\11\32\0\2\11"+
    "\2\0\7\11\4\0\6\11\1\220\16\11\1\0\1\134"+
    "\4\11\32\0\2\11\2\0\7\11\4\0\3\11\1\221"+
    "\1\11\1\135\11\11\1\136\1\11\1\137\1\140\2\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\2\11"+
    "\1\141\2\11\1\142\2\11\1\222\1\144\1\11\1\145"+
    "\11\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\3\11\1\146\10\11\1\223\7\11\1\147\1\0\1\11"+
    "\1\150\3\11\32\0\2\11\2\0\7\11\4\0\6\11"+
    "\1\224\1\156\1\157\14\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\1\11\1\225\1\161\3\11\1\162"+
    "\4\11\1\163\11\11\1\0\5\11\24\0\3\103\1\0"+
    "\100\103\5\104\1\226\76\104\6\0\2\107\3\0\6\107"+
    "\4\0\25\107\1\0\5\107\32\0\1\107\1\227\3\0"+
    "\1\107\2\227\3\107\1\230\3\0\25\107\1\230\5\107"+
    "\33\0\1\111\4\0\2\111\2\0\1\231\6\0\1\231"+
    "\62\0\2\107\3\0\3\232\2\107\1\232\4\0\2\107"+
    "\1\232\6\107\2\232\1\107\2\232\3\107\1\232\3\107"+
    "\1\0\4\107\1\232\24\0\3\20\1\0\100\20\3\21"+
    "\1\0\100\21\6\0\2\11\2\0\7\11\4\0\2\11"+
    "\1\233\22\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\3\11\1\234\21\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\13\11\1\235\3\11\1\236\5\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\11\11"+
    "\1\237\1\240\4\11\1\241\5\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\11\11\1\242\13\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\23\11\1\243"+
    "\1\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\17\11\1\244\5\11\1\245\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\2\11\1\246\22\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\12\11\1\247\12\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\17\11\1\250"+
    "\4\11\1\251\1\0\1\252\4\11\32\0\2\11\2\0"+
    "\7\11\4\0\23\11\1\253\1\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\2\11\1\254\22\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\17\11\1\255"+
    "\5\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\17\11\1\256\5\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\17\11\1\257\1\11\1\260\3\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\2\11\1\261"+
    "\22\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\21\11\1\262\3\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\6\11\1\263\16\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\5\11\1\264\17\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\17\11\1\265"+
    "\5\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\11\11\1\266\13\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\13\11\1\267\3\11\1\270\4\11\1\271"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\25\11"+
    "\1\0\4\11\1\272\32\0\2\11\2\0\7\11\4\0"+
    "\20\11\1\273\4\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\3\11\1\274\21\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\10\11\1\275\14\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\6\11\1\276"+
    "\16\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\23\11\1\277\1\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\10\11\1\300\14\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\17\11\1\301\5\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\10\11\1\302"+
    "\14\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\2\11\1\303\10\11\1\304\11\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\25\11\1\0\1\11\1\305"+
    "\3\11\32\0\2\11\2\0\7\11\4\0\5\11\1\306"+
    "\17\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\25\11\1\0\1\11\1\307\3\11\32\0\2\11\2\0"+
    "\7\11\4\0\21\11\1\310\3\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\11\11\1\311\13\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\3\11\1\312"+
    "\17\11\1\313\1\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\23\11\1\314\1\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\10\11\1\315\14\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\3\11\1\316"+
    "\15\11\1\317\3\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\10\11\1\320\14\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\5\11\1\321\17\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\23\11\1\322"+
    "\1\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\13\11\1\323\11\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\25\11\1\0\1\11\1\324\3\11\32\0"+
    "\2\11\2\0\7\11\4\0\12\11\1\325\12\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\17\11\1\326"+
    "\5\11\1\0\5\11\120\0\1\327\103\0\1\330\4\0"+
    "\1\331\10\0\2\11\2\0\7\11\4\0\11\11\1\237"+
    "\1\332\4\11\1\241\5\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\12\11\1\333\12\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\2\11\1\334\22\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\2\11"+
    "\1\335\10\11\1\304\11\11\1\0\5\11\24\0\2\104"+
    "\1\336\2\104\1\226\76\104\6\0\1\107\1\227\3\0"+
    "\1\107\2\227\3\107\4\0\25\107\1\0\5\107\33\0"+
    "\1\337\4\0\2\337\75\0\1\337\4\0\2\337\3\0"+
    "\1\230\30\0\1\230\37\0\2\11\2\0\7\11\4\0"+
    "\3\11\1\340\21\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\12\11\1\341\12\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\24\11\1\342\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\2\11\1\343\22\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\15\11"+
    "\1\344\7\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\6\11\1\345\16\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\23\11\1\346\1\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\23\11\1\347\1\11"+
    "\1\0\5\11\74\0\1\350\41\0\2\11\2\0\7\11"+
    "\4\0\6\11\1\351\16\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\11\11\1\352\13\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\6\11\1\353\16\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\5\11"+
    "\1\354\17\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\2\11\1\355\22\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\2\11\1\356\22\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\6\11\1\357\16\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\10\11"+
    "\1\360\14\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\6\11\1\361\16\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\13\11\1\362\11\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\5\11\1\363\17\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\3\11"+
    "\1\364\21\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\23\11\1\365\1\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\11\11\1\366\13\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\15\11\1\367\7\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\2\11"+
    "\1\370\22\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\23\11\1\371\1\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\17\11\1\372\5\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\2\11\1\373\22\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\10\11"+
    "\1\374\14\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\21\11\1\375\3\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\25\11\1\0\1\11\1\376\3\11"+
    "\32\0\2\11\2\0\7\11\4\0\11\11\1\377\13\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\24\11"+
    "\1\u0100\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\11\11\1\u0101\13\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\2\11\1\u0102\22\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\23\11\1\u0103\1\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\3\11\1\u0104"+
    "\21\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\24\11\1\u0105\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\20\11\1\u0106\4\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\2\11\1\u0107\22\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\2\11\1\u0108\22\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\16\11"+
    "\1\u0109\6\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\6\11\1\u010a\16\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\17\11\1\u010b\5\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\23\11\1\u010c\1\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\2\11"+
    "\1\u010d\22\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\15\11\1\u010e\7\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\22\11\1\u010f\2\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\16\11\1\u0110\6\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\6\11"+
    "\1\u0111\16\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\3\11\1\u0112\21\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\13\11\1\u0113\11\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\12\11\1\u0114\12\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\15\11"+
    "\1\u0115\7\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\13\11\1\u0116\11\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\21\11\1\u0117\3\11\1\0\5\11"+
    "\120\0\1\u0118\15\0\2\11\2\0\7\11\4\0\11\11"+
    "\1\u0119\13\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\3\11\1\u011a\21\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\10\11\1\u011b\14\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\17\11\1\u011c\5\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\3\11"+
    "\1\u011d\21\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\23\11\1\u011e\1\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\7\11\1\u011f\15\11\1\0\5\11"+
    "\61\0\1\u0120\54\0\2\11\2\0\7\11\4\0\7\11"+
    "\1\u0121\15\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\17\11\1\u0122\5\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\11\11\1\u0123\13\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\23\11\1\u0124\1\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\6\11"+
    "\1\u0125\16\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\14\11\1\u0126\10\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\25\11\1\u0127\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\13\11\1\u0128\11\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\10\11\1\u0129\14\11"+
    "\1\0\1\u012a\4\11\32\0\2\11\2\0\7\11\4\0"+
    "\25\11\1\0\1\11\1\u012b\3\11\32\0\2\11\2\0"+
    "\7\11\4\0\12\11\1\u012c\12\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\11\11\1\u012d\13\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\17\11\1\u012e"+
    "\5\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\23\11\1\u012f\1\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\25\11\1\u0130\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\2\11\1\u0131\22\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\6\11\1\u0132\16\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\6\11\1\u0133"+
    "\16\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\17\11\1\u0134\5\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\23\11\1\u0135\1\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\2\11\1\u0136\22\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\17\11\1\u0137"+
    "\5\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\2\11\1\u0138\22\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\23\11\1\u0139\1\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\6\11\1\u013a\16\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\11\11\1\u013b"+
    "\13\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\11\11\1\u013c\13\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\2\11\1\u013d\22\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\3\11\1\u013e\21\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\11\11\1\u013f"+
    "\13\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\25\11\1\u0140\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\17\11\1\u0141\5\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\12\11\1\u0142\12\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\2\11\1\u0143\22\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\2\11\1\u0144"+
    "\22\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\14\11\1\u0145\10\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\1\11\1\u0146\23\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\16\11\1\u0147\6\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\1\u0148\24\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\24\11"+
    "\1\u0149\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\12\11\1\u014a\12\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\2\11\1\u014b\22\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\25\11\1\u014c\5\11\61\0"+
    "\1\u014d\54\0\2\11\2\0\7\11\4\0\2\11\1\u014e"+
    "\22\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\21\11\1\u014f\3\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\17\11\1\u0150\5\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\24\11\1\u0151\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\23\11\1\u0152\1\11"+
    "\1\0\5\11\65\0\1\u0153\50\0\2\11\2\0\7\11"+
    "\4\0\15\11\1\u0154\7\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\3\11\1\u0155\21\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\11\11\1\u0156\13\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\5\11"+
    "\1\u0157\17\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\11\11\1\u0158\13\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\6\11\1\u0159\16\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\13\11\1\u015a\11\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\2\11"+
    "\1\u015b\22\11\1\0\5\11\53\0\1\u015c\62\0\2\11"+
    "\2\0\7\11\4\0\21\11\1\u015d\3\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\17\11\1\u015e\5\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\17\11"+
    "\1\u015f\5\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\13\11\1\u0160\11\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\23\11\1\u0161\1\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\11\11\1\u0162\13\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\11\11"+
    "\1\u0163\13\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\22\11\1\u0164\2\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\13\11\1\u0165\11\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\21\11\1\u0166\3\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\12\11"+
    "\1\u0167\12\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\23\11\1\u0168\1\11\1\0\5\11\61\0\1\u0169"+
    "\54\0\2\11\2\0\7\11\4\0\24\11\1\u016a\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\3\11\1\u016b"+
    "\21\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\6\11\1\u016c\16\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\7\11\1\u016d\15\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\2\11\1\u016e\22\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\24\11\1\u016f"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\12\11"+
    "\1\u0170\12\11\1\0\5\11\71\0\1\u0171\103\0\1\u0172"+
    "\44\0\2\11\2\0\7\11\4\0\17\11\1\u0173\5\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\2\11"+
    "\1\u0174\22\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\10\11\1\u0175\14\11\1\0\5\11\61\0\1\u0176"+
    "\54\0\2\11\2\0\7\11\4\0\5\11\1\u0177\17\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\17\11"+
    "\1\u0178\5\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\23\11\1\u0179\1\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\25\11\1\u017a\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\2\11\1\u017b\22\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\10\11\1\u017c\14\11"+
    "\1\0\5\11\42\0\1\u017d\22\0\1\u017e\50\0\2\11"+
    "\2\0\7\11\4\0\17\11\1\u017f\5\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\25\11\1\0\2\11"+
    "\1\u0180\2\11\32\0\2\11\2\0\7\11\4\0\10\11"+
    "\1\u0181\14\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\3\11\1\u0182\21\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\17\11\1\u0183\5\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\2\11\1\u0184\22\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\3\11"+
    "\1\u0185\21\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\17\11\1\u0186\5\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\11\11\1\u0187\13\11\1\0\5\11"+
    "\54\0\1\u0188\61\0\2\11\2\0\7\11\4\0\23\11"+
    "\1\u0189\1\11\1\0\5\11\32\0\2\11\2\0\7\11"+
    "\4\0\21\11\1\u018a\3\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\25\11\1\0\3\11\1\u018b\1\11"+
    "\32\0\2\11\2\0\7\11\4\0\24\11\1\u018c\1\0"+
    "\5\11\61\0\1\u018d\54\0\2\11\2\0\7\11\4\0"+
    "\1\u018e\24\11\1\0\5\11\72\0\1\u018f\43\0\2\11"+
    "\2\0\7\11\4\0\17\11\1\u0190\5\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\13\11\1\u0191\11\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\11\11"+
    "\1\u0192\13\11\1\0\5\11\73\0\1\u0193\42\0\2\11"+
    "\2\0\7\11\4\0\3\11\1\u0194\21\11\1\0\5\11"+
    "\71\0\1\u0195\77\0\1\u0196\50\0\2\11\2\0\7\11"+
    "\4\0\10\11\1\u0197\14\11\1\0\5\11\32\0\2\11"+
    "\2\0\7\11\4\0\3\11\1\u0198\21\11\1\0\5\11"+
    "\32\0\2\11\2\0\7\11\4\0\2\11\1\u0199\22\11"+
    "\1\0\5\11\32\0\2\11\2\0\7\11\4\0\24\11"+
    "\1\u019a\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\6\11\1\u019b\16\11\1\0\5\11\76\0\1\u019c\37\0"+
    "\2\11\2\0\7\11\4\0\13\11\1\u019d\11\11\1\0"+
    "\5\11\32\0\2\11\2\0\7\11\4\0\2\11\1\u019e"+
    "\22\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\14\11\1\u019f\10\11\1\0\5\11\64\0\1\u01a0\51\0"+
    "\2\11\2\0\7\11\4\0\25\11\1\u01a1\5\11\56\0"+
    "\1\u01a2\57\0\2\11\2\0\7\11\4\0\2\11\1\u01a3"+
    "\22\11\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\10\11\1\u01a4\14\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\17\11\1\u01a5\5\11\1\0\5\11\57\0"+
    "\1\u01a6\110\0\1\u01a7\72\0\1\u01a8\62\0\2\11\2\0"+
    "\7\11\4\0\22\11\1\u01a9\2\11\1\0\5\11\32\0"+
    "\2\11\2\0\7\11\4\0\24\11\1\u01aa\1\0\5\11"+
    "\62\0\1\u01ab\53\0\2\11\2\0\7\11\4\0\16\11"+
    "\1\u01ac\6\11\1\0\5\11\54\0\1\u01ad\122\0\1\u01ae"+
    "\105\0\1\u01af\40\0\2\11\2\0\7\11\4\0\24\11"+
    "\1\u01b0\1\0\5\11\32\0\2\11\2\0\7\11\4\0"+
    "\3\11\1\u01b1\21\11\1\0\5\11\32\0\2\11\2\0"+
    "\7\11\4\0\2\11\1\u01b2\22\11\1\0\5\11\61\0"+
    "\1\u01b3\101\0\1\u01b4\116\0\1\u01b5\43\0\2\11\2\0"+
    "\7\11\4\0\13\11\1\u01b6\11\11\1\0\5\11\72\0"+
    "\1\u01b7\43\0\2\11\2\0\7\11\4\0\2\11\1\u01b8"+
    "\22\11\1\0\5\11\70\0\1\u01b9\72\0\1\u01ba\56\0"+
    "\2\11\2\0\7\11\4\0\25\11\1\u01bb\5\11\56\0"+
    "\1\u01bc\100\0\1\u01bd\120\0\1\u01be\45\0\2\11\2\0"+
    "\7\11\4\0\21\11\1\u01bf\3\11\1\0\5\11\70\0"+
    "\1\u01c0\74\0\1\u01c1\115\0\1\u01c2\101\0\1\u01c3\107\0"+
    "\1\u01c4\72\0\1\u01c5\51\0\2\11\2\0\7\11\4\0"+
    "\11\11\1\u01c6\13\11\1\0\5\11\64\0\1\u01c7\75\0"+
    "\1\u01c8\104\0\1\u01c9\123\0\1\u01ca\36\0\2\11\2\0"+
    "\7\11\4\0\23\11\1\u01cb\1\11\1\0\5\11\77\0"+
    "\1\u01cc\75\0\1\u01cd\73\0\1\u01ce\75\0\1\u01cf\103\0"+
    "\1\u01d0\106\0\1\u01d1\116\0\1\u01d2\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24548];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\1\0\1\11\42\1\12\11\1\1\1\11\7\1"+
    "\1\11\12\1\2\11\4\1\2\11\1\1\1\11\1\1"+
    "\1\11\54\1\2\11\4\1\10\11\1\0\1\11\1\0"+
    "\1\11\7\1\1\0\1\1\2\0\13\1\1\0\61\1"+
    "\2\11\1\0\4\1\1\11\11\1\1\0\57\1\1\11"+
    "\7\1\1\0\6\1\1\0\10\1\1\0\17\1\1\0"+
    "\13\1\2\0\5\1\1\0\10\1\1\0\14\1\1\0"+
    "\7\1\1\0\1\11\3\1\1\0\3\1\1\0\2\1"+
    "\2\0\11\1\1\0\4\1\1\0\1\1\1\0\3\1"+
    "\1\0\1\1\2\0\5\1\1\0\3\1\3\0\3\1"+
    "\3\0\2\1\1\0\1\1\2\0\1\11\3\1\3\0"+
    "\1\1\1\0\1\1\1\11\5\0\1\1\3\0\2\11"+
    "\1\0\1\1\4\0\1\1\1\0\1\11\1\0\2\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _DroolsLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _DroolsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return     STRING_IDENTIFIER ;
            } 
            // fall through
          case 128: break;
          case 2: 
            { yybegin(YYINITIAL); return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 129: break;
          case 3: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 130: break;
          case 4: 
            { return       OP_DIV;
            } 
            // fall through
          case 131: break;
          case 5: 
            { return     SINGLE_LINE_COMMENT_DEPR ;
            } 
            // fall through
          case 132: break;
          case 6: 
            { return       OP_MUL;
            } 
            // fall through
          case 133: break;
          case 7: 
            { return     JAVA_IDENTIFIER ;
            } 
            // fall through
          case 134: break;
          case 8: 
            { return     INT_TOKEN ;
            } 
            // fall through
          case 135: break;
          case 9: 
            { return       OP_PLUS;
            } 
            // fall through
          case 136: break;
          case 10: 
            { return       DOT;
            } 
            // fall through
          case 137: break;
          case 11: 
            { return     CHARACTER_LITERAL;
            } 
            // fall through
          case 138: break;
          case 12: 
            { return     STRING_TOKEN ;
            } 
            // fall through
          case 139: break;
          case 13: 
            { return       OP_MINUS;
            } 
            // fall through
          case 140: break;
          case 14: 
            { return       LBRACE;
            } 
            // fall through
          case 141: break;
          case 15: 
            { return       RBRACE;
            } 
            // fall through
          case 142: break;
          case 16: 
            { return       LBRACKET;
            } 
            // fall through
          case 143: break;
          case 17: 
            { return       RBRACKET;
            } 
            // fall through
          case 144: break;
          case 18: 
            { return       LPAREN;
            } 
            // fall through
          case 145: break;
          case 19: 
            { return       RPAREN;
            } 
            // fall through
          case 146: break;
          case 20: 
            { return       SEMICOLON;
            } 
            // fall through
          case 147: break;
          case 21: 
            { return       COLON;
            } 
            // fall through
          case 148: break;
          case 22: 
            { return       COMMA;
            } 
            // fall through
          case 149: break;
          case 23: 
            { return       QUEST;
            } 
            // fall through
          case 150: break;
          case 24: 
            { return       OP_REMAINDER;
            } 
            // fall through
          case 151: break;
          case 25: 
            { return       OP_AT;
            } 
            // fall through
          case 152: break;
          case 26: 
            { return       OP_ASSIGN;
            } 
            // fall through
          case 153: break;
          case 27: 
            { return       OP_BIT_AND;
            } 
            // fall through
          case 154: break;
          case 28: 
            { return       OP_BIT_OR;
            } 
            // fall through
          case 155: break;
          case 29: 
            { return       OP_BIT_XOR;
            } 
            // fall through
          case 156: break;
          case 30: 
            { return       OP_LESS;
            } 
            // fall through
          case 157: break;
          case 31: 
            { return       OP_GREATER;
            } 
            // fall through
          case 158: break;
          case 32: 
            { return       OP_NOT;
            } 
            // fall through
          case 159: break;
          case 33: 
            { return       OP_COMPLEMENT;
            } 
            // fall through
          case 160: break;
          case 34: 
            { return     SINGLE_LINE_COMMENT ;
            } 
            // fall through
          case 161: break;
          case 35: 
            { return     MULTI_LINE_COMMENT ;
            } 
            // fall through
          case 162: break;
          case 36: 
            { return       OP_DIV_ASSIGN;
            } 
            // fall through
          case 163: break;
          case 37: 
            { return       OP_MUL_ASSIGN;
            } 
            // fall through
          case 164: break;
          case 38: 
            { return     FLOAT_TOKEN ;
            } 
            // fall through
          case 165: break;
          case 39: 
            { return       OP_PLUS_PLUS;
            } 
            // fall through
          case 166: break;
          case 40: 
            { return       OP_PLUS_ASSIGN;
            } 
            // fall through
          case 167: break;
          case 41: 
            { return      IN;
            } 
            // fall through
          case 168: break;
          case 42: 
            { return       OP_MINUS_MINUS;
            } 
            // fall through
          case 169: break;
          case 43: 
            { return       OP_MINUS_ASSIGN;
            } 
            // fall through
          case 170: break;
          case 44: 
            { return       OP_REMAINDER_ASSIGN;
            } 
            // fall through
          case 171: break;
          case 45: 
            { return       OP_EQ;
            } 
            // fall through
          case 172: break;
          case 46: 
            { return       OP_BIT_AND_ASSIGN;
            } 
            // fall through
          case 173: break;
          case 47: 
            { return       OP_COND_AND;
            } 
            // fall through
          case 174: break;
          case 48: 
            { return       OP_BIT_OR_ASSIGN;
            } 
            // fall through
          case 175: break;
          case 49: 
            { return       OP_COND_OR;
            } 
            // fall through
          case 176: break;
          case 50: 
            { return       OP_BIT_XOR_ASSIGN;
            } 
            // fall through
          case 177: break;
          case 51: 
            { return       OP_LESS_OR_EQUAL;
            } 
            // fall through
          case 178: break;
          case 52: 
            { return       OP_GREATER_OR_EQUAL;
            } 
            // fall through
          case 179: break;
          case 53: 
            { return       OP_NOT_EQ;
            } 
            // fall through
          case 180: break;
          case 54: 
            { return      OR;
            } 
            // fall through
          case 181: break;
          case 55: 
            { return      DO;
            } 
            // fall through
          case 182: break;
          case 56: 
            { return      IF;
            } 
            // fall through
          case 183: break;
          case 57: 
            { return      END;
            } 
            // fall through
          case 184: break;
          case 58: 
            { return      NOT;
            } 
            // fall through
          case 185: break;
          case 59: 
            { return       INT;
            } 
            // fall through
          case 186: break;
          case 60: 
            { return      IS_A;
            } 
            // fall through
          case 187: break;
          case 61: 
            { return       OP_SL_ASSIGN;
            } 
            // fall through
          case 188: break;
          case 62: 
            { return       OP_SR_ASSIGN;
            } 
            // fall through
          case 189: break;
          case 63: 
            { yybegin(YYINITIAL); return END;
            } 
            // fall through
          case 190: break;
          case 64: 
            { return      AND;
            } 
            // fall through
          case 191: break;
          case 65: 
            { { yybegin(LHS_STATE);  return WHEN;}
            } 
            // fall through
          case 192: break;
          case 66: 
            { return      EVAL;
            } 
            // fall through
          case 193: break;
          case 67: 
            { return     NULL ;
            } 
            // fall through
          case 194: break;
          case 68: 
            { return      RULE;
            } 
            // fall through
          case 195: break;
          case 69: 
            { return      OVER;
            } 
            // fall through
          case 196: break;
          case 70: 
            { return      INIT;
            } 
            // fall through
          case 197: break;
          case 71: 
            { return      FROM;
            } 
            // fall through
          case 198: break;
          case 72: 
            { return       BYTE;
            } 
            // fall through
          case 199: break;
          case 73: 
            { return      THEN;
            } 
            // fall through
          case 200: break;
          case 74: 
            { return      THIS;
            } 
            // fall through
          case 201: break;
          case 75: 
            { return     TRUE ;
            } 
            // fall through
          case 202: break;
          case 76: 
            { return       CHAR;
            } 
            // fall through
          case 203: break;
          case 77: 
            { return       LONG;
            } 
            // fall through
          case 204: break;
          case 78: 
            { return       VOID;
            } 
            // fall through
          case 205: break;
          case 79: 
            { return       OP_BSR_ASSIGN;
            } 
            // fall through
          case 206: break;
          case 80: 
            { yybegin(YYINITIAL); return THEN;
            } 
            // fall through
          case 207: break;
          case 81: 
            { { yybegin(QUERY_STATE);  return QUERY;}
            } 
            // fall through
          case 208: break;
          case 82: 
            { return     FALSE ;
            } 
            // fall through
          case 209: break;
          case 83: 
            { return       FLOAT;
            } 
            // fall through
          case 210: break;
          case 84: 
            { return      TIMER;
            } 
            // fall through
          case 211: break;
          case 85: 
            { return       SHORT;
            } 
            // fall through
          case 212: break;
          case 86: 
            { return      BREAK;
            } 
            // fall through
          case 213: break;
          case 87: 
            { return      WINDOW;
            } 
            // fall through
          case 214: break;
          case 88: 
            { return      EXISTS;
            } 
            // fall through
          case 215: break;
          case 89: 
            { return      UPDATE;
            } 
            // fall through
          case 216: break;
          case 90: 
            { return      RESULT;
            } 
            // fall through
          case 217: break;
          case 91: 
            { return      ACTION;
            } 
            // fall through
          case 218: break;
          case 92: 
            { return       DOUBLE;
            } 
            // fall through
          case 219: break;
          case 93: 
            { return      INSERT;
            } 
            // fall through
          case 220: break;
          case 94: 
            { return      IMPORT;
            } 
            // fall through
          case 221: break;
          case 95: 
            { return      FORALL;
            } 
            // fall through
          case 222: break;
          case 96: 
            { return      GLOBAL;
            } 
            // fall through
          case 223: break;
          case 97: 
            { return      MODIFY;
            } 
            // fall through
          case 224: break;
          case 98: 
            { return      EXTENDS;
            } 
            // fall through
          case 225: break;
          case 99: 
            { return      ENABLED;
            } 
            // fall through
          case 226: break;
          case 100: 
            { return      NO_LOOP;
            } 
            // fall through
          case 227: break;
          case 101: 
            { return      RETRACT;
            } 
            // fall through
          case 228: break;
          case 102: 
            { return      REVERSE;
            } 
            // fall through
          case 229: break;
          case 103: 
            { return      DECLARE;
            } 
            // fall through
          case 230: break;
          case 104: 
            { return      DIALECT;
            } 
            // fall through
          case 231: break;
          case 105: 
            { return       BOOLEAN;
            } 
            // fall through
          case 232: break;
          case 106: 
            { return      PACKAGE;
            } 
            // fall through
          case 233: break;
          case 107: 
            { return      COLLECT;
            } 
            // fall through
          case 234: break;
          case 108: 
            { return      MATCHES;
            } 
            // fall through
          case 235: break;
          case 109: 
            { return      DURATION;
            } 
            // fall through
          case 236: break;
          case 110: 
            { return      FUNCTION;
            } 
            // fall through
          case 237: break;
          case 111: 
            { return      TEMPLATE;
            } 
            // fall through
          case 238: break;
          case 112: 
            { return      CONTAINS;
            } 
            // fall through
          case 239: break;
          case 113: 
            { return      SALIENCE;
            } 
            // fall through
          case 240: break;
          case 114: 
            { return      MEMBEROF;
            } 
            // fall through
          case 241: break;
          case 115: 
            { return      CALENDARS;
            } 
            // fall through
          case 242: break;
          case 116: 
            { return      AUTO_FOCUS;
            } 
            // fall through
          case 243: break;
          case 117: 
            { return      ATTRIBUTES;
            } 
            // fall through
          case 244: break;
          case 118: 
            { return      ACCUMULATE;
            } 
            // fall through
          case 245: break;
          case 119: 
            { return      SOUNDSLIKE;
            } 
            // fall through
          case 246: break;
          case 120: 
            { return      ENTRY_POINT;
            } 
            // fall through
          case 247: break;
          case 121: 
            { return      AGENDA_GROUP;
            } 
            // fall through
          case 248: break;
          case 122: 
            { return      DATE_EXPIRES;
            } 
            // fall through
          case 249: break;
          case 123: 
            { return      INSERT_LOGICAL;
            } 
            // fall through
          case 250: break;
          case 124: 
            { return      RULEFLOW_GROUP;
            } 
            // fall through
          case 251: break;
          case 125: 
            { return     DATE_EFFECTIVE;
            } 
            // fall through
          case 252: break;
          case 126: 
            { return     LOCK_ON_ACTIVE;
            } 
            // fall through
          case 253: break;
          case 127: 
            { return      ACTIVATION_GROUP;
            } 
            // fall through
          case 254: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
