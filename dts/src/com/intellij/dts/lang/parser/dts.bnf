{
  parserClass="com.intellij.dts.lang.parser.DtsParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  generate=[visitor="no" fqn="yes"]

  psiClassPrefix="Dts"
  psiImplClassSuffix="Impl"
  psiPackage="com.intellij.dts.lang.psi"
  psiImplPackage="com.intellij.dts.lang.psi.impl"

  elementTypeHolderClass="com.intellij.dts.lang.psi.DtsTypes"
  elementTypeClass="com.intellij.dts.lang.DtsElementType"

  tokenTypeClass="com.intellij.dts.lang.DtsTokenType"
  parserUtilClass="com.intellij.dts.lang.parser.DtsParserUtil"

  implements("rootNode")="com.intellij.dts.lang.psi.DtsNode.Root"
  mixin("rootNode")="com.intellij.dts.lang.psi.mixin.DtsRootNodeMixin"
  implements("subNode")="com.intellij.dts.lang.psi.DtsNode.Sub"
  mixin("subNode")="com.intellij.dts.lang.psi.mixin.DtsSubNodeMixin"

  implements("property")="com.intellij.dts.lang.psi.mixin.IDtsProperty"
  mixin("property")="com.intellij.dts.lang.psi.mixin.DtsPropertyMixin"

  implements("compilerDirective")="com.intellij.dts.lang.psi.mixin.IDtsCompilerDirective"
  mixin("compilerDirective")="com.intellij.dts.lang.psi.mixin.DtsCompilerDirectiveMixin"

  implements("content")="com.intellij.dts.lang.psi.mixin.IDtsContent"
  mixin("content")="com.intellij.dts.lang.psi.mixin.DtsContentMixin"
  mixin("nodeContent")="com.intellij.dts.lang.psi.mixin.DtsNodeContentMixin"

  implements("entry")="com.intellij.dts.lang.psi.mixin.IDtsEntry"
  mixin("entry")="com.intellij.dts.lang.psi.mixin.DtsEntryMixin"

  implements("cellArray")="com.intellij.dts.lang.psi.DtsArray.Cell"
  mixin("cellArray")="com.intellij.dts.lang.psi.mixin.DtsCellArrayMixin"

  implements("byteArray")="com.intellij.dts.lang.psi.DtsArray.Byte"

  implements("cellArrayBits")="com.intellij.dts.lang.psi.mixin.IDtsCellArrayBits"
  mixin("cellArrayBits")="com.intellij.dts.lang.psi.mixin.DtsCellArrayBitsMixin"

  implements("byte|char|string|pHandle|cellArray|byteArray|exprValue|ppMacro")="com.intellij.dts.lang.psi.DtsValue.Untyped"

  implements("int")="com.intellij.dts.lang.psi.DtsValue.Int"
  mixin("int")="com.intellij.dts.lang.psi.mixin.DtsIntMixin"

  extends(".*Expr")=expr
  extends("nodeContent")=content

  tokens=[
    COMMENT_EOL="COMMENT_EOL"
    COMMENT_C="COMMENT_C"
    PP_STATEMENT="PP_STATEMENT"
    PP_MACRO_ARG="PP_MACRO_ARG"
    INCLUDE="INCLUDE"
  ]
}

private dtsFile ::= nodeContent | content

content ::= (
    <<entry rootNode>> |
    <<compilerDirectiveEntry V1 ()>> |
    <<compilerDirectiveEntry PLUGIN ()>> |
    <<compilerDirectiveEntry (LABEL* MEMRESERVE) (cell cell)>> |
    <<compilerDirectiveEntry OMIT_NODE pHandle>> |
    <<compilerDirectiveEntry DELETE_NODE pHandle>> |
    invalidEntry
)*

nodeContent ::= (
    <<compilerDirectiveEntry DELETE_PROP NAME>> |
    // only pin on delete and valid name
    <<compilerDirectiveEntry (DELETE_NODE NAME) ()>> |
    <<entry subNode>> |
    <<entry property>>
)+

external invalidEntry ::= parseInvalidEntry

rootNode ::= LABEL* (SLASH | pHandle) LBRACE nodeContent? RBRACE {pin=3 recoverWhile="rootNodeRecover"}
private rootNodeRecover ::= !(SEMICOLON | RBRACE | afterLineBreak)

subNode ::= LABEL* OMIT_NODE? LABEL* NAME LBRACE nodeContent? RBRACE {pin=5 recoverWhile="subNodeRecover"}
private subNodeRecover ::= !(SEMICOLON | RBRACE | NAME | afterLineBreak)

property ::= LABEL* NAME propertyAssignment?
private propertyAssignment ::= ASSIGN propertyContent {pin=1}
propertyContent ::= propertyValue (COMMA propertyValue)* {recoverWhile="propertyRecover"}
private propertyValue ::= <<value (string | pHandle | cellArray | byteArray | ppMacro)>>
private propertyRecover ::= !(SEMICOLON | RBRACE | NAME | afterLineBreak)

cellArray ::= cellArrayBits? LANGL cellArrayContent RANGL {pin=2}
private cellArrayContent ::= cellArrayValue* {recoverWhile="cellArrayRecover"}
private cellArrayValue ::= <<value (pHandle | cell)>>
private cellArrayRecover ::= !(SEMICOLON | RBRACE | COMMA | RANGL | RPAREN)

cellArrayBits ::= BITS (int | ppMacro) {pin=1 recoverWhile="cellArrayBitsRecover"}
private cellArrayBitsRecover ::= !(SEMICOLON | RBRACE | LANGL)

byteArray ::= LBRAC byteArrayContent RBRAC {pin=1}
private byteArrayContent ::= byteArrayValue* {recoverWhile="byteArrayRecover"}
private byteArrayValue ::= <<value (byte | ppMacro)>>
private byteArrayRecover ::= !(SEMICOLON | RBRACE | COMMA | RBRAC | RPAREN)

pHandle ::= HANDLE (NAME | pHandlePath) {pin=1}
private pHandlePath ::= LBRACE path RBRACE {pin=1}
private path ::= PATH {recoverWhile="pathRecover"}
private pathRecover ::= !(SEMICOLON | RANGL | RBRACE)

meta entry ::= <<arg>> SEMICOLON {pin=1}
private meta value ::= LABEL* <<arg>> LABEL*

private meta compilerDirectiveEntry ::= <<entry <<compilerDirective <<directive>> <<arg>>>>>>
meta compilerDirective ::= <<directive>> <<arg>> {pin=1 recoverWhile="compilerDirectiveRecover"}
private compilerDirectiveRecover ::= !(SEMICOLON | RBRACE | afterLineBreak)

private cell ::= int | char | exprValue | ppMacro

byte ::= BYTE_VALUE
int ::= INT_VALUE
string ::= DQUOTE STRING_VALUE? DQUOTE {pin=1}
char ::= SQUOTE CHAR_VALUE* SQUOTE {pin=1}

ppMacro ::= parserPpMacro
external parserPpMacro ::= parsePpMacro

external afterLineBreak ::= parseAfterLineBreak

exprValue ::= LPAREN expr RPAREN {pin=1}

expr ::= ppMacroExpr
    | ternaryExpr
    | lOrExpr
    | lAndExpr
    | bOrExpr
    | xorExpr
    | bAndExpr
    | eqGroup
    | relaGroup
    | shiftGroup
    | addGroup
    | mulGroup
    | unaryGroup
    | primaryGroup

private eqGroup ::= eqExpr | neqExpr
private relaGroup ::= lesExpr | grtExpr | leqExpr | geqExpr
private shiftGroup ::= lshExpr | rshExpr
private addGroup ::= addExpr | subExpr
private mulGroup ::= mulExpr | divExpr | modExpr
private unaryGroup ::= lNotExpr | bNotExpr | negExpr
private primaryGroup ::= intExpr | charExpr | parenExpr

ppMacroExpr ::= ppMacro
ternaryExpr ::= expr TERNARY expr COLON expr

addExpr ::= expr ADD expr
subExpr ::= expr SUB expr
mulExpr ::= expr MUL expr
divExpr ::= expr DIV expr
modExpr ::= expr MOD expr

bAndExpr ::= expr AND expr
lAndExpr ::= expr L_AND expr

bOrExpr ::= expr OR expr
lOrExpr ::= expr L_OR expr

bNotExpr ::= NOT expr
lNotExpr ::= L_NOT expr
negExpr ::= SUB expr

xorExpr ::= expr XOR expr
lshExpr ::= expr LSH expr
rshExpr ::= expr RSH expr

lesExpr ::= expr LES expr
grtExpr ::= expr GRT expr
leqExpr ::= expr LEQ expr
geqExpr ::= expr GEQ expr
eqExpr ::= expr EQ expr
neqExpr ::= expr NEQ expr

intExpr ::= int
charExpr ::= char
parenExpr ::= LPAREN expr RPAREN

includeDirective ::= () INCLUDE string { pin=1 }