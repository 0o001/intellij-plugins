/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

 /* It's an automatically generated code. Do not modify it. */
package com.intellij.plugins.postcss.lexer;
import com.intellij.psi.css.impl.*;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import com.intellij.openapi.util.text.StringUtil;
import org.intellij.plugins.postcss.lexer.PostCssTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>postcss.flex</tt>
 */
public class _PostCssLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CSS_URI = 2;
  public static final int CSS_FUNCTION = 4;
  public static final int CSS_FUNCTION_MINUS_N = 6;
  public static final int CSS_COMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\3\1\2\1\17\1\3\1\21\1\20\22\3\1\12\1\34\1\22\1\25\1\27\1\100\1\112\1\23"+
    "\1\64\1\13\1\102\1\7\1\77\1\10\1\16\1\32\1\31\10\1\1\33\1\75\1\76\1\107\1"+
    "\106\1\101\1\11\1\63\1\35\1\36\1\37\1\40\1\41\1\4\1\42\1\43\1\44\1\15\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\15\1\53\1\54\1\55\1\6\1\57\1\60\1\61\1\62\1\14"+
    "\1\103\1\5\1\104\1\111\1\15\1\24\1\35\1\36\1\37\1\40\1\65\1\4\1\42\1\43\1"+
    "\72\1\15\1\45\1\46\1\47\1\74\1\73\1\67\1\15\1\70\1\71\1\55\1\56\1\57\1\60"+
    "\1\66\1\62\1\14\1\26\1\110\1\30\1\105\1\3\200\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\0\1\2\1\3\1\4\2\5\1\2"+
    "\1\6\1\7\1\10\1\11\2\12\1\5\1\13\1\5"+
    "\1\14\1\15\1\5\2\2\1\5\1\16\1\2\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\5\1\31\1\32\1\33\3\1\1\34\2\5"+
    "\1\1\1\35\2\0\1\7\1\36\2\37\2\0\1\40"+
    "\1\0\2\37\1\0\1\2\1\0\1\2\1\41\1\3"+
    "\3\12\1\42\2\0\1\43\3\0\1\44\2\0\1\45"+
    "\1\2\2\46\2\0\16\46\1\2\1\47\1\50\1\0"+
    "\1\51\1\52\1\53\2\1\1\54\2\55\1\0\2\56"+
    "\1\2\1\57\2\12\2\0\1\2\1\60\2\0\1\2"+
    "\27\46\1\2\1\0\1\61\1\1\1\55\1\56\1\0"+
    "\1\56\1\2\1\62\2\63\2\0\1\2\27\46\1\2"+
    "\1\64\2\1\3\56\1\2\1\63\1\0\1\2\16\46"+
    "\1\65\1\66\5\46\1\2\2\1\3\56\1\2\1\0"+
    "\1\2\4\46\1\67\7\46\1\70\3\46\1\71\4\46"+
    "\1\2\1\1\1\61\3\56\1\2\1\0\6\46\1\72"+
    "\5\46\1\73\5\46\1\2\1\1\3\56\1\2\1\0"+
    "\3\46\1\74\15\46\1\2\1\1\1\56\1\2\1\0"+
    "\3\46\1\75\3\46\1\76\2\46\1\77\1\46\1\76"+
    "\1\100\1\2\1\1\1\101\1\102\2\46\1\103\2\46"+
    "\1\104\3\46\1\2\5\46\1\105\4\46\1\73\1\46"+
    "\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0258\0\u0339\0\u0258\0\u0384\0\u03cf"+
    "\0\u041a\0\u0465\0\u0258\0\u04b0\0\u0258\0\u04fb\0\u0546\0\u0591"+
    "\0\u05dc\0\u0627\0\u0258\0\u0672\0\u0258\0\u0258\0\u0258\0\u0258"+
    "\0\u0258\0\u06bd\0\u0258\0\u0258\0\u0708\0\u0258\0\u0753\0\u079e"+
    "\0\u07e9\0\u0258\0\u0834\0\u087f\0\u08ca\0\u0258\0\u03cf\0\u041a"+
    "\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u0258\0\u0258\0\u0258\0\u0a41"+
    "\0\u0a8c\0\u0ad7\0\u0258\0\u0384\0\u0b22\0\u0177\0\u0b6d\0\u0bb8"+
    "\0\u0c03\0\u0c4e\0\u0177\0\u0384\0\u0c99\0\u0258\0\u0ce4\0\u0d2f"+
    "\0\u0d7a\0\u0dc5\0\u0258\0\u0e10\0\u0e5b\0\u0ea6\0\u0258\0\u0ef1"+
    "\0\u0f3c\0\u0258\0\u0f87\0\u0fd2\0\u101d\0\u1068\0\u10b3\0\u10fe"+
    "\0\u1149\0\u1194\0\u11df\0\u122a\0\u1275\0\u12c0\0\u130b\0\u1356"+
    "\0\u13a1\0\u13ec\0\u1437\0\u1482\0\u14cd\0\u1518\0\u0258\0\u0258"+
    "\0\u1563\0\u0258\0\u0258\0\u0258\0\u15ae\0\u15f9\0\u0258\0\u1644"+
    "\0\u0177\0\u168f\0\u16da\0\u1725\0\u1770\0\u0258\0\u17bb\0\u1806"+
    "\0\u1851\0\u189c\0\u0258\0\u0258\0\u18e7\0\u1932\0\u197d\0\u19c8"+
    "\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f\0\u1b8a\0\u1bd5\0\u1c20"+
    "\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97\0\u1de2\0\u1e2d\0\u1e78"+
    "\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4\0\u1fef\0\u203a\0\u2085\0\u20d0"+
    "\0\u211b\0\u2166\0\u0258\0\u21b1\0\u21fc\0\u2247\0\u2292\0\u0258"+
    "\0\u22dd\0\u0d2f\0\u2328\0\u2373\0\u23be\0\u2409\0\u2454\0\u249f"+
    "\0\u24ea\0\u2535\0\u2580\0\u25cb\0\u2616\0\u2661\0\u26ac\0\u26f7"+
    "\0\u2742\0\u278d\0\u27d8\0\u2823\0\u286e\0\u28b9\0\u2904\0\u294f"+
    "\0\u299a\0\u29e5\0\u2a30\0\u2a7b\0\u2ac6\0\u0258\0\u2b11\0\u2b5c"+
    "\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88\0\u0258\0\u2cd3\0\u2d1e\0\u2d69"+
    "\0\u2db4\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0\0\u2f2b\0\u2f76\0\u2fc1"+
    "\0\u300c\0\u3057\0\u30a2\0\u30ed\0\u3138\0\u0fd2\0\u0fd2\0\u3183"+
    "\0\u31ce\0\u3219\0\u3264\0\u32af\0\u32fa\0\u3345\0\u3390\0\u33db"+
    "\0\u3426\0\u3471\0\u34bc\0\u3507\0\u3552\0\u359d\0\u35e8\0\u3633"+
    "\0\u367e\0\u0fd2\0\u36c9\0\u3714\0\u375f\0\u37aa\0\u37f5\0\u3840"+
    "\0\u388b\0\u0fd2\0\u38d6\0\u3921\0\u396c\0\u0fd2\0\u39b7\0\u3a02"+
    "\0\u3a4d\0\u3a98\0\u3ae3\0\u3b2e\0\u0834\0\u3b79\0\u3bc4\0\u3c0f"+
    "\0\u3c5a\0\u3ca5\0\u3cf0\0\u3d3b\0\u3d86\0\u3dd1\0\u3e1c\0\u3e67"+
    "\0\u0fd2\0\u3eb2\0\u3efd\0\u3f48\0\u3f93\0\u3fde\0\u4029\0\u4074"+
    "\0\u40bf\0\u410a\0\u4155\0\u41a0\0\u41eb\0\u4236\0\u4281\0\u0258"+
    "\0\u42cc\0\u4317\0\u4362\0\u43ad\0\u43f8\0\u4443\0\u0fd2\0\u448e"+
    "\0\u44d9\0\u4524\0\u456f\0\u45ba\0\u4605\0\u4650\0\u469b\0\u46e6"+
    "\0\u4731\0\u477c\0\u47c7\0\u4812\0\u485d\0\u48a8\0\u48f3\0\u493e"+
    "\0\u4989\0\u49d4\0\u4a1f\0\u4a6a\0\u0fd2\0\u4ab5\0\u4b00\0\u4b4b"+
    "\0\u0fd2\0\u4b96\0\u4be1\0\u0fd2\0\u4c2c\0\u4c77\0\u0fd2\0\u4cc2"+
    "\0\u4d0d\0\u0258\0\u0fd2\0\u4d58\0\u4da3\0\u0fd2\0\u4dee\0\u4e39"+
    "\0\u0fd2\0\u4e84\0\u4ecf\0\u4f1a\0\u4f65\0\u4fb0\0\u4ffb\0\u5046"+
    "\0\u5091\0\u50dc\0\u0258\0\u5127\0\u5172\0\u51bd\0\u5208\0\u0fd2"+
    "\0\u5253\0\u0fd2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\6\1\12\1\13\1\14"+
    "\1\15\1\11\1\10\1\16\2\6\1\17\3\10\1\20"+
    "\1\21\1\11\1\22\1\23\1\24\1\25\1\7\1\26"+
    "\1\7\1\27\3\6\1\30\15\6\1\31\4\6\1\32"+
    "\1\33\1\34\7\6\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\2\53\1\10\1\11\1\53\1\54\1\55\3\53"+
    "\1\10\1\56\3\53\3\10\1\57\1\60\14\53\1\61"+
    "\15\53\1\55\5\53\1\33\26\53\1\62\3\0\1\62"+
    "\1\63\1\62\1\0\1\64\3\0\2\62\17\0\26\62"+
    "\2\0\10\62\26\0\1\65\63\0\1\66\16\0\102\67"+
    "\1\70\10\67\2\6\2\0\1\6\1\71\1\6\1\0"+
    "\1\6\3\0\2\6\13\0\1\6\1\0\1\6\1\72"+
    "\26\6\1\0\1\73\10\6\17\0\1\7\14\0\1\74"+
    "\12\0\1\7\1\0\1\7\61\0\1\10\7\0\1\10"+
    "\4\0\3\10\205\0\1\6\2\0\13\6\3\0\7\6"+
    "\1\75\1\6\1\76\61\6\2\0\1\6\1\71\1\6"+
    "\1\77\1\6\3\0\2\6\13\0\1\6\1\0\1\6"+
    "\1\72\16\6\1\100\7\6\1\0\1\73\3\6\1\100"+
    "\4\6\16\0\1\6\3\0\1\6\1\101\1\6\1\0"+
    "\1\102\3\0\2\6\17\0\26\6\2\0\7\6\1\103"+
    "\17\0\1\104\27\0\1\104\1\0\1\104\57\0\5\20"+
    "\1\105\11\20\3\0\1\106\70\20\5\21\1\107\11\21"+
    "\3\0\1\21\1\106\67\21\2\110\2\0\1\110\1\111"+
    "\1\110\1\0\1\110\3\0\2\110\10\0\1\112\2\0"+
    "\1\110\1\0\1\110\1\0\26\110\2\0\10\110\44\0"+
    "\1\112\57\0\1\113\4\0\1\114\3\0\1\114\1\115"+
    "\1\114\1\0\1\116\3\0\2\114\17\0\26\114\2\0"+
    "\10\114\5\0\1\117\12\0\1\120\7\0\1\120\4\0"+
    "\3\120\22\0\1\121\25\0\1\121\13\0\1\122\4\0"+
    "\2\6\2\0\1\6\1\71\1\6\1\0\1\6\3\0"+
    "\2\6\13\0\1\6\1\0\1\6\1\72\14\6\1\123"+
    "\11\6\1\0\1\73\6\6\1\123\1\6\16\0\2\6"+
    "\2\0\1\6\1\71\1\6\1\0\1\6\3\0\2\6"+
    "\13\0\1\6\1\0\1\6\1\72\16\6\1\100\7\6"+
    "\1\0\1\73\3\6\1\100\4\6\16\0\1\124\3\0"+
    "\1\125\1\126\1\124\1\0\1\127\3\0\2\124\17\0"+
    "\1\130\1\131\1\132\1\133\3\124\1\134\1\135\1\136"+
    "\1\137\1\140\1\124\1\141\1\142\1\143\1\144\1\124"+
    "\1\145\3\124\2\0\2\124\1\141\1\142\1\143\1\134"+
    "\1\124\1\140\16\0\2\6\2\0\1\6\1\71\1\6"+
    "\1\0\1\6\3\0\2\6\13\0\1\6\1\0\1\6"+
    "\1\72\26\6\1\0\1\73\1\6\1\146\6\6\124\0"+
    "\1\147\112\0\1\150\40\0\1\151\164\0\1\152\112\0"+
    "\1\153\2\0\1\154\1\0\2\53\2\0\1\53\1\54"+
    "\4\53\2\0\3\53\5\0\40\53\1\0\30\53\2\0"+
    "\1\53\1\54\11\53\3\0\73\53\2\0\1\53\1\54"+
    "\4\53\2\0\3\53\5\0\27\53\1\155\10\53\1\0"+
    "\3\53\1\155\24\53\2\0\1\53\1\54\4\53\2\0"+
    "\3\53\5\0\25\53\1\156\12\53\1\0\6\53\1\156"+
    "\17\53\2\62\2\0\1\62\1\63\1\62\1\0\1\62"+
    "\3\0\2\62\13\0\1\62\1\0\1\62\1\0\26\62"+
    "\2\0\10\62\17\0\1\62\2\0\13\62\3\0\72\62"+
    "\3\0\1\62\1\63\1\62\1\0\1\62\3\0\2\62"+
    "\17\0\26\62\2\0\10\62\50\0\1\157\61\0\1\6"+
    "\2\0\13\6\3\0\7\6\1\160\1\6\1\161\57\6"+
    "\44\0\1\162\25\0\1\162\20\0\2\6\2\0\1\6"+
    "\1\71\1\6\1\0\1\6\3\0\2\6\13\0\1\6"+
    "\1\67\1\6\1\72\26\6\1\0\1\73\10\6\17\0"+
    "\1\163\2\0\1\163\4\0\1\164\17\0\1\163\1\0"+
    "\1\163\1\0\5\163\23\0\1\163\25\0\2\6\2\0"+
    "\1\6\1\71\1\6\1\0\1\6\3\0\2\6\13\0"+
    "\1\6\1\0\1\6\1\72\11\6\1\165\14\6\1\0"+
    "\1\73\10\6\17\0\1\6\2\0\13\6\3\0\73\6"+
    "\2\0\1\6\1\71\1\6\1\0\1\6\3\0\2\6"+
    "\13\0\1\6\1\0\1\6\1\72\26\6\1\0\1\73"+
    "\10\6\4\0\1\166\11\0\5\20\1\105\12\20\1\167"+
    "\72\20\5\21\1\107\12\21\1\170\72\21\2\110\2\0"+
    "\1\110\1\171\1\110\1\0\1\110\3\0\2\110\13\0"+
    "\1\110\1\0\1\110\1\172\26\110\2\0\10\110\17\0"+
    "\1\110\2\0\13\110\3\0\71\110\30\112\1\173\62\112"+
    "\2\114\2\0\1\114\1\115\1\114\1\0\1\114\3\0"+
    "\2\114\13\0\1\114\1\174\1\114\1\0\26\114\2\0"+
    "\10\114\17\0\1\114\2\0\13\114\3\0\72\114\3\0"+
    "\1\114\1\115\1\114\1\0\1\114\3\0\2\114\17\0"+
    "\26\114\2\0\10\114\20\0\1\120\7\0\1\120\4\0"+
    "\3\120\22\0\1\175\25\0\1\175\61\0\1\67\5\0"+
    "\1\176\15\0\1\67\25\0\2\6\2\0\1\6\1\71"+
    "\1\6\1\0\1\6\3\0\2\6\13\0\1\6\1\0"+
    "\1\6\1\72\12\6\1\177\13\6\1\0\1\73\10\6"+
    "\16\0\2\124\2\0\1\124\1\126\1\124\1\0\1\124"+
    "\3\0\2\124\13\0\1\124\1\0\1\124\1\0\26\124"+
    "\2\0\10\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\14\124\1\200\11\124\2\0\6\124\1\200\1\124"+
    "\17\0\1\124\2\0\13\124\3\0\72\124\3\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\17\0\10\124"+
    "\1\201\1\124\1\202\1\124\1\203\6\124\1\204\2\124"+
    "\2\0\6\124\1\203\1\124\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\15\124\1\205\10\124\2\0\2\124"+
    "\1\205\5\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\14\124\1\206\11\124\2\0\6\124\1\206\1\124"+
    "\16\0\2\124\2\0\1\124\1\126\1\124\1\0\1\124"+
    "\3\0\2\124\13\0\1\124\1\0\1\124\1\0\6\124"+
    "\1\207\5\124\1\210\11\124\2\0\6\124\1\210\1\124"+
    "\16\0\2\124\2\0\1\124\1\126\1\124\1\0\1\124"+
    "\3\0\2\124\13\0\1\124\1\0\1\124\1\0\14\124"+
    "\1\211\11\124\2\0\6\124\1\211\1\124\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\12\124\1\212\13\124"+
    "\2\0\10\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\4\124\1\213\21\124\2\0\1\213\7\124\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\4\124\1\214"+
    "\21\124\2\0\1\214\7\124\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\4\124\1\215\21\124\2\0\1\215"+
    "\7\124\16\0\2\124\2\0\1\124\1\126\1\124\1\0"+
    "\1\124\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\1\216\3\124\1\217\21\124\2\0\1\217\7\124\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\1\220\25\124"+
    "\2\0\10\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\4\124\1\221\2\124\1\222\16\124\2\0\1\221"+
    "\4\124\1\222\2\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\223\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\2\124\1\224\16\124\1\223\4\124\2\0"+
    "\10\124\16\0\2\124\2\0\1\124\1\126\1\124\1\0"+
    "\1\124\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\14\124\1\225\11\124\2\0\6\124\1\225\1\124\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\7\124\1\226"+
    "\16\124\2\0\5\124\1\226\2\124\16\0\2\6\2\0"+
    "\1\6\1\71\1\6\1\0\1\6\3\0\2\6\13\0"+
    "\1\6\1\0\1\6\1\72\26\6\1\0\1\73\2\6"+
    "\1\227\5\6\26\0\1\230\102\0\2\53\2\0\1\53"+
    "\1\54\4\53\2\0\3\53\5\0\22\53\1\231\15\53"+
    "\1\0\30\53\2\0\1\53\1\54\4\53\2\0\3\53"+
    "\5\0\23\53\1\232\14\53\1\0\26\53\2\6\2\0"+
    "\1\6\1\71\1\6\1\0\1\6\3\0\2\6\13\0"+
    "\1\6\1\233\1\6\1\72\26\6\1\0\1\73\10\6"+
    "\57\0\1\233\23\0\1\233\26\0\1\234\2\0\1\234"+
    "\3\0\1\235\1\236\17\0\1\234\1\0\1\234\1\0"+
    "\5\234\23\0\1\234\26\0\1\236\2\0\1\236\4\0"+
    "\1\236\17\0\1\236\1\0\1\236\1\0\5\236\23\0"+
    "\1\236\25\0\2\6\2\0\1\6\1\71\1\6\1\0"+
    "\1\237\3\0\2\6\13\0\1\6\1\0\1\6\1\72"+
    "\26\6\1\0\1\240\10\6\16\0\5\20\1\105\12\20"+
    "\2\0\1\106\70\20\5\21\1\107\12\21\2\0\1\21"+
    "\1\106\67\21\1\0\1\110\2\0\13\110\3\0\7\110"+
    "\1\241\1\110\1\242\57\110\44\0\1\243\25\0\1\243"+
    "\67\0\1\176\115\0\1\244\14\0\1\244\23\0\2\6"+
    "\2\0\1\6\1\71\1\6\1\0\1\6\3\0\2\6"+
    "\13\0\1\6\1\0\1\6\1\72\1\245\25\6\1\0"+
    "\1\73\10\6\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\13\124\1\246\12\124\2\0\7\124\1\246\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\6\124\1\247"+
    "\17\124\2\0\10\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\14\124\1\250\2\124\1\203\6\124\2\0"+
    "\4\124\1\203\1\124\1\250\1\124\16\0\2\124\2\0"+
    "\1\124\1\126\1\124\1\0\1\251\3\0\2\124\13\0"+
    "\1\124\1\0\1\124\1\0\26\124\2\0\10\124\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\4\124\1\252"+
    "\21\124\2\0\1\252\7\124\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\15\124\1\253\10\124\2\0\2\124"+
    "\1\253\5\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\20\124\1\254\5\124\2\0\10\124\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\1\255\25\124\2\0"+
    "\10\124\16\0\2\124\2\0\1\124\1\126\1\256\1\0"+
    "\1\124\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\21\124\1\256\4\124\2\0\10\124\16\0\2\124\2\0"+
    "\1\124\1\126\1\124\1\0\1\124\3\0\2\124\13\0"+
    "\1\124\1\0\1\124\1\0\2\124\1\257\23\124\2\0"+
    "\10\124\16\0\2\124\2\0\1\124\1\126\1\124\1\0"+
    "\1\124\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\15\124\1\260\10\124\2\0\2\124\1\260\5\124\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\25\124\1\261"+
    "\2\0\10\124\16\0\2\124\2\0\1\262\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\26\124\2\0\10\124\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\3\124\1\263\22\124\2\0\10\124"+
    "\16\0\2\124\2\0\1\124\1\126\1\124\1\0\1\124"+
    "\3\0\2\124\13\0\1\124\1\0\1\124\1\0\12\124"+
    "\1\264\13\124\2\0\10\124\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\17\124\1\265\6\124\2\0\4\124"+
    "\1\265\3\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\5\124\1\266\20\124\2\0\10\124\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\5\124\1\267\20\124"+
    "\2\0\10\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\5\124\1\270\20\124\2\0\10\124\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\15\124\1\271\10\124"+
    "\2\0\2\124\1\271\5\124\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\14\124\1\272\11\124\2\0\6\124"+
    "\1\272\1\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\15\124\1\273\10\124\2\0\2\124\1\273\5\124"+
    "\16\0\2\124\2\0\1\124\1\126\1\124\1\0\1\124"+
    "\3\0\2\124\13\0\1\124\1\0\1\124\1\0\4\124"+
    "\1\274\21\124\2\0\1\274\7\124\16\0\2\6\2\0"+
    "\1\6\1\71\1\6\1\0\1\6\3\0\2\6\13\0"+
    "\1\6\1\0\1\6\1\72\26\6\1\0\1\73\3\6"+
    "\1\275\4\6\26\0\1\276\102\0\2\53\2\0\1\53"+
    "\1\54\2\53\1\277\1\53\2\0\3\53\5\0\40\53"+
    "\1\0\30\53\2\0\1\53\1\54\4\53\2\0\3\53"+
    "\5\0\11\53\1\300\26\53\1\0\26\53\1\0\1\301"+
    "\2\0\1\301\3\0\1\235\1\302\17\0\1\301\1\0"+
    "\1\301\1\0\5\301\23\0\1\301\26\0\1\303\2\0"+
    "\1\303\24\0\1\303\1\0\1\303\1\0\5\303\23\0"+
    "\1\303\26\0\1\302\2\0\1\302\4\0\1\302\17\0"+
    "\1\302\1\0\1\302\1\0\5\302\23\0\1\302\25\0"+
    "\2\6\2\0\1\6\1\71\1\6\1\0\1\6\3\0"+
    "\2\6\13\0\1\6\1\0\1\6\1\72\15\6\1\304"+
    "\10\6\1\0\1\73\2\6\1\304\5\6\16\0\2\110"+
    "\2\0\1\110\1\171\1\110\1\0\1\110\3\0\2\110"+
    "\13\0\1\110\1\305\1\110\1\172\26\110\2\0\10\110"+
    "\57\0\1\305\23\0\1\305\76\0\1\306\21\0\1\306"+
    "\17\0\2\6\2\0\1\6\1\71\1\6\1\0\1\6"+
    "\3\0\2\6\13\0\1\6\1\0\1\6\1\72\7\6"+
    "\1\307\16\6\1\0\1\73\5\6\1\307\2\6\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\20\124\1\310"+
    "\5\124\2\0\10\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\20\124\1\311\5\124\2\0\10\124\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\1\312\1\124\13\0\1\124\1\0\1\124\1\0\26\124"+
    "\2\0\10\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\10\124\1\135\11\124\1\145\3\124\2\0\10\124"+
    "\16\0\2\124\2\0\1\124\1\126\1\124\1\0\1\124"+
    "\3\0\2\124\13\0\1\124\1\0\1\124\1\0\1\124"+
    "\1\313\24\124\2\0\10\124\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\11\124\1\314\14\124\2\0\10\124"+
    "\16\0\2\124\2\0\1\124\1\126\1\124\1\0\1\124"+
    "\3\0\2\124\13\0\1\124\1\0\1\124\1\0\20\124"+
    "\1\315\5\124\2\0\10\124\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\16\124\1\316\7\124\2\0\3\124"+
    "\1\316\4\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\13\124\1\317\12\124\2\0\7\124\1\317\16\0"+
    "\2\124\2\0\1\124\1\126\1\320\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\21\124\1\320"+
    "\4\124\2\0\10\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\14\124\1\321\11\124\2\0\6\124\1\321"+
    "\1\124\16\0\2\124\2\0\1\322\1\126\1\124\1\0"+
    "\1\124\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\26\124\2\0\10\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\20\124\1\323\5\124\2\0\10\124\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\7\124\1\324"+
    "\16\124\2\0\5\124\1\324\2\124\16\0\2\124\2\0"+
    "\1\124\1\126\1\124\1\0\1\124\3\0\2\124\13\0"+
    "\1\124\1\0\1\124\1\0\4\124\1\325\21\124\2\0"+
    "\1\325\7\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\20\124\1\326\5\124\2\0\10\124\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\4\124\1\327\21\124"+
    "\2\0\1\327\7\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\7\124\1\330\16\124\2\0\5\124\1\330"+
    "\2\124\16\0\2\124\2\0\1\124\1\126\1\124\1\0"+
    "\1\124\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\6\124\1\262\17\124\2\0\10\124\16\0\2\124\2\0"+
    "\1\124\1\126\1\124\1\0\1\124\3\0\2\124\13\0"+
    "\1\124\1\0\1\124\1\0\15\124\1\331\10\124\2\0"+
    "\2\124\1\331\5\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\15\124\1\332\10\124\2\0\2\124\1\332"+
    "\5\124\16\0\2\124\2\0\1\124\1\126\1\124\1\0"+
    "\1\333\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\26\124\2\0\10\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\23\124\1\334\2\124\2\0\10\124\16\0"+
    "\2\6\2\0\1\6\1\71\1\6\1\0\1\6\3\0"+
    "\2\6\13\0\1\6\1\0\1\6\1\72\26\6\1\0"+
    "\1\73\1\335\7\6\16\0\2\53\2\0\1\53\1\54"+
    "\4\53\2\0\3\53\5\0\26\53\1\336\11\53\1\0"+
    "\2\53\1\336\25\53\2\0\1\53\1\54\4\53\2\0"+
    "\3\53\5\0\20\53\1\337\17\53\1\0\5\53\1\337"+
    "\20\53\1\0\1\340\2\0\1\340\3\0\1\235\1\341"+
    "\17\0\1\340\1\0\1\340\1\0\5\340\23\0\1\340"+
    "\26\0\1\341\2\0\1\341\4\0\1\341\17\0\1\341"+
    "\1\0\1\341\1\0\5\341\23\0\1\341\26\0\1\342"+
    "\2\0\1\342\24\0\1\342\1\0\1\342\1\0\5\342"+
    "\23\0\1\342\25\0\2\6\2\0\1\6\1\71\1\6"+
    "\1\0\1\6\3\0\2\6\13\0\1\6\1\0\1\6"+
    "\1\72\16\6\1\343\7\6\1\0\1\73\3\6\1\343"+
    "\4\6\71\0\1\344\14\0\1\344\22\0\2\6\2\0"+
    "\1\6\1\71\1\6\1\0\1\6\3\0\2\6\13\0"+
    "\1\6\1\0\1\6\1\72\13\6\1\345\12\6\1\0"+
    "\1\73\7\6\1\345\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\346\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\26\124\2\0\10\124\16\0\2\124\2\0"+
    "\1\124\1\126\1\124\1\0\1\124\3\0\2\124\13\0"+
    "\1\124\1\0\1\124\1\0\12\124\1\347\13\124\2\0"+
    "\10\124\16\0\2\124\2\0\1\124\1\126\1\124\1\0"+
    "\1\350\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\26\124\2\0\10\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\10\124\1\351\15\124\2\0\10\124\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\25\124\1\352"+
    "\2\0\10\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\14\124\1\353\11\124\2\0\6\124\1\353\1\124"+
    "\16\0\2\124\2\0\1\124\1\126\1\124\1\0\1\124"+
    "\3\0\2\124\13\0\1\124\1\0\1\124\1\0\17\124"+
    "\1\354\6\124\2\0\4\124\1\354\3\124\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\20\124\1\355\5\124"+
    "\2\0\10\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\12\124\1\356\13\124\2\0\10\124\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\16\124\1\357\7\124"+
    "\2\0\3\124\1\357\4\124\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\16\124\1\360\7\124\2\0\3\124"+
    "\1\360\4\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\361\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\26\124\2\0\10\124\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\1\362\25\124\2\0\10\124\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\17\124\1\363"+
    "\6\124\2\0\4\124\1\363\3\124\16\0\2\124\2\0"+
    "\1\124\1\126\1\124\1\0\1\124\3\0\2\124\13\0"+
    "\1\124\1\0\1\124\1\0\14\124\1\364\11\124\2\0"+
    "\6\124\1\364\1\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\14\124\1\365\11\124\2\0\6\124\1\365"+
    "\1\124\16\0\2\124\2\0\1\124\1\126\1\124\1\0"+
    "\1\124\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\4\124\1\366\21\124\2\0\1\366\7\124\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\2\124\1\367\6\124"+
    "\1\370\4\124\1\371\7\124\2\0\3\124\1\371\4\124"+
    "\16\0\2\124\2\0\1\124\1\126\1\124\1\0\1\124"+
    "\3\0\2\124\13\0\1\124\1\0\1\124\1\0\15\124"+
    "\1\372\10\124\2\0\2\124\1\372\5\124\16\0\2\6"+
    "\2\0\1\6\1\71\1\6\1\0\1\6\3\0\2\6"+
    "\13\0\1\6\1\0\1\6\1\72\26\6\1\0\1\73"+
    "\4\6\1\373\3\6\16\0\2\53\2\0\1\53\1\54"+
    "\4\53\2\0\3\53\5\0\27\53\1\374\10\53\1\0"+
    "\3\53\1\374\24\53\2\0\1\53\1\54\4\53\2\0"+
    "\3\53\5\0\24\53\1\375\13\53\1\0\7\53\1\375"+
    "\16\53\1\0\1\376\2\0\1\376\3\0\1\235\1\377"+
    "\17\0\1\376\1\0\1\376\1\0\5\376\23\0\1\376"+
    "\26\0\1\377\2\0\1\377\4\0\1\377\17\0\1\377"+
    "\1\0\1\377\1\0\5\377\23\0\1\377\26\0\1\u0100"+
    "\2\0\1\u0100\24\0\1\u0100\1\0\1\u0100\1\0\5\u0100"+
    "\23\0\1\u0100\25\0\2\6\2\0\1\6\1\71\1\6"+
    "\1\0\1\6\3\0\2\6\13\0\1\6\1\0\1\6"+
    "\1\72\4\6\1\u0101\21\6\1\0\1\73\1\u0101\7\6"+
    "\73\0\1\u0102\35\0\2\6\2\0\1\6\1\71\1\6"+
    "\1\0\1\6\3\0\2\6\13\0\1\6\1\0\1\6"+
    "\1\72\26\6\1\0\1\240\10\6\16\0\2\124\2\0"+
    "\1\u0103\1\126\1\124\1\0\1\124\3\0\2\124\13\0"+
    "\1\124\1\0\1\124\1\0\26\124\2\0\10\124\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\11\124\1\u0104"+
    "\14\124\2\0\10\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\3\124\1\133\4\124\1\135\11\124\1\145"+
    "\3\124\2\0\10\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\7\124\1\u0105\16\124\2\0\5\124\1\u0105"+
    "\2\124\16\0\2\124\2\0\1\124\1\126\1\124\1\0"+
    "\1\124\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\12\124\1\273\13\124\2\0\10\124\16\0\2\124\2\0"+
    "\1\124\1\126\1\124\1\0\1\124\3\0\2\124\13\0"+
    "\1\124\1\0\1\124\1\0\4\124\1\u0106\21\124\2\0"+
    "\1\u0106\7\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\4\124\1\u0107\21\124\2\0\1\u0107\7\124\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\4\124\1\u0108"+
    "\21\124\2\0\1\u0108\7\124\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\20\124\1\u0109\5\124\2\0\10\124"+
    "\16\0\2\124\2\0\1\124\1\126\1\124\1\0\1\124"+
    "\3\0\2\124\13\0\1\124\1\0\1\124\1\0\1\u010a"+
    "\25\124\2\0\10\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\1\124\1\u010b\10\124\1\u010c\5\124\1\u010d"+
    "\5\124\2\0\10\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\15\124\1\u010e\10\124\2\0\2\124\1\u010e"+
    "\5\124\16\0\2\124\2\0\1\124\1\126\1\124\1\0"+
    "\1\124\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\13\124\1\u010f\12\124\2\0\7\124\1\u010f\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\16\124\1\u0110\7\124"+
    "\2\0\3\124\1\u0110\4\124\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\4\124\1\u0111\21\124\2\0\1\u0111"+
    "\7\124\16\0\2\124\2\0\1\124\1\126\1\124\1\0"+
    "\1\124\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\4\124\1\u0112\21\124\2\0\1\u0112\7\124\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\7\124\1\u0113\16\124"+
    "\2\0\5\124\1\u0113\2\124\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\14\124\1\u0114\11\124\2\0\6\124"+
    "\1\u0114\1\124\16\0\2\6\2\0\1\6\1\71\1\6"+
    "\1\0\1\6\3\0\2\6\13\0\1\6\1\0\1\6"+
    "\1\72\26\6\1\0\1\73\4\6\1\u0115\3\6\16\0"+
    "\2\53\2\0\1\53\1\54\4\53\2\0\3\53\5\0"+
    "\15\53\1\u0116\22\53\1\0\1\u0116\25\53\1\0\1\u0117"+
    "\2\0\1\u0117\3\0\1\235\1\u0118\17\0\1\u0117\1\0"+
    "\1\u0117\1\0\5\u0117\23\0\1\u0117\26\0\1\u0118\2\0"+
    "\1\u0118\4\0\1\u0118\17\0\1\u0118\1\0\1\u0118\1\0"+
    "\5\u0118\23\0\1\u0118\26\0\1\u0119\2\0\1\u0119\24\0"+
    "\1\u0119\1\0\1\u0119\1\0\5\u0119\23\0\1\u0119\25\0"+
    "\2\6\2\0\1\u011a\1\71\1\6\1\0\1\6\3\0"+
    "\2\6\13\0\1\6\1\0\1\6\1\72\26\6\1\0"+
    "\1\73\10\6\53\0\1\u011b\55\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\1\u011c\25\124\2\0\10\124\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\u011d\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\26\124\2\0"+
    "\10\124\16\0\2\124\2\0\1\124\1\126\1\124\1\0"+
    "\1\124\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\20\124\1\u011e\5\124\2\0\10\124\16\0\2\124\2\0"+
    "\1\124\1\126\1\124\1\0\1\124\3\0\2\124\13\0"+
    "\1\124\1\0\1\124\1\0\20\124\1\u011f\5\124\2\0"+
    "\10\124\16\0\2\124\2\0\1\124\1\126\1\124\1\0"+
    "\1\124\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\16\124\1\u0120\7\124\2\0\3\124\1\u0120\4\124\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\13\124\1\u0121"+
    "\12\124\2\0\7\124\1\u0121\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\12\124\1\u0122\13\124\2\0\10\124"+
    "\16\0\2\124\2\0\1\124\1\126\1\124\1\0\1\124"+
    "\3\0\2\124\13\0\1\124\1\0\1\124\1\0\14\124"+
    "\1\u0123\11\124\2\0\6\124\1\u0123\1\124\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\7\124\1\u0124\16\124"+
    "\2\0\5\124\1\u0124\2\124\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\14\124\1\u0125\11\124\2\0\6\124"+
    "\1\u0125\1\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\1\u0126\25\124\2\0\10\124\16\0\2\124\2\0"+
    "\1\124\1\126\1\124\1\0\1\u0127\3\0\2\124\13\0"+
    "\1\124\1\0\1\124\1\0\26\124\2\0\10\124\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\20\124\1\u0128"+
    "\5\124\2\0\10\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\13\124\1\u0129\12\124\2\0\7\124\1\u0129"+
    "\16\0\2\124\2\0\1\u012a\1\126\1\124\1\0\1\124"+
    "\3\0\2\124\13\0\1\124\1\0\1\124\1\0\26\124"+
    "\2\0\10\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\5\124\1\u012b\20\124\2\0\10\124\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\16\124\1\u012c\7\124"+
    "\2\0\3\124\1\u012c\4\124\16\0\2\6\2\0\1\6"+
    "\1\71\1\6\1\0\1\6\3\0\2\6\13\0\1\6"+
    "\1\0\1\6\1\72\26\6\1\0\1\73\5\6\1\u012d"+
    "\2\6\16\0\2\53\2\0\1\u012e\1\54\4\53\2\0"+
    "\3\53\5\0\40\53\1\0\26\53\10\0\1\235\103\0"+
    "\1\u012f\2\0\1\u012f\24\0\1\u012f\1\0\1\u012f\1\0"+
    "\5\u012f\23\0\1\u012f\25\0\2\6\2\0\1\6\1\71"+
    "\1\6\1\0\1\6\3\0\2\6\13\0\1\6\1\0"+
    "\1\6\1\72\7\6\1\u0130\16\6\1\0\1\73\5\6"+
    "\1\u0130\2\6\66\0\1\u0131\23\0\1\u0131\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\2\124\1\u0132\23\124"+
    "\2\0\10\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\10\124\1\135\15\124\2\0\10\124\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\u0133\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\26\124\2\0\10\124"+
    "\16\0\2\124\2\0\1\124\1\126\1\124\1\0\1\u0134"+
    "\3\0\2\124\13\0\1\124\1\0\1\124\1\0\26\124"+
    "\2\0\10\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\20\124\1\u0135\5\124\2\0\10\124\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\4\124\1\u0136\21\124"+
    "\2\0\1\u0136\7\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\20\124\1\u0137\5\124\2\0\10\124\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\3\124\1\u0138"+
    "\22\124\2\0\10\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\15\124\1\u0139\10\124\2\0\2\124\1\u0139"+
    "\5\124\16\0\2\124\2\0\1\124\1\126\1\124\1\0"+
    "\1\124\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\2\124\1\u013a\23\124\2\0\10\124\16\0\2\124\2\0"+
    "\1\124\1\126\1\124\1\0\1\124\3\0\2\124\13\0"+
    "\1\124\1\0\1\124\1\0\17\124\1\u013b\6\124\2\0"+
    "\4\124\1\u013b\3\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\17\124\1\u013c\6\124\2\0\4\124\1\u013c"+
    "\3\124\16\0\2\124\2\0\1\124\1\126\1\124\1\0"+
    "\1\124\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\20\124\1\u013d\5\124\2\0\10\124\16\0\2\124\2\0"+
    "\1\124\1\126\1\124\1\0\1\124\3\0\2\124\13\0"+
    "\1\124\1\0\1\124\1\0\20\124\1\u013e\5\124\2\0"+
    "\10\124\16\0\2\124\2\0\1\124\1\126\1\124\1\0"+
    "\1\124\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\6\124\1\u012a\17\124\2\0\10\124\16\0\2\124\2\0"+
    "\1\124\1\126\1\124\1\0\1\124\3\0\2\124\13\0"+
    "\1\124\1\0\1\124\1\0\20\124\1\u013f\5\124\2\0"+
    "\10\124\16\0\2\6\2\0\1\6\1\71\1\6\1\0"+
    "\1\6\3\0\2\6\13\0\1\6\1\0\1\6\1\72"+
    "\26\6\1\0\1\73\6\6\1\u0140\1\6\16\0\2\53"+
    "\2\0\1\53\1\54\4\53\2\0\3\53\5\0\20\53"+
    "\1\u0141\17\53\1\0\5\53\1\u0141\20\53\1\0\1\u0118"+
    "\2\0\1\u0118\24\0\1\u0118\1\0\1\u0118\1\0\5\u0118"+
    "\23\0\1\u0118\25\0\2\6\2\0\1\6\1\71\1\6"+
    "\1\0\1\6\3\0\2\6\13\0\1\6\1\0\1\6"+
    "\1\72\24\6\1\345\1\6\1\0\1\73\1\6\1\345"+
    "\6\6\73\0\1\u0142\35\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\4\124\1\u0143\21\124\2\0\1\u0143\7\124"+
    "\16\0\2\124\2\0\1\124\1\126\1\124\1\0\1\124"+
    "\3\0\2\124\13\0\1\124\1\0\1\124\1\0\10\124"+
    "\1\135\5\124\1\u0144\3\124\1\145\3\124\2\0\3\124"+
    "\1\u0144\4\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\17\124\1\u0145\6\124\2\0\4\124\1\u0145\3\124"+
    "\16\0\2\124\2\0\1\124\1\126\1\124\1\0\1\124"+
    "\3\0\2\124\13\0\1\124\1\0\1\124\1\0\17\124"+
    "\1\u0146\6\124\2\0\4\124\1\u0146\3\124\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\20\124\1\u0147\5\124"+
    "\2\0\10\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\3\124\1\u0148\22\124\2\0\10\124\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\4\124\1\u0149\21\124"+
    "\2\0\1\u0149\7\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\20\124\1\u014a\5\124\2\0\10\124\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\4\124\1\u014b"+
    "\21\124\2\0\1\u014b\7\124\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\u014c\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\26\124\2\0\10\124\16\0\2\6"+
    "\2\0\1\6\1\71\1\6\1\0\1\6\3\0\2\6"+
    "\13\0\1\6\1\0\1\6\1\72\26\6\1\0\1\73"+
    "\7\6\1\u014d\16\0\2\53\2\0\1\53\1\54\4\53"+
    "\2\0\3\53\5\0\35\53\1\375\2\53\1\0\1\53"+
    "\1\375\24\53\2\124\2\0\1\124\1\126\1\124\1\0"+
    "\1\124\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\4\124\1\221\21\124\2\0\1\221\7\124\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\20\124\1\u014e\5\124"+
    "\2\0\10\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\14\124\1\u014f\11\124\2\0\6\124\1\u014f\1\124"+
    "\16\0\2\124\2\0\1\124\1\126\1\124\1\0\1\124"+
    "\3\0\2\124\13\0\1\124\1\0\1\124\1\0\11\124"+
    "\1\u0150\14\124\2\0\10\124\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\25\124\1\u0151\2\0\10\124\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\16\124\1\u0139"+
    "\7\124\2\0\3\124\1\u0139\4\124\16\0\2\124\2\0"+
    "\1\124\1\126\1\124\1\0\1\124\3\0\2\124\13\0"+
    "\1\124\1\0\1\124\1\0\2\124\1\u0152\23\124\2\0"+
    "\10\124\16\0\2\6\2\0\1\6\1\71\1\6\1\0"+
    "\1\6\3\0\2\6\13\0\1\6\1\0\1\6\1\72"+
    "\26\6\1\0\1\u0153\10\6\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\25\124\1\u0154\2\0\10\124\16\0"+
    "\2\124\2\0\1\124\1\126\1\124\1\0\1\124\3\0"+
    "\2\124\13\0\1\124\1\0\1\124\1\0\12\124\1\u0139"+
    "\13\124\2\0\10\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\4\124\1\u0139\21\124\2\0\1\u0139\7\124"+
    "\16\0\2\124\2\0\1\124\1\126\1\124\1\0\1\124"+
    "\3\0\2\124\13\0\1\124\1\0\1\124\1\0\11\124"+
    "\1\u0155\14\124\2\0\10\124\16\0\2\124\2\0\1\124"+
    "\1\126\1\124\1\0\1\124\3\0\2\124\13\0\1\124"+
    "\1\0\1\124\1\0\14\124\1\u0156\11\124\2\0\6\124"+
    "\1\u0156\1\124\16\0\2\124\2\0\1\124\1\126\1\124"+
    "\1\0\1\124\3\0\2\124\13\0\1\124\1\0\1\124"+
    "\1\0\11\124\1\u0157\14\124\2\0\10\124\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\4\124\1\u0158\21\124"+
    "\2\0\1\u0158\7\124\16\0\2\124\2\0\1\124\1\126"+
    "\1\124\1\0\1\124\3\0\2\124\13\0\1\124\1\0"+
    "\1\124\1\0\16\124\1\u0159\7\124\2\0\3\124\1\u0159"+
    "\4\124\16\0\2\124\2\0\1\124\1\126\1\124\1\0"+
    "\1\124\3\0\2\124\13\0\1\124\1\0\1\124\1\0"+
    "\4\124\1\u015a\21\124\2\0\1\u015a\7\124\16\0\2\124"+
    "\2\0\1\124\1\126\1\124\1\0\1\124\3\0\2\124"+
    "\13\0\1\124\1\0\1\124\1\0\13\124\1\u013d\12\124"+
    "\2\0\7\124\1\u013d\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\3\0\3\1\1\11\2\1\1\11\1\1"+
    "\1\11\4\1\1\11\1\1\1\11\5\1\1\11\1\1"+
    "\5\11\1\1\2\11\1\1\1\11\3\1\1\11\3\1"+
    "\1\11\4\1\2\0\3\11\1\1\2\0\1\11\1\0"+
    "\2\1\1\0\1\1\1\0\4\1\1\11\2\1\2\0"+
    "\1\11\3\0\1\11\2\0\1\11\3\1\2\0\17\1"+
    "\2\11\1\0\3\11\2\1\1\11\2\1\1\0\3\1"+
    "\1\11\2\1\2\0\2\11\2\0\31\1\1\0\2\1"+
    "\1\11\1\1\1\0\2\1\1\11\2\1\2\0\31\1"+
    "\1\11\6\1\1\11\1\0\35\1\1\0\35\1\1\0"+
    "\25\1\1\11\2\1\1\0\25\1\1\0\20\1\1\11"+
    "\20\1\1\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _PostCssLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _PostCssLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return CssElementTypes.CSS_URL;
            }
          case 71: break;
          case 2: 
            { return CssElementTypes.CSS_IDENT;
            }
          case 72: break;
          case 3: 
            { return CssElementTypes.CSS_NUMBER;
            }
          case 73: break;
          case 4: 
            { return CssElementTypes.CSS_WHITE_SPACE;
            }
          case 74: break;
          case 5: 
            { return CssElementTypes.CSS_BAD_CHARACTER;
            }
          case 75: break;
          case 6: 
            { return CssElementTypes.CSS_PLUS;
            }
          case 76: break;
          case 7: 
            { return CssElementTypes.CSS_MINUS;
            }
          case 77: break;
          case 8: 
            { return CssElementTypes.CSS_RPAREN;
            }
          case 78: break;
          case 9: 
            { return CssElementTypes.CSS_PERIOD;
            }
          case 79: break;
          case 10: 
            { return CssElementTypes.CSS_STRING_TOKEN;
            }
          case 80: break;
          case 11: 
            { return CssElementTypes.CSS_LBRACE;
            }
          case 81: break;
          case 12: 
            { return CssElementTypes.CSS_RBRACE;
            }
          case 82: break;
          case 13: 
            { return CssElementTypes.CSS_SLASH;
            }
          case 83: break;
          case 14: 
            { return CssElementTypes.CSS_LPAREN;
            }
          case 84: break;
          case 15: 
            { return CssElementTypes.CSS_COLON;
            }
          case 85: break;
          case 16: 
            { return CssElementTypes.CSS_SEMICOLON;
            }
          case 86: break;
          case 17: 
            { return CssElementTypes.CSS_COMMA;
            }
          case 87: break;
          case 18: 
            { return CssElementTypes.CSS_PERCENT;
            }
          case 88: break;
          case 19: 
            { return CssElementTypes.CSS_GT;
            }
          case 89: break;
          case 20: 
            { return CssElementTypes.CSS_ASTERISK;
            }
          case 90: break;
          case 21: 
            { return CssElementTypes.CSS_LBRACKET;
            }
          case 91: break;
          case 22: 
            { return CssElementTypes.CSS_RBRACKET;
            }
          case 92: break;
          case 23: 
            { return CssElementTypes.CSS_TILDA;
            }
          case 93: break;
          case 24: 
            { return CssElementTypes.CSS_EQ;
            }
          case 94: break;
          case 25: 
            { return CssElementTypes.CSS_PIPE;
            }
          case 95: break;
          case 26: 
            { return CssElementTypes.CSS_HAT;
            }
          case 96: break;
          case 27: 
            { return PostCssTokenTypes.AMPERSAND;
            }
          case 97: break;
          case 28: 
            { yybegin(YYINITIAL); return CssElementTypes.CSS_RPAREN;
            }
          case 98: break;
          case 29: 
            { yybegin(YYINITIAL); return CssElementTypes.CSS_FUNCTION_TOKEN;
            }
          case 99: break;
          case 30: 
            { yybegin(YYINITIAL); return CssElementTypes.CSS_IDENT;
            }
          case 100: break;
          case 31: 
            { return CssElementTypes.CSS_COMMENT;
            }
          case 101: break;
          case 32: 
            { yybegin(CSS_FUNCTION); yypushback(yylength());
            }
          case 102: break;
          case 33: 
            { yybegin(CSS_FUNCTION_MINUS_N); yypushback(yylength());
            }
          case 103: break;
          case 34: 
            { return CssElementTypes.CSS_HASH;
            }
          case 104: break;
          case 35: 
            { return CssElementTypes.CSS_ENDS_WITH;
            }
          case 105: break;
          case 36: 
            { yybegin(CSS_COMMENT); return CssElementTypes.CSS_COMMENT;
            }
          case 106: break;
          case 37: 
            { return CssElementTypes.CSS_JQUERY_NOT_EQUALS;
            }
          case 107: break;
          case 38: 
            { return CssElementTypes.CSS_ATKEYWORD;
            }
          case 108: break;
          case 39: 
            { return CssElementTypes.CSS_CONTAINS;
            }
          case 109: break;
          case 40: 
            { return CssElementTypes.CSS_INCLUDES;
            }
          case 110: break;
          case 41: 
            { return CssElementTypes.CSS_DASHMATCH;
            }
          case 111: break;
          case 42: 
            { return CssElementTypes.CSS_BEGINS_WITH;
            }
          case 112: break;
          case 43: 
            { return CssElementTypes.CSS_CAT;
            }
          case 113: break;
          case 44: 
            { yybegin(YYINITIAL); return CssElementTypes.CSS_COMMENT;
            }
          case 114: break;
          case 45: 
            { if(StringUtil.endsWith(yytext(), "\\0") || StringUtil.endsWith(yytext(), "\\9")) yypushback(2); else yypushback(3); return CssElementTypes.CSS_IDENT;
            }
          case 115: break;
          case 46: 
            { return CssElementTypes.CSS_UNICODE_RANGE;
            }
          case 116: break;
          case 47: 
            { return CssElementTypes.CSS_CDC;
            }
          case 117: break;
          case 48: 
            { return CssElementTypes.CSS_SLASHED_COMBINATOR;
            }
          case 118: break;
          case 49: 
            { return CssElementTypes.CSS_URI_START;
            }
          case 119: break;
          case 50: 
            { yybegin(CSS_URI); yypushback(yylength());
            }
          case 120: break;
          case 51: 
            { if(StringUtil.endsWith(yytext(), "\\0") || StringUtil.endsWith(yytext(), "\\9")) yypushback(2); else yypushback(3); return CssElementTypes.CSS_HASH;
            }
          case 121: break;
          case 52: 
            { return CssElementTypes.CSS_CDO;
            }
          case 122: break;
          case 53: 
            { return PostCssTokenTypes.POST_CSS_NEST_SYM;
            }
          case 123: break;
          case 54: 
            { return CssElementTypes.CSS_PAGE_SYM;
            }
          case 124: break;
          case 55: 
            { return CssElementTypes.CSS_APPLY_SYM;
            }
          case 125: break;
          case 56: 
            { return CssElementTypes.CSS_MEDIA_SYM;
            }
          case 126: break;
          case 57: 
            { return CssElementTypes.CSS_SCOPE_SYM;
            }
          case 127: break;
          case 58: 
            { return CssElementTypes.CSS_IMPORT_SYM;
            }
          case 128: break;
          case 59: 
            { return CssElementTypes.CSS_REGION_SYM;
            }
          case 129: break;
          case 60: 
            { return CssElementTypes.CSS_CHARSET_SYM;
            }
          case 130: break;
          case 61: 
            { return CssElementTypes.CSS_DOCUMENT_SYM;
            }
          case 131: break;
          case 62: 
            { return CssElementTypes.CSS_PAGE_MARGIN_SYM;
            }
          case 132: break;
          case 63: 
            { return CssElementTypes.CSS_SUPPORTS_SYM;
            }
          case 133: break;
          case 64: 
            { return CssElementTypes.CSS_VIEWPORT_SYM;
            }
          case 134: break;
          case 65: 
            { return CssElementTypes.CSS_IMPORTANT;
            }
          case 135: break;
          case 66: 
            { return CssElementTypes.CSS_FONTFACE_SYM;
            }
          case 136: break;
          case 67: 
            { return CssElementTypes.CSS_KEYFRAMES_SYM;
            }
          case 137: break;
          case 68: 
            { return CssElementTypes.CSS_NAMESPACE_SYM;
            }
          case 138: break;
          case 69: 
            { yypushback(1); return CssElementTypes.CSS_EXPRESSION;
            }
          case 139: break;
          case 70: 
            { return CssElementTypes.CSS_COUNTER_STYLE_SYM;
            }
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
