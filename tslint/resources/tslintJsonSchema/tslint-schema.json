{
  "title": "JSON schema for the TSLint configuration files",
  "$schema": "http://json-schema.org/draft-04/schema#",

  "type": "object",
  "additionalProperties": true,

  "definitions": {
    "switchedOff": {"type": "boolean"},
    "switchable": {"type": "boolean"},
    "space-option": {"type": "string", "enum": ["space", "nospace"]},
    "booleanWithInteger": {
      "type": "array",
      "items": [
        {"type": "boolean"},
        {"type": "number"}
      ],
      "additionalItems": false
    },
    "ruledefinitions": {
      "properties": {
        "adjacent-overload-signatures": {
          "description": "Enforces function overloads to be consecutive",
          "$ref": "#/definitions/switchable"
        },
        "align": {
          "description": "Enforces vertical alignment",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "uniqueItems": true,
              "items": {
                "type": ["boolean", "string"],
                "enum": [true, "parameters", "arguments", "statements"]
              }}
          ]
        },
        "array-type":{
          "description": "Requires using either ‘T[]’ or ‘Array' for arrays",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "uniqueItems": true,
              "items": {
                "type": ["boolean", "string"],
                "enum": [true, "array", "generic", "array-simple"]
              }}
          ]
        },
        "arrow-parens":{
          "description": "Requires parentheses around the parameters of arrow function definitions",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "uniqueItems": true,
              "items": {
                "type": ["boolean", "string"],
                "enum": [true, "ban-single-arg-parens"]
              }}
          ]
        },
        "arrow-return-shorthand":{
          "description": "Suggests to convert () => { return x; } to () => x",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "uniqueItems": true,
              "items": {
                "type": ["boolean", "string"],
                "enum": [true, "multiline"]
              }}
          ]
        },
        "await-promise":{
          "description": "Warns for an awaited value that is not a Promise",
          "$ref": "#/definitions/switchable"
        },
        "ban": {
          "description": "Bans the use of specific functions",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {"type": "boolean", "enum": [true]},
                  {"type": "array",
                    "items": {
                    "type": "string",
                    "minItems": 1, "maxItems": 3
                  }}
                ]
              }
            }]},
        "ban-types": {
          "description": "Bans specific types from being used. Does not ban the corresponding runtime objects from being used",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {"type": "boolean", "enum": [true]},
                  {"type": "array",
                    "items": {
                    "type": "string",
                    "minItems": 1, "maxItems": 2
                  }}
                ]
              }
            }]},
        "callable-types":{
          "description": "An interface or literal type with just a call signature can be written as a function type",
          "$ref": "#/definitions/switchable"
        },
        "class-name": {
          "description": "Enforces PascalCased class and interface names",
          "type": "boolean"
        },
        "comment-format": {
          "description": "Enforces rules for single-line comments",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "items": {
                "oneOf": [
                  {"type": "boolean", "enum": [true]},
                  {"type": "string", "enum": ["check-space", "check-lowercase", "check-uppercase"]},
                  {"type": "object",
                    "properties": {
                      "ignore-words": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "ignore-pattern": {
                        "type": "string"
                      }
                    },
                    "minProperties": 1,
                    "maxProperties": 1
                  }
                ]
              },
              "minLength": 1,
              "maxLength": 4
            }
          ]
        },
        "completed-docs": {
          "description": "Enforces documentation for important items be filled out",
          "type": "boolean"
        },
        "curly": {
          "description": "Enforces braces for if/for/do/while statements",
          "type": "boolean"
        },
        "cyclomatic-complexity": {
          "description": "Enforces a threshold of cyclomatic complexity",
          "type": ["boolean", "integer"]
        },
        "eofline": {
          "description": "Enforces the file to end with a newline",
          "type": "boolean"
        },
        "file-header": {
          "description": "Enforces a certain header comment for all files, matched by a regular expression",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "items": {
                "type": ["boolean", "string"],
                "minItems": 1,
                "maxItems": 2
              }}
          ]
        },
        "forin": {
          "description": "Enforces a for...in  statement to be filtered with an if statement",
          "type": "boolean"
        },
        "import-blacklist": {
          "description": "Disallows importing the specified modules directly via import and require. Instead only sub modules may be imported from that module",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "items": {
                "type": ["boolean", "string"],
                "minItems": 1,
                "maxItems": 2
              }}
          ]
        },
        "import-spacing": {
          "description": "Ensures proper spacing between import statement keywords",
          "type": "boolean"
        },
        "indent": {
          "description": "Enforces indentation with tabs or spaces",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "items": {
                "type": ["boolean", "string"],
                "enum": [true, "tabs", "spaces"]
              }}
          ]
        },
        "interface-name": {
          "description": "Requires interface names to begin with a capital ‘I’",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "items": {
                "type": ["boolean", "string"],
                "enum": [true, "always-prefix", "never-prefix"]
              }}
          ]
        },
        "interface-over-type-literal": {
          "description": "Prefer an interface declaration over a type literal (type T = { ... })",
          "type": "boolean"
        },
        "jsdoc-format": {
          "description": "Enforces basic format rules for JSDoc comments",
          "type": "boolean"
        },
        "label-position": {
          "description": "Only allows labels in sensible locations",
          "type": "boolean"
        },
        "linebreak-style": {
          "description": "Enforces a consistent linebreak style",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "items": {
                "type": ["boolean", "string"],
                "enum": [true, "LF", "CRLF"]
              }, "maxItems": 2
            }
          ]
        },
        "match-default-export-name": {
          "description": "Requires that a default import have the same name as the declaration it imports. Does nothing for anonymous default exports.",
          "type": "boolean"
        },
        "max-classes-per-file": {
          "description": "A file may not contain more than the specified number of classes",
          "$ref": "#/definitions/booleanWithInteger"
        },
        "max-file-line-count": {
          "description": "Requires files to remain under a certain number of lines",
          "$ref": "#/definitions/booleanWithInteger"
        },
        "max-line-length": {
          "description": "Requires lines to be under a certain max length",
          "$ref": "#/definitions/booleanWithInteger"
        },
        "member-access": {
          "description": "Requires explicit visibility declarations for class members",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "items": {
                "type": ["boolean", "string"],
                "enum": [true, "check-accessor", "check-constructor"]
              }}
          ]
        },
        "member-ordering": {
          "description": "Enforces member ordering",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {
              "type": "array",
              "items": [
                {
                  "type": "boolean",
                  "enum": "true"
                },
                {
                  "type": "object",
                  "properties": {
                    "order": {
                      "oneOf": [
                        {
                          "type": "string",
                          "enum": [
                            "public-before-private",
                            "static-before-instance",
                            "variables-before-functions"
                          ]
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "public-static-field",
                              "public-static-method",
                              "protected-static-field",
                              "protected-static-method",
                              "private-static-field",
                              "private-static-method",
                              "public-instance-field",
                              "protected-instance-field",
                              "private-instance-field",
                              "public-constructor",
                              "protected-constructor",
                              "private-constructor",
                              "public-instance-method",
                              "protected-instance-method",
                              "private-instance-method"
                            ]
                          },
                          "uniqueItems": true
                        }
                      ]
                    }
                  }
                }
              ]
            }
          ]
        },
        "new-parens": {
          "description": "Requires parentheses when invoking a constructor via the new keyword",
          "type": "boolean"
        },
        "newline-before-return": {
          "description": "Enforces blank line before return when not the only line in the block",
          "type": "boolean"
        },
        "no-angle-bracket-type-assertion": {
          "description": "Requires the use of as Type for type assertions instead of <Type>",
          "type": "boolean"
        },
        "no-any": {
          "description": "Disallows usages of any as a type declaration",
          "type": "boolean"
        },
        "no-arg": {
          "description": "Disallows use of arguments.callee",
          "type": "boolean"
        },
        "no-bitwise": {
          "description": "Disallows bitwise operators",
          "type": "boolean"
        },
        "no-boolean-literal-compare": {
          "description": "Warns on comparison to a boolean literal, as in x === true",
          "type": "boolean"
        },
        "no-conditional-assignment": {
          "description": "Disallows any type of assignment in any conditionals. This applies to do-while, for, if, and while statements.",
          "type": "boolean"
        },
        "no-consecutive-blank-lines": {
          "description": "Disallows one or more blank lines in a row",
          "oneOf": [
            {"type": "boolean"},
            {"$ref": "#/definitions/booleanWithInteger"}
          ]
        },
        "no-console": {
          "description": "Bans the use of specified console methods",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "items": {
                "type": ["boolean", "string"],
                "enum": [true, "debug", "info", "time", "timeEnd", "trace", "log", "error"]
              }, "additionalItems": true}
          ]
        },
        "no-construct": {
          "description": "Disallows access to the constructors of String, Number and Boolean",
          "type": "boolean"
        },
        "no-debugger": {
          "description": "Disallows debugger statements",
          "type": "boolean"
        },
        "no-default-export": {
          "description": "Disallows default exports in ES6-style modules",
          "type": "boolean"
        },
        "no-duplicate-super": {
          "description": "Warns if ‘super()’ appears twice in a constructor",
          "type": "boolean"
        },
        "no-duplicate-variable": {
          "description": "Disallows duplicate variable declarations in the same block scope",
          "type": "boolean"
        },
        "no-shadowed-variable": {
          "description": "Disallows shadowed variable declarations",
          "type": "boolean"
        },
        "no-empty": {
          "description": "Disallows empty blocks",
          "type": "boolean"
        },
        "no-empty-interface": {
          "description": "Forbids empty interfaces",
          "type": "boolean"
        },
        "no-eval": {
          "description": "Disallows eval function invocations",
          "type": "boolean"
        },
        "no-floating-promises": {
          "description": "Promises returned by functions must be handled appropriately",
          "oneOf": [
            {"type": "boolean"},
            {"type": "array",
             "items": {
               "oneOf": [
                 {
                   "type": "boolean",
                   "enum": [true]
                 },
                 {
                   "type": "string"
                 }
               ]
             }}
          ]
        },
        "no-for-in-array": {
          "description": "Disallows iterating over an array with a for-in loop",
          "type": "boolean"
        },
        "no-import-side-effect": {
          "description": "Avoid import statements with side-effect",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {
              "type": "array",
              "items": [
                {
                  "type": "boolean",
                  "enum": "true"
                },
                {
                  "type": "object",
                  "properties": {
                    "ignore-module": {"type": "string"}
                  }
                }
              ],
              "additionalItems": false
            }
          ]
        },
        "no-inferrable-types": {
          "description": "Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean",
          "oneOf": [
            {"type": "boolean"},
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {"type": "boolean", "enum": ["true"]},
                  {
                    "type": "string",
                    "enum": ["ignore-params", "ignore-properties"]
                  }
                ]
              }
            }
          ]
        },
        "no-inferred-empty-object-type": {
          "description": "Disallow type inference of {} (empty object type) at function and constructor call sites",
          "type": "boolean"
        },
        "no-internal-module": {
          "description": "Disallows internal module, use namespace instead",
          "type": "boolean"
        },
        "no-invalid-this": {
          "description": "Disallows using the this keyword outside of classes",
          "oneOf": [
            {"type": "boolean"},
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {"type": "boolean", "enum": ["true"]},
                  {
                    "type": "string",
                    "enum": ["check-function-in-method"]
                  }
                ]
              }
            }
          ]
        },
        "no-magic-numbers": {
          "description": "Disallows the use constant number values outside of variable assignments",
          "oneOf": [
            {"type": "boolean"},
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {"type": "boolean", "enum": ["true"]},
                  {
                    "type": "integer"
                  }
                ]
              },
              "minItems": 2
            }
          ]
        },
        "no-mergeable-namespace": {
          "description": "Disallows mergeable namespaces in the same file",
          "type": "boolean"
        },
        "no-misused-new": {
          "description": "Warns on apparent attempts to define constructors for interfaces or new for classes",
          "type": "boolean"
        },
        "no-namespace": {
          "description": "Disallows use of internal module S and namespace S",
          "oneOf": [
            {"type": "boolean"},
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {"type": "boolean", "enum": ["true"]},
                  {
                    "type": "string",
                    "enum": ["allow-declarations"]
                  }
                ]
              }
            }
          ]
        },
        "no-non-null-assertion": {
          "description": "Disallows non-null assertions",
          "type": "boolean"
        },
        "no-null-keyword": {
          "description": "Disallows use of the null keyword literal",
          "type": "boolean"
        },
        "no-require-imports": {
          "description": "Disallows require() style imports",
          "type": "boolean"
        },
        "no-string-literal": {
          "description": "Disallows object access via string literals",
          "type": "boolean"
        },
        "no-switch-case-fall-through": {
          "description": "Disallows falling through case statements",
          "type": "boolean"
        },
        "no-trailing-whitespace": {
          "description": "Disallows trailing whitespace at the end of a line",
          "type": "boolean"
        },
        "no-unreachable": {
          "description": "Disallows unreachable code after break, catch, throw and return statements",
          "type": "boolean"
        },
        "no-unused-expression": {
          "description": "Disallows unused expression statements, that is, expression statements that are not assignments or function invocations (and thus no-ops)",
          "type": "boolean"
        },
        "no-unused-variable": {
          "description": "Disallows unused imports, variables, functions and private class members",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "items": {
                "type": ["boolean", "string"],
                "enum": [true, "check-parameters", "react"]
              }}
          ]
        },
        "no-use-before-declare": {
          "description": "Disallows usage of variables before their declaration",
          "type": "boolean"
        },
        "no-var-keyword": {
          "description": "Disallows usage of the var keyword, use let or const instead",
          "type": "boolean"
        },
        "no-var-requires": {
          "description": "Disallows the use of require statements except in import statements, banning the use of forms such as var module = require(\"module\")",
          "type": "boolean"
        },
        "object-literal-sort-keys": {
          "description": "Requires keys in object literals to be sorted alphabetically"
        },
        "one-line": {
          "description": "Enforces the specified tokens to be on the same line as the expression preceding it",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "items": {
                "type": ["boolean", "string"],
                "enum": [true, "check-open-brace", "check-catch", "check-else", "check-whitespace"]
              }}
          ]
        },
        "quotemark": {
          "description": "Enforces consistent single or double quoted string literals",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "items": {
                "type": ["boolean", "string"],
                "enum": [true, "single", "double", "jsx-single", "jsx-double", "avoid-escape"]
              }}
          ]
        },
        "radix": {
          "description": "Enforces the radix parameter of parseInt",
          "type": "boolean"
        },
        "semicolon": {
          "description": "Enforces semicolons at the end of every statement",
          "type": "boolean"
        },
        "switch-default": {
          "description": "Enforces a default case in switch statements",
          "type": "boolean"
        },
        "trailing-comma": {
          "description": "Requires or disallows trailing commas in array and object literals, destructuring assignments and named imports",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "items": [
                {"type": "boolean"},
                {"type": "object",
                  "properties": {
                    "multiline": {
                      "type": "string",
                      "enum": [
                        "always",
                        "never"
                      ]
                    },
                    "singleline": {
                      "type": "string",
                      "enum": [
                        "always",
                        "never"
                      ]
                    }
                  }
                }
              ]
            }
          ]
        },
        "triple-equals": {
          "description": "Enforces === and !== in favor of == and !=",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "items": {
                "type": ["boolean", "string"],
                "enum": [true, "allow-null-check"]
              }}
          ]
        },
        "typedef": {
          "description": "Enforces type definitions to exist",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "items": {
                "type": ["boolean", "string"],
                "enum": [true, "call-signature", "parameter", "property-declaration", "variable-declaration", "member-variable-declaration"]
              }}
          ]
        },
        "typedef-whitespace": {
          "description": "Enforces spacing whitespace for type definitions",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {
              "type": "array",
              "items": [
                {
                  "type": "boolean",
                  "enum": true
                },
                {
                  "type": "object",
                  "properties": {
                    "call-signature": {
                      "$ref": "#/definitions/space-option"
                    },
                    "index-signature": {
                      "$ref": "#/definitions/space-option"
                    },
                    "parameter": {
                      "$ref": "#/definitions/space-option"
                    },
                    "property-declaration": {
                      "$ref": "#/definitions/space-option"
                    },
                    "variable-declaration": {
                      "$ref": "#/definitions/space-option"
                    }
                  }
                }
              ]
            }
          ]
        },
        "use-strict": {
          "description": "Enforces ECMAScript 5's strict mode",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "items": {
                "type": ["boolean", "string"],
                "enum": [true, "check-module", "check-function"]
              }}
          ]
        },
        "variable-name": {
          "description": "Allows only camelCased or UPPER_CASED variable names",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "items": {
                "type": ["boolean", "string"],
                "enum": [true, "ban-keywords", "check-format", "allow-leading-underscore", "allow-trailing-underscore"]
              }}
          ]
        },
        "whitespace": {
          "description": "Enforces spacing whitespace",
          "oneOf": [
            {"$ref": "#/definitions/switchedOff"},
            {"type": "array",
              "items": {
                "type": ["boolean", "string"],
                "enum": [true, "check-branch", "check-decl", "check-operator", "check-module", "check-separator", "check-type", "check-typecast"]
              }}
          ]
        }
      },
      "type": "object"
    }
  },

  "properties": {
    "rules": {
      "$ref": "#/definitions/ruledefinitions"
    }
  }
}