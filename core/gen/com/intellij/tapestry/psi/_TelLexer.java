/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/* It's an automatically generated code. Do not modify it. */
package com.intellij.tapestry.psi;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;
import static com.intellij.tapestry.psi.TelTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>/ideadev/tools/lexer/../../plugins/tapestry/core/src/com/intellij/tapestry/psi/_TelLexer.flex</tt>
 */
class _TelLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TEL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\2\1\10\1\10\1\0\1\10\1\10\16\2\4\0\1\10\1\26"+
    "\2\0\1\34\2\0\1\33\1\27\1\30\1\0\1\7\1\25\1\3"+
    "\1\6\1\0\12\5\1\23\4\0\1\24\1\0\1\13\3\1\1\16"+
    "\1\12\5\1\1\14\1\1\1\22\3\1\1\20\1\15\1\17\1\21"+
    "\5\1\1\31\1\0\1\32\1\0\1\1\1\0\1\13\3\1\1\16"+
    "\1\12\5\1\1\14\1\1\1\22\3\1\1\20\1\15\1\17\1\21"+
    "\5\1\1\35\1\0\1\11\1\0\41\2\2\0\4\1\4\0\1\1"+
    "\2\0\1\2\7\0\1\1\4\0\1\1\5\0\27\1\1\0\37\1"+
    "\1\0\u01ca\1\4\0\14\1\16\0\5\1\7\0\1\1\1\0\1\1"+
    "\21\0\160\2\5\1\1\0\2\1\2\0\4\1\10\0\1\1\1\0"+
    "\3\1\1\0\1\1\1\0\24\1\1\0\123\1\1\0\213\1\1\0"+
    "\5\2\2\0\236\1\11\0\46\1\2\0\1\1\7\0\47\1\7\0"+
    "\1\1\1\0\55\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0"+
    "\1\2\10\0\33\1\5\0\3\1\15\0\5\2\6\0\1\1\4\0"+
    "\13\2\5\0\53\1\25\2\12\5\4\0\2\1\1\2\143\1\1\0"+
    "\1\1\10\2\1\0\6\2\2\1\2\2\1\0\4\2\2\1\12\5"+
    "\3\1\2\0\1\1\17\0\1\2\1\1\1\2\36\1\33\2\2\0"+
    "\131\1\13\2\1\1\16\0\12\5\41\1\11\2\2\1\4\0\1\1"+
    "\5\0\26\1\4\2\1\1\11\2\1\1\3\2\1\1\5\2\22\0"+
    "\31\1\3\2\104\0\1\1\1\0\13\1\67\0\33\2\1\0\4\2"+
    "\66\1\3\2\1\1\22\2\1\1\7\2\12\1\2\2\2\0\12\5"+
    "\1\0\7\1\1\0\7\1\1\0\3\2\1\0\10\1\2\0\2\1"+
    "\2\0\26\1\1\0\7\1\1\0\1\1\3\0\4\1\2\0\1\2"+
    "\1\1\7\2\2\0\2\2\2\0\3\2\1\1\10\0\1\2\4\0"+
    "\2\1\1\0\3\1\2\2\2\0\12\5\4\1\7\0\1\1\5\0"+
    "\3\2\1\0\6\1\4\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\2\0\1\2\1\0\5\2\4\0"+
    "\2\2\2\0\3\2\3\0\1\2\7\0\4\1\1\0\1\1\7\0"+
    "\12\5\2\2\3\1\1\2\13\0\3\2\1\0\11\1\1\0\3\1"+
    "\1\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1\2\0\1\2"+
    "\1\1\10\2\1\0\3\2\1\0\3\2\2\0\1\1\17\0\2\1"+
    "\2\2\2\0\12\5\1\0\1\1\17\0\3\2\1\0\10\1\2\0"+
    "\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1\2\0"+
    "\1\2\1\1\7\2\2\0\2\2\2\0\3\2\10\0\2\2\4\0"+
    "\2\1\1\0\3\1\2\2\2\0\12\5\1\0\1\1\20\0\1\2"+
    "\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0\2\1\1\0"+
    "\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0\14\1\4\0"+
    "\5\2\3\0\3\2\1\0\4\2\2\0\1\1\6\0\1\2\16\0"+
    "\12\5\11\0\1\1\7\0\3\2\1\0\10\1\1\0\3\1\1\0"+
    "\27\1\1\0\12\1\1\0\5\1\3\0\1\1\7\2\1\0\3\2"+
    "\1\0\4\2\7\0\2\2\1\0\2\1\6\0\2\1\2\2\2\0"+
    "\12\5\22\0\2\2\1\0\10\1\1\0\3\1\1\0\27\1\1\0"+
    "\12\1\1\0\5\1\2\0\1\2\1\1\7\2\1\0\3\2\1\0"+
    "\4\2\7\0\2\2\7\0\1\1\1\0\2\1\2\2\2\0\12\5"+
    "\1\0\2\1\17\0\2\2\1\0\10\1\1\0\3\1\1\0\51\1"+
    "\2\0\1\1\7\2\1\0\3\2\1\0\4\2\1\1\10\0\1\2"+
    "\10\0\2\1\2\2\2\0\12\5\12\0\6\1\2\0\2\2\1\0"+
    "\22\1\3\0\30\1\1\0\11\1\1\0\1\1\2\0\7\1\3\0"+
    "\1\2\4\0\6\2\1\0\1\2\1\0\10\2\6\0\12\4\2\0"+
    "\2\2\15\0\60\1\1\2\2\1\7\2\4\0\10\1\10\2\1\0"+
    "\12\5\47\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0"+
    "\1\1\6\0\4\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\2\0\2\1\1\0\4\1\1\2\2\1\6\2\1\0\2\2"+
    "\1\1\2\0\5\1\1\0\1\1\1\0\6\2\2\0\12\5\2\0"+
    "\4\1\40\0\1\1\27\0\2\2\6\0\12\5\13\0\1\2\1\0"+
    "\1\2\1\0\1\2\4\0\2\2\10\1\1\0\44\1\4\0\24\2"+
    "\1\0\2\2\5\1\13\2\1\0\44\2\11\0\1\2\71\0\53\1"+
    "\24\2\1\1\12\5\6\0\6\1\4\2\4\1\3\2\1\1\3\2"+
    "\2\1\7\2\3\1\4\2\15\1\14\2\1\1\1\2\12\5\4\2"+
    "\2\0\46\1\1\0\1\1\5\0\1\1\2\0\53\1\1\0\u014d\1"+
    "\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\51\1"+
    "\1\0\4\1\2\0\41\1\1\0\4\1\2\0\7\1\1\0\1\1"+
    "\1\0\4\1\2\0\17\1\1\0\71\1\1\0\4\1\2\0\103\1"+
    "\2\0\3\2\40\0\20\1\20\0\125\1\14\0\u026c\1\2\0\21\1"+
    "\1\0\32\1\5\0\113\1\3\0\3\1\17\0\15\1\1\0\4\1"+
    "\3\2\13\0\22\1\3\2\13\0\22\1\2\2\14\0\15\1\1\0"+
    "\3\1\1\0\2\2\14\0\64\1\40\2\3\0\1\1\3\0\2\1"+
    "\1\2\2\0\12\5\41\0\3\2\2\0\12\5\6\0\130\1\10\0"+
    "\51\1\1\2\1\1\5\0\106\1\12\0\35\1\3\0\14\2\4\0"+
    "\14\2\12\0\12\5\36\1\2\0\5\1\13\0\54\1\4\0\21\2"+
    "\7\1\2\2\6\0\12\5\46\0\27\1\5\2\4\0\65\1\12\2"+
    "\1\0\35\2\2\0\1\2\12\5\6\0\12\5\15\0\1\1\130\0"+
    "\5\2\57\1\21\2\7\1\4\0\12\5\21\0\11\2\14\0\3\2"+
    "\36\1\15\2\2\1\12\5\54\1\16\2\14\0\44\1\24\2\10\0"+
    "\12\5\3\0\3\1\12\5\44\1\122\0\3\2\1\0\25\2\4\1"+
    "\1\2\4\1\3\2\2\1\11\0\300\1\47\2\25\0\4\2\u0116\1"+
    "\2\0\6\1\2\0\46\1\2\0\6\1\2\0\10\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\37\1\2\0\65\1\1\0\7\1"+
    "\1\0\1\1\3\0\3\1\1\0\7\1\3\0\4\1\2\0\6\1"+
    "\4\0\15\1\5\0\3\1\1\0\7\1\16\0\5\2\32\0\5\2"+
    "\20\0\2\1\23\0\1\1\13\0\5\2\5\0\6\2\1\0\1\1"+
    "\15\0\1\1\20\0\15\1\3\0\33\1\25\0\15\2\4\0\1\2"+
    "\3\0\14\2\21\0\1\1\4\0\1\1\2\0\12\1\1\0\1\1"+
    "\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1"+
    "\1\0\13\1\2\0\4\1\5\0\5\1\4\0\1\1\21\0\51\1"+
    "\u0a77\0\57\1\1\0\57\1\1\0\205\1\6\0\4\1\3\2\2\1"+
    "\14\0\46\1\1\0\1\1\5\0\1\1\2\0\70\1\7\0\1\1"+
    "\17\0\1\2\27\1\11\0\7\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0"+
    "\40\2\57\0\1\1\u01d5\0\3\1\31\0\11\1\6\2\1\0\5\1"+
    "\2\0\5\1\4\0\126\1\2\0\2\2\2\0\3\1\1\0\132\1"+
    "\1\0\4\1\5\0\51\1\3\0\136\1\21\0\33\1\65\0\20\1"+
    "\u0200\0\u19b6\1\112\0\u51cd\1\63\0\u048d\1\103\0\56\1\2\0\u010d\1"+
    "\3\0\20\1\12\5\2\1\24\0\57\1\1\2\4\0\12\2\1\0"+
    "\31\1\7\0\1\2\120\1\2\2\45\0\11\1\2\0\147\1\2\0"+
    "\4\1\1\0\4\1\14\0\13\1\115\0\12\1\1\2\3\1\1\2"+
    "\4\1\1\2\27\1\5\2\20\0\1\1\7\0\64\1\14\0\2\2"+
    "\62\1\21\2\13\0\12\5\6\0\22\2\6\1\3\0\1\1\4\0"+
    "\12\5\34\1\10\2\2\0\27\1\15\2\14\0\35\1\3\0\4\2"+
    "\57\1\16\2\16\0\1\1\12\5\26\0\12\4\6\0\51\1\16\2"+
    "\11\0\3\1\1\2\10\1\2\2\2\0\12\5\6\0\27\1\3\0"+
    "\1\1\1\2\4\0\60\1\1\2\1\1\3\2\2\1\2\2\5\1"+
    "\2\2\1\1\1\2\1\1\30\0\3\1\2\0\13\1\5\2\2\0"+
    "\3\1\2\2\12\0\6\1\2\0\6\1\2\0\6\1\11\0\7\1"+
    "\1\0\7\1\221\0\43\1\10\2\1\0\2\2\2\0\12\5\6\0"+
    "\u2ba4\1\14\0\27\1\4\0\61\1\u2104\0\u016e\1\2\0\152\1\46\0"+
    "\7\1\14\0\5\1\5\0\1\1\1\2\12\1\1\0\15\1\1\0"+
    "\5\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0\154\1\41\0"+
    "\u016b\1\22\0\100\1\2\0\66\1\50\0\15\1\3\0\20\2\20\0"+
    "\7\2\14\0\2\1\30\0\3\1\31\0\1\1\6\0\5\1\1\0"+
    "\207\1\2\0\1\2\4\0\1\1\13\0\12\5\7\0\32\1\4\0"+
    "\1\1\1\0\32\1\13\0\131\1\3\0\6\1\2\0\6\1\2\0"+
    "\6\1\2\0\3\1\3\0\2\1\3\0\2\1\22\0\3\2\4\0"+
    "\14\1\1\0\32\1\1\0\23\1\1\0\2\1\1\0\17\1\2\0"+
    "\16\1\42\0\173\1\105\0\65\1\210\0\1\2\202\0\35\1\3\0"+
    "\61\1\57\0\37\1\21\0\33\1\65\0\36\1\2\0\44\1\4\0"+
    "\10\1\1\0\5\1\52\0\236\1\2\0\12\5\u0356\0\6\1\2\0"+
    "\1\1\1\0\54\1\1\0\2\1\3\0\1\1\2\0\27\1\252\0"+
    "\26\1\12\0\32\1\106\0\70\1\6\0\2\1\100\0\1\1\3\2"+
    "\1\0\2\2\5\0\4\2\4\1\1\0\3\1\1\0\33\1\4\0"+
    "\3\2\4\0\1\2\40\0\35\1\203\0\66\1\12\0\26\1\12\0"+
    "\23\1\215\0\111\1\u03b7\0\3\2\65\1\17\2\37\0\12\5\20\0"+
    "\3\2\55\1\13\2\2\0\1\2\22\0\31\1\7\0\12\5\6\0"+
    "\3\2\44\1\16\2\1\0\12\5\100\0\3\2\60\1\16\2\4\1"+
    "\13\0\12\5\u0116\0\12\4\u01d6\0\12\4\u0176\0\12\4\46\0\53\1"+
    "\15\2\10\0\12\5\146\0\12\4\u01a6\0\12\4\u0716\0\u036f\1\221\0"+
    "\143\1\u0b9d\0\u042f\1\u33d1\0\u0239\1\47\0\12\4\346\0\12\4\u03a6\0"+
    "\105\1\13\0\1\1\56\2\20\0\4\2\15\1\u4060\0\2\1\u2163\0"+
    "\5\2\3\0\26\2\2\0\7\2\36\0\4\2\224\0\3\2\u01bb\0"+
    "\125\1\1\0\107\1\1\0\2\1\2\0\1\1\2\0\2\1\2\0"+
    "\4\1\1\0\14\1\1\0\1\1\1\0\7\1\1\0\101\1\1\0"+
    "\4\1\2\0\10\1\1\0\7\1\1\0\34\1\1\0\4\1\1\0"+
    "\5\1\1\0\1\1\3\0\7\1\1\0\u0154\1\2\0\31\1\1\0"+
    "\31\1\1\0\37\1\1\0\31\1\1\0\37\1\1\0\31\1\1\0"+
    "\37\1\1\0\31\1\1\0\37\1\1\0\31\1\1\0\10\1\2\0"+
    "\62\5\u1600\0\4\1\1\0\33\1\1\0\2\1\1\0\1\1\2\0"+
    "\1\1\1\0\12\1\1\0\4\1\1\0\1\1\1\0\1\1\6\0"+
    "\1\1\4\0\1\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0"+
    "\2\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\1\1\2\0\4\1\1\0"+
    "\7\1\1\0\4\1\1\0\4\1\1\0\1\1\1\0\12\1\1\0"+
    "\21\1\5\0\3\1\1\0\5\1\1\0\21\1\u1144\0\ua6d7\1\51\0"+
    "\u1035\1\13\0\336\1\u3fe2\0\u021e\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\2\36\0\140\2\200\0\360\2\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\2\1\4\1\5\1\6"+
    "\1\7\3\3\1\10\1\2\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\2\1\17\4\0\1\20\1\21\3\3"+
    "\1\22\1\0\1\23\1\0\3\3\1\24\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[42];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\74\0\170\0\226\0\264"+
    "\0\322\0\360\0\74\0\u010e\0\u012c\0\u014a\0\74\0\u0168"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\u0186\0\74"+
    "\0\u01a4\0\u01c2\0\u01e0\0\u01fe\0\u01fe\0\74\0\u021c\0\u023a"+
    "\0\u0258\0\74\0\u0186\0\74\0\u0276\0\u0294\0\u02b2\0\u02d0"+
    "\0\170\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[42];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\34\3\1\4\1\3\1\5\1\6\1\5\1\7\2\10"+
    "\1\11\1\7\1\12\1\13\1\14\4\6\1\15\2\6"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\6\1\5\73\0\1\30\1\0\2\6"+
    "\1\31\1\0\1\6\4\0\11\6\11\0\1\6\4\0"+
    "\1\32\2\10\1\33\1\32\32\0\2\10\1\33\32\0"+
    "\1\34\2\35\1\36\1\34\36\0\1\12\26\0\2\6"+
    "\1\31\1\0\1\6\4\0\1\6\1\37\7\6\11\0"+
    "\1\6\2\0\2\6\1\31\1\0\1\6\4\0\6\6"+
    "\1\40\2\6\11\0\1\6\2\0\2\6\1\31\1\0"+
    "\1\6\4\0\7\6\1\41\1\6\11\0\1\6\7\0"+
    "\1\42\27\0\33\43\1\44\2\43\1\0\2\6\2\0"+
    "\1\6\4\0\11\6\11\0\1\6\5\0\2\45\33\0"+
    "\1\34\2\35\1\0\1\34\32\0\2\35\31\0\2\6"+
    "\1\31\1\0\1\6\4\0\2\6\1\46\6\6\11\0"+
    "\1\6\2\0\2\6\1\31\1\0\1\6\4\0\7\6"+
    "\1\47\1\6\11\0\1\6\2\0\2\6\1\31\1\0"+
    "\1\6\4\0\2\6\1\50\6\6\11\0\1\6\5\0"+
    "\2\45\1\33\30\0\2\6\1\31\1\0\1\6\4\0"+
    "\3\6\1\47\5\6\11\0\1\6\2\0\2\6\1\31"+
    "\1\0\1\6\4\0\4\6\1\51\4\6\11\0\1\6"+
    "\2\0\2\6\1\31\1\0\1\6\4\0\2\6\1\52"+
    "\6\6\11\0\1\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[750];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\5\1\1\11\3\1\1\11"+
    "\1\1\6\11\1\1\1\11\4\0\1\1\1\11\3\1"+
    "\1\11\1\0\1\11\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[42];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   public _TelLexer() {
     this((java.io.Reader)null);
   }
 
   private void resetAll() {
   }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _TelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2890) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 22: break;
          case 2: 
            { return TAP5_EL_BAD_CHAR;
            }
          case 23: break;
          case 3: 
            { return TAP5_EL_IDENTIFIER;
            }
          case 24: break;
          case 4: 
            { return TAP5_EL_INTEGER;
            }
          case 25: break;
          case 5: 
            { return TAP5_EL_DOT;
            }
          case 26: break;
          case 6: 
            { return TokenType.WHITE_SPACE;
            }
          case 27: break;
          case 7: 
            { yybegin(YYINITIAL); return TAP5_EL_END;
            }
          case 28: break;
          case 8: 
            { return TAP5_EL_COLON;
            }
          case 29: break;
          case 9: 
            { return TAP5_EL_COMMA;
            }
          case 30: break;
          case 10: 
            { return TAP5_EL_EXCLAMATION;
            }
          case 31: break;
          case 11: 
            { return TAP5_EL_LEFT_PARENTH;
            }
          case 32: break;
          case 12: 
            { return TAP5_EL_RIGHT_PARENTH;
            }
          case 33: break;
          case 13: 
            { return TAP5_EL_LEFT_BRACKET;
            }
          case 34: break;
          case 14: 
            { return TAP5_EL_RIGHT_BRACKET;
            }
          case 35: break;
          case 15: 
            { yybegin(TEL); return TAP5_EL_START;
            }
          case 36: break;
          case 16: 
            { return TAP5_EL_DECIMAL;
            }
          case 37: break;
          case 17: 
            { return TAP5_EL_RANGE;
            }
          case 38: break;
          case 18: 
            { return TAP5_EL_QUESTION_DOT;
            }
          case 39: break;
          case 19: 
            { return TAP5_EL_STRING;
            }
          case 40: break;
          case 20: 
            { return TAP5_EL_BOOLEAN;
            }
          case 41: break;
          case 21: 
            { return TAP5_EL_NULL;
            }
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
