/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.jetbrains.astro.lang.sfc.lexer;

import com.intellij.lang.javascript.JSLexerUtil;
import com.intellij.lang.javascript.JSTokenTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.util.ThrowableComputable;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.xml.XmlTokenType;
import com.intellij.util.ArrayUtil;
import it.unimi.dsi.fastutil.ints.IntArrayList;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.io.IOException;

import static com.intellij.util.ArrayUtil.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>AstroSfc.flex</tt>
 */
public class _AstroSfcLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int FRONTMATTER_OPEN = 2;
  public static final int FRONTMATTER_OPENED = 4;
  public static final int FRONTMATTER_CLOSE = 6;
  public static final int HTML_INITIAL = 8;
  public static final int DOC_TYPE = 10;
  public static final int COMMENT = 12;
  public static final int START_TAG_NAME = 14;
  public static final int END_TAG_NAME = 16;
  public static final int BEFORE_TAG_ATTRIBUTES = 18;
  public static final int TAG_ATTRIBUTES = 20;
  public static final int ATTRIBUTE_VALUE_START = 22;
  public static final int ATTRIBUTE_VALUE_DQ = 24;
  public static final int ATTRIBUTE_VALUE_SQ = 26;
  public static final int PROCESSING_INSTRUCTION = 28;
  public static final int TAG_CHARACTERS = 30;
  public static final int C_COMMENT_START = 32;
  public static final int C_COMMENT_END = 34;
  public static final int TAG_ATTRIBUTES_POST_SHORTHAND = 36;
  public static final int READ_STRING = 38;
  public static final int COMMENT_OR_REGEXP = 40;
  public static final int MULTILINE_COMMENT = 42;
  public static final int READ_TAG_ATTR_EXPRESSION = 44;
  public static final int FINISH_READ = 46;
  public static final int EXPRESSION_INITIAL = 48;
  public static final int DIV_OR_GT = 50;
  public static final int NON_EXPRESSION_PAR = 52;
  public static final int AFTER_DOT = 54;
  public static final int AFTER_ELVIS = 56;
  public static final int STRING_TEMPLATE = 58;
  public static final int STRING_TEMPLATE_DOLLAR = 60;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     7,  7,  8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14,
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 14, 14, 14, 14,
    21, 21, 22, 22, 23, 23, 24, 24, 24, 24, 25, 25, 26, 26
  };

  /**
   * Translates characters to character classes
   * Chosen bits are [13, 6, 2]
   * Total runtime size is 25568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>8]<<6)|((ch>>2)&0x3f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 4352 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\1\1\21\1\22\1\23\1\1\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\1\1\34"+
    "\1\35\1\36\12\37\1\40\1\41\1\42\1\37\1\43\1\44\2\37\31\1\1\45\121\1\1\46\4"+
    "\1\1\47\1\1\1\50\1\51\1\52\1\53\1\54\1\55\53\1\1\56\41\37\1\1\1\57\1\60\1"+
    "\1\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\1\1\72\1\73\1\74\1\75\1"+
    "\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\1\115\1\37\1\116\1\117\1\120\1\121\3\1\1\122\1\123\1\124\12\37"+
    "\4\1\1\125\17\37\2\1\1\126\41\37\2\1\1\127\1\130\2\37\1\131\1\132\27\1\1\133"+
    "\2\1\1\134\1\135\1\136\1\137\42\37\1\140\1\141\1\142\11\37\1\143\24\37\1\144"+
    "\1\145\1\37\1\146\1\147\1\150\1\151\2\37\1\152\5\37\1\153\1\154\1\155\5\37"+
    "\1\156\1\157\2\37\1\160\1\37\1\161\14\37\1\162\4\37\246\1\1\163\20\1\1\164"+
    "\1\165\25\1\1\166\34\135\1\167\14\37\2\1\1\170\5\37\23\135\1\171\u0aec\37"+
    "\1\172\1\173\u02fe\37");

  /* The ZZ_CMAP_Y table has 7936 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\3\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\0\1\34\6"+
    "\0\1\35\1\36\1\37\1\40\1\3\1\41\1\37\1\3\5\42\1\43\7\42\1\43\162\42\1\44\1"+
    "\45\2\42\1\44\3\3\1\42\1\46\1\3\1\47\4\3\34\0\1\42\1\50\1\45\1\51\1\3\1\37"+
    "\1\43\1\50\4\42\1\51\24\42\1\51\42\42\1\52\1\0\1\45\51\42\1\53\10\42\1\43"+
    "\1\41\1\3\1\54\11\42\1\55\1\56\1\57\12\0\1\60\1\61\1\60\2\3\6\42\1\43\1\56"+
    "\1\43\3\3\1\0\1\62\1\56\1\3\2\0\1\63\1\64\12\42\1\65\7\0\1\62\1\45\1\66\30"+
    "\42\1\67\1\0\1\60\1\0\1\70\1\71\1\72\2\0\1\72\1\73\3\3\1\74\1\75\7\42\6\0"+
    "\1\63\1\53\25\42\1\76\2\0\1\77\3\3\2\0\1\72\7\42\1\65\2\0\1\44\1\37\1\100"+
    "\5\42\1\76\1\101\2\0\2\102\1\62\4\3\6\42\1\102\1\3\2\103\1\104\15\3\5\42\1"+
    "\50\1\42\1\105\2\103\2\3\1\74\14\0\15\42\1\76\1\106\4\0\1\102\1\0\2\42\1\76"+
    "\1\107\2\0\1\53\3\42\1\102\1\53\1\42\2\73\5\42\1\50\1\42\1\47\1\45\1\44\1"+
    "\106\1\0\2\110\1\111\1\3\1\74\1\3\1\51\1\76\1\107\2\0\1\105\1\3\1\56\1\112"+
    "\1\57\1\53\1\43\1\113\1\73\5\42\1\50\1\42\1\50\1\114\1\44\1\71\1\63\1\74\1"+
    "\110\1\62\1\40\1\3\1\53\1\47\1\3\1\107\2\0\1\72\1\115\2\3\1\57\1\53\1\42\2"+
    "\51\5\42\1\50\1\42\1\50\1\53\1\44\1\106\1\0\2\60\1\62\1\46\3\3\1\76\1\107"+
    "\2\0\1\116\1\3\1\67\1\0\1\57\1\53\1\42\2\73\5\42\1\50\1\42\1\50\1\53\1\44"+
    "\1\106\1\0\2\110\1\62\1\3\1\57\1\3\1\51\1\76\1\107\2\0\1\41\3\3\1\117\1\53"+
    "\1\43\1\45\1\50\1\44\1\114\1\50\1\113\1\46\1\43\1\45\2\42\1\44\1\107\1\63"+
    "\1\107\1\71\1\62\1\46\1\74\3\3\1\107\2\0\2\3\1\116\1\3\1\0\1\66\1\42\2\50"+
    "\5\42\1\50\3\42\1\44\1\67\1\0\2\71\1\62\1\3\1\61\1\43\1\3\1\76\1\107\2\0\4"+
    "\3\1\102\1\53\1\42\2\50\5\42\1\50\2\42\1\53\1\44\1\106\1\0\2\71\1\62\1\3\1"+
    "\61\1\3\1\37\1\76\1\107\2\0\1\114\3\3\1\0\1\54\1\42\2\50\11\42\1\65\1\106"+
    "\1\0\2\71\1\111\1\3\1\65\1\3\1\113\1\76\1\107\2\0\2\3\1\45\1\42\1\57\1\53"+
    "\3\42\1\43\1\45\5\42\1\51\2\42\1\41\1\42\1\43\1\120\1\74\1\0\1\121\2\0\1\3"+
    "\1\107\2\0\1\107\3\3\1\53\13\42\1\75\1\0\1\63\1\56\1\42\1\65\1\0\1\63\2\0"+
    "\1\62\11\3\1\114\1\122\1\123\1\124\1\103\1\42\1\54\1\42\1\54\1\125\1\126\1"+
    "\54\1\75\2\0\1\77\1\42\1\47\1\0\1\62\2\0\1\62\1\42\10\3\1\46\5\3\1\62\1\3"+
    "\2\0\1\62\2\3\1\127\1\40\1\107\2\42\1\53\10\42\1\46\1\57\4\0\1\71\1\42\1\102"+
    "\2\0\1\57\10\0\1\64\1\3\1\120\16\3\12\42\1\65\4\0\1\130\2\0\1\62\1\3\1\42"+
    "\1\76\1\72\1\76\1\106\1\70\1\0\1\72\1\102\1\66\2\42\1\76\2\0\1\101\3\0\1\62"+
    "\11\42\1\51\1\3\1\41\12\42\1\43\23\42\1\50\1\44\1\42\1\43\1\50\1\44\12\42"+
    "\1\50\1\44\10\42\1\50\1\44\1\42\1\43\1\50\1\44\3\42\1\43\16\42\1\50\1\44\20"+
    "\42\1\43\1\57\10\3\4\42\4\3\25\42\1\44\1\42\1\44\1\53\132\42\1\73\4\42\1\53"+
    "\5\42\1\43\1\3\22\42\1\43\1\35\1\54\1\42\1\46\1\3\3\42\1\50\1\76\1\64\2\3"+
    "\4\42\1\76\1\64\2\3\4\42\1\76\3\3\3\42\1\50\1\131\3\3\15\42\10\0\1\113\1\56"+
    "\1\115\2\0\1\62\7\3\1\74\1\63\2\0\1\62\1\3\26\42\1\55\1\3\1\42\1\132\10\42"+
    "\1\133\1\3\21\42\1\44\2\3\7\42\1\43\3\0\1\3\3\0\2\3\1\107\2\0\7\42\1\44\1"+
    "\42\1\46\2\3\13\42\1\3\6\42\1\44\1\3\2\0\1\62\11\3\5\42\1\65\1\0\1\3\15\42"+
    "\1\102\1\0\1\63\7\0\1\110\2\0\1\62\1\3\2\0\1\62\2\3\1\113\2\3\3\0\1\60\1\64"+
    "\17\3\1\0\1\66\13\42\4\0\1\66\1\42\1\3\2\0\1\62\3\3\1\74\2\0\3\3\1\130\7\42"+
    "\1\102\2\0\1\72\2\0\1\72\12\42\1\76\3\0\3\3\11\42\5\0\2\3\2\0\1\62\1\53\2"+
    "\0\1\72\10\42\1\44\2\42\1\46\1\3\12\103\1\104\1\134\4\3\1\63\5\0\1\66\1\75"+
    "\1\105\1\70\1\135\1\3\60\42\16\0\1\60\1\0\5\42\1\44\1\42\1\44\11\42\1\44\1"+
    "\42\1\44\2\42\2\125\7\42\1\44\15\42\1\50\1\42\1\47\1\45\1\50\1\42\1\46\1\42"+
    "\1\45\1\42\1\3\3\42\1\46\1\45\1\50\1\42\1\46\2\3\1\74\1\0\6\3\1\136\1\63\3"+
    "\3\1\56\1\55\4\3\1\55\2\3\1\0\1\71\2\0\1\41\2\3\1\113\4\3\3\42\1\46\10\103"+
    "\4\3\3\0\1\64\1\40\1\57\2\0\1\64\3\3\1\37\1\113\1\45\2\42\1\41\1\53\1\44\1"+
    "\3\1\47\1\50\1\51\2\42\1\44\1\42\1\3\1\53\1\44\1\37\4\3\10\103\1\137\1\140"+
    "\1\55\135\3\13\42\1\43\13\42\1\43\41\42\1\46\1\113\1\65\1\72\3\3\11\42\1\51"+
    "\1\3\1\41\16\42\1\3\1\113\3\3\1\74\5\42\1\43\2\3\1\42\1\43\1\42\1\43\1\42"+
    "\1\43\1\42\1\43\1\42\1\43\1\42\1\43\1\42\1\43\1\42\1\43\10\0\13\3\1\113\65"+
    "\3\1\141\6\3\1\134\1\103\1\142\1\0\1\53\1\44\1\137\1\46\1\53\24\42\1\43\1"+
    "\61\2\53\25\42\1\43\1\42\1\3\1\53\11\42\1\105\1\53\26\42\1\43\4\3\6\42\1\143"+
    "\1\103\14\3\61\42\1\105\2\103\20\3\65\42\1\105\11\103\1\55\43\42\1\46\20\3"+
    "\13\42\1\44\3\42\1\46\4\42\2\0\1\72\5\3\13\42\1\65\1\3\2\0\1\144\7\42\1\76"+
    "\21\42\1\105\2\103\1\62\10\3\1\113\2\42\1\45\31\42\1\73\10\42\1\143\2\42\2"+
    "\103\1\35\1\103\1\104\12\3\1\145\2\42\2\146\1\65\5\42\1\65\1\0\1\3\1\64\2"+
    "\3\1\55\1\3\15\42\3\3\1\72\14\42\4\0\1\62\2\3\2\0\1\62\1\3\4\0\1\72\1\42\1"+
    "\113\1\147\2\0\1\72\6\42\1\76\1\0\1\62\5\42\1\65\3\0\3\3\7\42\1\46\1\0\13"+
    "\42\1\65\3\0\1\64\2\3\1\113\2\0\1\62\1\3\1\42\1\75\2\42\2\0\1\72\1\43\12\42"+
    "\1\102\2\0\1\63\2\3\1\65\2\42\1\62\2\0\1\62\1\3\5\42\1\43\1\150\1\72\14\42"+
    "\1\106\1\70\1\66\1\76\1\133\5\3\1\113\1\44\2\42\1\65\1\0\1\45\1\151\2\3\1"+
    "\53\1\43\1\53\1\43\1\53\1\43\2\3\1\42\1\43\1\42\1\43\12\42\1\43\2\42\1\105"+
    "\1\36\1\3\34\42\1\65\1\0\1\63\1\62\2\0\1\62\1\3\51\42\3\3\5\42\1\43\1\113"+
    "\14\42\1\3\33\42\1\44\32\42\1\44\11\3\1\42\1\43\2\3\1\113\1\42\1\3\1\152\2"+
    "\42\1\50\2\42\1\43\1\42\1\47\1\51\1\50\32\42\1\44\7\3\1\113\32\42\1\44\4\3"+
    "\20\42\1\45\15\42\12\3\3\42\1\55\4\0\4\3\4\0\1\56\1\55\5\3\1\134\6\3\1\116"+
    "\1\3\1\42\1\50\41\42\1\153\1\3\1\55\2\3\2\0\1\62\1\3\1\53\5\42\1\43\1\56\1"+
    "\53\5\42\1\43\2\3\1\45\25\42\1\43\1\45\1\42\1\45\1\42\1\45\1\42\1\45\1\46"+
    "\1\36\1\154\4\3\1\57\1\3\3\42\1\53\5\42\1\43\4\42\1\43\1\51\3\42\1\44\3\42"+
    "\1\44\10\3\36\42\1\43\21\3\15\103\1\55\41\3\1\40\40\3\7\42\1\46\14\42\1\46"+
    "\3\3\1\64\7\3\10\42\3\3\1\134\4\42\1\155\1\42\1\156\1\3\11\42\1\76\1\63\1"+
    "\3\7\42\1\44\11\42\1\3\2\42\1\134\1\36\12\3\47\42\1\44\2\0\1\62\1\3\11\42"+
    "\1\3\11\42\1\3\12\42\2\3\15\42\47\3\15\42\1\43\2\3\5\42\1\44\2\3\2\42\46\3"+
    "\1\42\1\44\1\50\12\42\1\51\1\46\1\73\5\42\1\44\2\3\5\42\1\43\2\3\7\42\1\43"+
    "\20\3\4\42\1\43\1\44\2\3\5\42\1\44\2\3\6\42\1\44\21\3\16\42\1\3\1\45\20\3"+
    "\1\102\1\61\1\3\1\0\1\42\2\53\6\42\1\36\1\63\1\74\10\3\7\42\1\46\7\42\1\46"+
    "\10\3\2\42\1\53\6\42\1\151\6\3\15\42\1\44\2\3\5\42\1\44\2\3\4\42\1\43\3\3"+
    "\4\42\1\44\33\3\22\42\1\46\15\3\14\42\1\43\3\3\14\42\1\43\3\3\11\103\1\0\2"+
    "\3\2\0\1\62\121\3\12\103\1\157\1\64\1\36\23\3\7\103\1\55\1\3\1\56\2\3\5\103"+
    "\1\142\2\0\1\64\27\3\5\103\1\55\6\3\5\103\1\104\2\3\1\130\15\42\3\0\1\63\7"+
    "\3\1\107\2\0\3\3\1\74\1\130\13\42\2\0\1\63\1\40\3\3\1\40\6\42\1\46\1\3\2\0"+
    "\1\62\1\3\1\130\10\42\1\65\3\0\1\71\2\0\1\3\1\160\2\3\10\42\1\65\1\37\2\3"+
    "\1\130\13\42\1\65\3\0\1\66\1\46\1\57\1\71\2\0\1\111\1\46\10\3\4\42\1\51\6"+
    "\42\3\0\1\3\1\120\20\3\1\42\1\43\1\50\1\51\3\42\1\51\2\42\1\46\1\3\13\42\1"+
    "\65\2\0\1\63\1\3\2\0\1\62\1\3\1\0\1\53\1\42\2\73\5\42\1\50\1\42\1\50\1\53"+
    "\1\52\1\106\1\0\2\110\1\62\1\46\1\74\1\3\1\53\1\76\1\107\1\0\1\64\1\0\1\64"+
    "\42\3\15\42\1\102\3\0\1\130\1\43\1\3\2\0\1\62\1\161\1\36\7\3\14\42\5\0\1\51"+
    "\2\3\2\0\1\62\51\3\13\42\1\65\1\0\1\62\2\0\1\64\5\3\1\42\1\62\10\3\14\42\4"+
    "\0\1\64\1\46\2\3\2\0\1\62\11\3\12\42\1\65\3\0\1\55\1\3\2\0\1\62\15\3\6\42"+
    "\1\156\1\57\3\0\1\3\2\0\1\62\61\3\13\103\3\0\1\63\31\3\20\42\2\0\1\62\4\3"+
    "\1\113\1\103\1\104\1\116\2\103\1\154\6\103\1\0\1\60\1\110\1\162\1\163\3\3"+
    "\2\0\1\62\21\3\2\103\1\35\11\103\1\164\1\0\1\107\1\0\1\165\1\64\6\3\1\164"+
    "\1\0\1\162\11\103\1\166\1\0\1\167\1\63\1\3\1\74\2\3\1\164\2\0\13\103\1\142"+
    "\3\0\1\62\1\116\10\3\16\42\1\46\1\3\2\42\1\50\10\42\1\65\1\0\1\63\2\0\1\46"+
    "\3\3\2\0\1\62\5\3\1\45\7\42\1\107\5\0\1\57\2\0\1\63\22\3\1\103\1\104\1\170"+
    "\11\103\1\164\1\63\1\120\1\60\1\0\1\167\2\3\2\0\1\62\1\3\1\103\1\170\1\171"+
    "\7\103\1\142\1\63\1\60\1\0\1\55\1\3\2\0\1\62\115\3\4\103\1\166\1\63\56\3\1"+
    "\55\12\3\1\134\1\55\7\3\46\42\1\44\31\3\33\103\1\104\4\3\61\42\57\3\13\42"+
    "\1\43\2\0\1\64\61\3\21\42\1\43\56\3\16\42\1\46\1\3\7\42\1\43\2\0\1\62\31\3"+
    "\7\42\1\44\1\0\1\64\2\3\14\42\1\0\1\63\2\3\1\42\3\3\2\0\1\62\1\3\1\113\5\42"+
    "\1\3\1\53\4\42\54\3\20\103\40\3\21\42\1\140\1\104\1\74\1\102\15\0\1\3\1\74"+
    "\1\130\3\42\20\3\1\172\1\64\2\3\1\62\3\3\73\42\1\140\2\103\2\3\74\42\1\143"+
    "\170\103\1\36\12\3\2\103\1\55\75\3\1\105\106\103\1\104\14\3\1\104\4\3\1\103"+
    "\2\3\143\103\1\3\32\42\1\43\1\3\3\42\1\46\2\42\1\46\1\3\2\42\1\44\1\61\1\0"+
    "\60\3\1\57\1\62\1\57\4\0\1\63\1\57\1\0\7\3\1\107\1\62\44\3\1\107\1\64\56\3"+
    "\25\42\1\50\21\42\1\50\1\37\1\114\1\53\1\50\2\42\1\51\1\53\1\42\1\53\17\42"+
    "\1\51\1\43\1\53\1\42\1\50\1\42\1\50\6\42\1\51\1\43\1\42\1\47\1\45\1\42\1\50"+
    "\124\42\1\44\6\42\1\50\5\42\1\43\7\42\1\43\6\42\1\50\7\42\1\50\5\42\1\43\7"+
    "\42\1\43\6\42\1\50\7\42\1\50\5\42\1\43\2\42\1\107\31\0\1\63\1\74\14\0\1\64"+
    "\1\3\1\40\3\3\1\64\4\3\1\74\1\0\1\57\3\0\24\3\1\0\1\63\4\0\1\110\1\0\1\60"+
    "\1\71\1\63\65\3\13\103\1\55\1\0\1\162\1\103\1\36\2\0\1\62\1\173\134\3\13\103"+
    "\3\0\1\62\1\56\61\42\1\46\2\3\1\0\1\63\12\3\21\42\1\0\1\162\1\3\2\0\1\62\125"+
    "\3\1\55\23\3\1\42\1\53\6\42\1\114\1\73\1\53\1\42\1\43\1\42\1\125\1\3\1\37"+
    "\1\113\1\125\1\53\1\114\1\73\2\125\1\114\1\73\1\43\1\42\1\43\1\42\1\53\1\47"+
    "\2\42\1\51\4\42\1\3\2\53\1\51\4\42\115\3\2\0\1\62\1\3\65\42\1\143\1\103\1"+
    "\36\10\3\15\42\1\46\2\3\67\42\1\44\140\42\1\44\3\3\114\103\1\55\7\3\7\42\1"+
    "\44\70\3\22\103\1\104\55\3\1\40\7\3\30\0\40\3\74\0\4\3");

  /* The ZZ_CMAP_A table has 496 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\66\1\3\1\77\1\75\1\104\1\77\2\66\4\0\1\3\1\7\1\4\1\55\1\101\1\125\1\46"+
    "\1\5\1\43\1\44\1\106\1\74\1\126\1\107\1\42\1\105\1\2\1\71\6\72\2\70\1\122"+
    "\1\47\1\6\1\112\1\111\1\110\1\123\1\113\1\36\1\14\1\10\1\24\1\60\1\61\1\26"+
    "\1\40\2\61\1\32\1\30\1\61\1\12\1\22\3\61\1\16\1\34\2\61\1\57\1\20\1\61\1\102"+
    "\1\63\1\103\1\124\1\73\1\100\1\51\1\37\1\15\1\11\1\25\1\115\1\50\1\27\1\41"+
    "\1\121\1\116\1\33\1\31\1\54\1\13\1\23\1\53\1\114\1\52\1\17\1\35\1\120\1\117"+
    "\1\56\1\21\1\61\1\64\1\45\1\65\1\127\2\66\1\67\2\66\2\0\4\62\4\0\1\1\2\0\1"+
    "\66\3\0\1\1\2\0\7\1\1\0\2\1\4\0\3\1\3\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\3"+
    "\1\1\0\1\66\1\0\3\1\1\62\3\1\1\62\6\0\1\62\1\0\5\66\1\0\1\66\1\0\2\66\1\0"+
    "\2\66\2\0\3\66\1\0\1\66\3\0\3\1\2\66\3\1\1\0\1\1\3\66\2\1\2\66\1\0\4\66\3"+
    "\1\2\0\1\1\3\0\1\66\1\1\1\66\4\1\3\66\1\1\3\0\1\66\2\62\2\66\1\1\1\66\1\1"+
    "\3\66\7\62\1\0\2\1\2\62\1\66\1\1\2\66\2\0\3\66\2\0\3\66\1\1\1\0\1\62\1\0\1"+
    "\66\4\0\1\1\1\0\2\1\1\0\1\1\1\66\3\0\1\62\4\0\1\66\1\1\2\0\1\66\1\0\1\66\1"+
    "\0\1\66\1\0\1\1\1\0\1\62\2\1\1\62\1\1\1\0\1\62\1\1\2\62\1\0\1\1\1\0\1\1\2"+
    "\62\2\1\1\0\1\66\1\0\4\66\2\1\1\0\2\66\1\1\2\66\2\1\1\66\1\1\2\0\3\62\2\66"+
    "\1\62\1\0\2\76\2\66\3\62\2\1\3\62\1\0\2\1\3\62\2\66\3\1\1\62\2\66\1\0\1\1"+
    "\1\0\2\62\3\1\1\66\1\1\1\0\1\1\1\62\1\66\2\0\1\1\1\66\1\1\2\66\2\0\1\1\1\66"+
    "\2\1\2\0\1\66\1\0\2\62\1\0\1\1\1\62\4\1\1\62\1\0\2\62\1\0\1\66\1\62\2\66\1"+
    "\62\2\0\1\66\1\62\3\66\1\62\1\66\1\62\2\66\1\62\4\66\1\62\1\0\4\62\3\66\1"+
    "\62\1\66\2\62\1\0\2\62\1\0\2\62\1\1\1\62\1\0\1\62\2\0\1\62\1\0");

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\33\0\1\1\1\2\1\1\1\3\1\4\1\1\3\5"+
    "\1\1\1\6\1\7\1\1\3\10\1\11\1\12\2\11"+
    "\1\13\1\14\1\15\4\14\1\16\3\17\1\20\1\17"+
    "\1\21\1\22\1\23\1\22\1\24\1\25\1\24\1\26"+
    "\1\27\1\30\1\31\1\30\1\32\1\33\1\34\1\35"+
    "\1\36\1\33\1\37\2\40\1\41\1\40\1\42\1\14"+
    "\1\43\5\44\1\45\1\46\1\47\1\50\1\51\2\52"+
    "\1\53\1\54\2\55\1\56\1\57\1\60\1\61\1\62"+
    "\14\56\1\63\1\64\1\65\1\66\1\67\1\70\4\56"+
    "\1\71\1\14\1\72\1\73\1\57\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\5\56"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\100"+
    "\1\101\2\114\1\115\2\114\1\116\1\14\1\117\1\116"+
    "\1\120\5\0\1\121\1\122\1\123\14\0\1\124\1\33"+
    "\1\0\1\17\1\125\1\0\1\126\1\0\1\57\3\0"+
    "\2\57\2\0\1\127\1\130\3\56\1\131\25\56\1\132"+
    "\1\133\1\134\1\57\1\135\1\136\1\137\1\140\1\0"+
    "\1\141\2\0\1\142\4\56\1\143\13\56\1\144\3\0"+
    "\1\145\1\146\1\147\2\0\1\150\1\151\1\152\1\153"+
    "\1\154\1\155\1\0\1\156\1\157\13\56\1\160\1\161"+
    "\1\162\1\163\1\164\1\165\1\166\1\167\1\0\1\170"+
    "\1\171\1\172\1\173\1\174\1\175\2\0\1\176\11\0"+
    "\1\177\2\0\1\200\2\57\1\0\2\57\1\0\1\201"+
    "\4\56\1\202\11\56\1\203\13\56\1\204\11\56\1\0"+
    "\1\205\1\206\1\0\1\207\2\0\1\210\5\56\1\211"+
    "\4\56\1\212\3\56\1\213\4\56\3\0\1\147\1\0"+
    "\1\214\1\215\1\0\1\216\1\217\3\56\1\220\10\56"+
    "\1\221\1\222\1\223\1\0\1\224\1\225\3\0\1\226"+
    "\1\14\1\227\1\0\13\56\1\230\1\231\1\232\1\56"+
    "\1\233\5\56\1\234\1\235\16\56\1\236\1\104\1\0"+
    "\16\56\1\237\1\56\4\0\1\240\6\56\1\241\2\56"+
    "\1\242\1\243\3\0\10\56\1\244\1\245\1\246\1\56"+
    "\1\247\1\250\13\56\1\251\5\56\1\252\2\0\1\253"+
    "\1\67\3\56\1\254\1\56\1\255\3\56\1\256\2\56"+
    "\1\257\2\56\3\0\5\56\1\260\1\261\1\262\1\0"+
    "\1\263\1\0\2\56\1\264\2\56\1\265\2\56\1\266"+
    "\1\267\4\56\1\270\1\271\3\56\1\272\1\273\4\56"+
    "\3\0\1\274\2\56\1\275\1\56\1\276\1\277\1\300"+
    "\1\56\1\301\1\302\1\56\1\0\1\303\4\56\2\0"+
    "\1\56\1\304\1\56\1\305\2\56\1\306\1\56\1\307"+
    "\1\310\1\56\1\311\1\312\4\56\3\0\2\56\1\313"+
    "\1\314\3\56\1\315\1\56\1\316\2\0\1\56\1\317"+
    "\1\320\1\321\6\56\1\322\2\0\1\323\1\324\2\56"+
    "\1\325\1\326\1\327\1\330\1\331\1\332\1\333\1\56"+
    "\1\334\1\335\1\56\2\0\1\336\1\337\1\340\1\341"+
    "\1\0\1\141\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[682];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\130\0\260\0\u0108\0\u0160\0\u01b8\0\u0210\0\u0268"+
    "\0\u02c0\0\u0318\0\u0370\0\u03c8\0\u0420\0\u0478\0\u04d0\0\u0528"+
    "\0\u0580\0\u05d8\0\u0630\0\u0688\0\u06e0\0\u0738\0\u0790\0\u07e8"+
    "\0\u0840\0\u0898\0\u08f0\0\u0948\0\u09a0\0\u09f8\0\u09a0\0\u09a0"+
    "\0\u0a50\0\u09a0\0\u0aa8\0\u0b00\0\u0b58\0\u09a0\0\u09a0\0\u0bb0"+
    "\0\u09a0\0\u0aa8\0\u0c08\0\u09a0\0\u0c60\0\u0cb8\0\u0d10\0\u09a0"+
    "\0\u09a0\0\u0aa8\0\u0d68\0\u0dc0\0\u0e18\0\u0e70\0\u09a0\0\u09a0"+
    "\0\u0aa8\0\u0ec8\0\u09a0\0\u0f20\0\u09a0\0\u0f78\0\u0fd0\0\u1028"+
    "\0\u1080\0\u09a0\0\u09a0\0\u10d8\0\u09a0\0\u1130\0\u09a0\0\u1188"+
    "\0\u09a0\0\u11e0\0\u09a0\0\u09a0\0\u09a0\0\u1238\0\u09a0\0\u09a0"+
    "\0\u1290\0\u09a0\0\u0d10\0\u12e8\0\u1340\0\u09a0\0\u09a0\0\u1398"+
    "\0\u0aa8\0\u13f0\0\u1448\0\u09a0\0\u14a0\0\u09a0\0\u09a0\0\u09a0"+
    "\0\u09a0\0\u0aa8\0\u09a0\0\u09a0\0\u14f8\0\u1550\0\u15a8\0\u1600"+
    "\0\u09a0\0\u1658\0\u16b0\0\u1708\0\u1760\0\u17b8\0\u1810\0\u1868"+
    "\0\u18c0\0\u1918\0\u1970\0\u19c8\0\u1a20\0\u1a78\0\u1ad0\0\u1b28"+
    "\0\u09a0\0\u09a0\0\u1b80\0\u1bd8\0\u09a0\0\u1c30\0\u1c88\0\u1ce0"+
    "\0\u1d38\0\u1d90\0\u1de8\0\u09a0\0\u09a0\0\u1e40\0\u1e98\0\u09a0"+
    "\0\u09a0\0\u09a0\0\u1ef0\0\u09a0\0\u1f48\0\u1fa0\0\u1ff8\0\u2050"+
    "\0\u20a8\0\u2100\0\u2158\0\u21b0\0\u2208\0\u2260\0\u09a0\0\u22b8"+
    "\0\u2310\0\u09a0\0\u09a0\0\u2368\0\u23c0\0\u2418\0\u09a0\0\u0aa8"+
    "\0\u09a0\0\u1d90\0\u1de8\0\u2470\0\u24c8\0\u09a0\0\u2520\0\u09a0"+
    "\0\u2578\0\u25d0\0\u2628\0\u2680\0\u26d8\0\u09a0\0\u09a0\0\u09a0"+
    "\0\u2730\0\u2788\0\u27e0\0\u2838\0\u2890\0\u28e8\0\u0d68\0\u0dc0"+
    "\0\u2940\0\u2998\0\u29f0\0\u2a48\0\u09a0\0\u2aa0\0\u2af8\0\u1398"+
    "\0\u09a0\0\u2b50\0\u09a0\0\u1de8\0\u2ba8\0\u2c00\0\u2c58\0\u2cb0"+
    "\0\u2d08\0\u09a0\0\u2d60\0\u2db8\0\u2e10\0\u15a8\0\u2e68\0\u2ec0"+
    "\0\u2f18\0\u15a8\0\u2f70\0\u2fc8\0\u3020\0\u3078\0\u30d0\0\u3128"+
    "\0\u3180\0\u31d8\0\u3230\0\u3288\0\u32e0\0\u3338\0\u3390\0\u33e8"+
    "\0\u3440\0\u3498\0\u34f0\0\u3548\0\u35a0\0\u35f8\0\u3650\0\u15a8"+
    "\0\u36a8\0\u15a8\0\u3700\0\u3758\0\u37b0\0\u09a0\0\u09a0\0\u3808"+
    "\0\u3860\0\u38b8\0\u3910\0\u09a0\0\u3968\0\u39c0\0\u3a18\0\u3a70"+
    "\0\u3ac8\0\u3b20\0\u3b78\0\u3bd0\0\u3c28\0\u3c80\0\u3cd8\0\u3d30"+
    "\0\u3d88\0\u3de0\0\u3e38\0\u3e90\0\u3ee8\0\u3f40\0\u3f98\0\u3ff0"+
    "\0\u09a0\0\u09a0\0\u4048\0\u40a0\0\u40f8\0\u09a0\0\u09a0\0\u09a0"+
    "\0\u09a0\0\u4150\0\u41a8\0\u4200\0\u09a0\0\u4258\0\u42b0\0\u4308"+
    "\0\u4360\0\u43b8\0\u4410\0\u4468\0\u44c0\0\u4518\0\u4570\0\u45c8"+
    "\0\u4620\0\u09a0\0\u09a0\0\u09a0\0\u4678\0\u09a0\0\u09a0\0\u46d0"+
    "\0\u09a0\0\u4728\0\u09a0\0\u09a0\0\u09a0\0\u09a0\0\u09a0\0\u09a0"+
    "\0\u4780\0\u47d8\0\u09a0\0\u4830\0\u4888\0\u48e0\0\u4938\0\u4990"+
    "\0\u49e8\0\u4a40\0\u4a98\0\u4af0\0\u09a0\0\u4b48\0\u4ba0\0\u09a0"+
    "\0\u4bf8\0\u4c50\0\u4ca8\0\u4d00\0\u4d58\0\u4db0\0\u09a0\0\u4e08"+
    "\0\u4e60\0\u4eb8\0\u4f10\0\u15a8\0\u4f68\0\u4fc0\0\u5018\0\u5070"+
    "\0\u50c8\0\u5120\0\u5178\0\u51d0\0\u5228\0\u15a8\0\u5280\0\u52d8"+
    "\0\u5330\0\u5388\0\u53e0\0\u5438\0\u5490\0\u54e8\0\u5540\0\u5598"+
    "\0\u55f0\0\u15a8\0\u5648\0\u56a0\0\u56f8\0\u5750\0\u57a8\0\u5800"+
    "\0\u5858\0\u58b0\0\u5908\0\u5960\0\u09a0\0\u09a0\0\u59b8\0\u09a0"+
    "\0\u5a10\0\u5a68\0\u15a8\0\u5ac0\0\u5b18\0\u5b70\0\u5bc8\0\u5c20"+
    "\0\u15a8\0\u5c78\0\u5cd0\0\u5d28\0\u5d80\0\u15a8\0\u5dd8\0\u5e30"+
    "\0\u5e88\0\u15a8\0\u5ee0\0\u5f38\0\u5f90\0\u5fe8\0\u6040\0\u6098"+
    "\0\u60f0\0\u6148\0\u61a0\0\u09a0\0\u09a0\0\u61f8\0\u09a0\0\u09a0"+
    "\0\u6250\0\u62a8\0\u6300\0\u15a8\0\u6358\0\u63b0\0\u6408\0\u6460"+
    "\0\u64b8\0\u6510\0\u6568\0\u65c0\0\u15a8\0\u09a0\0\u09a0\0\u6618"+
    "\0\u09a0\0\u09a0\0\u6670\0\u66c8\0\u6720\0\u09a0\0\u6778\0\u09a0"+
    "\0\u67d0\0\u6828\0\u6880\0\u68d8\0\u6930\0\u6988\0\u69e0\0\u6a38"+
    "\0\u6a90\0\u6ae8\0\u6b40\0\u6b98\0\u15a8\0\u6bf0\0\u15a8\0\u6c48"+
    "\0\u15a8\0\u6ca0\0\u6cf8\0\u6d50\0\u6da8\0\u6e00\0\u15a8\0\u15a8"+
    "\0\u6e58\0\u6eb0\0\u6f08\0\u6f60\0\u6fb8\0\u7010\0\u7068\0\u70c0"+
    "\0\u7118\0\u7170\0\u71c8\0\u7220\0\u7278\0\u72d0\0\u7328\0\u7380"+
    "\0\u73d8\0\u7430\0\u7488\0\u74e0\0\u7538\0\u7590\0\u75e8\0\u7640"+
    "\0\u7698\0\u76f0\0\u7748\0\u77a0\0\u77f8\0\u7850\0\u78a8\0\u15a8"+
    "\0\u7900\0\u7958\0\u79b0\0\u7a08\0\u7a60\0\u09a0\0\u7ab8\0\u7b10"+
    "\0\u7b68\0\u7bc0\0\u7c18\0\u7c70\0\u15a8\0\u7cc8\0\u7d20\0\u15a8"+
    "\0\u15a8\0\u7d78\0\u7dd0\0\u7e28\0\u7e80\0\u7ed8\0\u7f30\0\u7f88"+
    "\0\u7fe0\0\u8038\0\u8090\0\u80e8\0\u15a8\0\u15a8\0\u15a8\0\u8140"+
    "\0\u15a8\0\u15a8\0\u8198\0\u81f0\0\u8248\0\u82a0\0\u82f8\0\u8350"+
    "\0\u83a8\0\u8400\0\u8458\0\u84b0\0\u8508\0\u15a8\0\u8560\0\u85b8"+
    "\0\u8610\0\u8668\0\u86c0\0\u15a8\0\u8718\0\u8770\0\u09a0\0\u87c8"+
    "\0\u8820\0\u8878\0\u88d0\0\u15a8\0\u8928\0\u8980\0\u89d8\0\u8a30"+
    "\0\u8a88\0\u15a8\0\u8ae0\0\u8b38\0\u15a8\0\u8b90\0\u8be8\0\u8c40"+
    "\0\u8c98\0\u8cf0\0\u8d48\0\u8da0\0\u8df8\0\u8e50\0\u8ea8\0\u15a8"+
    "\0\u15a8\0\u15a8\0\u8f00\0\u09a0\0\u8f58\0\u8fb0\0\u9008\0\u15a8"+
    "\0\u9060\0\u90b8\0\u15a8\0\u9110\0\u9168\0\u15a8\0\u15a8\0\u91c0"+
    "\0\u9218\0\u9270\0\u92c8\0\u15a8\0\u15a8\0\u9320\0\u9378\0\u93d0"+
    "\0\u15a8\0\u15a8\0\u9428\0\u9480\0\u94d8\0\u9530\0\u9588\0\u95e0"+
    "\0\u9638\0\u15a8\0\u9690\0\u96e8\0\u9740\0\u9798\0\u15a8\0\u15a8"+
    "\0\u15a8\0\u97f0\0\u15a8\0\u15a8\0\u9848\0\u98a0\0\u15a8\0\u98f8"+
    "\0\u9950\0\u99a8\0\u9a00\0\u9a58\0\u9ab0\0\u9b08\0\u15a8\0\u9b60"+
    "\0\u15a8\0\u9bb8\0\u9c10\0\u15a8\0\u9c68\0\u15a8\0\u15a8\0\u9cc0"+
    "\0\u15a8\0\u15a8\0\u9d18\0\u9d70\0\u9dc8\0\u9e20\0\u9e78\0\u9ed0"+
    "\0\u9f28\0\u9f80\0\u9fd8\0\u15a8\0\u15a8\0\ua030\0\ua088\0\ua0e0"+
    "\0\u15a8\0\ua138\0\u15a8\0\ua190\0\ua1e8\0\ua240\0\u15a8\0\u15a8"+
    "\0\u15a8\0\ua298\0\ua2f0\0\ua348\0\ua3a0\0\ua3f8\0\ua450\0\u4678"+
    "\0\ua4a8\0\ua500\0\u15a8\0\u15a8\0\ua558\0\ua5b0\0\u15a8\0\u15a8"+
    "\0\u09a0\0\u09a0\0\u15a8\0\u15a8\0\u15a8\0\ua608\0\u15a8\0\u15a8"+
    "\0\ua660\0\ua6b8\0\ua710\0\u15a8\0\u15a8\0\u15a8\0\u15a8\0\ua768"+
    "\0\u09a0\0\ua7c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[682];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\4\34\2\35\1\36\55\34\2\37\12\34\1\35\4\34"+
    "\1\40\1\34\1\41\20\34\3\42\1\43\63\42\1\43"+
    "\6\42\2\43\4\42\1\43\2\42\1\44\20\42\4\45"+
    "\2\46\72\45\1\46\4\45\1\47\1\45\1\50\20\45"+
    "\3\51\1\52\63\51\1\52\6\51\2\52\4\51\1\52"+
    "\2\51\1\53\20\51\3\54\1\55\2\54\1\56\37\54"+
    "\1\57\15\54\1\60\2\54\1\55\6\54\2\55\4\54"+
    "\1\55\23\54\3\61\1\62\1\63\1\64\14\61\2\65"+
    "\2\61\2\66\37\61\1\62\6\61\2\62\4\61\1\62"+
    "\4\61\1\67\16\61\3\70\1\71\2\70\1\72\60\70"+
    "\1\71\6\70\2\71\2\70\1\73\1\70\1\71\2\70"+
    "\1\74\1\70\1\75\16\70\3\76\1\77\63\76\1\100"+
    "\6\76\1\100\1\77\4\76\1\77\1\101\3\76\1\102"+
    "\16\76\3\103\1\104\2\103\1\105\60\103\1\104\6\103"+
    "\2\104\4\103\1\104\1\101\3\103\1\102\16\103\3\106"+
    "\1\62\2\106\1\105\55\106\1\107\2\106\1\110\6\106"+
    "\1\110\1\62\4\106\1\62\1\101\3\106\1\102\1\111"+
    "\15\106\3\112\1\62\1\113\1\114\56\112\1\115\2\112"+
    "\1\116\6\112\1\116\1\62\1\117\3\112\1\62\4\112"+
    "\1\102\16\112\3\120\1\121\1\122\41\120\1\123\20\120"+
    "\1\121\6\120\2\121\4\120\1\121\26\120\1\121\1\120"+
    "\1\122\40\120\1\123\20\120\1\121\6\120\2\121\4\120"+
    "\1\121\23\120\110\124\1\125\1\126\16\124\3\61\1\62"+
    "\63\61\1\62\6\61\2\62\4\61\1\62\23\61\1\127"+
    "\1\130\1\127\1\131\4\127\32\130\6\127\5\130\1\127"+
    "\4\130\5\127\1\131\6\127\2\131\3\127\1\132\1\131"+
    "\2\127\1\133\3\127\7\130\7\127\1\130\1\127\1\131"+
    "\4\127\32\130\6\127\5\130\1\127\4\130\5\127\1\131"+
    "\6\127\2\131\3\127\1\134\1\131\2\127\1\133\3\127"+
    "\7\130\6\127\3\61\1\135\63\61\1\135\6\61\2\135"+
    "\4\61\1\135\1\136\3\61\2\136\20\61\1\62\1\137"+
    "\1\140\61\61\1\62\6\61\2\62\4\61\1\62\23\61"+
    "\3\141\1\142\63\141\1\142\6\141\2\142\4\141\1\142"+
    "\1\143\1\144\21\141\106\145\1\146\21\145\1\61\1\147"+
    "\1\150\1\62\2\151\1\152\1\153\1\147\1\154\1\147"+
    "\1\155\1\147\1\156\1\147\1\157\1\147\1\160\1\147"+
    "\1\161\1\147\1\162\3\147\1\163\1\147\1\164\1\147"+
    "\1\165\1\147\1\166\1\147\1\167\1\170\1\171\1\172"+
    "\1\173\1\174\1\175\1\176\1\177\1\200\1\147\1\201"+
    "\1\202\5\147\1\203\1\204\1\205\1\61\1\62\3\206"+
    "\1\147\1\207\1\61\2\62\1\210\1\147\1\211\1\212"+
    "\1\62\1\213\1\214\1\215\1\216\1\217\1\220\1\147"+
    "\1\221\1\222\1\223\1\224\1\225\1\147\1\226\1\227"+
    "\1\230\1\231\1\232\1\233\1\61\1\147\1\150\1\62"+
    "\2\151\1\234\1\153\1\147\1\154\1\147\1\155\1\147"+
    "\1\156\1\147\1\157\1\147\1\160\1\147\1\161\1\147"+
    "\1\162\3\147\1\163\1\147\1\164\1\147\1\165\1\147"+
    "\1\166\1\147\1\167\1\170\1\171\1\172\1\173\1\174"+
    "\1\175\1\176\1\177\1\200\1\147\1\201\1\202\5\147"+
    "\1\203\1\204\1\205\1\61\1\62\3\206\1\147\1\207"+
    "\1\61\2\62\1\210\1\147\1\211\1\212\1\62\1\235"+
    "\1\236\1\215\1\216\1\217\1\220\1\147\1\221\1\222"+
    "\1\223\1\224\1\225\1\147\1\226\1\227\1\230\1\231"+
    "\1\232\1\233\3\237\1\240\37\237\1\241\23\237\1\240"+
    "\6\237\2\240\4\237\1\240\24\237\1\147\1\237\1\240"+
    "\4\237\32\147\6\237\5\147\1\242\5\147\1\243\3\237"+
    "\1\240\3\237\1\147\2\237\2\240\1\237\1\147\2\237"+
    "\1\240\6\237\7\147\6\237\63\244\1\245\14\244\1\246"+
    "\1\247\26\244\3\61\1\62\60\61\1\250\2\61\1\62"+
    "\6\61\2\62\4\61\1\62\23\61\4\34\3\0\55\34"+
    "\2\0\12\34\1\0\4\34\1\0\1\34\1\0\20\34"+
    "\140\0\32\37\6\0\5\37\1\0\4\37\31\0\7\37"+
    "\115\0\1\251\23\0\1\62\63\0\1\62\6\0\2\62"+
    "\4\0\1\62\132\0\1\252\20\0\4\45\2\0\72\45"+
    "\1\0\4\45\1\0\1\45\1\0\20\45\107\0\1\253"+
    "\127\0\1\254\23\0\1\55\63\0\1\55\6\0\2\55"+
    "\4\0\1\55\32\0\1\255\32\256\6\0\5\256\1\0"+
    "\4\256\23\0\1\257\2\0\1\260\1\256\1\0\7\256"+
    "\16\0\23\261\1\262\6\261\6\0\1\262\1\263\1\261"+
    "\1\264\1\265\1\266\4\261\31\0\7\261\6\0\4\267"+
    "\1\120\123\267\5\270\1\120\122\270\34\0\2\271\110\0"+
    "\2\272\117\0\1\273\227\0\1\274\20\0\3\76\1\0"+
    "\73\76\1\0\4\76\2\0\3\76\1\0\16\76\3\0"+
    "\1\77\63\0\1\77\6\0\2\77\4\0\1\77\23\0"+
    "\3\76\1\77\63\76\1\100\6\76\1\100\1\77\4\76"+
    "\1\77\1\0\3\76\1\0\16\76\111\0\1\275\21\0"+
    "\1\104\63\0\1\104\6\0\2\104\4\0\1\104\23\0"+
    "\3\106\1\0\2\106\1\0\55\106\1\0\12\106\1\0"+
    "\4\106\2\0\3\106\2\0\20\106\1\62\2\106\1\0"+
    "\55\106\1\0\2\106\1\110\6\106\1\110\1\62\4\106"+
    "\1\62\1\0\3\106\2\0\15\106\3\112\1\0\73\112"+
    "\1\0\4\112\1\0\1\276\3\112\1\0\21\112\1\62"+
    "\63\112\1\116\6\112\1\116\1\62\4\112\1\62\1\276"+
    "\3\112\1\0\16\112\3\0\1\121\63\0\1\121\6\0"+
    "\2\121\4\0\1\121\23\0\110\124\1\277\1\0\127\124"+
    "\1\126\16\124\1\0\3\300\3\0\40\300\1\0\5\300"+
    "\1\0\4\300\5\0\4\300\3\0\2\300\4\0\1\300"+
    "\6\0\7\300\117\0\1\301\125\0\1\302\23\0\1\135"+
    "\63\0\1\135\6\0\2\135\4\0\1\135\23\0\106\145"+
    "\1\0\21\145\105\0\1\303\23\0\2\147\5\0\32\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\10\0\1\305\7\0\2\306\10\0"+
    "\2\307\10\0\2\310\2\0\1\311\11\0\1\312\1\0"+
    "\2\313\11\0\2\305\44\0\1\314\32\256\6\0\5\256"+
    "\1\0\4\256\23\0\1\257\2\0\1\260\1\256\1\0"+
    "\7\256\120\0\1\315\16\0\2\147\5\0\3\147\1\316"+
    "\11\147\1\317\14\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\25\147\1\320\1\147\1\321\2\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\2\147\1\322\2\147\1\323\1\147\7\0\2\147\5\0"+
    "\3\147\1\324\17\147\1\325\6\147\6\0\1\147\1\326"+
    "\3\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\11\147\1\327\5\147"+
    "\1\330\12\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\1\147\1\331\5\147\7\0"+
    "\2\147\5\0\31\147\1\332\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\25\147\1\333\4\147\6\0\1\147\1\334"+
    "\3\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\1\147\1\335\5\147\7\0\2\147\5\0\23\147"+
    "\1\336\6\147\6\0\4\147\1\337\1\0\1\340\4\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\3\147\1\341\26\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\15\147\1\342\14\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\32\147\6\0\4\147\1\343"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\3\147\1\344\25\147\1\345"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\1\147\1\346\5\147\7\0\2\147\5\0"+
    "\21\147\1\347\10\147\6\0\2\147\1\350\1\147\1\351"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\2\147\1\352\4\147\10\0\1\353\37\0\1\354\25\0"+
    "\3\353\102\0\1\355\43\0\1\356\1\357\50\0\1\360"+
    "\12\0\1\361\1\0\1\362\1\363\40\0\1\364\16\0"+
    "\2\147\5\0\15\147\1\365\5\147\1\366\6\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\5\147\1\367\21\147"+
    "\1\370\2\147\6\0\2\147\1\371\1\147\1\372\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\4\147"+
    "\1\373\2\147\7\0\2\147\5\0\7\147\1\374\1\147"+
    "\1\375\3\147\1\376\7\147\1\377\4\147\6\0\1\147"+
    "\1\u0100\3\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\4\147\1\u0101\2\147\7\0\2\147\5\0"+
    "\15\147\1\u0102\7\147\1\u0103\4\147\6\0\1\147\1\u0104"+
    "\3\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\1\u0105\6\0\32\u0105\6\0\5\u0105"+
    "\1\0\5\u0105\1\u0106\7\0\1\u0105\5\0\1\u0105\11\0"+
    "\7\u0105\43\0\1\u0107\74\0\1\206\21\0\2\307\14\0"+
    "\1\311\11\0\1\312\13\0\3\206\1\u0108\130\0\1\u0109"+
    "\15\0\1\u010a\15\0\63\u010b\1\u010c\13\u010b\1\0\2\u010b"+
    "\1\u010d\2\u010b\2\u010e\21\u010b\107\0\1\u010f\1\0\1\u0110"+
    "\1\u0111\57\0\1\u0112\45\0\1\u0113\130\0\1\u0114\127\0"+
    "\1\u0115\1\u0116\16\0\2\147\5\0\15\147\1\u0117\14\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\3\147\1\u0118"+
    "\21\147\1\u0119\3\147\1\u011a\6\0\1\147\1\u011b\3\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\1\147\1\u011c\5\147\7\0\2\147\5\0\15\147\1\u011d"+
    "\14\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\17\147"+
    "\1\u011e\11\147\1\u011f\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\3\147\1\u0120\26\147\6\0\1\147\1\u0121\3\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\130\0\1\u0122\117\0\1\u0123\127\0\1\u0124\23\0"+
    "\1\u0125\1\255\32\256\6\0\5\256\1\0\4\256\23\0"+
    "\1\257\2\0\1\260\1\256\1\u0126\7\256\113\0\2\u010e"+
    "\3\0\1\u0127\123\0\1\u0128\3\0\1\u0129\15\0\63\244"+
    "\1\u012a\14\244\2\0\126\244\1\u012b\27\244\64\0\1\u012c"+
    "\152\0\1\u012d\127\0\1\u012e\127\0\1\u012f\127\0\1\u0130"+
    "\30\0\2\u0131\75\0\1\u0132\22\0\1\261\5\0\32\261"+
    "\5\0\1\u0133\5\261\1\0\4\261\6\0\3\261\20\0"+
    "\7\261\10\0\1\261\5\0\7\261\1\u0134\22\261\5\0"+
    "\1\u0133\5\261\1\0\4\261\6\0\3\261\20\0\7\261"+
    "\10\0\1\261\5\0\13\261\1\u0135\5\261\1\u0136\10\261"+
    "\5\0\1\u0133\5\261\1\0\4\261\6\0\3\261\20\0"+
    "\7\261\10\0\1\261\5\0\25\261\1\u0137\4\261\5\0"+
    "\1\u0133\5\261\1\0\4\261\6\0\3\261\20\0\7\261"+
    "\10\0\1\261\5\0\27\261\1\u0138\2\261\5\0\1\u0133"+
    "\5\261\1\0\4\261\6\0\3\261\20\0\7\261\10\0"+
    "\1\u0139\53\0\2\u013a\10\0\3\u0139\73\0\2\u013b\120\0"+
    "\2\u013c\200\0\1\u013d\4\0\1\u013e\27\0\1\u013f\101\0"+
    "\1\u0140\16\0\105\112\1\276\3\112\1\0\16\112\111\124"+
    "\1\0\16\124\111\0\1\u0140\20\0\1\305\66\0\2\305"+
    "\37\0\1\u0141\66\0\2\u0141\37\0\1\u0142\65\0\3\u0142"+
    "\1\0\1\u0143\12\0\1\u0143\22\0\1\u0144\66\0\1\u0144"+
    "\40\0\1\353\21\0\2\307\42\0\3\353\37\0\1\u0145"+
    "\5\0\2\u0145\2\0\2\u0145\6\0\2\u0145\10\0\2\u0145"+
    "\11\0\1\u0145\6\0\1\u0145\7\0\3\u0145\20\0\1\u0145"+
    "\1\0\1\u0145\22\0\2\u0131\70\0\1\u0146\4\0\1\u0132"+
    "\132\0\1\u0147\16\0\2\147\5\0\5\147\1\u0148\15\147"+
    "\1\u0149\3\147\1\u014a\2\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\2\147\1\u014b"+
    "\4\147\7\0\2\147\5\0\7\147\1\u014c\22\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\32\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\6\147\1\u014d\7\0\2\147\5\0\15\147\1\u014e\14\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\32\147\6\0"+
    "\4\147\1\u014f\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\32\147\6\0"+
    "\1\147\1\u0150\3\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\7\147"+
    "\1\u0151\22\147\6\0\2\147\1\u0152\2\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\13\147\1\u0153\16\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\31\147\1\u0154\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\1\147"+
    "\1\u0155\5\147\7\0\2\147\5\0\11\147\1\u0156\13\147"+
    "\1\u0157\4\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\15\147\1\u0158\14\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\27\147\1\u0159\2\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\5\147\1\u015a\24\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\3\147\1\u015b\25\147\1\u015c\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\32\147\6\0\2\147"+
    "\1\u015d\2\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\25\147\1\u015e"+
    "\4\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\7\147"+
    "\1\u015f\3\147\1\u0160\16\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\1\147\1\u0161\30\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\7\147\1\u0162\22\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\1\147\1\u0163\30\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\3\147\1\u0164\3\147\7\0\2\147\5\0\3\147"+
    "\1\u0165\26\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\32\147\6\0\1\u0166\4\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\15\147\1\u0167\14\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\13\147\1\u0168\16\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\7\147\1\u0169\22\147\6\0\2\147\1\u016a"+
    "\2\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\2\147\1\u016b\4\147\10\0\1\353\21\0\2\307"+
    "\42\0\3\353\1\u016c\76\0\1\u016d\177\0\1\u016e\34\0"+
    "\1\u016f\222\0\1\u0170\34\0\1\u0171\141\0\1\u0172\77\0"+
    "\2\147\5\0\7\147\1\u0173\22\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\3\147\1\u0174\26\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\5\147\1\u0175\24\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\32\147\6\0\2\147"+
    "\1\u0176\2\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\11\147\1\u0177"+
    "\20\147\6\0\2\147\1\u0178\2\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\11\147\1\u0179\20\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\32\147\6\0\1\147\1\u017a\3\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\32\147\6\0\1\147\1\u017b\3\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\1\147\1\u017c\5\147\7\0\2\147\5\0\21\147\1\u017d"+
    "\10\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\7\147"+
    "\1\u017e\22\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\13\147\1\u017f\16\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\7\147\1\u0180\22\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\31\147\1\u0181\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\32\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\4\147\1\u0182\1\u0183"+
    "\1\147\7\0\2\147\5\0\21\147\1\u0184\1\147\1\u0185"+
    "\6\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\21\147"+
    "\1\u0186\10\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\u0105\5\0"+
    "\32\u0105\6\0\5\u0105\1\0\5\u0105\1\u0106\2\0\6\u0105"+
    "\5\0\1\u0105\11\0\7\u0105\43\0\1\u0187\74\0\1\u0188"+
    "\5\0\2\u0188\2\0\2\u0188\6\0\2\u0188\10\0\2\u0188"+
    "\11\0\1\u0188\6\0\1\u0188\3\0\1\u0189\3\0\3\u0188"+
    "\20\0\1\u0188\1\0\1\u0188\14\0\1\206\65\0\3\206"+
    "\35\0\63\u010b\1\u010c\13\u010b\1\0\2\u010b\1\u010d\2\u010b"+
    "\1\u018a\121\u010b\1\0\30\u010b\63\u010d\1\u018b\17\u010d\1\u010b"+
    "\24\u010d\2\0\1\u018c\65\0\3\u018c\147\0\1\u018d\126\0"+
    "\1\u018e\1\u018f\127\0\1\u0190\16\0\2\147\5\0\7\147"+
    "\1\u0191\22\147\6\0\1\147\1\u0192\1\147\1\u0193\1\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\32\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\1\147"+
    "\1\u0194\5\147\7\0\2\147\5\0\32\147\6\0\4\147"+
    "\1\u0195\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\32\147\6\0\4\147"+
    "\1\u0196\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\23\147\1\u0197\6\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\3\147\1\u0198"+
    "\26\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\11\147"+
    "\1\u0199\20\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\31\147\1\u019a\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\7\147\1\u019b\22\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\31\147\1\u019c\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\32\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\1\147\1\u019d\5\147\120\0"+
    "\1\u019e\127\0\1\u019f\15\0\100\244\1\0\27\244\12\0"+
    "\2\u01a0\223\0\1\u01a1\22\0\1\261\5\0\32\261\5\0"+
    "\1\u01a2\5\261\1\0\4\261\6\0\3\261\20\0\7\261"+
    "\10\0\1\261\5\0\3\261\1\u01a3\26\261\5\0\1\u0133"+
    "\5\261\1\0\4\261\6\0\3\261\20\0\7\261\10\0"+
    "\1\261\5\0\13\261\1\u0134\16\261\5\0\1\u0133\5\261"+
    "\1\0\4\261\6\0\3\261\20\0\7\261\10\0\1\261"+
    "\5\0\3\261\1\262\26\261\5\0\1\u0133\5\261\1\0"+
    "\4\261\6\0\3\261\20\0\7\261\10\0\1\261\5\0"+
    "\32\261\5\0\1\u0133\2\261\1\u0136\2\261\1\0\4\261"+
    "\6\0\3\261\20\0\7\261\10\0\1\u0139\44\0\1\u01a2"+
    "\20\0\3\u0139\37\0\1\u01a4\5\0\2\u01a4\2\0\2\u01a4"+
    "\6\0\2\u01a4\10\0\2\u01a4\11\0\1\u01a4\6\0\1\u01a4"+
    "\7\0\3\u01a4\20\0\1\u01a4\1\0\1\u01a4\44\0\2\u01a5"+
    "\126\0\2\u01a6\203\0\1\u01a7\131\0\1\u01a8\20\0\1\u0141"+
    "\51\0\1\312\14\0\2\u0141\1\306\36\0\1\u0142\65\0"+
    "\3\u0142\1\u0143\36\0\1\u0142\65\0\3\u0142\37\0\1\u0144"+
    "\51\0\1\312\14\0\1\u0144\1\0\1\310\36\0\1\u0145"+
    "\5\0\2\u0145\2\0\2\u0145\6\0\2\u0145\10\0\2\u0145"+
    "\11\0\1\u0145\2\0\1\312\3\0\1\u0145\7\0\3\u0145"+
    "\1\313\17\0\1\u0145\1\0\1\u0145\26\0\1\u01a9\114\0"+
    "\2\147\5\0\3\147\1\u01aa\17\147\1\u01ab\6\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\15\147\1\u01ac\14\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\25\147\1\u01ad"+
    "\4\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\32\147"+
    "\6\0\1\147\1\u01ae\3\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\15\147\1\u01af\14\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\32\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\1\147\1\u01b0\5\147\7\0"+
    "\2\147\5\0\7\147\1\u01b1\22\147\6\0\2\147\1\u01b2"+
    "\2\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\32\147\6\0\2\147"+
    "\1\u01b3\2\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\5\147\1\u01b4"+
    "\24\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\15\147"+
    "\1\u01b5\14\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\15\147\1\u01b6\14\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\32\147\6\0\2\147\1\u01b7\2\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\3\147\1\u01b8\26\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\15\147\1\u01b9\14\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\23\147\1\u01ba\6\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\23\147\1\u01bb\6\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\32\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\3\147\1\u01bc\3\147\7\0\2\147\5\0\7\147"+
    "\1\u01bd\22\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\32\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\5\147\1\u01be\1\147\7\0\2\147"+
    "\5\0\15\147\1\u01bf\14\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\21\147\1\u01c0\10\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\15\147\1\u01c1\14\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\3\147\1\u01c2\26\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\25\147\1\u01c3\4\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\15\147\1\u01c4"+
    "\14\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\32\147"+
    "\6\0\4\147\1\u01c5\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\23\147"+
    "\1\u01c6\6\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\31\147\1\u01c7\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\32\147\6\0\1\147\1\u01c8\3\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\3\147\1\u01c9\17\147\1\u01ca\6\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\15\147\1\u01cb\14\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\1\147\1\u01cc\5\147\7\0\2\147\5\0\7\147"+
    "\1\u01cd\22\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\15\147\1\u01ce\14\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\10\0\1\353"+
    "\65\0\3\353\104\0\1\u01cf\127\0\1\u01d0\103\0\1\u01d1"+
    "\105\0\2\147\5\0\27\147\1\u01d2\2\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\15\147\1\u01d3\14\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\7\147\1\u01d4\22\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\32\147\6\0"+
    "\4\147\1\u01d5\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\15\147\1\u01d6"+
    "\14\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\31\147"+
    "\1\u01d7\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\7\147"+
    "\1\u01d8\22\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\31\147\1\u01d9\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\27\147\1\u01da\2\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\15\147\1\u01db\14\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\31\147\1\u01dc\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\7\147\1\u01dd\22\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\15\147\1\u01de\14\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\27\147\1\u01df\2\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\23\147\1\u01e0\6\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\15\147\1\u01e1"+
    "\14\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\10\0\1\u01e2\5\0\2\u01e2"+
    "\2\0\2\u01e2\6\0\2\u01e2\10\0\2\u01e2\11\0\1\u01e2"+
    "\6\0\1\u01e2\3\0\1\u01e3\3\0\3\u01e2\20\0\1\u01e2"+
    "\1\0\1\u01e2\14\0\1\u01e4\5\0\2\u01e4\2\0\2\u01e4"+
    "\6\0\2\u01e4\10\0\2\u01e4\11\0\1\u01e4\6\0\1\u01e4"+
    "\7\0\3\u01e4\20\0\1\u01e4\1\0\1\u01e4\14\0\1\u01e5"+
    "\5\0\2\u01e5\2\0\2\u01e5\6\0\2\u01e5\10\0\2\u01e5"+
    "\11\0\1\u01e5\6\0\1\u01e5\7\0\3\u01e5\20\0\1\u01e5"+
    "\1\0\1\u01e5\23\0\1\u018a\7\0\1\u018a\7\0\1\u018a"+
    "\3\0\1\u018a\3\0\1\u018a\6\0\1\u018a\1\0\1\u018a"+
    "\3\0\1\u018a\51\0\67\u010d\1\0\5\u010d\3\0\4\u010d"+
    "\1\0\23\u010d\112\0\1\u01e6\16\0\2\147\5\0\25\147"+
    "\1\u01e7\4\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\1\147\1\u01e8\30\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\25\147\1\u01e9\4\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\5\147\1\u01ea\24\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\32\147\6\0\1\147\1\u01eb\3\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\32\147\6\0\2\147\1\u01ec"+
    "\2\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\21\147\1\u01ed\10\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\3\147\1\u01ee"+
    "\26\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\23\147"+
    "\1\u01ef\6\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\17\147\1\u01f0\12\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\1\147\1\u01f1\30\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\22\0"+
    "\2\u01f2\114\0\1\261\5\0\32\261\5\0\1\u0133\2\261"+
    "\1\u0134\2\261\1\0\4\261\6\0\3\261\20\0\7\261"+
    "\10\0\1\u01a4\5\0\2\u01a4\2\0\2\u01a4\6\0\2\u01a4"+
    "\10\0\2\u01a4\7\0\1\u01a2\1\0\1\u01a4\6\0\1\u01a4"+
    "\7\0\3\u01a4\20\0\1\u01a4\1\0\1\u01a4\52\0\2\u01f3"+
    "\175\0\1\u013f\1\0\1\u0140\26\0\1\u01f4\120\0\2\147"+
    "\5\0\32\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\1\147\1\u01f5\5\147\7\0"+
    "\2\147\5\0\32\147\6\0\1\147\1\u01f6\3\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\7\147\1\u01f7\22\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\32\147\6\0\1\u01f8\4\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\25\147\1\u01f9\4\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\5\147\1\u01fa\24\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\32\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\1\147\1\u01fb\5\147\7\0\2\147\5\0\31\147"+
    "\1\u01fc\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\7\147"+
    "\1\u01fd\22\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\32\147\6\0\2\147\1\u01fe\2\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\17\147\1\u01ff\12\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\3\147\1\u0200\26\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\32\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\4\147\1\u0201"+
    "\2\147\7\0\2\147\5\0\1\147\1\u0202\30\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\31\147\1\u0203\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\32\147\6\0\1\147"+
    "\1\u0204\3\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\15\147\1\u0205"+
    "\14\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\32\147"+
    "\6\0\1\147\1\u0206\3\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\32\147\6\0\4\147\1\u0207\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\32\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\1\147\1\u0208\5\147\7\0\2\147"+
    "\5\0\23\147\1\u0209\6\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\32\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\2\147\1\u020a\4\147"+
    "\7\0\2\147\5\0\3\147\1\u020b\26\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\15\147\1\u020c\14\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\32\147\6\0\4\147"+
    "\1\u020d\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\32\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\3\147\1\u020e\3\147\7\0\2\147\5\0\32\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\1\147\1\u020f\5\147\7\0\2\147\5\0\15\147"+
    "\1\u0210\14\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\32\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\1\147\1\u0211\5\147\7\0\2\147"+
    "\5\0\31\147\1\u0212\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\32\147\6\0\1\147\1\u0213\3\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\32\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\1\147\1\u0214\5\147"+
    "\54\0\1\u0215\43\0\1\u0126\63\0\1\u0216\43\0\1\u0217"+
    "\64\0\1\u0218\61\0\2\147\5\0\32\147\6\0\1\147"+
    "\1\u0219\3\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\32\147\6\0"+
    "\2\147\1\u021a\2\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\32\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\1\147\1\u021b\5\147\7\0\2\147\5\0"+
    "\5\147\1\u021c\24\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\32\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\1\147\1\u021d\5\147\7\0"+
    "\2\147\5\0\7\147\1\u021e\22\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\31\147\1\u021f\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\32\147\6\0\4\147\1\u0220\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\3\147\1\u0221\26\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\32\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\1\147"+
    "\1\u0222\5\147\7\0\2\147\5\0\32\147\6\0\2\147"+
    "\1\u0223\2\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\5\147\1\u0224"+
    "\24\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\32\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\1\147\1\u0225\5\147\7\0\2\147\5\0"+
    "\15\147\1\u0226\14\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\32\147\6\0\2\147\1\u0227\2\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\10\0"+
    "\1\u0228\5\0\2\u0228\2\0\2\u0228\6\0\2\u0228\10\0"+
    "\2\u0228\11\0\1\u0228\6\0\1\u0228\7\0\3\u0228\20\0"+
    "\1\u0228\1\0\1\u0228\14\0\1\u0229\5\0\2\u0229\2\0"+
    "\2\u0229\6\0\2\u0229\10\0\2\u0229\11\0\1\u0229\6\0"+
    "\1\u0229\7\0\3\u0229\20\0\1\u0229\1\0\1\u0229\14\0"+
    "\1\u022a\5\0\2\u022a\2\0\2\u022a\6\0\2\u022a\10\0"+
    "\2\u022a\11\0\1\u022a\6\0\1\u022a\7\0\3\u022a\20\0"+
    "\1\u022a\1\0\1\u022a\14\0\1\u01e5\5\0\2\u01e5\2\0"+
    "\2\u01e5\6\0\2\u01e5\10\0\2\u01e5\11\0\1\u01e5\6\0"+
    "\1\u01e5\4\0\1\147\2\0\3\u01e5\20\0\1\u01e5\1\0"+
    "\1\u01e5\13\0\2\147\5\0\32\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\1\147"+
    "\1\u022b\5\147\7\0\2\147\5\0\3\147\1\u022c\26\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\31\147\1\u022d"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\7\147\1\u022e"+
    "\22\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\23\147"+
    "\1\u022f\6\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\15\147\1\u0230\14\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\32\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\2\147\1\u0231\4\147\7\0"+
    "\2\147\5\0\15\147\1\u0232\14\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\24\0\2\u0233\124\0\2\u0234\225\0\1\u0235\15\0\2\147"+
    "\5\0\32\147\6\0\1\147\1\u0236\3\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\32\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\1\147\1\u0237\5\147"+
    "\7\0\2\147\5\0\15\147\1\u0238\14\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\32\147\6\0\1\u0239\4\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\23\147\1\u023a\6\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\7\147\1\u023b\22\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\31\147\1\u023c"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\32\147\6\0"+
    "\4\147\1\u023d\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\32\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\2\147\1\u023e\4\147\7\0\2\147\5\0\5\147"+
    "\1\u023f\24\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\32\147\6\0\1\u0240\4\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\5\147\1\u0241\24\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\7\147\1\u0242\22\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\1\147\1\u0243\30\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\7\147\1\u0244\22\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\15\147\1\u0245\14\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\31\147\1\u0246\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\32\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\4\147\1\u0247\2\147\7\0\2\147\5\0\32\147\6\0"+
    "\1\147\1\u0248\3\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\7\147"+
    "\1\u0249\22\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\7\147\1\u024a\22\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\21\147\1\u024b\10\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\32\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\2\147\1\u024c\4\147"+
    "\7\0\2\147\5\0\32\147\6\0\4\147\1\u024d\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\32\147\6\0\4\147\1\u024e\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\41\0\1\u024f\144\0\1\u0250\125\0\1\u0251\43\0\1\364"+
    "\16\0\2\147\5\0\23\147\1\u0252\6\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\32\147\6\0\2\147\1\u0253"+
    "\2\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\32\147\6\0\1\147"+
    "\1\u0254\3\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\7\147\1\u0255"+
    "\22\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\15\147"+
    "\1\u0256\14\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\5\147\1\u0257\24\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\32\147\6\0\1\u0258\4\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\23\147\1\u0259\6\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\32\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\2\147\1\u025a\4\147"+
    "\7\0\2\147\5\0\17\147\1\u025b\12\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\32\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\1\147"+
    "\1\u025c\5\147\7\0\2\147\5\0\13\147\1\u025d\16\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\10\0\1\u025e\5\0\2\u025e\2\0"+
    "\2\u025e\6\0\2\u025e\10\0\2\u025e\11\0\1\u025e\6\0"+
    "\1\u025e\7\0\3\u025e\20\0\1\u025e\1\0\1\u025e\14\0"+
    "\1\u0229\5\0\2\u0229\2\0\2\u0229\6\0\2\u0229\10\0"+
    "\2\u0229\11\0\1\u0229\6\0\1\u0229\4\0\1\u0105\2\0"+
    "\3\u0229\20\0\1\u0229\1\0\1\u0229\14\0\1\147\5\0"+
    "\2\147\2\0\2\147\6\0\2\147\10\0\2\147\11\0"+
    "\1\147\6\0\1\147\7\0\3\147\20\0\1\147\1\0"+
    "\1\147\13\0\2\147\5\0\32\147\6\0\4\147\1\u025f"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\32\147\6\0\4\147\1\u0260"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\32\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\1\147"+
    "\1\u0261\5\147\7\0\2\147\5\0\31\147\1\u0262\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\23\147\1\u0263\6\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\26\0\2\u0264\124\0\1\u0265\112\0"+
    "\2\147\5\0\7\147\1\u0266\22\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\15\147\1\u0267\14\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\15\147\1\u0268\14\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\7\147\1\u0269\22\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\1\147\1\u026a"+
    "\30\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\25\147"+
    "\1\u026b\4\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\15\147\1\u026c\14\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\7\147\1\u026d\22\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\15\147\1\u026e\14\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\32\147\6\0\2\147\1\u026f\2\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\32\147\6\0\4\147\1\u0270"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\32\147\6\0\4\147\1\u0271"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\32\147\6\0\4\147\1\u0272"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\15\147\1\u0273\14\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\32\147\6\0\1\147"+
    "\1\u0274\3\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\32\147\6\0"+
    "\2\147\1\u0275\2\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\5\147"+
    "\1\u0276\24\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\25\0\1\u0277\127\0"+
    "\1\u0278\161\0\1\u0279\57\0\2\147\5\0\3\147\1\u027a"+
    "\26\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\5\147"+
    "\1\u027b\24\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\32\147\6\0\2\147\1\u027c\2\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\1\147\1\u027d\30\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\31\147\1\u027e\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\32\147\6\0\1\147\1\u027f\3\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\10\0\1\u0105\5\0\2\u0105\2\0\2\u0105\6\0\2\u0105"+
    "\10\0\2\u0105\11\0\1\u0105\6\0\1\u0105\7\0\3\u0105"+
    "\20\0\1\u0105\1\0\1\u0105\13\0\2\147\5\0\23\147"+
    "\1\u0280\6\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\15\147\1\u0281\14\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\3\147\1\u0282\26\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\11\147\1\u0283\20\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\30\0\2\u0284\217\0\1\u0285\15\0\2\147\5\0\3\147"+
    "\1\u0286\26\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\32\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\1\147\1\u0287\5\147\7\0\2\147"+
    "\5\0\15\147\1\u0288\14\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\15\147\1\u0289\14\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\15\147\1\u028a\14\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\15\147\1\u028b\14\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\32\147\6\0\4\147"+
    "\1\u028c\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\5\147\1\u028d\24\147"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\31\147\1\u028e"+
    "\6\0\5\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\15\147\1\u028f"+
    "\14\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\55\0\1\u0290\127\0\1\u0291"+
    "\111\0\1\u0292\77\0\2\147\5\0\32\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\1\147\1\u0293\5\147\7\0\2\147\5\0\7\147\1\u0294"+
    "\22\147\6\0\5\147\1\0\5\147\1\304\2\0\6\147"+
    "\5\0\1\147\11\0\7\147\7\0\2\147\5\0\15\147"+
    "\1\u0295\14\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\5\147\1\u0296\24\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\11\147\1\u0297\20\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\32\147\6\0\4\147\1\u0298\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\32\0"+
    "\2\u0299\204\0\1\u029a\26\0\2\147\5\0\32\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\1\147\1\u029b\5\147\7\0\2\147\5\0\1\147"+
    "\1\u029c\30\147\6\0\5\147\1\0\5\147\1\304\2\0"+
    "\6\147\5\0\1\147\11\0\7\147\7\0\2\147\5\0"+
    "\1\147\1\u029d\30\147\6\0\5\147\1\0\5\147\1\304"+
    "\2\0\6\147\5\0\1\147\11\0\7\147\7\0\2\147"+
    "\5\0\7\147\1\u029e\22\147\6\0\5\147\1\0\5\147"+
    "\1\304\2\0\6\147\5\0\1\147\11\0\7\147\7\0"+
    "\2\147\5\0\15\147\1\u029f\14\147\6\0\5\147\1\0"+
    "\5\147\1\304\2\0\6\147\5\0\1\147\11\0\7\147"+
    "\7\0\2\147\5\0\5\147\1\u02a0\24\147\6\0\5\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\3\147\1\u02a1\26\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\54\0\1\u02a2\43\0\1\u018f\40\0\1\u02a3"+
    "\105\0\2\147\5\0\32\147\6\0\2\147\1\u02a4\2\147"+
    "\1\0\5\147\1\304\2\0\6\147\5\0\1\147\11\0"+
    "\7\147\7\0\2\147\5\0\15\147\1\u02a5\14\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\7\147\7\0\2\147\5\0\32\147\6\0\2\147"+
    "\1\u02a6\2\147\1\0\5\147\1\304\2\0\6\147\5\0"+
    "\1\147\11\0\7\147\7\0\2\147\5\0\32\147\6\0"+
    "\5\147\1\0\5\147\1\304\2\0\6\147\5\0\1\147"+
    "\11\0\2\147\1\u02a7\4\147\56\0\1\u02a8\126\0\1\u02a9"+
    "\77\0\1\u02aa\157\0\1\u018e\60\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[43032];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\33\0\1\1\1\11\1\1\2\11\1\1\1\11\3\1"+
    "\2\11\1\1\1\11\2\1\1\11\3\1\2\11\5\1"+
    "\2\11\2\1\1\11\1\1\1\11\4\1\2\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\3\11\1\1"+
    "\2\11\1\1\1\11\3\1\2\11\4\1\1\11\1\1"+
    "\4\11\1\1\2\11\4\1\1\11\17\1\2\11\2\1"+
    "\1\11\6\1\2\11\2\1\3\11\1\1\1\11\12\1"+
    "\1\11\2\1\2\11\3\1\1\11\1\1\1\11\4\1"+
    "\1\11\1\1\1\11\5\0\3\11\14\0\1\11\1\1"+
    "\1\0\1\1\1\11\1\0\1\11\1\0\1\1\3\0"+
    "\1\1\1\11\2\0\41\1\2\11\1\0\1\1\2\0"+
    "\1\11\21\1\3\0\2\11\1\1\2\0\4\11\2\1"+
    "\1\0\1\11\14\1\3\11\1\1\2\11\1\1\1\11"+
    "\1\0\6\11\2\0\1\11\11\0\1\11\2\0\1\11"+
    "\2\1\1\0\2\1\1\0\1\11\44\1\1\0\2\11"+
    "\1\0\1\11\2\0\24\1\3\0\1\1\1\0\2\11"+
    "\1\0\2\11\15\1\2\11\1\0\2\11\3\0\1\11"+
    "\1\1\1\11\1\0\47\1\1\0\20\1\4\0\1\11"+
    "\13\1\3\0\40\1\2\0\1\11\20\1\3\0\10\1"+
    "\1\0\1\11\1\0\31\1\3\0\14\1\1\0\5\1"+
    "\2\0\21\1\3\0\12\1\2\0\13\1\2\0\6\1"+
    "\2\11\7\1\2\0\4\1\1\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[682];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    public _AstroSfcLexer() {
      this((java.io.Reader)null);
    }

    private boolean inBuffer(@Nullable String text, int offset) {
      if (text == null) {
        return false;
      }
      int curPos = zzMarkedPos - 1 + offset;
      if (text.length() > zzBuffer.length() - curPos) {
        return false;
      }
      for (int i = 0; i < text.length(); i++) {
        if (zzBuffer.charAt(i + curPos) != text.charAt(i)) {
          return false;
        }
      }
      return true;
    }

    private boolean nextIgnoringWhiteSpaceIs(@NotNull String text) {
      for (int i = zzCurrentPos + 1; i < zzEndRead; i++) {
        char cur = zzBuffer.charAt(i);
        if (Character.isWhitespace(cur))
          continue;
        return inBuffer(text, i - zzCurrentPos);
      }
      return false;
    }

    private boolean nextNonWhitespaceCharIs(char ch) {
      for (int i = zzCurrentPos + 1; i < zzEndRead; i++) {
        char cur = zzBuffer.charAt(i);
        if (Character.isWhitespace(cur))
          continue;
        return cur == ch;
      }
      return false;
    }

    private void readUntil(boolean finishAtBoundary, char... chars) {
      if (zzMarkedPos == zzEndRead) return;
      char ch;
      do {
        ch = zzBuffer.charAt(zzMarkedPos++);
        if (ch == '\\' && zzMarkedPos < zzEndRead) {
          zzMarkedPos++;
          continue;
        }
        if (finishAtBoundary && contains(readUntilBoundary, ch)) {
          zzMarkedPos--;
          return;
        }
      } while (zzMarkedPos < zzEndRead && !contains(chars, ch));
    }

    private int findFirstUnescapedChar(char... chars) {
      for (int i = zzStartRead; i < zzMarkedPos; i++) {
        char ch = zzBuffer.charAt(i);
        if (ch == '\\') {
          i++;
        } else if (contains(chars, ch)) {
          return i;
        }
      }
      return zzMarkedPos;
    }

    private boolean contains(char[] chars, char ch) {
      for (int i = 0 ; i < chars.length; i++) {
        if (chars[i] == ch) return true;
      }
      return false;
    }

    private IElementType readReturnTokenType;
    private int readReturnState;
    private char[] readUntilBoundary;

    private static final int KIND_EXPRESSION = 0;
    private static final int KIND_NESTED_BRACES = 1;
    private static final int KIND_SPREAD_OR_SHORTHAND_ATTRIBUTE_EXPRESSION = 2;
    private static final int KIND_ATTRIBUTE_EXPRESSION = 3;
    private static final int KIND_TEMPLATE_LITERAL_EXPRESSION = 4;
    private static final int KIND_TEMPLATE_LITERAL_ATTRIBUTE = 5;
    private static final int KIND_EXPRESSION_PARENTHESIS = 6;
    private static final int KIND_NON_EXPRESSION_PARENTHESIS = 7;
    private static final int KIND_HTML_CONTENT = 8;
    private static final int KIND_START_TAG = 9;
    private static final int KIND_END_TAG = 10;

    public IntArrayList expressionStack = new IntArrayList(15);

    public boolean isRestartable() {
      return expressionStack.isEmpty();
    }

    private boolean isWithinAttributeExpression() {
      var elements = expressionStack.elements();
      for (int i = expressionStack.size() - 1; i >= 0; i--) {
        var element = elements[i];
        if (element == KIND_SPREAD_OR_SHORTHAND_ATTRIBUTE_EXPRESSION
            || element == KIND_ATTRIBUTE_EXPRESSION
            || element == KIND_TEMPLATE_LITERAL_ATTRIBUTE) {
          return true;
        }
      }
      return false;
    }

    private boolean backqouteForcesTemplateLiteralEnd() {
      boolean foundTemplateLiteralExpression = false;
      var elements = expressionStack.elements();
      for (int i = expressionStack.size() - 1; i >= 0; i--) {
        switch (elements[i]) {
          case KIND_TEMPLATE_LITERAL_EXPRESSION -> {
            foundTemplateLiteralExpression = true;
          }
          case KIND_TEMPLATE_LITERAL_ATTRIBUTE -> {
            return foundTemplateLiteralExpression;
          }
          case KIND_ATTRIBUTE_EXPRESSION -> {
            return false;
          }
        }
      }
      return foundTemplateLiteralExpression;
    }

    private boolean templateLiteralSupportsEscape() {
      var elements = expressionStack.elements();
      for (int i = expressionStack.size() - 1; i >= 0; i--) {
        switch (elements[i]) {
          case KIND_TEMPLATE_LITERAL_ATTRIBUTE, KIND_ATTRIBUTE_EXPRESSION -> {
            return false;
          }
        }
      }
      return true;
    }

    private boolean shouldTrackParentheses() {
      if (expressionStack.isEmpty()) return false;
      var lastElement = expressionStack.peekInt(0);
      return lastElement == KIND_EXPRESSION_PARENTHESIS || lastElement == KIND_NON_EXPRESSION_PARENTHESIS;
    }

    private void readString(@Nullable IElementType returnTokenType, int nextState) {
      yybegin(READ_STRING);
      readReturnState = nextState;
      readUntilBoundary = EMPTY_CHAR_ARRAY;
      readReturnTokenType = returnTokenType;
      yypushback(1);
    }

    private IElementType finishReadString(IElementType expressionTokenType) {
      yybegin(readReturnState);
      if (readReturnState == DIV_OR_GT) {
        return expressionTokenType;
      } else {
        return readReturnTokenType;
      }
    }

    private void readCommentOrRegExp(@Nullable IElementType returnTokenType, int nextState, char... regExpBoundary) {
      yybegin(COMMENT_OR_REGEXP);
      readReturnState = nextState;
      readUntilBoundary = regExpBoundary;
      readReturnTokenType = returnTokenType;
    }

    private IElementType finishReadCommentOrRegexp(IElementType expressionTokenType) {
      yybegin(readReturnState);
      if (readReturnState == EXPRESSION_INITIAL) {
        return expressionTokenType;
      } else {
        return readReturnTokenType;
      }
    }

    private void backToInitial() {
      if (expressionStack.isEmpty() || expressionStack.peekInt(0) == KIND_HTML_CONTENT) {
        yybegin(HTML_INITIAL);
      } else {
        yybegin(EXPRESSION_INITIAL);
      }
    }

    private void processClosedTag(boolean isEmpty) {
      if (expressionStack.isEmpty()) {
        // This is a case in which lexer is restarted
        // on a closing tag, which ends with empty
        // expression stack
        yybegin(HTML_INITIAL);
        return;
      }
      var tagKind = expressionStack.popInt();
      if (tagKind == KIND_START_TAG && !isEmpty) {
        expressionStack.push(KIND_HTML_CONTENT);
        yybegin(HTML_INITIAL);
      } else if (tagKind == KIND_END_TAG || (tagKind == KIND_START_TAG && isEmpty)) {
        if (expressionStack.isEmpty()) {
          yybegin(HTML_INITIAL);
        } else {
          if (!isEmpty) {
            while (!expressionStack.isEmpty() && expressionStack.popInt() != KIND_HTML_CONTENT) {
            }
          }
          if (expressionStack.isEmpty()) {
            yybegin(HTML_INITIAL);
          } else {
            var current = expressionStack.peekInt(0);
            if (current == KIND_HTML_CONTENT) {
              yybegin(HTML_INITIAL);
            } else if (current == KIND_EXPRESSION
                      || current == KIND_EXPRESSION_PARENTHESIS
                      || current == KIND_NON_EXPRESSION_PARENTHESIS
                      || current == KIND_TEMPLATE_LITERAL_EXPRESSION) {
              yybegin(EXPRESSION_INITIAL);
            } else {
              throw new IllegalStateException("Wrong kind on stack: " + current);
            }
          }
        }
      } else {
        throw new IllegalStateException("Wrong kind on stack: " + tagKind);
      }
    }

    private boolean canBeGenericArgumentList() throws IOException {
       return saveStateDoRestoreState(() -> JSLexerUtil.canBeGenericArgumentList(this, false));
    }

    private <T> T saveStateDoRestoreState(ThrowableComputable<T, IOException> action) throws IOException {
      int currentPos = zzCurrentPos;
      int markedPos = zzMarkedPos;
      int startRead = zzStartRead;
      boolean atEOF = zzAtEOF;
      boolean atBOL = zzAtBOL;
      int endRead = zzEndRead;
      int lexicalState = zzLexicalState;
      int state = zzState;
      IntArrayList _expressionStack = expressionStack.clone();
      try {
        return action.compute();
      }
      finally {
        zzCurrentPos = currentPos;
        zzMarkedPos = markedPos;
        zzStartRead = startRead;
        zzAtEOF = atEOF;
        zzAtBOL = atBOL;
        zzEndRead = endRead;
        zzLexicalState = lexicalState;
        zzState = state;
        expressionStack = _expressionStack;
      }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AstroSfcLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case YYINITIAL: {
              yybegin(HTML_INITIAL);
        zzMarkedPos = 0;
            }  // fall though
            case 683: break;
            case FRONTMATTER_OPENED: {
              yybegin(HTML_INITIAL);
          return AstroSfcTokenTypes.FRONTMATTER_SCRIPT;
            }  // fall though
            case 684: break;
            case ATTRIBUTE_VALUE_START: {
              yybegin(HTML_INITIAL);
          return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            }  // fall though
            case 685: break;
            case MULTILINE_COMMENT: {
              var result = finishReadCommentOrRegexp(JSTokenTypes.C_STYLE_COMMENT);
        if (result != null) return result;
            }  // fall though
            case 686: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { // Just consume
            }
            // fall through
          case 226: break;
          case 2:
            { readString(XmlTokenType.XML_DATA_CHARACTERS, HTML_INITIAL);
            }
            // fall through
          case 227: break;
          case 3:
            { yybegin(HTML_INITIAL);
        zzMarkedPos = 0;
            }
            // fall through
          case 228: break;
          case 4:
            { readCommentOrRegExp(XmlTokenType.XML_DATA_CHARACTERS, HTML_INITIAL);
            }
            // fall through
          case 229: break;
          case 5:
            { yypushback(1);
        yybegin(YYINITIAL);
            }
            // fall through
          case 230: break;
          case 6:
            { readString(null, FRONTMATTER_OPENED);
            }
            // fall through
          case 231: break;
          case 7:
            { readCommentOrRegExp(null, FRONTMATTER_OPENED);
            }
            // fall through
          case 232: break;
          case 8:
            { yypushback(1);
        yybegin(FRONTMATTER_OPENED);
            }
            // fall through
          case 233: break;
          case 9:
            { return XmlTokenType.XML_DATA_CHARACTERS;
            }
            // fall through
          case 234: break;
          case 10:
            { return XmlTokenType.XML_REAL_WHITE_SPACE;
            }
            // fall through
          case 235: break;
          case 11:
            { expressionStack.push(KIND_EXPRESSION);
        yybegin(EXPRESSION_INITIAL);
        return JSTokenTypes.XML_LBRACE;
            }
            // fall through
          case 236: break;
          case 12:
            { return XmlTokenType.XML_BAD_CHARACTER;
            }
            // fall through
          case 237: break;
          case 13:
            { return XmlTokenType.XML_WHITE_SPACE;
            }
            // fall through
          case 238: break;
          case 14:
            { yybegin(HTML_INITIAL);return XmlTokenType.XML_DOCTYPE_END;
            }
            // fall through
          case 239: break;
          case 15:
            { return XmlTokenType.XML_COMMENT_CHARACTERS;
            }
            // fall through
          case 240: break;
          case 16:
            { yybegin(C_COMMENT_START); return XmlTokenType.XML_CONDITIONAL_COMMENT_START;
            }
            // fall through
          case 241: break;
          case 17:
            { // according to HTML spec (http://www.w3.org/html/wg/drafts/html/master/syntax.html#comments)
    // comments should start with <!-- and end with -->. The comment <!--> is not valid, but should terminate
    // comment token. Please note that it's not true for XML (http://www.w3.org/TR/REC-xml/#sec-comments)
    int loc = getTokenStart();
    char prev = zzBuffer.charAt(loc - 1);
    char prevPrev = zzBuffer.charAt(loc - 2);
    if (prev == '-' && prevPrev == '-') {
      backToInitial();
      return XmlTokenType.XML_BAD_CHARACTER;
    }
    return XmlTokenType.XML_COMMENT_CHARACTERS;
            }
            // fall through
          case 242: break;
          case 18:
            { yybegin(BEFORE_TAG_ATTRIBUTES);
        return XmlTokenType.XML_NAME;
            }
            // fall through
          case 243: break;
          case 19:
            { yybegin(BEFORE_TAG_ATTRIBUTES);
        return XmlTokenType.XML_WHITE_SPACE;
            }
            // fall through
          case 244: break;
          case 20:
            { yybegin(HTML_INITIAL); expressionStack.popInt(); yypushback(1);
            }
            // fall through
          case 245: break;
          case 21:
            { processClosedTag(false); return XmlTokenType.XML_TAG_END;
            }
            // fall through
          case 246: break;
          case 22:
            { yybegin(TAG_ATTRIBUTES);
        return XmlTokenType.XML_WHITE_SPACE;
            }
            // fall through
          case 247: break;
          case 23:
            { processClosedTag(false); yypushback(1);
            }
            // fall through
          case 248: break;
          case 24:
            { if (inBuffer("{", 1)) {
          // If attribute name contains '{' everything up to it is ignored.
          return XmlTokenType.XML_COMMENT_CHARACTERS;
        }
        return XmlTokenType.XML_NAME;
            }
            // fall through
          case 249: break;
          case 25:
            { expressionStack.push(KIND_SPREAD_OR_SHORTHAND_ATTRIBUTE_EXPRESSION);
        yybegin(EXPRESSION_INITIAL);
        return JSTokenTypes.XML_LBRACE;
            }
            // fall through
          case 250: break;
          case 26:
            { yybegin(ATTRIBUTE_VALUE_START);
        return XmlTokenType.XML_EQ;
            }
            // fall through
          case 251: break;
          case 27:
            { yybegin(TAG_ATTRIBUTES);
        return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            }
            // fall through
          case 252: break;
          case 28:
            { yybegin(ATTRIBUTE_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
            // fall through
          case 253: break;
          case 29:
            { yybegin(ATTRIBUTE_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
            // fall through
          case 254: break;
          case 30:
            { expressionStack.push(KIND_ATTRIBUTE_EXPRESSION);
        yybegin(EXPRESSION_INITIAL);
        return JSTokenTypes.XML_LBRACE;
            }
            // fall through
          case 255: break;
          case 31:
            { expressionStack.push(KIND_TEMPLATE_LITERAL_ATTRIBUTE);
          yybegin(STRING_TEMPLATE);
          return JSTokenTypes.BACKQUOTE;
            }
            // fall through
          case 256: break;
          case 32:
            { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            }
            // fall through
          case 257: break;
          case 33:
            { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
            }
            // fall through
          case 258: break;
          case 34:
            { return XmlTokenType.XML_PI_TARGET;
            }
            // fall through
          case 259: break;
          case 35:
            { yybegin(HTML_INITIAL);return XmlTokenType.XML_PI_END;
            }
            // fall through
          case 260: break;
          case 36:
            { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_CHARACTERS;
            }
            // fall through
          case 261: break;
          case 37:
            { yybegin(COMMENT); return XmlTokenType.XML_CONDITIONAL_COMMENT_END;
            }
            // fall through
          case 262: break;
          case 38:
            { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_WHITE_SPACE;
            }
            // fall through
          case 263: break;
          case 39:
            { yypushback(1); yybegin(TAG_ATTRIBUTES);
            }
            // fall through
          case 264: break;
          case 40:
            { if (backqouteForcesTemplateLiteralEnd()) {
          readUntil(false, '"', '`', '\r', '\n');
          if (inBuffer("`", 0)) {
            zzMarkedPos--;
          }
        } else {
          readUntil(false, '"', '\r', '\n');
        }
        var result = finishReadString(JSTokenTypes.STRING_LITERAL);
        if (result != null) return result;
            }
            // fall through
          case 265: break;
          case 41:
            { if (backqouteForcesTemplateLiteralEnd()) {
          readUntil(false, '\'', '`', '\r', '\n');
          if (inBuffer("`", 0)) {
            zzMarkedPos--;
          }
        } else {
          readUntil(false, '\'', '\r', '\n');
        }
        var result = finishReadString(JSTokenTypes.SINGLE_QUOTE_STRING_LITERAL);
        if (result != null) return result;
            }
            // fall through
          case 266: break;
          case 42:
            { zzMarkedPos--;
        readUntil(true, '/', '\r', '\n');
        var result = finishReadCommentOrRegexp(JSTokenTypes.REGEXP_LITERAL);
        if (result != null) return result;
            }
            // fall through
          case 267: break;
          case 43:
            { readUntil(false, '\r', '\n');
        var result = finishReadCommentOrRegexp(JSTokenTypes.END_OF_LINE_COMMENT);
        if (result != null) return result;
            }
            // fall through
          case 268: break;
          case 44:
            { yybegin(MULTILINE_COMMENT);
            }
            // fall through
          case 269: break;
          case 45:
            { // consume
            }
            // fall through
          case 270: break;
          case 46:
            { yybegin(DIV_OR_GT); return JSTokenTypes.IDENTIFIER;
            }
            // fall through
          case 271: break;
          case 47:
            { yybegin(DIV_OR_GT); return JSTokenTypes.NUMERIC_LITERAL;
            }
            // fall through
          case 272: break;
          case 48:
            { readString(null, DIV_OR_GT);
            }
            // fall through
          case 273: break;
          case 49:
            { return JSTokenTypes.LT;
            }
            // fall through
          case 274: break;
          case 50:
            { return JSTokenTypes.EXCL;
            }
            // fall through
          case 275: break;
          case 51:
            { yybegin(AFTER_DOT); return JSTokenTypes.DOT;
            }
            // fall through
          case 276: break;
          case 52:
            { if (shouldTrackParentheses()) {
          expressionStack.push(KIND_EXPRESSION_PARENTHESIS);
        }
        yybegin(EXPRESSION_INITIAL);
        return JSTokenTypes.LPAR;
            }
            // fall through
          case 277: break;
          case 53:
            { boolean wasExpr;
        if (expressionStack.isEmpty()) {
          wasExpr = true;
        } else {
          var peek = expressionStack.peekInt(0);
          if (peek == KIND_NON_EXPRESSION_PARENTHESIS) {
            wasExpr = false;
            expressionStack.popInt();
          } else {
            wasExpr = true;
            if (peek == KIND_EXPRESSION_PARENTHESIS) {
              expressionStack.popInt();
            }
          }
        }
        yybegin(wasExpr ? DIV_OR_GT : EXPRESSION_INITIAL);
        return JSTokenTypes.RPAR;
            }
            // fall through
          case 278: break;
          case 54:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.OR;
            }
            // fall through
          case 279: break;
          case 55:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.AND;
            }
            // fall through
          case 280: break;
          case 56:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.SEMICOLON;
            }
            // fall through
          case 281: break;
          case 57:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.SHARP;
            }
            // fall through
          case 282: break;
          case 58:
            { expressionStack.push(KIND_NESTED_BRACES);
        yybegin(EXPRESSION_INITIAL);
        return JSTokenTypes.LBRACE;
            }
            // fall through
          case 283: break;
          case 59:
            { while (!expressionStack.isEmpty()) {
          var popped = expressionStack.popInt();
          switch(popped) {
            case KIND_NESTED_BRACES -> {
               yybegin(EXPRESSION_INITIAL);
               return JSTokenTypes.RBRACE;
            }
            case KIND_SPREAD_OR_SHORTHAND_ATTRIBUTE_EXPRESSION -> {
               yybegin(TAG_ATTRIBUTES_POST_SHORTHAND);
               return JSTokenTypes.XML_RBRACE;
            }
            case KIND_ATTRIBUTE_EXPRESSION -> {
               yybegin(TAG_ATTRIBUTES);
               return JSTokenTypes.XML_RBRACE;
            }
            case KIND_EXPRESSION -> {
               yybegin(HTML_INITIAL);
               return JSTokenTypes.XML_RBRACE;
            }
            case KIND_TEMPLATE_LITERAL_EXPRESSION -> {
               yybegin(STRING_TEMPLATE);
               return JSTokenTypes.RBRACE;
            }
            case KIND_EXPRESSION_PARENTHESIS, KIND_NON_EXPRESSION_PARENTHESIS -> {
               // drop unbalanced parenthesis
            }
            default -> throw new IllegalStateException("Wrong value on stack: " + popped);
          }
        }
        yybegin(HTML_INITIAL);
        return JSTokenTypes.XML_RBRACE;
            }
            // fall through
          case 284: break;
          case 60:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.PLUS;
            }
            // fall through
          case 285: break;
          case 61:
            { if (backqouteForcesTemplateLiteralEnd()) {
          while (!expressionStack.isEmpty() && expressionStack.popInt() != KIND_TEMPLATE_LITERAL_EXPRESSION) {}
          yypushback(1);
          yybegin(STRING_TEMPLATE);
        } else {
          yybegin(STRING_TEMPLATE);
          return JSTokenTypes.BACKQUOTE;
        }
            }
            // fall through
          case 286: break;
          case 62:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.LBRACKET;
            }
            // fall through
          case 287: break;
          case 63:
            { yybegin(DIV_OR_GT); return JSTokenTypes.RBRACKET;
            }
            // fall through
          case 288: break;
          case 64:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.DIV;
            }
            // fall through
          case 289: break;
          case 65:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.MULT;
            }
            // fall through
          case 290: break;
          case 66:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.MINUS;
            }
            // fall through
          case 291: break;
          case 67:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.QUEST;
            }
            // fall through
          case 292: break;
          case 68:
            { yybegin(DIV_OR_GT); return JSTokenTypes.GT;
            }
            // fall through
          case 293: break;
          case 69:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.EQ;
            }
            // fall through
          case 294: break;
          case 70:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.COLON;
            }
            // fall through
          case 295: break;
          case 71:
            { return JSTokenTypes.AT;
            }
            // fall through
          case 296: break;
          case 72:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.XOR;
            }
            // fall through
          case 297: break;
          case 73:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.PERC;
            }
            // fall through
          case 298: break;
          case 74:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.COMMA;
            }
            // fall through
          case 299: break;
          case 75:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.TILDE;
            }
            // fall through
          case 300: break;
          case 76:
            { yypushback(yylength()); yybegin(EXPRESSION_INITIAL);
            }
            // fall through
          case 301: break;
          case 77:
            { expressionStack.push(KIND_NON_EXPRESSION_PARENTHESIS);
        yybegin(EXPRESSION_INITIAL);
        return JSTokenTypes.LPAR;
            }
            // fall through
          case 302: break;
          case 78:
            { return JSTokenTypes.STRING_TEMPLATE_PART;
            }
            // fall through
          case 303: break;
          case 79:
            { if (!expressionStack.isEmpty() && expressionStack.peekInt(0) == KIND_TEMPLATE_LITERAL_ATTRIBUTE) {
          expressionStack.popInt();
          yybegin(TAG_ATTRIBUTES);
        } else {
          yybegin(DIV_OR_GT);
        }
        return JSTokenTypes.BACKQUOTE;
            }
            // fall through
          case 304: break;
          case 80:
            { expressionStack.push(KIND_TEMPLATE_LITERAL_EXPRESSION);
        yybegin(EXPRESSION_INITIAL);
        return JSTokenTypes.LBRACE;
            }
            // fall through
          case 305: break;
          case 81:
            { if (yystate() != HTML_INITIAL && isWithinAttributeExpression()) {
          yypushback(yylength() - 1);
          return JSTokenTypes.LT;
        }
        expressionStack.push(KIND_START_TAG);
        yybegin(START_TAG_NAME);
        yypushback(1);
        return XmlTokenType.XML_START_TAG_START;
            }
            // fall through
          case 306: break;
          case 82:
            { if (yystate() != HTML_INITIAL && isWithinAttributeExpression()) {
          return JSTokenTypes.LT;
        }
        expressionStack.push(KIND_END_TAG);
        yybegin(END_TAG_NAME);
        return XmlTokenType.XML_END_TAG_START;
            }
            // fall through
          case 307: break;
          case 83:
            { if (yystate() != HTML_INITIAL && isWithinAttributeExpression()) {
          yypushback(yylength() - 1);
          return JSTokenTypes.LT;
        }
        yybegin(PROCESSING_INSTRUCTION);
        return XmlTokenType.XML_PI_START;
            }
            // fall through
          case 308: break;
          case 84:
            { processClosedTag(true); return XmlTokenType.XML_EMPTY_ELEMENT_END;
            }
            // fall through
          case 309: break;
          case 85:
            { yybegin(COMMENT); return XmlTokenType.XML_CONDITIONAL_COMMENT_START_END;
            }
            // fall through
          case 310: break;
          case 86:
            { var result = finishReadCommentOrRegexp(JSTokenTypes.C_STYLE_COMMENT);
        if (result != null) return result;
            }
            // fall through
          case 311: break;
          case 87:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.NE;
            }
            // fall through
          case 312: break;
          case 88:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.DO_KEYWORD;
            }
            // fall through
          case 313: break;
          case 89:
            { yybegin(DIV_OR_GT); return JSTokenTypes.OF_KEYWORD;
            }
            // fall through
          case 314: break;
          case 90:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.IS_KEYWORD;
            }
            // fall through
          case 315: break;
          case 91:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.IN_KEYWORD;
            }
            // fall through
          case 316: break;
          case 92:
            { yybegin(NON_EXPRESSION_PAR); return JSTokenTypes.IF_KEYWORD;
            }
            // fall through
          case 317: break;
          case 93:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.DOT_DOT;
            }
            // fall through
          case 318: break;
          case 94:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.OROR;
            }
            // fall through
          case 319: break;
          case 95:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.PIPE;
            }
            // fall through
          case 320: break;
          case 96:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.OREQ;
            }
            // fall through
          case 321: break;
          case 97:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.ANDAND;
            }
            // fall through
          case 322: break;
          case 98:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.ANDEQ;
            }
            // fall through
          case 323: break;
          case 99:
            { yybegin(DIV_OR_GT); return JSTokenTypes.AS_KEYWORD;
            }
            // fall through
          case 324: break;
          case 100:
            { yybegin(DIV_OR_GT); return JSTokenTypes.PRIVATE_IDENTIFIER;
            }
            // fall through
          case 325: break;
          case 101:
            { return JSTokenTypes.PLUSPLUS;
            }
            // fall through
          case 326: break;
          case 102:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.PLUSEQ;
            }
            // fall through
          case 327: break;
          case 103:
            { int boundary;
        if (isWithinAttributeExpression()) {
          boundary = findFirstUnescapedChar('}');
        } else {
          boundary = findFirstUnescapedChar('{', '}', '\'', '"', '`');
        }
        if (boundary < zzMarkedPos) {
          zzMarkedPos = boundary;
        }
        return JSTokenTypes.REGEXP_LITERAL;
            }
            // fall through
          case 328: break;
          case 104:
            { yypushback(1);
        if (isWithinAttributeExpression()) {
          readCommentOrRegExp(null, EXPRESSION_INITIAL, '}');
        } else {
          readCommentOrRegExp(null, EXPRESSION_INITIAL, '{', '}', '\'', '"', '`');
        }
            }
            // fall through
          case 329: break;
          case 105:
            { return JSTokenTypes.MINUSMINUS;
            }
            // fall through
          case 330: break;
          case 106:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.MINUSGT;
            }
            // fall through
          case 331: break;
          case 107:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.MINUSEQ;
            }
            // fall through
          case 332: break;
          case 108:
            { yybegin(AFTER_ELVIS); return JSTokenTypes.ELVIS;
            }
            // fall through
          case 333: break;
          case 109:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.QUEST_QUEST;
            }
            // fall through
          case 334: break;
          case 110:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.EQGT;
            }
            // fall through
          case 335: break;
          case 111:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.EQEQ;
            }
            // fall through
          case 336: break;
          case 112:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.COLON_COLON;
            }
            // fall through
          case 337: break;
          case 113:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.XOREQ;
            }
            // fall through
          case 338: break;
          case 114:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.PERCEQ;
            }
            // fall through
          case 339: break;
          case 115:
            { yybegin(EXPRESSION_INITIAL);
        if (canBeGenericArgumentList()) {
           yypushback(yylength() - 1);
           return JSTokenTypes.LT;
        }
        return JSTokenTypes.LTLT;
            }
            // fall through
          case 340: break;
          case 116:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.LE;
            }
            // fall through
          case 341: break;
          case 117:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.DIVEQ;
            }
            // fall through
          case 342: break;
          case 118:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.MULTMULT;
            }
            // fall through
          case 343: break;
          case 119:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.MULTEQ;
            }
            // fall through
          case 344: break;
          case 120:
            { if (!templateLiteralSupportsEscape()) {
                    yypushback(1);
                  }
                  return JSTokenTypes.STRING_TEMPLATE_PART;
            }
            // fall through
          case 345: break;
          case 121:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(STRING_TEMPLATE_DOLLAR); return JSTokenTypes.DOLLAR;
            }
            // fall through
          case 346: break;
          case 122:
            { yypushback(3);
        yybegin(FRONTMATTER_OPEN);
        return XmlTokenType.XML_COMMENT_CHARACTERS;
            }
            // fall through
          case 347: break;
          case 123:
            { yybegin(FRONTMATTER_OPENED);
            return AstroSfcTokenTypes.FRONTMATTER_SEPARATOR;
            }
            // fall through
          case 348: break;
          case 124:
            { yypushback(3);
          yybegin(FRONTMATTER_CLOSE);
          return AstroSfcTokenTypes.FRONTMATTER_SCRIPT;
            }
            // fall through
          case 349: break;
          case 125:
            { yybegin(HTML_INITIAL);
            return AstroSfcTokenTypes.FRONTMATTER_SEPARATOR;
            }
            // fall through
          case 350: break;
          case 126:
            { return XmlTokenType.XML_ENTITY_REF_TOKEN;
            }
            // fall through
          case 351: break;
          case 127:
            { yybegin(C_COMMENT_END); return XmlTokenType.XML_CONDITIONAL_COMMENT_END_START;
            }
            // fall through
          case 352: break;
          case 128:
            { backToInitial(); return XmlTokenType.XML_COMMENT_END;
            }
            // fall through
          case 353: break;
          case 129:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.NEQEQ;
            }
            // fall through
          case 354: break;
          case 130:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.OUT_KEYWORD;
            }
            // fall through
          case 355: break;
          case 131:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.TRY_KEYWORD;
            }
            // fall through
          case 356: break;
          case 132:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.LET_KEYWORD;
            }
            // fall through
          case 357: break;
          case 133:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.DOT_DOT_DOT;
            }
            // fall through
          case 358: break;
          case 134:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.OR_OR_EQ;
            }
            // fall through
          case 359: break;
          case 135:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.AND_AND_EQ;
            }
            // fall through
          case 360: break;
          case 136:
            { yybegin(DIV_OR_GT); return JSTokenTypes.GET_KEYWORD;
            }
            // fall through
          case 361: break;
          case 137:
            { yybegin(DIV_OR_GT); return JSTokenTypes.ANY_KEYWORD;
            }
            // fall through
          case 362: break;
          case 138:
            { yybegin(DIV_OR_GT); return JSTokenTypes.SET_KEYWORD;
            }
            // fall through
          case 363: break;
          case 139:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.NEW_KEYWORD;
            }
            // fall through
          case 364: break;
          case 140:
            { yypushback(yylength()-1); yybegin(EXPRESSION_INITIAL); return JSTokenTypes.QUEST;
            }
            // fall through
          case 365: break;
          case 141:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.QUEST_QUEST_EQ;
            }
            // fall through
          case 366: break;
          case 142:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.GTGTEQ;
            }
            // fall through
          case 367: break;
          case 143:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.EQEQEQ;
            }
            // fall through
          case 368: break;
          case 144:
            { yybegin(NON_EXPRESSION_PAR); return JSTokenTypes.FOR_KEYWORD;
            }
            // fall through
          case 369: break;
          case 145:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.VAR_KEYWORD;
            }
            // fall through
          case 370: break;
          case 146:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.LTLTEQ;
            }
            // fall through
          case 371: break;
          case 147:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.MULTMULTEQ;
            }
            // fall through
          case 372: break;
          case 148:
            { yybegin(COMMENT);
        return XmlTokenType.XML_COMMENT_START;
            }
            // fall through
          case 373: break;
          case 149:
            { return XmlTokenType.XML_CHAR_ENTITY_REF;
            }
            // fall through
          case 374: break;
          case 150:
            { return XmlTokenType.XML_NAME;
            }
            // fall through
          case 375: break;
          case 151:
            { backToInitial(); return XmlTokenType.XML_BAD_CHARACTER;
            }
            // fall through
          case 376: break;
          case 152:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.CASE_KEYWORD;
            }
            // fall through
          case 377: break;
          case 153:
            { yybegin(DIV_OR_GT); return JSTokenTypes.TYPE_KEYWORD;
            }
            // fall through
          case 378: break;
          case 154:
            { yybegin(DIV_OR_GT); return JSTokenTypes.THIS_KEYWORD;
            }
            // fall through
          case 379: break;
          case 155:
            { yybegin(DIV_OR_GT); return JSTokenTypes.TRUE_KEYWORD;
            }
            // fall through
          case 380: break;
          case 156:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.ELSE_KEYWORD;
            }
            // fall through
          case 381: break;
          case 157:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.ENUM_KEYWORD;
            }
            // fall through
          case 382: break;
          case 158:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.LT;
            }
            // fall through
          case 383: break;
          case 159:
            { yybegin(DIV_OR_GT); return JSTokenTypes.NULL_KEYWORD;
            }
            // fall through
          case 384: break;
          case 160:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.GTGTGTEQ;
            }
            // fall through
          case 385: break;
          case 161:
            { yybegin(DIV_OR_GT); return JSTokenTypes.FROM_KEYWORD;
            }
            // fall through
          case 386: break;
          case 162:
            { yybegin(NON_EXPRESSION_PAR); return JSTokenTypes.WITH_KEYWORD;
            }
            // fall through
          case 387: break;
          case 163:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.VOID_KEYWORD;
            }
            // fall through
          case 388: break;
          case 164:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.CONST_KEYWORD;
            }
            // fall through
          case 389: break;
          case 165:
            { yybegin(DIV_OR_GT); return JSTokenTypes.CLASS_KEYWORD;
            }
            // fall through
          case 390: break;
          case 166:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.CATCH_KEYWORD;
            }
            // fall through
          case 391: break;
          case 167:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.THROW_KEYWORD;
            }
            // fall through
          case 392: break;
          case 168:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.YIELD_KEYWORD;
            }
            // fall through
          case 393: break;
          case 169:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.BREAK_KEYWORD;
            }
            // fall through
          case 394: break;
          case 170:
            { yybegin(DIV_OR_GT); return JSTokenTypes.INFER_KEYWORD;
            }
            // fall through
          case 395: break;
          case 171:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.GE;
            }
            // fall through
          case 396: break;
          case 172:
            { yybegin(DIV_OR_GT); return JSTokenTypes.ASYNC_KEYWORD;
            }
            // fall through
          case 397: break;
          case 173:
            { yybegin(EXPRESSION_INITIAL);  return JSTokenTypes.AWAIT_KEYWORD;
            }
            // fall through
          case 398: break;
          case 174:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.SUPER_KEYWORD;
            }
            // fall through
          case 399: break;
          case 175:
            { yybegin(DIV_OR_GT); return JSTokenTypes.NEVER_KEYWORD;
            }
            // fall through
          case 400: break;
          case 176:
            { yybegin(DIV_OR_GT); return JSTokenTypes.FALSE_KEYWORD;
            }
            // fall through
          case 401: break;
          case 177:
            { yybegin(DIV_OR_GT); return JSTokenTypes.KEYOF_KEYWORD;
            }
            // fall through
          case 402: break;
          case 178:
            { yybegin(NON_EXPRESSION_PAR); return JSTokenTypes.WHILE_KEYWORD;
            }
            // fall through
          case 403: break;
          case 179:
            { return XmlTokenType.XML_DOCTYPE_PUBLIC;
            }
            // fall through
          case 404: break;
          case 180:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.DELETE_KEYWORD;
            }
            // fall through
          case 405: break;
          case 181:
            { yybegin(DIV_OR_GT); return JSTokenTypes.OBJECT_TYPE_KEYWORD;
            }
            // fall through
          case 406: break;
          case 182:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.TYPEOF_KEYWORD;
            }
            // fall through
          case 407: break;
          case 183:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.PUBLIC_KEYWORD;
            }
            // fall through
          case 408: break;
          case 184:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.EXPORT_KEYWORD;
            }
            // fall through
          case 409: break;
          case 185:
            { yybegin(DIV_OR_GT); return JSTokenTypes.MODULE_KEYWORD;
            }
            // fall through
          case 410: break;
          case 186:
            { yybegin(DIV_OR_GT); return JSTokenTypes.BIGINT_KEYWORD;
            }
            // fall through
          case 411: break;
          case 187:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.IMPORT_KEYWORD;
            }
            // fall through
          case 412: break;
          case 188:
            { yybegin(DIV_OR_GT); return JSTokenTypes.GLOBAL_KEYWORD;
            }
            // fall through
          case 413: break;
          case 189:
            { yybegin(DIV_OR_GT); return JSTokenTypes.ASSERT_KEYWORD;
            }
            // fall through
          case 414: break;
          case 190:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.STATIC_KEYWORD;
            }
            // fall through
          case 415: break;
          case 191:
            { yybegin(DIV_OR_GT); return JSTokenTypes.STRING_KEYWORD;
            }
            // fall through
          case 416: break;
          case 192:
            { yybegin(DIV_OR_GT); return JSTokenTypes.SYMBOL_KEYWORD;
            }
            // fall through
          case 417: break;
          case 193:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.SWITCH_KEYWORD;
            }
            // fall through
          case 418: break;
          case 194:
            { yybegin(DIV_OR_GT); return JSTokenTypes.NUMBER_KEYWORD;
            }
            // fall through
          case 419: break;
          case 195:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.RETURN_KEYWORD;
            }
            // fall through
          case 420: break;
          case 196:
            { yybegin(DIV_OR_GT); return JSTokenTypes.DECLARE_KEYWORD;
            }
            // fall through
          case 421: break;
          case 197:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.DEFAULT_KEYWORD;
            }
            // fall through
          case 422: break;
          case 198:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.PACKAGE_KEYWORD;
            }
            // fall through
          case 423: break;
          case 199:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.PRIVATE_KEYWORD;
            }
            // fall through
          case 424: break;
          case 200:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.EXTENDS_KEYWORD;
            }
            // fall through
          case 425: break;
          case 201:
            { yybegin(DIV_OR_GT); return JSTokenTypes.UNKNOWN_KEYWORD;
            }
            // fall through
          case 426: break;
          case 202:
            { yybegin(DIV_OR_GT); return JSTokenTypes.BOOLEAN_KEYWORD;
            }
            // fall through
          case 427: break;
          case 203:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.ASSERTS_KEYWORD;
            }
            // fall through
          case 428: break;
          case 204:
            { yybegin(DIV_OR_GT); return JSTokenTypes.AWAITED_KEYWORD;
            }
            // fall through
          case 429: break;
          case 205:
            { yybegin(DIV_OR_GT); return JSTokenTypes.REQUIRE_KEYWORD;
            }
            // fall through
          case 430: break;
          case 206:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.FINALLY_KEYWORD;
            }
            // fall through
          case 431: break;
          case 207:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.DEBUGGER_KEYWORD;
            }
            // fall through
          case 432: break;
          case 208:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.OVERRIDE_KEYWORD;
            }
            // fall through
          case 433: break;
          case 209:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.CONTINUE_KEYWORD;
            }
            // fall through
          case 434: break;
          case 210:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.LTLT;
            }
            // fall through
          case 435: break;
          case 211:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.ACCESSOR_KEYWORD;
            }
            // fall through
          case 436: break;
          case 212:
            { yybegin(DIV_OR_GT); return JSTokenTypes.ABSTRACT_KEYWORD;
            }
            // fall through
          case 437: break;
          case 213:
            { yybegin(DIV_OR_GT); return JSTokenTypes.READONLY_KEYWORD;
            }
            // fall through
          case 438: break;
          case 214:
            { yybegin(DIV_OR_GT); return JSTokenTypes.FUNCTION_KEYWORD;
            }
            // fall through
          case 439: break;
          case 215:
            { if (yystate() != HTML_INITIAL && isWithinAttributeExpression()) {
          yypushback(yylength() - 1);
          return JSTokenTypes.LT;
        }
        yybegin(DOC_TYPE);
        return XmlTokenType.XML_DOCTYPE_START;
            }
            // fall through
          case 440: break;
          case 216:
            { return JSTokenTypes.CDATA_START;
            }
            // fall through
          case 441: break;
          case 217:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.DECORATOR_KEYWORD;
            }
            // fall through
          case 442: break;
          case 218:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.PROTECTED_KEYWORD;
            }
            // fall through
          case 443: break;
          case 219:
            { yybegin(DIV_OR_GT); return JSTokenTypes.UNDEFINED_KEYWORD;
            }
            // fall through
          case 444: break;
          case 220:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.INTERFACE_KEYWORD;
            }
            // fall through
          case 445: break;
          case 221:
            { yybegin(DIV_OR_GT); return JSTokenTypes.INTRINSIC_KEYWORD;
            }
            // fall through
          case 446: break;
          case 222:
            { yybegin(DIV_OR_GT); return JSTokenTypes.SATISFIES_KEYWORD;
            }
            // fall through
          case 447: break;
          case 223:
            { yybegin(DIV_OR_GT); return JSTokenTypes.NAMESPACE_KEYWORD;
            }
            // fall through
          case 448: break;
          case 224:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.IMPLEMENTS_KEYWORD;
            }
            // fall through
          case 449: break;
          case 225:
            { yybegin(EXPRESSION_INITIAL); return JSTokenTypes.INSTANCEOF_KEYWORD;
            }
            // fall through
          case 450: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
