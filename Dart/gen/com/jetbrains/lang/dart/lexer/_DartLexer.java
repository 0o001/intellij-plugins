/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.jetbrains.lang.dart.lexer;

import java.util.*;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.jetbrains.lang.dart.DartTokenTypes.*;
import static com.jetbrains.lang.dart.DartTokenTypesSets.*;
import static com.jetbrains.lang.dart.lexer.DartLexer.*;

@SuppressWarnings("DuplicateBranchesInSwitch")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Dart.flex</tt>
 */
class _DartLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTI_LINE_COMMENT_STATE = 2;
  public static final int QUO_STRING = 4;
  public static final int THREE_QUO_STRING = 6;
  public static final int APOS_STRING = 8;
  public static final int THREE_APOS_STRING = 10;
  public static final int SHORT_TEMPLATE_ENTRY = 12;
  public static final int LONG_TEMPLATE_ENTRY = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\10\1\0\1\5\23\0\1\5\1\7\1\14\1\6\1\16\1\63\1\73\1\15\1\55\1\56"+
    "\1\12\1\23\1\66\1\60\1\20\1\11\1\24\11\1\1\67\1\57\1\70\1\61\1\64\1\65\1\74"+
    "\4\2\1\21\1\2\21\3\1\26\2\3\1\53\1\75\1\54\1\72\1\3\1\0\1\30\1\33\1\35\1\44"+
    "\1\22\1\4\1\52\1\36\1\42\1\3\1\34\1\37\1\45\1\41\1\40\1\50\1\3\1\13\1\31\1"+
    "\32\1\43\1\51\1\47\1\25\1\46\1\3\1\17\1\71\1\27\1\62\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\4\1\2\0\1\2\1\3\2\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\4\1\12\1\13\1\14\1\15"+
    "\1\4\1\16\1\3\1\17\21\4\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\3\42"+
    "\1\1\1\43\1\44\1\45\1\2\1\1\2\2\1\1"+
    "\1\2\1\1\1\2\2\46\1\6\1\47\1\50\1\0"+
    "\1\3\3\4\1\51\1\52\1\51\1\53\1\54\1\55"+
    "\2\56\1\4\2\0\1\3\1\57\3\4\1\60\1\61"+
    "\1\3\1\62\21\4\1\63\1\64\4\4\1\65\1\66"+
    "\1\67\2\4\1\70\10\4\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\0\1\112\1\113"+
    "\1\114\1\0\1\1\2\0\1\46\1\3\2\4\1\115"+
    "\1\4\1\116\1\117\4\56\1\4\1\120\1\121\1\122"+
    "\10\4\1\123\6\4\1\124\14\4\1\125\11\4\1\126"+
    "\1\4\1\127\1\130\1\131\1\132\1\133\1\134\1\46"+
    "\3\4\1\116\1\135\1\0\1\56\2\136\2\4\1\137"+
    "\2\4\1\140\1\141\5\4\1\142\1\4\1\143\1\4"+
    "\1\144\1\4\1\145\2\4\1\146\5\4\1\147\3\4"+
    "\1\150\7\4\1\151\1\152\1\153\1\154\1\4\1\155"+
    "\1\156\2\0\6\4\1\157\1\4\1\160\1\4\1\161"+
    "\1\4\1\162\1\4\1\163\1\164\1\165\1\166\11\4"+
    "\1\167\1\170\1\171\2\4\2\0\1\4\1\172\2\4"+
    "\1\173\1\174\1\4\1\175\1\176\5\4\1\177\1\4"+
    "\1\200\2\4\1\201\1\202\1\136\1\203\1\4\1\204"+
    "\1\4\1\205\2\4\1\206\3\4\1\207\1\210\1\211"+
    "\1\212\1\4\1\213\1\4\1\214\1\215\1\4\1\216";

  private static int [] zzUnpackAction() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u049a\0\u01f0\0\u04d8\0\u0516\0\u0554"+
    "\0\u0592\0\u01f0\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706"+
    "\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6"+
    "\0\u0934\0\u0972\0\u09b0\0\u01f0\0\u01f0\0\u01f0\0\u01f0\0\u01f0"+
    "\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u01f0\0\u0ae6\0\u01f0\0\u01f0"+
    "\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u01f0\0\u01f0\0\u0c1c\0\u0c5a"+
    "\0\u0c98\0\u01f0\0\u01f0\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce"+
    "\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u01f0\0\u01f0"+
    "\0\u01f0\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u01f0"+
    "\0\u10f4\0\u1132\0\u01f0\0\u01f0\0\u1170\0\u11ae\0\u11ec\0\u122a"+
    "\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u01f0\0\u01f0"+
    "\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e"+
    "\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e"+
    "\0\u17bc\0\u17fa\0\u1838\0\u026c\0\u026c\0\u1876\0\u18b4\0\u18f2"+
    "\0\u1930\0\u026c\0\u026c\0\u026c\0\u196e\0\u19ac\0\u026c\0\u19ea"+
    "\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u01f0"+
    "\0\u01f0\0\u01f0\0\u01f0\0\u1bda\0\u01f0\0\u01f0\0\u1c18\0\u01f0"+
    "\0\u1c56\0\u01f0\0\u1c94\0\u01f0\0\u01f0\0\u1cd2\0\u01f0\0\u01f0"+
    "\0\u0d14\0\u1d10\0\u01f0\0\u01f0\0\u1d4e\0\u01f0\0\u0e4a\0\u1d8c"+
    "\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u026c\0\u1ec2\0\u1f00\0\u1f3e"+
    "\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u01f0\0\u01f0\0\u20b2"+
    "\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2"+
    "\0\u026c\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u026c"+
    "\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606"+
    "\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u026c\0\u273c\0\u277a\0\u27b8"+
    "\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u026c\0\u296a"+
    "\0\u026c\0\u01f0\0\u01f0\0\u01f0\0\u01f0\0\u01f0\0\u29a8\0\u29e6"+
    "\0\u2a24\0\u2a62\0\u2aa0\0\u01f0\0\u1f3e\0\u01f0\0\u2ade\0\u2b1c"+
    "\0\u2b5a\0\u2b98\0\u01f0\0\u2bd6\0\u2c14\0\u026c\0\u026c\0\u2c52"+
    "\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u026c\0\u2d88\0\u026c\0\u2dc6"+
    "\0\u026c\0\u2e04\0\u026c\0\u2e42\0\u2e80\0\u026c\0\u2ebe\0\u2efc"+
    "\0\u2f3a\0\u2f78\0\u2fb6\0\u026c\0\u2ff4\0\u3032\0\u3070\0\u026c"+
    "\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u026c"+
    "\0\u026c\0\u026c\0\u0f04\0\u3260\0\u026c\0\u329e\0\u32dc\0\u331a"+
    "\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u026c\0\u34cc"+
    "\0\u026c\0\u350a\0\u026c\0\u3548\0\u026c\0\u3586\0\u026c\0\u026c"+
    "\0\u026c\0\u026c\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa"+
    "\0\u3738\0\u3776\0\u37b4\0\u026c\0\u026c\0\u026c\0\u37f2\0\u3830"+
    "\0\u386e\0\u38ac\0\u38ea\0\u026c\0\u3928\0\u3966\0\u026c\0\u026c"+
    "\0\u39a4\0\u026c\0\u026c\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada"+
    "\0\u026c\0\u3b18\0\u026c\0\u3b56\0\u3b94\0\u026c\0\u026c\0\u01f0"+
    "\0\u026c\0\u3bd2\0\u026c\0\u3c10\0\u026c\0\u3c4e\0\u3c8c\0\u026c"+
    "\0\u3cca\0\u3d08\0\u3d46\0\u026c\0\u026c\0\u026c\0\u026c\0\u3d84"+
    "\0\u026c\0\u3dc2\0\u026c\0\u026c\0\u3e00\0\u026c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\2\13\1\14\1\15\1\16\1\17\1\15"+
    "\1\20\1\21\1\22\1\23\1\24\1\13\1\25\1\26"+
    "\1\13\1\27\1\30\1\31\2\13\1\32\1\33\1\34"+
    "\1\35\1\36\1\13\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\13\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\11\11\76\1\77\1\100\63\76"+
    "\10\101\1\102\3\101\1\103\1\101\1\104\56\101\1\105"+
    "\14\106\1\107\1\106\1\104\56\106\1\110\10\111\1\102"+
    "\4\111\1\103\1\104\56\111\1\112\15\113\1\114\1\104"+
    "\56\113\1\110\2\11\3\115\6\11\1\115\5\11\2\115"+
    "\2\11\2\115\1\11\2\115\1\116\20\115\24\11\1\12"+
    "\2\13\1\14\1\15\1\117\1\17\1\15\1\20\1\21"+
    "\1\22\1\23\1\24\1\13\1\120\1\26\1\13\1\27"+
    "\1\30\1\31\2\13\1\121\1\33\1\34\1\35\1\36"+
    "\1\13\1\37\1\40\1\41\1\42\1\43\1\44\1\13"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\11\77\0\1\12\16\0\1\122\2\123\1\0"+
    "\1\12\52\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\23\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\1\124\7\13\1\125\1\13\1\126\10\13\30\0\1\15"+
    "\2\0\1\15\74\0\1\127\147\0\1\130\25\0\1\131"+
    "\1\132\46\0\1\133\75\0\1\134\15\0\4\13\6\0"+
    "\1\13\1\135\1\136\1\13\2\0\1\13\1\137\1\0"+
    "\3\13\1\0\23\13\37\0\1\140\76\0\1\141\61\0"+
    "\1\142\16\0\1\143\3\0\1\142\52\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\1\13\1\144"+
    "\1\13\1\0\7\13\1\145\1\13\1\146\11\13\46\0"+
    "\1\147\35\0\1\150\15\0\1\12\16\0\1\122\2\123"+
    "\1\0\1\12\2\151\50\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\1\13\1\152"+
    "\1\13\1\153\13\13\1\154\3\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\1\13\1\155\1\0\3\13"+
    "\1\0\2\13\1\156\3\13\1\157\4\13\1\160\2\13"+
    "\1\161\1\162\3\13\24\0\4\13\6\0\1\163\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\6\13\1\164"+
    "\7\13\1\165\4\13\24\0\4\13\6\0\1\166\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\23\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\1\167\6\13\1\170\1\171\12\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\12\13\1\172\10\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\12\13\1\173\10\13\24\0\3\13\1\174\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\11\13"+
    "\1\175\6\13\1\176\2\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\1\13\1\177\1\0\3\13\1\0"+
    "\1\200\12\13\1\201\7\13\24\0\3\13\1\202\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\1\13\1\203\7\13\1\204\3\13\1\205\5\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\1\13\1\206"+
    "\1\0\3\13\1\0\10\13\1\207\12\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\12\13\1\210\10\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\12\13"+
    "\1\211\10\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\6\13\1\212\3\13"+
    "\1\213\10\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\1\214\22\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\1\215\7\13\1\216\12\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\1\13\1\217\1\0"+
    "\3\13\1\0\23\13\103\0\1\220\1\221\75\0\1\222"+
    "\2\0\1\223\22\0\1\224\145\0\1\225\34\0\1\226"+
    "\44\0\1\227\71\0\1\230\6\0\1\231\66\0\1\232"+
    "\7\0\1\233\65\0\1\234\75\0\1\235\11\0\1\236"+
    "\14\0\1\237\74\0\1\240\64\0\10\101\1\0\3\101"+
    "\1\0\1\101\1\0\56\101\1\241\2\0\3\242\6\0"+
    "\1\242\3\0\1\243\1\0\2\242\2\0\2\242\1\0"+
    "\23\242\23\0\10\101\1\0\65\101\14\106\1\0\1\106"+
    "\1\0\56\106\1\0\14\244\1\245\61\244\76\246\10\111"+
    "\1\0\4\111\2\0\56\111\1\247\10\111\1\0\65\111"+
    "\15\113\2\0\56\113\1\0\15\244\1\250\60\244\1\0"+
    "\4\115\6\0\1\115\5\0\2\115\1\0\3\115\1\0"+
    "\23\115\24\0\4\115\6\0\1\115\5\0\2\115\1\0"+
    "\3\115\1\0\6\115\1\251\14\115\24\0\1\142\22\0"+
    "\1\142\52\0\1\252\21\0\2\252\33\0\1\252\16\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\5\13\1\253\1\13\1\254\13\13\24\0"+
    "\4\13\6\0\1\255\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\23\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\11\13\1\256"+
    "\11\13\23\0\10\127\1\0\75\127\1\0\1\257\64\127"+
    "\12\0\1\260\63\0\10\261\1\0\3\261\1\262\61\261"+
    "\10\263\1\0\4\263\1\264\60\263\1\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\2\13\1\265\20\13\37\0\1\266\76\0\1\267\61\0"+
    "\1\142\17\0\2\123\1\0\1\142\71\0\1\270\56\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\2\13\1\271\15\13\1\272\2\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\1\13\1\273\21\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\13\13\1\274\7\13\24\0\2\151\1\0\1\151\14\0"+
    "\2\151\1\0\1\151\3\0\1\151\2\0\1\151\1\0"+
    "\1\151\6\0\1\151\32\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\1\13\1\275"+
    "\14\13\1\276\4\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\1\13\1\277"+
    "\21\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\1\300\22\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\2\13\1\301\20\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\1\302"+
    "\22\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\10\13\1\303\12\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\20\13\1\304\2\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\11\13\1\305\11\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\12\13\1\306"+
    "\10\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\13\13\1\307\2\13\1\310"+
    "\4\13\24\0\4\13\6\0\1\311\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\12\13\1\312\10\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\20\13\1\313\2\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\1\13\1\314\1\0\3\13"+
    "\1\0\23\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\1\13\1\315\1\316"+
    "\20\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\1\317\22\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\11\13\1\320\7\13\1\321\1\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\14\13\1\322\6\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\3\13"+
    "\1\323\17\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\1\13\1\324\1\0\3\13\1\0\23\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\17\13\1\325\3\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\2\13\1\326\20\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\7\13\1\327"+
    "\13\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\20\13\1\330\2\13\24\0"+
    "\3\13\1\331\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\23\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\1\13\1\332\1\13"+
    "\1\0\23\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\1\13\1\333\1\0\3\13\1\0\23\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\12\13\1\334\10\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\2\13\1\335\20\13\24\0\4\13\6\0\1\336\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\23\13\24\0"+
    "\4\13\6\0\1\337\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\23\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\12\13\1\340"+
    "\10\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\2\13\1\341\20\13\104\0"+
    "\1\342\75\0\1\343\75\0\1\344\75\0\1\345\75\0"+
    "\1\346\15\0\4\242\6\0\1\242\5\0\2\242\1\0"+
    "\3\242\1\0\23\242\23\0\14\244\1\103\76\244\1\103"+
    "\60\244\1\0\4\115\6\0\1\115\5\0\2\115\1\0"+
    "\3\115\1\0\12\115\1\347\10\115\24\0\1\252\22\0"+
    "\1\252\52\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\2\13\1\350\20\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\1\13\1\351\21\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\1\352\22\13\23\0\10\353\1\0\1\127\64\353\11\0"+
    "\1\354\1\355\63\0\10\261\1\0\3\261\1\356\61\261"+
    "\14\0\1\357\61\0\10\263\1\0\4\263\1\356\60\263"+
    "\15\0\1\360\61\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\6\13\1\361\4\13"+
    "\1\362\7\13\110\0\1\363\11\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\1\13\1\364\1\0\3\13\1\0"+
    "\23\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\10\13\1\365\12\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\1\13\1\366"+
    "\1\0\3\13\1\0\23\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\15\13"+
    "\1\367\5\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\1\13\1\370\1\0\3\13\1\0\23\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\11\13\1\371\11\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\2\13\1\372\20\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\12\13\1\373"+
    "\10\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\2\13\1\374\20\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\17\13\1\375\3\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\1\13\1\376\1\0\3\13"+
    "\1\0\23\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\5\13\1\377\15\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\2\13\1\u0100\20\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\1\13\1\u0101\1\0"+
    "\3\13\1\0\23\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\10\13\1\u0102"+
    "\12\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\1\13\1\u0103\21\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\1\13\1\u0104"+
    "\1\0\3\13\1\0\23\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\1\u0105"+
    "\22\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\1\13\1\u0106\1\0\3\13\1\0\23\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\5\13\1\u0107\15\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\1\13"+
    "\1\u0108\21\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\1\13\1\u0109\1\u010a"+
    "\20\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\1\u010b\22\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\1\13\1\u010c\1\0"+
    "\3\13\1\0\23\13\24\0\4\13\6\0\1\u010d\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\23\13\24\0"+
    "\4\13\6\0\1\u010e\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\23\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\12\13\1\u010f"+
    "\10\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\7\13\1\u0110\13\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\7\13\1\u0111\1\u0112\12\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\1\13\1\u0113\1\0"+
    "\3\13\1\0\1\u0114\22\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\12\13"+
    "\1\u0115\10\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\7\13\1\u0116\13\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\7\13\1\u0117\13\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\6\13\1\u0118\14\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\2\13"+
    "\1\u0119\20\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\14\13\1\u011a\6\13"+
    "\24\0\4\115\6\0\1\115\5\0\2\115\1\0\3\115"+
    "\1\0\1\115\1\u011b\21\115\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\10\13"+
    "\1\u011c\12\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\1\13\1\u011d\1\0\3\13\1\0\23\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\7\13\1\u011e\13\13\23\0\10\353\1\0"+
    "\65\353\14\357\1\u011f\61\357\15\360\1\u0120\60\360\1\0"+
    "\4\13\6\0\1\u0121\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\23\13\24\0\4\13\6\0\1\u0122\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\23\13\24\0"+
    "\4\13\6\0\1\u0123\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\11\13\1\u0124\11\13\24\0\4\13\6\0"+
    "\1\u0125\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\23\13\24\0\4\13\6\0\1\u0126\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\23\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\5\13\1\u0127\15\13\24\0\4\13\6\0\1\u0128\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\23\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\2\13\1\u0129\20\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\12\13\1\u012a\10\13\24\0\4\13\6\0\1\u012b\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\23\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\5\13\1\u012c\15\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\17\13\1\u012d\3\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\14\13\1\u012e"+
    "\6\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\4\13\1\u012f\16\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\6\13\1\u0130\14\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\1\13\1\u0131\21\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\2\13\1\u0132"+
    "\20\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\12\13\1\u0133\10\13\24\0"+
    "\4\13\6\0\1\u0134\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\23\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\1\u0135\22\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\1\u0136\22\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\21\13\1\u0137\1\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\1\13\1\u0138\1\0\3\13\1\0\23\13"+
    "\24\0\4\13\6\0\1\u0139\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\23\13\24\0\4\13\6\0\1\u013a"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\23\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\13\13\1\u013b\7\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\11\13\1\u013c\11\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\14\13"+
    "\1\u013d\6\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\1\13\1\u013e\1\0\3\13\1\0\23\13\24\0"+
    "\4\13\6\0\1\u013f\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\23\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\7\13\1\u0140"+
    "\13\13\23\0\14\357\1\u0141\61\357\15\360\1\u0142\60\360"+
    "\1\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\10\13\1\u0143\12\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\11\13\1\u0144\11\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\11\13"+
    "\1\u0145\11\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\14\13\1\u0146\6\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\2\13\1\u0147\20\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\2\13\1\u0148\20\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\1\u0149"+
    "\22\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\5\13\1\u014a\15\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\6\13\1\u014b\14\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\1\13\1\u014c\1\0\3\13"+
    "\1\0\23\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\11\13\1\u014d\11\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\12\13\1\u014e\10\13\24\0\4\13"+
    "\6\0\1\u014f\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\23\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\2\13\1\u0150\20\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\1\13"+
    "\1\u0151\1\0\3\13\1\0\23\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\15\13\1\u0152\5\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\2\13\1\u0153"+
    "\20\13\24\0\4\13\6\0\1\u0154\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\23\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\7\13\1\u0155\13\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\16\13\1\u0156"+
    "\4\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\16\13\1\u0157\4\13\23\0"+
    "\14\357\1\u0158\61\357\15\360\1\u0158\60\360\1\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\17\13\1\u0159\3\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\1\u015a"+
    "\22\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\1\13\1\u015b\21\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\5\13\1\u015c\15\13\24\0\3\13\1\u015d"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\23\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\13\13\1\u015e\7\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\1\u015f\22\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\16\13\1\u0160\4\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\10\13\1\u0161"+
    "\12\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\1\13\1\u0162\1\0\3\13\1\0\23\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\1\13\1\u0163\1\0"+
    "\3\13\1\0\23\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\2\13\1\u0164"+
    "\20\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\7\13\1\u0165\13\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\2\13\1\u0166\20\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\1\13\1\u0167\1\0\3\13"+
    "\1\0\23\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\11\13\1\u0168\11\13"+
    "\24\0\4\13\6\0\1\u0169\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\23\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\11\13"+
    "\1\u016a\11\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\14\13\1\u016b\6\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\2\13\1\u016c\20\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\2\13\1\u016d\20\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\1\13"+
    "\1\u016e\21\13\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15934];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\4\1\2\0\1\11\13\1\1\11\4\1\1\11"+
    "\21\1\5\11\4\1\1\11\1\1\2\11\4\1\2\11"+
    "\3\1\2\11\13\1\3\11\1\0\5\1\1\11\2\1"+
    "\2\11\3\1\2\0\5\1\2\11\47\1\4\11\1\1"+
    "\2\11\1\1\1\11\1\1\1\11\1\1\2\11\1\1"+
    "\2\11\1\0\1\1\2\11\1\0\1\11\2\0\15\1"+
    "\2\11\52\1\5\11\5\1\1\11\1\0\1\11\4\1"+
    "\1\11\53\1\2\0\40\1\2\0\25\1\1\11\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private static final class State {
    final int lBraceCount;
    final int state;

    private State(int state, int lBraceCount) {
      this.state = state;
      this.lBraceCount = lBraceCount;
    }

    @Override
    public String toString() {
        return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
        }
  }

  protected final Stack<State> myStateStack = new Stack<>();
  protected int myLeftBraceCount;

  private void pushState(int state) {
    myStateStack.push(new State(yystate(), myLeftBraceCount));
    myLeftBraceCount = 0;
    yybegin(state);
  }

  private void popState() {
    State state = myStateStack.pop();
    myLeftBraceCount = state.lBraceCount;
    yybegin(state.state);
  }

  _DartLexer() {
    this(null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _DartLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      myLeftBraceCount = 0;
  myStateStack.clear();

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return REGULAR_STRING_PART;
            } 
            // fall through
          case 143: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 144: break;
          case 3: 
            { return NUMBER;
            } 
            // fall through
          case 145: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 146: break;
          case 5: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 147: break;
          case 6: 
            { return HASH;
            } 
            // fall through
          case 148: break;
          case 7: 
            { return NOT;
            } 
            // fall through
          case 149: break;
          case 8: 
            { return DIV;
            } 
            // fall through
          case 150: break;
          case 9: 
            { return MUL;
            } 
            // fall through
          case 151: break;
          case 10: 
            { pushState(QUO_STRING);        return OPEN_QUOTE;
            } 
            // fall through
          case 152: break;
          case 11: 
            { pushState(APOS_STRING);       return OPEN_QUOTE;
            } 
            // fall through
          case 153: break;
          case 12: 
            { return LBRACE;
            } 
            // fall through
          case 154: break;
          case 13: 
            { return DOT;
            } 
            // fall through
          case 155: break;
          case 14: 
            { return PLUS;
            } 
            // fall through
          case 156: break;
          case 15: 
            { return RBRACE;
            } 
            // fall through
          case 157: break;
          case 16: 
            { return LBRACKET;
            } 
            // fall through
          case 158: break;
          case 17: 
            { return RBRACKET;
            } 
            // fall through
          case 159: break;
          case 18: 
            { return LPAREN;
            } 
            // fall through
          case 160: break;
          case 19: 
            { return RPAREN;
            } 
            // fall through
          case 161: break;
          case 20: 
            { return SEMICOLON;
            } 
            // fall through
          case 162: break;
          case 21: 
            { return MINUS;
            } 
            // fall through
          case 163: break;
          case 22: 
            { return EQ;
            } 
            // fall through
          case 164: break;
          case 23: 
            { return BIN_NOT;
            } 
            // fall through
          case 165: break;
          case 24: 
            { return REM;
            } 
            // fall through
          case 166: break;
          case 25: 
            { return GT;
            } 
            // fall through
          case 167: break;
          case 26: 
            { return QUEST;
            } 
            // fall through
          case 168: break;
          case 27: 
            { return COMMA;
            } 
            // fall through
          case 169: break;
          case 28: 
            { return COLON;
            } 
            // fall through
          case 170: break;
          case 29: 
            { return LT;
            } 
            // fall through
          case 171: break;
          case 30: 
            { return OR;
            } 
            // fall through
          case 172: break;
          case 31: 
            { return XOR;
            } 
            // fall through
          case 173: break;
          case 32: 
            { return AND;
            } 
            // fall through
          case 174: break;
          case 33: 
            { return AT;
            } 
            // fall through
          case 175: break;
          case 34: 
            { return MULTI_LINE_COMMENT_BODY;
            } 
            // fall through
          case 176: break;
          case 35: 
            { popState();                   return WHITE_SPACE;
            } 
            // fall through
          case 177: break;
          case 36: 
            { popState();                   return CLOSING_QUOTE;
            } 
            // fall through
          case 178: break;
          case 37: 
            { return SHORT_TEMPLATE_ENTRY_START;
            } 
            // fall through
          case 179: break;
          case 38: 
            { popState(); return IDENTIFIER;
            } 
            // fall through
          case 180: break;
          case 39: 
            { myLeftBraceCount++; return LBRACE;
            } 
            // fall through
          case 181: break;
          case 40: 
            { if (myLeftBraceCount == 0) {
                                     popState();
                                     return LONG_TEMPLATE_ENTRY_END;
                                   }
                                   myLeftBraceCount--;
                                   return RBRACE;
            } 
            // fall through
          case 182: break;
          case 41: 
            { return SINGLE_LINE_COMMENT;
            } 
            // fall through
          case 183: break;
          case 42: 
            { return NEQ;
            } 
            // fall through
          case 184: break;
          case 43: 
            { pushState(MULTI_LINE_COMMENT_STATE); return MULTI_LINE_COMMENT_START;
            } 
            // fall through
          case 185: break;
          case 44: 
            { return DIV_EQ;
            } 
            // fall through
          case 186: break;
          case 45: 
            { return MUL_EQ;
            } 
            // fall through
          case 187: break;
          case 46: 
            { return RAW_SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 188: break;
          case 47: 
            { return DOT_DOT;
            } 
            // fall through
          case 189: break;
          case 48: 
            { return PLUS_PLUS;
            } 
            // fall through
          case 190: break;
          case 49: 
            { return PLUS_EQ;
            } 
            // fall through
          case 191: break;
          case 50: 
            { return AS;
            } 
            // fall through
          case 192: break;
          case 51: 
            { return OF;
            } 
            // fall through
          case 193: break;
          case 52: 
            { return ON;
            } 
            // fall through
          case 194: break;
          case 53: 
            { return IF;
            } 
            // fall through
          case 195: break;
          case 54: 
            { return IS;
            } 
            // fall through
          case 196: break;
          case 55: 
            { return IN;
            } 
            // fall through
          case 197: break;
          case 56: 
            { return DO;
            } 
            // fall through
          case 198: break;
          case 57: 
            { return MINUS_MINUS;
            } 
            // fall through
          case 199: break;
          case 58: 
            { return MINUS_EQ;
            } 
            // fall through
          case 200: break;
          case 59: 
            { return EQ_EQ;
            } 
            // fall through
          case 201: break;
          case 60: 
            { return EXPRESSION_BODY_DEF;
            } 
            // fall through
          case 202: break;
          case 61: 
            { return INT_DIV;
            } 
            // fall through
          case 203: break;
          case 62: 
            { return REM_EQ;
            } 
            // fall through
          case 204: break;
          case 63: 
            { return QUEST_DOT;
            } 
            // fall through
          case 205: break;
          case 64: 
            { return QUEST_QUEST;
            } 
            // fall through
          case 206: break;
          case 65: 
            { return LT_EQ;
            } 
            // fall through
          case 207: break;
          case 66: 
            { return LT_LT;
            } 
            // fall through
          case 208: break;
          case 67: 
            { return OR_EQ;
            } 
            // fall through
          case 209: break;
          case 68: 
            { return OR_OR;
            } 
            // fall through
          case 210: break;
          case 69: 
            { return XOR_EQ;
            } 
            // fall through
          case 211: break;
          case 70: 
            { return AND_EQ;
            } 
            // fall through
          case 212: break;
          case 71: 
            { return AND_AND;
            } 
            // fall through
          case 213: break;
          case 72: 
            { pushState(MULTI_LINE_COMMENT_STATE); return MULTI_LINE_COMMENT_BODY;
            } 
            // fall through
          case 214: break;
          case 73: 
            { popState();                          return yystate() == MULTI_LINE_COMMENT_STATE
                                                                                                               ? MULTI_LINE_COMMENT_BODY // inner comment closed
                                                                                                               : MULTI_LINE_COMMENT_END;
            } 
            // fall through
          case 215: break;
          case 74: 
            { pushState(SHORT_TEMPLATE_ENTRY);
                                                                                             yypushback(yylength() - 1);
                                                                                             return SHORT_TEMPLATE_ENTRY_START;
            } 
            // fall through
          case 216: break;
          case 75: 
            { pushState(LONG_TEMPLATE_ENTRY);
                                                                                             return LONG_TEMPLATE_ENTRY_START;
            } 
            // fall through
          case 217: break;
          case 76: 
            { yypushback(1); return REGULAR_STRING_PART;
            } 
            // fall through
          case 218: break;
          case 77: 
            { return FOR;
            } 
            // fall through
          case 219: break;
          case 78: 
            { return SINGLE_LINE_DOC_COMMENT;
            } 
            // fall through
          case 220: break;
          case 79: 
            { pushState(MULTI_LINE_COMMENT_STATE); return MULTI_LINE_DOC_COMMENT_START;
            } 
            // fall through
          case 221: break;
          case 80: 
            { pushState(THREE_QUO_STRING);  return OPEN_QUOTE;
            } 
            // fall through
          case 222: break;
          case 81: 
            { pushState(THREE_APOS_STRING); return OPEN_QUOTE;
            } 
            // fall through
          case 223: break;
          case 82: 
            { return DOT_DOT_DOT;
            } 
            // fall through
          case 224: break;
          case 83: 
            { return SET;
            } 
            // fall through
          case 225: break;
          case 84: 
            { return TRY;
            } 
            // fall through
          case 226: break;
          case 85: 
            { return NEW;
            } 
            // fall through
          case 227: break;
          case 86: 
            { return VAR;
            } 
            // fall through
          case 228: break;
          case 87: 
            { return GET;
            } 
            // fall through
          case 229: break;
          case 88: 
            { return INT_DIV_EQ;
            } 
            // fall through
          case 230: break;
          case 89: 
            { return QUEST_QUEST_EQ;
            } 
            // fall through
          case 231: break;
          case 90: 
            { return LT_LT_EQ;
            } 
            // fall through
          case 232: break;
          case 91: 
            { return OR_OR_EQ;
            } 
            // fall through
          case 233: break;
          case 92: 
            { return AND_AND_EQ;
            } 
            // fall through
          case 234: break;
          case 93: 
            { return MULTI_LINE_COMMENT;
            } 
            // fall through
          case 235: break;
          case 94: 
            { return RAW_TRIPLE_QUOTED_STRING;
            } 
            // fall through
          case 236: break;
          case 95: 
            { return DOT_DOT_DOT_QUEST;
            } 
            // fall through
          case 237: break;
          case 96: 
            { return ELSE;
            } 
            // fall through
          case 238: break;
          case 97: 
            { return ENUM;
            } 
            // fall through
          case 239: break;
          case 98: 
            { return SHOW;
            } 
            // fall through
          case 240: break;
          case 99: 
            { return SYNC;
            } 
            // fall through
          case 241: break;
          case 100: 
            { return TRUE;
            } 
            // fall through
          case 242: break;
          case 101: 
            { return THIS;
            } 
            // fall through
          case 243: break;
          case 102: 
            { return CASE;
            } 
            // fall through
          case 244: break;
          case 103: 
            { return HIDE;
            } 
            // fall through
          case 245: break;
          case 104: 
            { return NULL;
            } 
            // fall through
          case 246: break;
          case 105: 
            { return WITH;
            } 
            // fall through
          case 247: break;
          case 106: 
            { return PART;
            } 
            // fall through
          case 248: break;
          case 107: 
            { return VOID;
            } 
            // fall through
          case 249: break;
          case 108: 
            { popState(); return THIS;
            } 
            // fall through
          case 250: break;
          case 109: 
            { return FALSE;
            } 
            // fall through
          case 251: break;
          case 110: 
            { return FINAL;
            } 
            // fall through
          case 252: break;
          case 111: 
            { return ASYNC;
            } 
            // fall through
          case 253: break;
          case 112: 
            { return AWAIT;
            } 
            // fall through
          case 254: break;
          case 113: 
            { return SUPER;
            } 
            // fall through
          case 255: break;
          case 114: 
            { return THROW;
            } 
            // fall through
          case 256: break;
          case 115: 
            { return BREAK;
            } 
            // fall through
          case 257: break;
          case 116: 
            { return CATCH;
            } 
            // fall through
          case 258: break;
          case 117: 
            { return CLASS;
            } 
            // fall through
          case 259: break;
          case 118: 
            { return CONST;
            } 
            // fall through
          case 260: break;
          case 119: 
            { return MIXIN;
            } 
            // fall through
          case 261: break;
          case 120: 
            { return YIELD;
            } 
            // fall through
          case 262: break;
          case 121: 
            { return WHILE;
            } 
            // fall through
          case 263: break;
          case 122: 
            { return RETURN;
            } 
            // fall through
          case 264: break;
          case 123: 
            { return EXPORT;
            } 
            // fall through
          case 265: break;
          case 124: 
            { return ASSERT;
            } 
            // fall through
          case 266: break;
          case 125: 
            { return STATIC;
            } 
            // fall through
          case 267: break;
          case 126: 
            { return SWITCH;
            } 
            // fall through
          case 268: break;
          case 127: 
            { return NATIVE;
            } 
            // fall through
          case 269: break;
          case 128: 
            { return IMPORT;
            } 
            // fall through
          case 270: break;
          case 129: 
            { return FACTORY;
            } 
            // fall through
          case 271: break;
          case 130: 
            { return FINALLY;
            } 
            // fall through
          case 272: break;
          case 131: 
            { return RETHROW;
            } 
            // fall through
          case 273: break;
          case 132: 
            { return EXTENDS;
            } 
            // fall through
          case 274: break;
          case 133: 
            { return TYPEDEF;
            } 
            // fall through
          case 275: break;
          case 134: 
            { return LIBRARY;
            } 
            // fall through
          case 276: break;
          case 135: 
            { return DEFAULT;
            } 
            // fall through
          case 277: break;
          case 136: 
            { return EXTERNAL;
            } 
            // fall through
          case 278: break;
          case 137: 
            { return ABSTRACT;
            } 
            // fall through
          case 279: break;
          case 138: 
            { return CONTINUE;
            } 
            // fall through
          case 280: break;
          case 139: 
            { return OPERATOR;
            } 
            // fall through
          case 281: break;
          case 140: 
            { return DEFERRED;
            } 
            // fall through
          case 282: break;
          case 141: 
            { return COVARIANT;
            } 
            // fall through
          case 283: break;
          case 142: 
            { return IMPLEMENTS;
            } 
            // fall through
          case 284: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
