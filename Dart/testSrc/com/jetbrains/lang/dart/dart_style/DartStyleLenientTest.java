package com.jetbrains.lang.dart.dart_style;

import gnu.trove.THashSet;

import java.util.Set;

public class DartStyleLenientTest extends DartStyleTest {

  private static final Set<String> KNOWN_TO_FAIL = new THashSet<String>();

  // Initially, 31 strict failures pass, but 3 strict passes now fail.
  static {
    KNOWN_TO_FAIL.add("comments/classes.unit:147  force doc comment between classes to have two newlines before");
    KNOWN_TO_FAIL.add("comments/classes.unit:157  force doc comment between classes to have newline after");
    KNOWN_TO_FAIL.add("comments/classes.unit:39  inline block comment");
    KNOWN_TO_FAIL.add("comments/classes.unit:50  multiple inline block comments");
    KNOWN_TO_FAIL.add("comments/expressions.stmt:10  trailing line comment after non-split");
    KNOWN_TO_FAIL.add("comments/expressions.stmt:17  inside list literal");
    KNOWN_TO_FAIL.add("comments/expressions.stmt:2  trailing line comment after split");
    KNOWN_TO_FAIL.add("comments/expressions.stmt:54  no trailing space after operand preceding comment");
    KNOWN_TO_FAIL.add("comments/expressions.stmt:63  hard line caused by a comment before a nested line");
    KNOWN_TO_FAIL.add("comments/expressions.stmt:80  force named args to split on line comment in positional");
    KNOWN_TO_FAIL.add("comments/functions.unit:102  after '{' in param list");
    KNOWN_TO_FAIL.add("comments/functions.unit:106  before '}' in param list");
    KNOWN_TO_FAIL.add("comments/functions.unit:39  inline block comment");
    KNOWN_TO_FAIL.add("comments/functions.unit:50  multiple inline block comments");
    KNOWN_TO_FAIL.add("comments/functions.unit:78  after ',' in param list");
    KNOWN_TO_FAIL.add("comments/functions.unit:82  before '[' in param list");
    KNOWN_TO_FAIL.add("comments/functions.unit:86  after '[' in param list");
    KNOWN_TO_FAIL.add("comments/functions.unit:98  before '{' in param list");
    KNOWN_TO_FAIL.add("comments/lists.stmt:39  inline block comment");
    KNOWN_TO_FAIL.add("comments/lists.stmt:50  multiple inline block comments");
    KNOWN_TO_FAIL.add("comments/lists.stmt:62  line comment between items");
    KNOWN_TO_FAIL.add("comments/lists.stmt:70  line comments after last item");
    KNOWN_TO_FAIL.add("comments/lists.stmt:79  line comments after trailing comma");
    KNOWN_TO_FAIL.add("comments/maps.stmt:39  inline block comment");
    KNOWN_TO_FAIL.add("comments/maps.stmt:50  multiple inline block comments");
    KNOWN_TO_FAIL.add("comments/maps.stmt:62  line comment between items");
    KNOWN_TO_FAIL.add("comments/maps.stmt:70  line comments after last item");
    KNOWN_TO_FAIL.add("comments/maps.stmt:79  line comments after trailing comma");
    KNOWN_TO_FAIL.add("comments/maps.stmt:88  inside map literal");

    KNOWN_TO_FAIL.add("regression/0000/0000.stmt:1");
    KNOWN_TO_FAIL.add("regression/0000/0000.stmt:17  (indent 4)");
    KNOWN_TO_FAIL.add("regression/0000/0000.stmt:67  (indent 6)");
    KNOWN_TO_FAIL.add("regression/0000/0005.stmt:1");
    KNOWN_TO_FAIL.add("regression/0000/0006.stmt:1");
    KNOWN_TO_FAIL.add("regression/0000/0013.unit:2  no trailing whitespace before initializer comment");
    KNOWN_TO_FAIL.add("regression/0000/0013.unit:14  no trailing whitespace before initializer comment when params wrap");
    KNOWN_TO_FAIL.add("regression/0000/0014.unit:1  https://github.com/dart-lang/dart_style/issues/14");
    KNOWN_TO_FAIL.add("regression/0000/0019.stmt:15  (indent 4)");
    KNOWN_TO_FAIL.add("regression/0000/0019.stmt:21  (indent 6)");
    KNOWN_TO_FAIL.add("regression/0000/0021.stmt:12  preserve newlines but not indent");
    KNOWN_TO_FAIL.add("regression/0000/0022.stmt:1");
    KNOWN_TO_FAIL.add("regression/0000/0022.stmt:15  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0000/0025.stmt:1");
    KNOWN_TO_FAIL.add("regression/0000/0025.stmt:13  (indent 8)");
    KNOWN_TO_FAIL.add("regression/0000/0026.stmt:1");
    KNOWN_TO_FAIL.add("regression/0000/0027.stmt:1  (indent 6)");
    KNOWN_TO_FAIL.add("regression/0000/0028.unit:1");
    KNOWN_TO_FAIL.add("regression/0000/0029.stmt:1");
    KNOWN_TO_FAIL.add("regression/0000/0031.stmt:1");
    KNOWN_TO_FAIL.add("regression/0000/0037.stmt:1");
    KNOWN_TO_FAIL.add("regression/0000/0037.stmt:19");
    KNOWN_TO_FAIL.add("regression/0000/0040.stmt:10  (indent 6)");
    KNOWN_TO_FAIL.add("regression/0000/0042.unit:2");
    KNOWN_TO_FAIL.add("regression/0000/0044.stmt:10");
    KNOWN_TO_FAIL.add("regression/0000/0044.stmt:50");
    KNOWN_TO_FAIL.add("regression/0000/0046.stmt:1");
    KNOWN_TO_FAIL.add("regression/0000/0050.stmt:1  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0000/0055.unit:1  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0000/0055.unit:9  (indent 6)");
    KNOWN_TO_FAIL.add("regression/0000/0055.unit:17  (indent 12)");
    KNOWN_TO_FAIL.add("regression/0000/0056.stmt:1  (indent 8)");
    KNOWN_TO_FAIL.add("regression/0000/0057.stmt:1");
    KNOWN_TO_FAIL.add("regression/0000/0058.unit:1");
    KNOWN_TO_FAIL.add("regression/0000/0060.stmt:1");
    KNOWN_TO_FAIL.add("regression/0000/0061.unit:1");
    KNOWN_TO_FAIL.add("regression/0000/0068.stmt:1  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0000/0068.stmt:13");
    KNOWN_TO_FAIL.add("regression/0000/0069.stmt:13");
    KNOWN_TO_FAIL.add("regression/0000/0070.stmt:1  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0000/0072.unit:1");
    KNOWN_TO_FAIL.add("regression/0000/0075.unit:1");
    KNOWN_TO_FAIL.add("regression/0000/0076.unit:1");
    KNOWN_TO_FAIL.add("regression/0000/0077.stmt:1");
    KNOWN_TO_FAIL.add("regression/0000/0080.unit:1");
    KNOWN_TO_FAIL.add("regression/0000/0081.unit:1  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0000/0082.stmt:1");
    KNOWN_TO_FAIL.add("regression/0000/0084.unit:1");
    KNOWN_TO_FAIL.add("regression/0000/0090.stmt:1");
    KNOWN_TO_FAIL.add("regression/0000/0090.stmt:11");
    KNOWN_TO_FAIL.add("regression/0000/0095.unit:1  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0000/0096.unit:1");
    KNOWN_TO_FAIL.add("regression/0000/0098.stmt:1  (indent 4)");

    KNOWN_TO_FAIL.add("regression/0100/0100.stmt:1  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0100/0102.stmt:1  (indent 6)");
    KNOWN_TO_FAIL.add("regression/0100/0108.unit:1");
    KNOWN_TO_FAIL.add("regression/0100/0108.unit:74  pathologically deep");
    KNOWN_TO_FAIL.add("regression/0100/0108.unit:209");
    KNOWN_TO_FAIL.add("regression/0100/0108.unit:235");
    KNOWN_TO_FAIL.add("regression/0100/0110.stmt:1");
    KNOWN_TO_FAIL.add("regression/0100/0111.unit:1");
    KNOWN_TO_FAIL.add("regression/0100/0112.stmt:1  (indent 4)");
    KNOWN_TO_FAIL.add("regression/0100/0112.stmt:13  (indent 4)");
    KNOWN_TO_FAIL.add("regression/0100/0115.stmt:1");
    KNOWN_TO_FAIL.add("regression/0100/0115.stmt:15  (indent 4)");
    KNOWN_TO_FAIL.add("regression/0100/0119.stmt:9  (indent 6)");
    KNOWN_TO_FAIL.add("regression/0100/0121.stmt:1  (indent 6)");
    KNOWN_TO_FAIL.add("regression/0100/0122.unit:1");
    KNOWN_TO_FAIL.add("regression/0100/0122.unit:12");
    KNOWN_TO_FAIL.add("regression/0100/0130.unit:1  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0100/0135.stmt:1  (indent 4)");
    KNOWN_TO_FAIL.add("regression/0100/0137.stmt:1  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0100/0139.unit:1");
    KNOWN_TO_FAIL.add("regression/0100/0140.stmt:1  (indent 8)");
    KNOWN_TO_FAIL.add("regression/0100/0141.unit:1  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0100/0142.stmt:1  (indent 4)");
    KNOWN_TO_FAIL.add("regression/0100/0142.stmt:14  (indent 8)");
    KNOWN_TO_FAIL.add("regression/0100/0142.stmt:30  (indent 6)");
    KNOWN_TO_FAIL.add("regression/0100/0144.unit:1");
    KNOWN_TO_FAIL.add("regression/0100/0144.unit:15  a knock-on issue caused by the initial fix for the above");
    KNOWN_TO_FAIL.add("regression/0100/0151.unit:1");
    KNOWN_TO_FAIL.add("regression/0100/0155.stmt:1");
    KNOWN_TO_FAIL.add("regression/0100/0158.unit:1");
    KNOWN_TO_FAIL.add("regression/0100/0158.unit:18");
    KNOWN_TO_FAIL.add("regression/0100/0158.unit:31");
    KNOWN_TO_FAIL.add("regression/0100/0161.stmt:1  (indent 4)");
    KNOWN_TO_FAIL.add("regression/0100/0162.stmt:1");
    KNOWN_TO_FAIL.add("regression/0100/0162.stmt:57  (indent 4)");
    KNOWN_TO_FAIL.add("regression/0100/0184.unit:1");
    KNOWN_TO_FAIL.add("regression/0100/0185.stmt:1");
    KNOWN_TO_FAIL.add("regression/0100/0186.stmt:1");
    KNOWN_TO_FAIL.add("regression/0100/0187.stmt:1  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0100/0189.stmt:1  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0100/0189.stmt:20  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0100/0198.stmt:1  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0100/0199.stmt:1  (indent 4)");

    KNOWN_TO_FAIL.add("regression/0200/0203.stmt:8  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0200/0204.stmt:1");
    KNOWN_TO_FAIL.add("regression/0200/0204.stmt:10  (indent 8)");
    KNOWN_TO_FAIL.add("regression/0200/0205.stmt:8  (indent 6)");
    KNOWN_TO_FAIL.add("regression/0200/0206.stmt:1");
    KNOWN_TO_FAIL.add("regression/0200/0211.unit:1  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0200/0211.unit:16");
    KNOWN_TO_FAIL.add("regression/0200/0211.unit:32  (indent 4)");
    KNOWN_TO_FAIL.add("regression/0200/0211.unit:49  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0200/0211.unit:64  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0200/0212.stmt:1  (indent 4)");
    KNOWN_TO_FAIL.add("regression/0200/0217.stmt:9  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0200/0218.stmt:1  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0200/0221.unit:43  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0200/0221.unit:67");
    KNOWN_TO_FAIL.add("regression/0200/0222.stmt:1");
    KNOWN_TO_FAIL.add("regression/0200/0222.stmt:7  (indent 4)");
    KNOWN_TO_FAIL.add("regression/0200/0223.stmt:1");
    KNOWN_TO_FAIL.add("regression/0200/0224.stmt:1  (indent 4)");
    KNOWN_TO_FAIL.add("regression/0200/0224.stmt:48  (indent 22)");
    KNOWN_TO_FAIL.add("regression/0200/0224.stmt:49  (indent 22)");
    KNOWN_TO_FAIL.add("regression/0200/0228.unit:1");
    KNOWN_TO_FAIL.add("regression/0200/0229.unit:1");
    KNOWN_TO_FAIL.add("regression/0200/0232.unit:1");
    KNOWN_TO_FAIL.add("regression/0200/0235.unit:1");
    KNOWN_TO_FAIL.add("regression/0200/0236.unit:1");
    KNOWN_TO_FAIL.add("regression/0200/0237.unit:1");
    KNOWN_TO_FAIL.add("regression/0200/0238.unit:1");
    KNOWN_TO_FAIL.add("regression/0200/0241.unit:1");
    KNOWN_TO_FAIL.add("regression/0200/0242.unit:1");
    KNOWN_TO_FAIL.add("regression/0200/0243.stmt:1  (indent 4)");
    KNOWN_TO_FAIL.add("regression/0200/0243.stmt:16  (indent 10)");
    KNOWN_TO_FAIL.add("regression/0200/0247.unit:1  (indent 2)");
    KNOWN_TO_FAIL.add("regression/0200/0249.stmt:1  (indent 8)");
    KNOWN_TO_FAIL.add("regression/0200/0250.unit:1");
    KNOWN_TO_FAIL.add("regression/0200/0256.unit:1");
    KNOWN_TO_FAIL.add("regression/0200/0257.unit:1");
    KNOWN_TO_FAIL.add("regression/0200/0258.unit:1");
    KNOWN_TO_FAIL.add("regression/0200/0259.unit:1");

    KNOWN_TO_FAIL.add("regression/0300/0364.unit:1");
    KNOWN_TO_FAIL.add("regression/0300/0368.unit:1");
    KNOWN_TO_FAIL.add("regression/0300/0370.stmt:1");
    KNOWN_TO_FAIL.add("regression/0300/0384.stmt:1  (indent 4)");

    KNOWN_TO_FAIL.add("regression/other/analysis_server.unit:1  (indent 2)");
    KNOWN_TO_FAIL.add("regression/other/analysis_server.unit:11");
    KNOWN_TO_FAIL.add("regression/other/analysis_server.unit:28");
    KNOWN_TO_FAIL.add("regression/other/analysis_server.unit:75");
    KNOWN_TO_FAIL.add("regression/other/analysis_server.unit:99  (indent 6)");
    KNOWN_TO_FAIL.add("regression/other/analysis_server.unit:148  (indent 2)");
    KNOWN_TO_FAIL.add("regression/other/analysis_server.unit:160  (indent 2)");
    KNOWN_TO_FAIL.add("regression/other/dart2js.unit:1  (indent 4) preemption follows constraints");
    KNOWN_TO_FAIL.add("regression/other/pub.stmt:1  (indent 6)");
    KNOWN_TO_FAIL.add("regression/other/pub.stmt:22  (indent 4) was slow");

    KNOWN_TO_FAIL.add("selections/selections.stmt:26  inside comment");

    KNOWN_TO_FAIL.add("splitting/arguments.stmt:105  if split before first positional, split before first named too");
    KNOWN_TO_FAIL.add("splitting/arguments.stmt:112  if split before other positional, split before first named too");
    KNOWN_TO_FAIL.add("splitting/arguments.stmt:133  avoid splitting before single positional argument");
    KNOWN_TO_FAIL.add("splitting/arguments.stmt:138  multiple nested collections");
    KNOWN_TO_FAIL.add("splitting/arguments.stmt:150  trailing collections are not indented");
    KNOWN_TO_FAIL.add("splitting/arguments.stmt:166  all trailing collections");
    KNOWN_TO_FAIL.add("splitting/arguments.stmt:179  non-body non-preceding argument forces all bodies to indent");
    KNOWN_TO_FAIL.add("splitting/arguments.stmt:39  arguments, nested");
    KNOWN_TO_FAIL.add("splitting/arguments.stmt:53  force all arguments to split if an argument splits");
    KNOWN_TO_FAIL.add("splitting/arguments.stmt:71  do split empty argument list if it contains a comment");
    KNOWN_TO_FAIL.add("splitting/arguments.stmt:80  move just named to second line even though all fit on second");
    KNOWN_TO_FAIL.add("splitting/arguments.stmt:86  split named and keep positional on first");
    KNOWN_TO_FAIL.add("splitting/arguments.stmt:98  only named arguments and split");
    KNOWN_TO_FAIL.add("splitting/arrows.stmt:7  newline before fn expression should not force => to split");
    KNOWN_TO_FAIL.add("splitting/assignments.stmt:8  initializer doesn't fit one line, wrap inside, keep name");
    KNOWN_TO_FAIL.add("splitting/classes.unit:106  multiline mixin with multiline interface");
    KNOWN_TO_FAIL.add("splitting/classes.unit:126  force implements to split even if it would fit after with");
    KNOWN_TO_FAIL.add("splitting/classes.unit:59  one interface per line");
    KNOWN_TO_FAIL.add("splitting/classes.unit:77  one mixin per line");
    KNOWN_TO_FAIL.add("splitting/classes.unit:86  multiline mixin with single-line interface");
    KNOWN_TO_FAIL.add("splitting/classes.unit:97  single-line mixin with multiline interface");
    KNOWN_TO_FAIL.add("splitting/constructors.unit:35  try to keep constructor call together");
    KNOWN_TO_FAIL.add("splitting/constructors.unit:41  splits before ':' if the parameter list does not fit on one line");
    KNOWN_TO_FAIL.add("splitting/constructors.unit:51  indent parameters more if body is a wrapped =>");
    KNOWN_TO_FAIL.add("splitting/constructors.unit:61  wrap initializers past the ':'");
    KNOWN_TO_FAIL.add("splitting/constructors.unit:75  split at '=' in initializer");
    KNOWN_TO_FAIL.add("splitting/exports.unit:100  force both keywords to split even if first would fit on first line");
    KNOWN_TO_FAIL.add("splitting/exports.unit:106  force split in list");
    KNOWN_TO_FAIL.add("splitting/exports.unit:15  export moves all shows each to their own line");
    KNOWN_TO_FAIL.add("splitting/exports.unit:36  export moves hides each to their own line");
    KNOWN_TO_FAIL.add("splitting/exports.unit:52  multiline first");
    KNOWN_TO_FAIL.add("splitting/exports.unit:64  multiline second");
    KNOWN_TO_FAIL.add("splitting/exports.unit:76  multiline both");
    KNOWN_TO_FAIL.add("splitting/expressions.stmt:100  successive index arguments");
    KNOWN_TO_FAIL.add("splitting/expressions.stmt:106  is");
    KNOWN_TO_FAIL.add("splitting/expressions.stmt:111  as");
    KNOWN_TO_FAIL.add("splitting/expressions.stmt:116  null coalescing operator");
    KNOWN_TO_FAIL.add("splitting/expressions.stmt:18  conditions, same operator");
    KNOWN_TO_FAIL.add("splitting/expressions.stmt:45  split operator chain around block");
    KNOWN_TO_FAIL.add("splitting/expressions.stmt:55  indent previous line farther because later line is nested deeper");
    KNOWN_TO_FAIL.add("splitting/expressions.stmt:72  nested parenthesized are indented more");
    KNOWN_TO_FAIL.add("splitting/expressions.stmt:79  conditional operands are nested");
    KNOWN_TO_FAIL.add("splitting/expressions.stmt:89  index expressions can split after '['");
    KNOWN_TO_FAIL.add("splitting/expressions.stmt:94  index arguments nest");
    KNOWN_TO_FAIL.add("splitting/function_arguments.stmt:149  do nest because of nested many-arg fn");
    KNOWN_TO_FAIL.add("splitting/function_arguments.stmt:163  do nest because of nested many-arg method call");
    KNOWN_TO_FAIL.add("splitting/function_arguments.stmt:171  force named args to split on positional function");
    KNOWN_TO_FAIL.add("splitting/function_arguments.stmt:2  args before and after function forces nesting");
    KNOWN_TO_FAIL.add("splitting/function_arguments.stmt:21  trailing functions do not nest");
    KNOWN_TO_FAIL.add("splitting/function_arguments.stmt:39  arg between functions forces nesting");
    KNOWN_TO_FAIL.add("splitting/function_arguments.stmt:67  split in middle of leading args");
    KNOWN_TO_FAIL.add("splitting/imports.unit:105  force both keywords to split even if first would fit on first line");
    KNOWN_TO_FAIL.add("splitting/imports.unit:111  force split in list");
    KNOWN_TO_FAIL.add("splitting/imports.unit:20  import moves all shows each to their own line");
    KNOWN_TO_FAIL.add("splitting/imports.unit:41  import moves hides each to their own line");
    KNOWN_TO_FAIL.add("splitting/imports.unit:57  multiline first");
    KNOWN_TO_FAIL.add("splitting/imports.unit:6  wrap import at as");
    KNOWN_TO_FAIL.add("splitting/imports.unit:69  multiline second");
    KNOWN_TO_FAIL.add("splitting/imports.unit:81  multiline both");
    KNOWN_TO_FAIL.add("splitting/invocations.stmt:103  split before all properties if they don't fit on two lines");
    KNOWN_TO_FAIL.add("splitting/invocations.stmt:116  unsplit cascade unsplit method");
    KNOWN_TO_FAIL.add("splitting/invocations.stmt:120  split cascade unsplit method");
    KNOWN_TO_FAIL.add("splitting/invocations.stmt:126  unsplit cascade split method");
    KNOWN_TO_FAIL.add("splitting/invocations.stmt:13  don't split before implicit receiver");
    KNOWN_TO_FAIL.add("splitting/invocations.stmt:134  split cascade split method");
    KNOWN_TO_FAIL.add("splitting/invocations.stmt:145  cascade setters on method chain");
    KNOWN_TO_FAIL.add("splitting/invocations.stmt:155  conditional invocation");
    KNOWN_TO_FAIL.add("splitting/invocations.stmt:2  split all chained calls if they don't fit on one line");
    KNOWN_TO_FAIL.add("splitting/invocations.stmt:38  allow an inline chain before a hard newline but not after");
    KNOWN_TO_FAIL.add("splitting/invocations.stmt:49  allow an inline chain after a hard newline but not before");
    KNOWN_TO_FAIL.add("splitting/invocations.stmt:60  nest calls one more than target");
    KNOWN_TO_FAIL.add("splitting/invocations.stmt:66  split properties after a method chain");
    KNOWN_TO_FAIL.add("splitting/invocations.stmt:75  split properties in a method chain");
    KNOWN_TO_FAIL.add("splitting/invocations.stmt:84  do not split leading properties in a chain");
    KNOWN_TO_FAIL.add("splitting/invocations.stmt:91  do not split leading properties even if others splits");
    KNOWN_TO_FAIL.add("splitting/invocations.stmt:98  split between a pair of properties");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:109  split before all leading args");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:125  unsplit trailing args");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:134  split before trailing args");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:14  nothing but list args does not nest");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:145  split in middle of trailing args");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:155  split before all trailing args");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:181  split before one leading arg");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:2  args before and after list forces nesting");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:215  split before all args including trailing");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:224  named args before and after list forces nesting");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:236  nothing but named list args does not nest");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:256  some named list args does not nest");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:276  nest trailing named if there are non-body named");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:303  don't nest because of nested 1-arg fn");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:312  do nest because of nested many-arg fn");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:323  don't nest because of nested 1-arg method call");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:33  trailing lists do not nest");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:332  do nest because of nested many-arg method call");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:48  leading lists do not nest");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:63  arg between lists forces nesting");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:80  unsplit leading args");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:89  split before leading args");
    KNOWN_TO_FAIL.add("splitting/list_arguments.stmt:99  split in middle of leading args");
    KNOWN_TO_FAIL.add("splitting/lists.stmt:108  preserve newlines in lists containing a line comment");
    KNOWN_TO_FAIL.add("splitting/lists.stmt:120  wrap between elements even when newlines are preserved");
    KNOWN_TO_FAIL.add("splitting/lists.stmt:134  ignore line comment after the ']'");
    KNOWN_TO_FAIL.add("splitting/lists.stmt:143  preserves one blank line between elements");
    KNOWN_TO_FAIL.add("splitting/lists.stmt:21  splits outer lists even if they fit");
    KNOWN_TO_FAIL.add("splitting/lists.stmt:34  split indirect outer");
    KNOWN_TO_FAIL.add("splitting/lists.stmt:61  force multi-line because of contained block");
    KNOWN_TO_FAIL.add("splitting/lists.stmt:91  nested lists are forced to split");
    KNOWN_TO_FAIL.add("splitting/loops.stmt:14  split after second clause");
    KNOWN_TO_FAIL.add("splitting/loops.stmt:2  do not split before first clause");
    KNOWN_TO_FAIL.add("splitting/loops.stmt:24  split multiple variable declarations");
    KNOWN_TO_FAIL.add("splitting/loops.stmt:35  split between updaters splits everything");
    KNOWN_TO_FAIL.add("splitting/loops.stmt:43  nest wrapped initializer");
    KNOWN_TO_FAIL.add("splitting/loops.stmt:52  split in for-in loop");
    KNOWN_TO_FAIL.add("splitting/loops.stmt:57  split in while condition");
    KNOWN_TO_FAIL.add("splitting/loops.stmt:8  split after first clause");
    KNOWN_TO_FAIL.add("splitting/map_arguments.stmt:126  split before all trailing args");
    KNOWN_TO_FAIL.add("splitting/map_arguments.stmt:150  split before one leading arg");
    KNOWN_TO_FAIL.add("splitting/map_arguments.stmt:184  split before all args including trailing");
    KNOWN_TO_FAIL.add("splitting/map_arguments.stmt:2  args before and after map forces nesting");
    KNOWN_TO_FAIL.add("splitting/map_arguments.stmt:200  do nest because of nested many-arg fn");
    KNOWN_TO_FAIL.add("splitting/map_arguments.stmt:216  do nest because of nested many-arg method call");
    KNOWN_TO_FAIL.add("splitting/map_arguments.stmt:26  trailing maps do not nest");
    KNOWN_TO_FAIL.add("splitting/map_arguments.stmt:50  arg between maps forces nesting");
    KNOWN_TO_FAIL.add("splitting/map_arguments.stmt:79  split in middle of leading args");
    KNOWN_TO_FAIL.add("splitting/map_arguments.stmt:88  split before all leading args");
    KNOWN_TO_FAIL.add("splitting/maps.stmt:100  wrap between elements even when newlines are preserved");
    KNOWN_TO_FAIL.add("splitting/maps.stmt:116  ignore line comment after the ']'");
    KNOWN_TO_FAIL.add("splitting/maps.stmt:125  preserves one blank line between elements");
    KNOWN_TO_FAIL.add("splitting/maps.stmt:151  ignore newlines between keys and values");
    KNOWN_TO_FAIL.add("splitting/maps.stmt:18  splits outer maps even if they fit");
    KNOWN_TO_FAIL.add("splitting/maps.stmt:29  split indirect outer");
    KNOWN_TO_FAIL.add("splitting/maps.stmt:53  force multi-line because of contained block");
    KNOWN_TO_FAIL.add("splitting/maps.stmt:88  preserve newlines in maps containing a line comment");
    KNOWN_TO_FAIL.add("splitting/mixed.stmt:110  list inside method chain");
    KNOWN_TO_FAIL.add("splitting/mixed.stmt:127  binary operators in ascending precedence");
    KNOWN_TO_FAIL.add("splitting/mixed.stmt:140  binary operators in descending precedence");
    KNOWN_TO_FAIL.add("splitting/mixed.stmt:153  mixed multiplicative operators");
    KNOWN_TO_FAIL.add("splitting/mixed.stmt:161  mixed additive operators");
    KNOWN_TO_FAIL.add("splitting/mixed.stmt:169  mixed shift operators");
    KNOWN_TO_FAIL.add("splitting/mixed.stmt:19  nested expression indentation");
    KNOWN_TO_FAIL.add("splitting/mixed.stmt:191  choose extra nesting if it leads to better solution");
    KNOWN_TO_FAIL.add("splitting/mixed.stmt:29  does not extra indent when multiple levels of nesting happen on one line");
    KNOWN_TO_FAIL.add("splitting/mixed.stmt:39  forces extra indent and lines, if later line needs it");
    KNOWN_TO_FAIL.add("splitting/mixed.stmt:48  function inside a collection");
    KNOWN_TO_FAIL.add("splitting/mixed.stmt:60  function inside an argument list");
    KNOWN_TO_FAIL.add("splitting/mixed.stmt:7  prefers to wrap before '.'");
    KNOWN_TO_FAIL.add("splitting/mixed.stmt:71  unnested function inside nested expression");
    KNOWN_TO_FAIL.add("splitting/mixed.stmt:79  nested function inside nested expression");
    KNOWN_TO_FAIL.add("splitting/mixed.stmt:92  wrap before =>");
    KNOWN_TO_FAIL.add("splitting/mixed.stmt:98  wrap after =>");
    KNOWN_TO_FAIL.add("splitting/parameters.stmt:2  many parameters");
    KNOWN_TO_FAIL.add("splitting/parameters.stmt:23  parameters fit but ) does not");
    KNOWN_TO_FAIL.add("splitting/parameters.stmt:32  parameters fit but } does not");
    KNOWN_TO_FAIL.add("splitting/parameters.stmt:84  split optional onto one per line if they don't fit on one line");
    KNOWN_TO_FAIL.add("splitting/parameters.unit:11  indent parameters more if body is a wrapped =>");
    KNOWN_TO_FAIL.add("splitting/statements.stmt:11  split in do-while condition");
    KNOWN_TO_FAIL.add("splitting/statements.stmt:16  split in switch value");
    KNOWN_TO_FAIL.add("splitting/statements.stmt:6  wrapped assert");
    KNOWN_TO_FAIL.add("splitting/strings.stmt:50  wrap first line if needed");
    KNOWN_TO_FAIL.add("splitting/type_arguments.stmt:11  split before first if needed");
    KNOWN_TO_FAIL.add("splitting/type_arguments.stmt:16  split in middle if fit in two lines");
    KNOWN_TO_FAIL.add("splitting/type_arguments.stmt:21  split one per line if they don't fit in two lines");
    KNOWN_TO_FAIL.add("splitting/type_arguments.stmt:6  prefer to split between args even when they all fit on next line");
    KNOWN_TO_FAIL.add("splitting/type_parameters.unit:11  split before first if needed");
    KNOWN_TO_FAIL.add("splitting/type_parameters.unit:16  split in middle if fit in two lines");
    KNOWN_TO_FAIL.add("splitting/type_parameters.unit:21  split one per line if they don't fit in two lines");
    KNOWN_TO_FAIL.add("splitting/type_parameters.unit:6  prefer to split between params even when they all fit on next line");
    KNOWN_TO_FAIL.add("splitting/variables.stmt:12  initializer doesn't fit one line, wrap inside, keep name");
    KNOWN_TO_FAIL.add("splitting/variables.stmt:17  initializer fits one line");
    KNOWN_TO_FAIL.add("splitting/variables.stmt:22  initializer doesn't fit one line, cannot be split");
    KNOWN_TO_FAIL.add("splitting/variables.stmt:27  long function call initializer");
    KNOWN_TO_FAIL.add("splitting/variables.stmt:32  long binary expression initializer");
    KNOWN_TO_FAIL.add("splitting/variables.stmt:37  lots of variables with no initializers");
    KNOWN_TO_FAIL.add("splitting/variables.stmt:44  multiple variables stay on one line if they fit");
    KNOWN_TO_FAIL.add("splitting/variables.stmt:48");
    KNOWN_TO_FAIL.add("splitting/variables.stmt:62  dartbug.com/16379");

    KNOWN_TO_FAIL.add("whitespace/metadata.unit:68  allow inline annotations before members"); // fails due to blank lines

    // Lenient failures that work in strict mode.
    KNOWN_TO_FAIL.add("regression/0100/0178.unit:1");
    KNOWN_TO_FAIL.add("comments/functions.unit:43  multiple comments on opening line");
    KNOWN_TO_FAIL.add("comments/top_level.unit:195  inline block comment between directives");

    //KNOWN_TO_FAIL.clear();
  }

  /**
   * Run a test defined in "*.unit" or "*.stmt" file inside directory <code>dirName</code>.
   */
  protected void runTestInDirectory(String dirName) throws Exception {
    super.runTestInDirectory(dirName, KNOWN_TO_FAIL);
  }

  protected SourceCode extractSourceSelection(String input, String expectedOutput, boolean isCompilationUnit) {
    return extractSelection(expectedOutput, isCompilationUnit);
  }
}
