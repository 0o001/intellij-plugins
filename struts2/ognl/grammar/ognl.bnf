/*
 * Copyright 2013 The authors
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
{
  classHeader="apache2.txt"

  psiImplUtilClass="com.intellij.lang.ognl.psi.impl.OgnlPsiUtil"

  parserClass="com.intellij.lang.ognl.parser.OgnlParser"
  stubParserClass="com.intellij.lang.ognl.parser.GeneratedParserUtilBase"
  // generateStubParser=true

  implements="com.intellij.lang.ognl.psi.OgnlPsiCompositeElement"
  extends="com.intellij.lang.ognl.psi.impl.OgnlPsiCompositeElementImpl"

  psiClassPrefix="Ognl"
  psiImplClassSuffix="Impl"
  psiPackage="com.intellij.lang.ognl.psi"
  psiImplPackage="com.intellij.lang.ognl.psi.impl"

  elementTypeHolderClass="com.intellij.lang.ognl.OgnlTypes"
  elementTypePrefix=""
  elementTypeClass="com.intellij.lang.ognl.psi.OgnlTokenType"
  tokenTypeClass="com.intellij.lang.ognl.psi.OgnlTokenType"

  extends(".*(Expression|Literal)")="expression"

  tokens = [
    EXPRESSION_START="%{"
    EXPRESSION_END="}"

    DOT="."
    COMMA=","
    COLON=":"
    SEMICOLON=";"

    LPARENTH="("
    RPARENTH=")"
    LBRACKET="["
    RBRACKET="]"
    LBRACE="{"
    RBRACE="}"

    AT="@"
    QUESTION="?"
    DOLLAR="$"
    HASH="#"

    PLUS="+"
    MINUS="-"
    MULTIPLY="*"
    DIVISION="/"
    MODULO="%"

    NEGATE="!"
    NOT_EQUAL="!="
    EQUAL="=="
    EQ="="
    LESS="<"
    LESS_EQUAL="<="
    GREATER=">"
    GREATER_EQUAL=">="

    EQ_KEYWORD="eq"
    NEQ_KEYWORD="neq"
    LT_KEYWORD="lt"
    LT_EQ_KEYWORD="lte"
    GT_KEYWORD="gt"
    GT_EQ_KEYWORD="gte"

    AND_AND="&&"
    OR_OR="||"
    AND_KEYWORD="and"
    OR_KEYWORD="or"
    NOT_KEYWORD="not"

    OR="|"
    XOR="^"
    AND="&"
    NOT="~"

    BAND_KEYWORD="band"
    BOR_KEYWORD="bor"
    XOR_KEYWORD="xor"

    NEW_KEYWORD="new"
    TRUE_KEYWORD="true"
    FALSE_KEYWORD="false"
    NULL_KEYWORD="null"

    INSTANCEOF_KEYWORD="instanceof"
    NOT_IN_KEYWORD="not in"
    IN_KEYWORD="in"

    SHIFT_LEFT="<<"
    SHIFT_RIGHT=">>"
    SHIFT_RIGHT_LOGICAL=">>>"

    SHIFT_LEFT_KEYWORD="shl"
    SHIFT_RIGHT_KEYWORD="shr"
    SHIFT_RIGHT_LOGICAL_KEYWORD="ushr"
  ]
}

root ::= EXPRESSION_START rootElement EXPRESSION_END { pin=1 recoverUntil="rootRecover" }
private rootRecover ::= !(EXPRESSION_END)
private rootElement ::= expression

expression ::= sequenceExpression |
               parenthesizedExpression |
               variableAssignmentExpression |
               conditionalExpression |
               binaryExpression |
               newExpression |
               methodCallExpression |
               indexedExpression |
               variableExpression |
               referenceExpression |
               unaryExpression |
               literalExpression
{
  methods=[
    getType
  ]
}

private numberLiteralExpression ::= INTEGER_LITERAL | BIG_INTEGER_LITERAL | DOUBLE_LITERAL | BIG_DECIMAL_LITERAL
private booleanLiteralExpression ::= TRUE_KEYWORD | FALSE_KEYWORD
private textLiteralExpression ::= STRING_LITERAL | CHARACTER_LITERAL  // TODO detect missing closing quote/tick
literalExpression ::= numberLiteralExpression |
                      textLiteralExpression |
                      booleanLiteralExpression |
                      NULL_KEYWORD {
  methods=[
    getConstantValue
  ]
}

referenceExpression ::= ('@')? IDENTIFIER ('.' IDENTIFIER) * ('@' IDENTIFIER)? {
  mixin="com.intellij.lang.ognl.psi.impl.OgnlReferenceExpressionBase"
}

variableExpression ::= '#' IDENTIFIER {
  pin=1
  mixin="com.intellij.lang.ognl.psi.impl.OgnlVariableExpressionBase"
}

variableAssignmentExpression ::= '#' IDENTIFIER '=' expression {
  methodRenames("getExpression")="getAssignment"
  pin=3
}

private methodCallParameters ::= expression? (',' expression)*
methodCallExpression ::= referenceExpression '(' methodCallParameters ')'  {
  methods=[
    method="expression[0]"
    getParameterCount
  ]
  pin=2
}

private expressionSequenceRequired ::= expression (',' expression)+  { pin(".*")=1 }
sequenceExpression ::= '{' expressionSequenceRequired '}' { pin=1 }

indexedExpression ::= (referenceExpression | variableExpression) '[' expression ']' {
  methods=[
    expression="expression[1]"
  ]
  pin=2
}

parenthesizedExpression ::= '(' expression ')' { pin=1 }

// binary ----------------------------------------------------------------
private plusMinusOperations ::= '+' | '-'
private divideMultiplyOperations ::=  '*' | '/' | '%'
private bitwiseOperations ::= NEGATE | NOT
private booleanOperations ::= "&&" | "||" |
                              "and" | "or" |
                              "not"
private bitwiseBooleanOperations ::=  OR | XOR | AND | BAND_KEYWORD | BOR_KEYWORD | XOR_KEYWORD
private equalityOperations ::= "==" | "!=" |
                               "eq" | "neq"
private relationalOperations ::= '<'  | "<="  | '>'  | ">=" |
                                 "lt" | "lte" | "gt" | "gte"
private shiftOperations ::= SHIFT_LEFT | SHIFT_RIGHT | SHIFT_RIGHT_LOGICAL |
                            SHIFT_LEFT_KEYWORD | SHIFT_RIGHT_KEYWORD | SHIFT_RIGHT_LOGICAL_KEYWORD
private instanceOfOperation ::= INSTANCEOF_KEYWORD
private setOperations ::= NOT_IN_KEYWORD | IN_KEYWORD
private binaryOperations ::=
                           plusMinusOperations |
                           divideMultiplyOperations |
                           bitwiseBooleanOperations |
                           instanceOfOperation |
                           shiftOperations |
                           booleanOperations |
                           equalityOperations |
                           relationalOperations |
                           setOperations
                           { name="operator" }
binaryExpression ::= expression binaryOperations expression {
  methods=[
    left="expression[0]"
    right="expression[1]"
    getOperator
  ]
  pin=2
}

private unaryOperator ::= bitwiseOperations |
                          '+' | '-' |
                          '!' | "not" | '~'
unaryExpression ::= unaryOperator expression {
  pin=1
  methods=[
    getUnaryOperator
  ]
}

conditionalExpression ::= expression QUESTION expression COLON expression {
  methods=[
    condition="expression[0]"
    then="expression[1]"
    else="expression[2]"
  ]
  pin=2
}

private arrayConstructorExpression ::= '[' expression? ']' sequenceExpression?
private constructorExpression ::= '(' methodCallParameters ')'
newExpression ::= NEW_KEYWORD referenceExpression (arrayConstructorExpression | constructorExpression) {
  pin(".*")=1
}


// TODO:
// projection/selection: e1.{e2} / e1.{?e2}
// sub-expression: e1.(e2)
// chained sub-expression: headline.parent.(ensureLoaded(), name)
// list creation: { e, ... } --> already via sequence?
// array creation: new array-component-class[] { e, ... }
// map creation: #{ e1 : e2, ... }
// map creation w/ class: #@classname@{ e1 : e2, ... }
// lambda: :[ e ]