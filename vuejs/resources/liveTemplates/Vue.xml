<?xml version="1.0" encoding="UTF-8"?>

<templateSet group="Vue">
<template name="vstore-import" value="import { store } from &apos;./store/store&apos;;&#10;" description="import vuex store into main.js" toReformat="true" toShortenFQNames="true">
<context>
  <option name="VUE_SCRIPT" value="true" />
</context>
</template>

<template name="vaction" value="actions: {&#10;	$updateValue$({commit}, $payload$) {&#10;		commit($updateValue$, $payload$);&#10;	}&#10;}" description="vuex action" toReformat="true" toShortenFQNames="true">
<variable name="updateValue" expression="" defaultValue="&quot;updateValue&quot;" alwaysStopAt="true" />
<variable name="payload" expression="" defaultValue="&quot;payload&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
</context>
</template>

<template name="vgetter" value="getters: {&#10;	value: $value$ =&gt; {&#10;		return state.$value$;&#10;	}&#10;}" description="vuex getter" toReformat="true" toShortenFQNames="true">
<variable name="value" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
</context>
</template>

<template name="vmutation" value="mutations: {&#10;	$updateValue$(state, $payload$) {&#10;		state.$value$ = $payload$;&#10;	}&#10;}" description="vuex mutation" toReformat="true" toShortenFQNames="true">
<variable name="updateValue" expression="" defaultValue="&quot;updateValue&quot;" alwaysStopAt="true" />
<variable name="payload" expression="" defaultValue="&quot;payload&quot;" alwaysStopAt="true" />
<variable name="value" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
</context>
</template>

<template name="vstore" value="import Vue from &apos;vue&apos;;&#10;import Vuex from &apos;vuex&apos;;&#10;&#10;Vue.use(Vuex);&#10;&#10;export const store = new Vuex.Store({&#10;	state: {&#10;		$key$: $value$&#10;	}&#10;});" description="Base for Vuex store" toReformat="true" toShortenFQNames="true">
<variable name="key" expression="" defaultValue="&quot;key&quot;" alwaysStopAt="true" />
<variable name="value" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_SCRIPT" value="true" />
</context>
</template>

<template name="vdec" value="return this.$variable$ -= 1;" description="decrement" toReformat="true" toShortenFQNames="true">
<variable name="variable" expression="" defaultValue="&quot;num&quot;" alwaysStopAt="true" />
<context>
  <option name="JS_STATEMENT" value="true" />
</context>
</template>

<template name="vinc" value="return this.$variable$ += 1;" description="increment" toReformat="true" toShortenFQNames="true">
<variable name="variable" expression="" defaultValue="&quot;num&quot;" alwaysStopAt="true" />
<context>
  <option name="JS_STATEMENT" value="true" />
</context>
</template>

<template name="vcomputed" value="computed: {&#10;	$name$() {&#10;		return this.$data$ $END$&#10;	}&#10;}," description="computed value" toReformat="true" toShortenFQNames="true">
<variable name="name" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
<variable name="data" expression="" defaultValue="&quot;data&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
</context>
</template>

<template name="vc-direct" value="Vue.directive(&apos;$directiveName$&apos;, {&#10;	bind(el, binding, vnode) {&#10;		el.style.$arg$ = binding.value.$arg$;&#10;	}&#10;});" description="vue custom directive" toReformat="true" toShortenFQNames="true">
<variable name="directiveName" expression="" defaultValue="&quot;directiveName&quot;" alwaysStopAt="true" />
<variable name="arg" expression="" defaultValue="&quot;arg&quot;" alwaysStopAt="true" />
<context>
  <option name="JS_STATEMENT" value="true" />
  <option name="VUE_SCRIPT" value="true" />
</context>
</template>

<template name="vdata" value="data() {&#10;	return {&#10;		$key$: $value$&#10;	}&#10;}," description="Vue Component Data" toReformat="true" toShortenFQNames="true">
<variable name="key" expression="" defaultValue="&quot;key&quot;" alwaysStopAt="true" />
<variable name="value" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
</context>
</template>

<template name="vfilter" value="filters: {&#10;	$fnName$: function($value$) {&#10;		return $value$$END$;&#10;	}&#10;}" description="vue filter" toReformat="true" toShortenFQNames="true">
<variable name="fnName" expression="" defaultValue="&quot;fnName&quot;" alwaysStopAt="true" />
<variable name="value" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
</context>
</template>

<template name="vimport-export" value="import $Name$ from &apos;~components/$Name$.vue&apos;&#10;&#10;export default {&#10;	components: {&#10;		$Name$&#10;	},&#10;}" description="import a component and include it in export default" toReformat="true" toShortenFQNames="true">
<variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_SCRIPT" value="true" />
</context>
</template>

<template name="vimport" value="import $New$ from &apos;./components/$New$.vue&apos;;&#10;" description="Import one component into another" toReformat="true" toShortenFQNames="true">
<variable name="New" expression="" defaultValue="&quot;New&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_SCRIPT" value="true" />
</context>
</template>

<template name="vimport-gsap" value="import { TimelineMax, $Ease$ } from &apos;gsap&apos;" description="component methods options that dispatch an action from vuex store." toReformat="true" toShortenFQNames="true">
<variable name="Ease" expression="" defaultValue="&quot;Ease&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_SCRIPT" value="true" />
</context>
</template>

<template name="vimport-lib" value="import { $libName$ } from &apos;$libName$&apos;&#10;" description="import a library" toReformat="true" toShortenFQNames="true">
<variable name="libName" expression="" defaultValue="&quot;libName&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_SCRIPT" value="true" />
</context>
</template>

<template name="vimport-c" value="components: {&#10;	$New$,&#10;}" description="Import one component into another, within export statement" toReformat="true" toShortenFQNames="true">
<variable name="New" expression="" defaultValue="&quot;New&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
</context>
</template>

<template name="vmethod" value="methods: {&#10;	$name$() {&#10;		$END$&#10;	}&#10;}," description="vue method" toReformat="true" toShortenFQNames="true">
<variable name="name" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
</context>
</template>

<template name="vmixin" value="const $mixinName$ = {&#10;	mounted() {&#10;		console.log(&apos;hello from mixin!&apos;)&#10;	},&#10;}" description="vue mixin" toReformat="true" toShortenFQNames="true">
<variable name="mixinName" expression="" defaultValue="&quot;mixinName&quot;" alwaysStopAt="true" />
<context>
  <option name="JS_STATEMENT" value="true" />
</context>
</template>

<template name="vprops" value="props: {&#10;	$propName$: {&#10;		type: $number$,&#10;		default: $END$&#10;	},&#10;}," description="Vue Props with Default" toReformat="true" toShortenFQNames="true">
<variable name="propName" expression="" defaultValue="&quot;propName&quot;" alwaysStopAt="true" />
<variable name="number" expression="" defaultValue="&quot;number&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
</context>
</template>

<template name="vanimhook-js" value="methods: {&#10;	beforeEnter(el) {&#10;		console.log(&apos;beforeEnter&apos;);&#10;	},&#10;	enter(el, done) {&#10;		console.log(&apos;enter&apos;);&#10;		done();&#10;	},&#10;	beforeLeave(el) {&#10;		console.log(&apos;beforeLeave&apos;);&#10;	},&#10;	leave(el, done) {&#10;		console.log(&apos;leave&apos;);&#10;		done();&#10;	},&#10;}," description="js hooks for transition component" toReformat="true" toShortenFQNames="true">
<context>
  <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
</context>
</template>

<template name="vmixin-use" value="mixins: [$mixinName$]" description="vue use mixin" toReformat="true" toShortenFQNames="true">
<variable name="mixinName" expression="" defaultValue="&quot;mixinName&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
</context>
</template>

<template name="vwatcher" value="watch: {&#10;	$data$($newValue$, $oldValue$) {&#10;		$END$&#10;	}&#10;}," description="vue watcher" toReformat="true" toShortenFQNames="true">
<variable name="data" expression="" defaultValue="&quot;data&quot;" alwaysStopAt="true" />
<variable name="newValue" expression="" defaultValue="&quot;newValue&quot;" alwaysStopAt="true" />
<variable name="oldValue" expression="" defaultValue="&quot;oldValue&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
</context>
</template>

<template name="vclass" value="&lt;$div$ :class=&quot;{ $className$: $data$ }&quot;&gt;&lt;/$div$&gt;" description="vue class binding" toReformat="true" toShortenFQNames="true">
<variable name="div" expression="" defaultValue="&quot;div&quot;" alwaysStopAt="true" />
<variable name="className" expression="" defaultValue="&quot;className&quot;" alwaysStopAt="true" />
<variable name="data" expression="" defaultValue="&quot;data&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_TEMPLATE" value="true" />
</context>
</template>

<template name="vclass-obj" value="&lt;$div$ :class=&quot;[$classNameA$, $classNameB$]&quot;&gt;&lt;/$div$&gt;" description="vue several classes binding" toReformat="true" toShortenFQNames="true">
<variable name="div" expression="" defaultValue="&quot;div&quot;" alwaysStopAt="true" />
<variable name="classNameA" expression="" defaultValue="&quot;classNameA&quot;" alwaysStopAt="true" />
<variable name="classNameB" expression="" defaultValue="&quot;classNameB&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_TEMPLATE" value="true" />
</context>
</template>

<template name="vel-props" value="&lt;$component$ :$propName$=&quot;$END$&quot;&gt;&lt;/$component$&gt;" description="component element with props" toReformat="true" toShortenFQNames="true">
<variable name="component" expression="" defaultValue="&quot;component&quot;" alwaysStopAt="true" />
<variable name="propName" expression="" defaultValue="&quot;propName&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_TEMPLATE" value="true" />
</context>
</template>

<template name="vsrc" value="&lt;img :src=&quot;&apos;/path/to/images/&apos; + $fileName$&quot; alt=&quot;$altText$&quot;/&gt;" description="image source binding" toReformat="true" toShortenFQNames="true">
<variable name="fileName" expression="" defaultValue="&quot;fileName&quot;" alwaysStopAt="true" />
<variable name="altText" expression="" defaultValue="&quot;altText&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_TEMPLATE" value="true" />
</context>
</template>

<template name="vclass-obj-mult" value="&lt;$div$ :class=&quot;[$classNameA$, {$classNameB$ : $condition$}]&quot;&gt;&lt;/$div$&gt;" description="vue multiple conditional class bindings" toReformat="true" toShortenFQNames="true">
<variable name="div" expression="" defaultValue="&quot;div&quot;" alwaysStopAt="true" />
<variable name="classNameA" expression="" defaultValue="&quot;classNameA&quot;" alwaysStopAt="true" />
<variable name="classNameB" expression="" defaultValue="&quot;classNameB&quot;" alwaysStopAt="true" />
<variable name="condition" expression="" defaultValue="&quot;condition&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_TEMPLATE" value="true" />
</context>
</template>

<template name="vstyle" value="&lt;$div$ :style=&quot;{ fontSize: $data$ + &apos;px&apos; }&quot;&gt;&lt;/$div$&gt;" description="vue inline style binding" toReformat="true" toShortenFQNames="true">
<variable name="div" expression="" defaultValue="&quot;div&quot;" alwaysStopAt="true" />
<variable name="data" expression="" defaultValue="&quot;data&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_TEMPLATE" value="true" />
</context>
</template>

<template name="vstyle-obj" value="&lt;$div$ :style=&quot;[$styleObjectA$, $styleObjectB$]&quot;&gt;&lt;/$div$&gt;" description="vue inline style binding, objects" toReformat="true" toShortenFQNames="true">
<variable name="div" expression="" defaultValue="&quot;div&quot;" alwaysStopAt="true" />
<variable name="styleObjectA" expression="" defaultValue="&quot;styleObjectA&quot;" alwaysStopAt="true" />
<variable name="styleObjectB" expression="" defaultValue="&quot;styleObjectB&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_TEMPLATE" value="true" />
</context>
</template>

<template name="vanim" value="&lt;transition&#10;	mode=&quot;out-in&quot;&#10;	@before-enter=&quot;beforeEnter&quot;&#10;	@enter=&quot;enter&quot;&#10;&#10;	@before-leave=&quot;beforeLeave&quot;&#10;	@leave=&quot;leave&quot;&#10;	:css=&quot;false&quot;&gt;&#10;&#10;&lt;/transition&gt;" description="transition component with js hooks" toReformat="true" toShortenFQNames="true">
<context>
  <option name="VUE_TEMPLATE" value="true" />
</context>
</template>

<template name="vfor" value="&lt;$div$ v-for=&quot;$item$ in $item$s&quot; :key=&quot;$item$.id&quot;&gt;&#10;	{{ $item$ }}&#10;&lt;/$div$&gt;" description="vfor statement" toReformat="true" toShortenFQNames="true">
<variable name="div" expression="" defaultValue="&quot;div&quot;" alwaysStopAt="true" />
<variable name="item" expression="" defaultValue="&quot;item&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_TEMPLATE" value="true" />
</context>
</template>

<template name="vmodel" value="&lt;input v-model=&quot;$data$&quot; type=&quot;text&quot; /&gt;" description="v-model directive" toReformat="true" toShortenFQNames="true">
<variable name="data" expression="" defaultValue="&quot;data&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_TEMPLATE" value="true" />
</context>
</template>

<template name="vmodel-num" value="&lt;input v-model.number=&quot;$numData$&quot; type=&quot;number&quot; step=&quot;1&quot; /&gt;" description="v-model directive number input" toReformat="true" toShortenFQNames="true">
<variable name="numData" expression="" defaultValue="&quot;numData&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_TEMPLATE" value="true" />
</context>
</template>

<template name="von" value="@click=&quot;$handler$($arg$, $event$)&quot;" description="v-on click handler with arguments" toReformat="true" toShortenFQNames="true">
<variable name="handler" expression="" defaultValue="&quot;handler&quot;" alwaysStopAt="true" />
<variable name="arg" expression="" defaultValue="&quot;arg&quot;" alwaysStopAt="true" />
<variable name="event" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
<context>
  <option name="VUE_INSIDE_TAG" value="true" />
</context>
</template>

<template name="vbase" value="&lt;template&gt;&#10;	&lt;div&gt;&#10;&#10;	&lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script&gt;&#10;	export default {&#10;		$END$&#10;	}&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;&#10;&lt;/style&gt;" description="Base for Vue File" toReformat="true" toShortenFQNames="true">
<context>
  <option name="VUE_TOP_LEVEL" value="true" />
</context>
</template>
</templateSet>