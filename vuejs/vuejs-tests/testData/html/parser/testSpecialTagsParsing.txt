HtmlFile:test.vue
  PsiElement(HTML_DOCUMENT)
    PsiElement(XML_PROLOG)
      <empty list>
    HtmlTag:template
      XmlToken:XML_START_TAG_START('<')
      XmlToken:XML_NAME('template')
      XmlToken:XML_TAG_END('>')
      XmlText
        PsiWhiteSpace('\n')
      HtmlTag:head
        XmlToken:XML_START_TAG_START('<')
        XmlToken:XML_NAME('head')
        XmlToken:XML_TAG_END('>')
        HtmlTag:title
          XmlToken:XML_START_TAG_START('<')
          XmlToken:XML_NAME('title')
          XmlToken:XML_TAG_END('>')
          XmlText
            XmlToken:XML_DATA_CHARACTERS('This is my <title>')
          XmlToken:XML_END_TAG_START('</')
          XmlToken:XML_NAME('title')
          XmlToken:XML_TAG_END('>')
      HtmlTag:body
        XmlToken:XML_START_TAG_START('<')
        XmlToken:XML_NAME('body')
        XmlToken:XML_TAG_END('>')
        XmlText
          PsiWhiteSpace('\n')
        HtmlTag:script
          XmlToken:XML_START_TAG_START('<')
          XmlToken:XML_NAME('script')
          PsiWhiteSpace(' ')
          PsiElement(XML_ATTRIBUTE)
            XmlToken:XML_NAME('type')
            XmlToken:XML_EQ('=')
            PsiElement(XML_ATTRIBUTE_VALUE)
              XmlToken:XML_ATTRIBUTE_VALUE_START_DELIMITER('"')
              XmlToken:XML_ATTRIBUTE_VALUE_TOKEN('foo/bar')
              XmlToken:XML_ATTRIBUTE_VALUE_END_DELIMITER('"')
          XmlToken:XML_TAG_END('>')
          XmlText
            XmlToken:XML_DATA_CHARACTERS('<div> </div>')
          XmlToken:XML_END_TAG_START('</')
          XmlToken:XML_NAME('script')
          XmlToken:XML_TAG_END('>')
        XmlText
          PsiWhiteSpace('\n')
        HtmlTag:style
          XmlToken:XML_START_TAG_START('<')
          XmlToken:XML_NAME('style')
          PsiWhiteSpace(' ')
          PsiElement(XML_ATTRIBUTE)
            XmlToken:XML_NAME('type')
            XmlToken:XML_EQ('=')
            PsiElement(XML_ATTRIBUTE_VALUE)
              XmlToken:XML_ATTRIBUTE_VALUE_START_DELIMITER(''')
              XmlToken:XML_ATTRIBUTE_VALUE_TOKEN('foo/bar')
              XmlToken:XML_ATTRIBUTE_VALUE_END_DELIMITER(''')
          XmlToken:XML_TAG_END('>')
          PsiElement(CSS_LAZY_STYLESHEET)
            PsiElement(CSS_STYLESHEET)
              PsiElement(CSS_RULESET_LIST)
                PsiErrorElement:Unexpected token
                  <empty list>
                PsiElement(BAD_CHARACTER)('<')
                PsiElement(CSS_RULESET)
                  PsiElement(CSS_SELECTOR_LIST)
                    PsiElement(CSS_SELECTOR)
                      PsiElement(CSS_SIMPLE_SELECTOR)
                        PsiElement(CSS_IDENT)('my')
                        PsiElement(CSS_SELECTOR_SUFFIX_LIST)
                          <empty list>
                      PsiElement(CSS_GT)('>')
                      PsiElement(CSS_SIMPLE_SELECTOR)
                        PsiElement(CSS_SELECTOR_SUFFIX_LIST)
                          PsiErrorElement:Unexpected token
                            PsiElement(BAD_CHARACTER)('<')
                      PsiElement(CSS_SIMPLE_SELECTOR)
                        PsiElement(CSS_IDENT)('style')
                        PsiElement(CSS_SELECTOR_SUFFIX_LIST)
                          <empty list>
                      PsiElement(CSS_GT)('>')
          XmlToken:XML_END_TAG_START('</')
          XmlToken:XML_NAME('style')
          XmlToken:XML_TAG_END('>')
        XmlText
          PsiWhiteSpace('\n')
        HtmlTag:textarea
          XmlToken:XML_START_TAG_START('<')
          XmlToken:XML_NAME('textarea')
          XmlToken:XML_TAG_END('>')
          XmlText
            XmlToken:XML_DATA_CHARACTERS('this {{text}} {area} <is></cool>')
          XmlToken:XML_END_TAG_START('</')
          XmlToken:XML_NAME('textarea')
          XmlToken:XML_TAG_END('>')
        XmlText
          PsiWhiteSpace('\n')
        PsiErrorElement:Element body is not closed
          <empty list>
      XmlToken:XML_END_TAG_START('</')
      XmlToken:XML_NAME('template')
      XmlToken:XML_TAG_END('>')