"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformVueSfcFile = void 0;
const Parser_1 = require("htmlparser2/lib/Parser");
const prefix = ";(()=>{";
const suffix = "})();";
const prefixLength = prefix.length;
const suffixLength = suffix.length;
const componentShim = "import componentDefinition from '*.vue'; export default componentDefinition;";
function transformVueSfcFile(ts, contents) {
    let result = "";
    let lastIndex = 0;
    let level = 0;
    let isScript = false;
    let scriptKind = ts.ScriptKind.JS;
    let inScriptSetup = false;
    let addedScriptSetupPrefix = false;
    let hadScriptSetup = false;
    let hadScriptNormal = false;
    let scriptSetupStartLoc = -1;
    let scriptSetupEndLoc = -1;
    const parser = new Parser_1.Parser({
        onopentag(name, attrs) {
            if (name === "script" && level === 0) {
                isScript = true;
                inScriptSetup = false;
                for (let attr in attrs) {
                    if (attr.toLowerCase() == "lang") {
                        const attrValue = attrs[attr].toLowerCase();
                        scriptKind = getUpdatedScriptKind(ts, scriptKind, attrValue);
                    }
                    if (attr.toLowerCase() == "setup") {
                        inScriptSetup = true;
                        addedScriptSetupPrefix = false;
                        hadScriptSetup = true;
                    }
                }
                hadScriptNormal = hadScriptNormal || !inScriptSetup;
            }
            level++;
        },
        ontext(data) {
            if (isScript) {
                const lineCount = contents.substring(lastIndex, parser.startIndex).split("\n").length - 1;
                let charsCount = parser.startIndex - lastIndex - lineCount;
                if (inScriptSetup && !addedScriptSetupPrefix) {
                    addedScriptSetupPrefix = true;
                    scriptSetupStartLoc = result.length;
                    result += prefix;
                    charsCount -= prefixLength;
                }
                result += " ".repeat(charsCount) + "\n".repeat(lineCount) + data;
                lastIndex = parser.endIndex + 1; // TODO handle null assertion
            }
        },
        onclosetag(name) {
            if (inScriptSetup) {
                scriptSetupEndLoc = result.length;
                result += suffix;
                inScriptSetup = false;
                lastIndex += suffixLength;
            }
            isScript = false;
            level--;
        }
    }, {
        recognizeSelfClosing: true
    });
    parser.write(contents);
    parser.end();
    // Support empty <script> tag
    if (result.trim() === "") {
        result = componentShim;
        scriptKind = ts.ScriptKind.TS;
    }
    // Support <script setup> syntax
    else if (hadScriptSetup && !hadScriptNormal) {
        result = `${result}; ${componentShim}`;
        // Remove wrapper for imports to work properly
        if (scriptSetupStartLoc >= 0) {
            result = result.substring(0, scriptSetupStartLoc) + " ".repeat(prefixLength) + result.substring(scriptSetupStartLoc + prefixLength);
        }
        if (scriptSetupEndLoc >= 0) {
            result = result.substring(0, scriptSetupEndLoc) + " ".repeat(suffixLength) + result.substring(scriptSetupEndLoc + suffixLength);
        }
    }
    else if (hadScriptSetup && hadScriptNormal) {
        // Add imports at the end of the file
        result += "\n;";
        const r = /import[^'"]*['"]([^'"]*)['"]/g;
        const fragmentToMatch = result.substring(scriptSetupStartLoc, scriptSetupEndLoc);
        let match;
        while ((match = r.exec(fragmentToMatch)) !== null) {
            result += `import "${match[1]}";\n`;
        }
    }
    return {
        result,
        scriptKind
    };
}
exports.transformVueSfcFile = transformVueSfcFile;
function getUpdatedScriptKind(ts, scriptKind, value) {
    switch (value) {
        case "jsx":
            if (scriptKind == ts.ScriptKind.JS) {
                scriptKind = ts.ScriptKind.JSX;
            }
            else {
                scriptKind = ts.ScriptKind.TSX;
            }
            break;
        case "ts":
            if (scriptKind == ts.ScriptKind.JS) {
                scriptKind = ts.ScriptKind.TS;
            }
            else if (scriptKind == ts.ScriptKind.JSX) {
                scriptKind = ts.ScriptKind.TSX;
            }
            break;
        case "tsx":
            scriptKind = ts.ScriptKind.TSX;
            break;
    }
    return scriptKind;
}
